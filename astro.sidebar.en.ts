// This file is auto-generated by the x-generate-docs.js script for language "en".
// Do not edit this file directly. Your changes will be overwritten.

const sidebar = [
  {
    "label": "Experience Quality Code",
    "link": "/"
  },
  {
    "label": "üî∑Unit 0üî∑ Introduction to Quality Code",
    "items": [
      {
        "label": "üí° Experience Quality Code ‚ú®",
        "link": "unit-0/section-0/0-about-unit"
      },
      {
        "label": "Pipeline Philosophy",
        "items": [
          {
            "label": "Core Concept: The Data Transformation Pipeline",
            "link": "unit-0/section-1/0-pipeline"
          },
          {
            "label": "Other Fundamental Programming Concepts",
            "link": "unit-0/section-1/1-other-concepts"
          },
          {
            "label": "The Unifying Potential of the Functional Pipeline",
            "link": "unit-0/section-1/2-unifying-power"
          }
        ]
      }
    ],
    "collapsed": false
  },
  {
    "label": "üî∑Unit 1üî∑ Building with Function",
    "items": [
      {
        "label": "üîç Overview - Unit 1",
        "link": "unit-1/section-0/0-about-unit"
      },
      {
        "label": "Control Flow",
        "items": [
          {
            "label": "Understanding Control Flow: The Structured Programming Baseline",
            "link": "unit-1/section-1/0-control-flow"
          },
          {
            "label": "1.  Sequence",
            "link": "unit-1/section-1/1-sequence"
          },
          {
            "label": "2. Selection",
            "link": "unit-1/section-1/2-selection"
          },
          {
            "label": "3. Iteration",
            "link": "unit-1/section-1/3-iteration"
          },
          {
            "label": "Recursion: The Foundation of Functional Iteration",
            "link": "unit-1/section-1/4-recursion"
          }
        ]
      },
      {
        "label": "Expressions",
        "items": [
          {
            "label": "Pipelines, Expressions, and Functions as Values",
            "link": "unit-1/section-2/0-expression"
          },
          {
            "label": "First-Class Functions",
            "link": "unit-1/section-2/1-first-class-function"
          },
          {
            "label": "Higher-Order Functions (HOF)",
            "link": "unit-1/section-2/2-hof"
          }
        ]
      },
      {
        "label": "Types and Lambda",
        "items": [
          {
            "label": "Types: Ensuring Smooth Pipelines",
            "link": "unit-1/section-3/0-types"
          },
          {
            "label": "First-Class Functions and Lambda Expressions",
            "link": "unit-1/section-3/1-lambda"
          }
        ]
      },
      {
        "label": "Function Composition",
        "items": [
          {
            "label": "Binary Operations and the Pipeline Operator",
            "link": "unit-1/section-4/0-binary-operation"
          },
          {
            "label": "Operators as Functions and Pipeline Flow",
            "link": "unit-1/section-4/1-operator-function"
          },
          {
            "label": "Currying and Partial Application with HOF",
            "link": "unit-1/section-4/2-curry-partial"
          },
          {
            "label": "HOFs in Action: Type Signatures, flip, and Pipelines",
            "link": "unit-1/section-4/3-flip-pipe"
          }
        ]
      },
      {
        "label": "Terms and Concepts",
        "items": [
          {
            "label": "Understanding Functional Programming Terminology",
            "link": "unit-1/section-5/0-terminology"
          }
        ]
      }
    ],
    "collapsed": true
  },
  {
    "label": "üî∑Unit 2üî∑ Algebraic Structures",
    "items": [
      {
        "label": "üîç Overview - Unit 2",
        "link": "unit-2/section-0/0-about-unit"
      },
      {
        "label": "Basic Structures",
        "items": [
          {
            "label": "Algebraic Structures and Pipeline Flow",
            "link": "unit-2/section-1/0-algebraic-structures"
          }
        ]
      },
      {
        "label": "Monoids",
        "items": [
          {
            "label": "Associativity: Building Robust Structures",
            "link": "unit-2/section-2/0-associativity"
          },
          {
            "label": "Semigroups: Our First Algebraic Structure",
            "link": "unit-2/section-2/1-semigroup"
          },
          {
            "label": "Identity Elements",
            "link": "unit-2/section-2/2-identity-element"
          },
          {
            "label": "Monoids: Semigroups with Identity",
            "link": "unit-2/section-2/3-monoid"
          }
        ]
      },
      {
        "label": "Composition Laws",
        "items": [
          {
            "label": "Function Composition: A Natural Monoid",
            "link": "unit-2/section-3/0-composition"
          }
        ]
      },
      {
        "label": "Functors",
        "items": [
          {
            "label": "Set Theory and Types: A Deeper Look",
            "link": "unit-2/section-4/0-set-theory"
          },
          {
            "label": "Container Types: Sets in Programming",
            "link": "unit-2/section-4/1-container"
          },
          {
            "label": "Functor: Mapping between Functions",
            "link": "unit-2/section-4/2-functor"
          }
        ]
      },
      {
        "label": "Monads",
        "items": [
          {
            "label": "Another Bridge Between Worlds",
            "link": "unit-2/section-5/0-another-bridge"
          },
          {
            "label": "The Kleisli Arrow",
            "link": "unit-2/section-5/1-kleisli"
          },
          {
            "label": "Monad: Another Bridge",
            "link": "unit-2/section-5/2-monad"
          }
        ]
      },
      {
        "label": "Category Theory",
        "items": [
          {
            "label": "Bringing It All Together: Functor & Monad",
            "link": "unit-2/section-6/0-functor-monad"
          },
          {
            "label": "Beyond Simple Mapping: Preserving the Structure of Composition",
            "link": "unit-2/section-6/1-category-functor-monad"
          },
          {
            "label": "Understanding Functors: Preserving the Monoid of Function Composition",
            "link": "unit-2/section-6/2-theory-functor"
          },
          {
            "label": "The Monad Laws: Verifying the Kleisli Composition Monoid",
            "link": "unit-2/section-6/3-theory-monad"
          }
        ]
      }
    ],
    "collapsed": true
  },
  {
    "label": "üî∑Unit 3üî∑ Common Functors and Monads",
    "items": [
      {
        "label": "üîç Overview - Unit 3",
        "link": "unit-3/section-0/0-about-unit"
      },
      {
        "label": "Identity Monad",
        "items": [
          {
            "label": "Section 1: List Functor and Monad",
            "link": "unit-3/section-1/0-id"
          }
        ]
      },
      {
        "label": "List Monad",
        "items": [
          {
            "label": "Section 1: List Functor and Monad",
            "link": "unit-3/section-2/0-list"
          },
          {
            "label": "List Functor",
            "link": "unit-3/section-2/1-list-functor"
          },
          {
            "label": "List Monad",
            "link": "unit-3/section-2/2-list-monad"
          }
        ]
      },
      {
        "label": "Option Monad",
        "items": [
          {
            "label": "Section 2: Option (Maybe) Functor and Monad",
            "link": "unit-3/section-3/0-option"
          },
          {
            "label": "Option Functor",
            "link": "unit-3/section-3/1-option-functor"
          },
          {
            "label": "Option Monad",
            "link": "unit-3/section-3/2-option-monad"
          }
        ]
      },
      {
        "label": "Result Monad",
        "items": [
          {
            "label": "Section 3: Result (Either) Functor and Monad",
            "link": "unit-3/section-4/0-result"
          },
          {
            "label": "Result (Either) Functor",
            "link": "unit-3/section-4/1-result-functor"
          },
          {
            "label": "Result (Either) Monad",
            "link": "unit-3/section-4/2-result-monad"
          }
        ]
      },
      {
        "label": "IO Monad",
        "items": [
          {
            "label": "Section 4: IO Functor and Monad",
            "link": "unit-3/section-5/0-io"
          },
          {
            "label": "IO Functor",
            "link": "unit-3/section-5/2-io-functor"
          },
          {
            "label": "IO Monad",
            "link": "unit-3/section-5/3-io-monad"
          }
        ]
      }
    ],
    "collapsed": true
  },
  {
    "label": "üî∑Unit 4üî∑ Timeline FRP",
    "items": [
      {
        "label": "üîç Overview - Unit 4",
        "link": "unit-4/section-0/0-about-unit"
      },
      {
        "label": "Core Concepts",
        "items": [
          {
            "label": "Chapter 0: Immutable World",
            "link": "unit-4/section-1/0-immutable-world"
          },
          {
            "label": "Chapter 1: FRP is like Spreadsheet",
            "link": "unit-4/section-1/1-frp-spreadsheet"
          },
          {
            "label": "Chapter 2: Understanding Timeline<'a> and FRP Implementation",
            "link": "unit-4/section-1/2-timeline"
          },
          {
            "label": "Chapter 3: Transforming Timelines and Introducing the Dependency Graph",
            "link": "unit-4/section-1/3-map"
          },
          {
            "label": "Chapter 4: Handling I/O: Extending the Block Universe Model",
            "link": "unit-4/section-1/4-timeline-eco"
          },
          {
            "label": "Chapter 5: Robustness Through Algebraic Structure",
            "link": "unit-4/section-1/5-functor-monad"
          },
          {
            "label": "Chapter 6: Dynamic Dependency Management and Automatic Resource Cleanup",
            "link": "unit-4/section-1/6-dynamic-dependency"
          },
          {
            "label": "Chapter 7: Full Automatic Resource Management via bind with AI Assistance",
            "link": "unit-4/section-1/7-full-managment-ai"
          }
        ]
      }
    ],
    "collapsed": true
  },
  {
    "label": "üî∑Unit 5üî∑ Combining Timelines",
    "items": [
      {
        "label": "üîç Overview - Unit 5",
        "link": "unit-5/section-0/0-about-unit"
      },
      {
        "label": "Advanced Features",
        "items": [
          {
            "label": "Chapter 0: Handling Absence: A Foundational Choice (null vs. Option)",
            "link": "unit-5/section-1/0-null"
          },
          {
            "label": "Chapter 1: Asynchronous Event Chaining with bind",
            "link": "unit-5/section-1/1-bind-chain"
          },
          {
            "label": "Chapter 10: Case Study - Aggregating Asynchronous HTTP Request Outcomes",
            "link": "unit-5/section-1/10-http-case-study"
          },
          {
            "label": "Chapter 2: Towards Monoidal Timelines",
            "link": "unit-5/section-1/2-timeline-monoid"
          },
          {
            "label": "Chapter 3: Naive Monoidal Implementations for Booleans",
            "link": "unit-5/section-1/3-naive-boolean-monois"
          },
          {
            "label": "Chapter 4: Need for General Combinators and Efficiency",
            "link": "unit-5/section-1/4-motivaion-general"
          },
          {
            "label": "Chapter 5: General Point-wise Combination: TL.zipWith",
            "link": "unit-5/section-1/5-zipwith"
          },
          {
            "label": "Chapter 6: Filtering Timelines ‚Äì TL.distinctUntilChanged",
            "link": "unit-5/section-1/6-distinct"
          },
          {
            "label": "Chapter 7: Boolean Combinators with TL.zipWith",
            "link": "unit-5/section-1/7-refined-boolean-monoids"
          },
          {
            "label": "Chapter 8: Aggregating Lists of Booleans",
            "link": "unit-5/section-1/8-list-aggregation"
          },
          {
            "label": "Chapter 9: Practical Aggregation of Non-Boolean Timelines ‚Äì The \"Map to Boolean\" Pattern",
            "link": "unit-5/section-1/9-non-bool-aggregation"
          }
        ]
      }
    ],
    "collapsed": true
  }
];

export default sidebar;
