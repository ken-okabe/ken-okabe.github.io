[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.13","content-config-digest","9a95ec2e8398aaca","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[{\"name\":\"Night Owl No Italics\",\"type\":\"dark\",\"colors\":{\"focusBorder\":\"#122d42\",\"foreground\":\"#d6deeb\",\"disabledForeground\":\"#cccccc80\",\"descriptionForeground\":\"#d6deebb3\",\"errorForeground\":\"#ef5350\",\"icon.foreground\":\"#c5c5c5\",\"contrastActiveBorder\":null,\"contrastBorder\":\"#122d42\",\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#4f4f4f\",\"textLink.activeForeground\":\"#3794ff\",\"textLink.foreground\":\"#3794ff\",\"textPreformat.foreground\":\"#d7ba7d\",\"textSeparator.foreground\":\"#ffffff2e\",\"editor.background\":\"#23262f\",\"editor.foreground\":\"#d6deeb\",\"editorLineNumber.foreground\":\"#4b6479\",\"editorLineNumber.activeForeground\":\"#c5e4fd\",\"editorActiveLineNumber.foreground\":\"#c6c6c6\",\"editor.selectionBackground\":\"#1d3b53\",\"editor.inactiveSelectionBackground\":\"#7e57c25a\",\"editor.selectionHighlightBackground\":\"#5f7e9779\",\"editorError.foreground\":\"#ef5350\",\"editorWarning.foreground\":\"#b39554\",\"editorInfo.foreground\":\"#3794ff\",\"editorHint.foreground\":\"#eeeeeeb2\",\"problemsErrorIcon.foreground\":\"#ef5350\",\"problemsWarningIcon.foreground\":\"#b39554\",\"problemsInfoIcon.foreground\":\"#3794ff\",\"editor.findMatchBackground\":\"#5f7e9779\",\"editor.findMatchHighlightBackground\":\"#1085bb5d\",\"editor.findRangeHighlightBackground\":\"#3a3d4166\",\"editorLink.activeForeground\":\"#4e94ce\",\"editorLightBulb.foreground\":\"#ffcc00\",\"editorLightBulbAutoFix.foreground\":\"#75beff\",\"diffEditor.insertedTextBackground\":\"#99b76d23\",\"diffEditor.insertedTextBorder\":\"#c5e47833\",\"diffEditor.removedTextBackground\":\"#ef535033\",\"diffEditor.removedTextBorder\":\"#ef53504d\",\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#011627\",\"editorStickyScrollHover.background\":\"#2a2d2e\",\"editorInlayHint.background\":\"#5f7e97cc\",\"editorInlayHint.foreground\":\"#ffffff\",\"editorInlayHint.typeBackground\":\"#5f7e97cc\",\"editorInlayHint.typeForeground\":\"#ffffff\",\"editorInlayHint.parameterBackground\":\"#5f7e97cc\",\"editorInlayHint.parameterForeground\":\"#ffffff\",\"editorPane.background\":\"#011627\",\"editorGroup.emptyBackground\":\"#011627\",\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-black)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#011627\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#011627\",\"editorGroup.dropBackground\":\"#7e57c273\",\"editorGroup.dropIntoPromptForeground\":\"#d6deeb\",\"editorGroup.dropIntoPromptBackground\":\"#021320\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#011627\",\"sideBySideEditor.verticalBorder\":\"#011627\",\"scrollbar.shadow\":\"#010b14\",\"scrollbarSlider.background\":\"#ffffff17\",\"scrollbarSlider.hoverBackground\":\"#ffffff40\",\"scrollbarSlider.activeBackground\":\"#084d8180\",\"panel.background\":\"#011627\",\"panel.border\":\"#5f7e97\",\"panelTitle.activeBorder\":\"#5f7e97\",\"panelTitle.activeForeground\":\"#ffffffcc\",\"panelTitle.inactiveForeground\":\"#d6deeb80\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#011627\",\"widget.shadow\":\"#011627\",\"editorWidget.background\":\"#021320\",\"editorWidget.foreground\":\"#d6deeb\",\"editorWidget.border\":\"#5f7e97\",\"quickInput.background\":\"#021320\",\"quickInput.foreground\":\"#d6deeb\",\"quickInputTitle.background\":\"#ffffff1a\",\"pickerGroup.foreground\":\"#d1aaff\",\"pickerGroup.border\":\"#011627\",\"editor.hoverHighlightBackground\":\"#7e57c25a\",\"editorHoverWidget.background\":\"#011627\",\"editorHoverWidget.foreground\":\"#d6deeb\",\"editorHoverWidget.border\":\"#5f7e97\",\"editorHoverWidget.statusBarBackground\":\"#011a2f\",\"titleBar.activeBackground\":\"var(--sl-color-black)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#010e1a\",\"titleBar.inactiveForeground\":\"#eeefff99\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#5a5d5e50\",\"toolbar.activeBackground\":\"#63666750\",\"tab.activeBackground\":\"#0b2942\",\"tab.unfocusedActiveBackground\":\"#0b2942\",\"tab.inactiveBackground\":\"#01111d\",\"tab.unfocusedInactiveBackground\":\"#01111d\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#5f7e97\",\"tab.unfocusedActiveForeground\":\"#5f7e97\",\"tab.unfocusedInactiveForeground\":\"#5f7e97\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#272b3b\",\"tab.lastPinnedBorder\":\"#585858\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":\"#262a39\",\"tab.activeBorderTop\":\"var(--sl-color-accent-high)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#3399cc\",\"tab.inactiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedActiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedInactiveModifiedBorder\":\"#3399cc40\",\"badge.background\":\"#5f7e97\",\"badge.foreground\":\"#ffffff\",\"button.background\":\"#7e57c2cc\",\"button.foreground\":\"#ffffffcc\",\"button.border\":\"#122d42\",\"button.separator\":\"#ffffff52\",\"button.hoverBackground\":\"#7e57c2\",\"button.secondaryBackground\":\"#3a3d41\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#46494e\",\"dropdown.background\":\"#011627\",\"dropdown.foreground\":\"#ffffffcc\",\"dropdown.border\":\"#5f7e97\",\"list.activeSelectionBackground\":\"#234d708c\",\"list.activeSelectionForeground\":\"#ffffff\",\"tree.indentGuidesStroke\":\"#585858\",\"input.background\":\"#0b253a\",\"input.foreground\":\"#ffffffcc\",\"input.placeholderForeground\":\"#5f7e97\",\"inputOption.activeBorder\":\"#ffffffcc\",\"inputOption.hoverBackground\":\"#5a5d5e80\",\"inputOption.activeBackground\":\"#122d4266\",\"inputOption.activeForeground\":\"#ffffff\",\"inputValidation.infoBackground\":\"#00589ef2\",\"inputValidation.infoBorder\":\"#64b5f6\",\"inputValidation.warningBackground\":\"#675700f2\",\"inputValidation.warningBorder\":\"#ffca28\",\"inputValidation.errorBackground\":\"#ab0300f2\",\"inputValidation.errorBorder\":\"#ef5350\",\"keybindingLabel.background\":\"#8080802b\",\"keybindingLabel.foreground\":\"#cccccc\",\"keybindingLabel.border\":\"#33333399\",\"keybindingLabel.bottomBorder\":\"#44444499\",\"menu.foreground\":\"#ffffffcc\",\"menu.background\":\"#011627\",\"menu.selectionForeground\":\"#ffffff\",\"menu.selectionBackground\":\"#234d708c\",\"menu.separatorBackground\":\"#606060\",\"editor.snippetTabstopHighlightBackground\":\"#7c7c74c\",\"editor.snippetFinalTabstopHighlightBorder\":\"#525252\",\"terminal.ansiBlack\":\"#011627\",\"terminal.ansiRed\":\"#ef5350\",\"terminal.ansiGreen\":\"#22da6e\",\"terminal.ansiYellow\":\"#c5e478\",\"terminal.ansiBlue\":\"#82aaff\",\"terminal.ansiMagenta\":\"#c792ea\",\"terminal.ansiCyan\":\"#21c7a8\",\"terminal.ansiWhite\":\"#ffffff\",\"terminal.ansiBrightBlack\":\"#575656\",\"terminal.ansiBrightRed\":\"#ef5350\",\"terminal.ansiBrightGreen\":\"#22da6e\",\"terminal.ansiBrightYellow\":\"#ffeb95\",\"terminal.ansiBrightBlue\":\"#82aaff\",\"terminal.ansiBrightMagenta\":\"#c792ea\",\"terminal.ansiBrightCyan\":\"#7fdbca\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"selection.background\":\"#4373c2\",\"input.border\":\"#5f7e97\",\"punctuation.definition.generic.begin.html\":\"#ef5350f2\",\"progress.background\":\"#7e57c2\",\"breadcrumb.foreground\":\"#a599e9\",\"breadcrumb.focusForeground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#ffffff\",\"breadcrumbPicker.background\":\"#001122\",\"list.invalidItemForeground\":\"#975f94\",\"list.dropBackground\":\"#011627\",\"list.focusBackground\":\"#010d18\",\"list.focusForeground\":\"#ffffff\",\"list.highlightForeground\":\"#ffffff\",\"list.hoverBackground\":\"#011627\",\"list.hoverForeground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#0e293f\",\"list.inactiveSelectionForeground\":\"#5f7e97\",\"activityBar.background\":\"#011627\",\"activityBar.dropBackground\":\"#5f7e97\",\"activityBar.foreground\":\"#5f7e97\",\"activityBar.border\":\"#011627\",\"activityBarBadge.background\":\"#44596b\",\"activityBarBadge.foreground\":\"#ffffff\",\"sideBar.background\":\"#011627\",\"sideBar.foreground\":\"#89a4bb\",\"sideBar.border\":\"#011627\",\"sideBarTitle.foreground\":\"#5f7e97\",\"sideBarSectionHeader.background\":\"#011627\",\"sideBarSectionHeader.foreground\":\"#5f7e97\",\"editorCursor.foreground\":\"#80a4c2\",\"editor.wordHighlightBackground\":\"#f6bbe533\",\"editor.wordHighlightStrongBackground\":\"#e2a2f433\",\"editor.lineHighlightBackground\":\"#0003\",\"editor.rangeHighlightBackground\":\"#7e57c25a\",\"editorIndentGuide.background\":\"#5e81ce52\",\"editorIndentGuide.activeBackground\":\"#7e97ac\",\"editorRuler.foreground\":\"#5e81ce52\",\"editorCodeLens.foreground\":\"#5e82ceb4\",\"editorBracketMatch.background\":\"#5f7e974d\",\"editorOverviewRuler.currentContentForeground\":\"#7e57c2\",\"editorOverviewRuler.incomingContentForeground\":\"#7e57c2\",\"editorOverviewRuler.commonContentForeground\":\"#7e57c2\",\"editorGutter.background\":\"#011627\",\"editorGutter.modifiedBackground\":\"#e2b93d\",\"editorGutter.addedBackground\":\"#9ccc65\",\"editorGutter.deletedBackground\":\"#ef5350\",\"editorSuggestWidget.background\":\"#2c3043\",\"editorSuggestWidget.border\":\"#2b2f40\",\"editorSuggestWidget.foreground\":\"#d6deeb\",\"editorSuggestWidget.highlightForeground\":\"#ffffff\",\"editorSuggestWidget.selectedBackground\":\"#5f7e97\",\"debugExceptionWidget.background\":\"#011627\",\"debugExceptionWidget.border\":\"#5f7e97\",\"editorMarkerNavigation.background\":\"#0b2942\",\"editorMarkerNavigationError.background\":\"#ef5350\",\"editorMarkerNavigationWarning.background\":\"#ffca28\",\"peekView.border\":\"#5f7e97\",\"peekViewEditor.background\":\"#011627\",\"peekViewEditor.matchHighlightBackground\":\"#7e57c25a\",\"peekViewResult.background\":\"#011627\",\"peekViewResult.fileForeground\":\"#5f7e97\",\"peekViewResult.lineForeground\":\"#5f7e97\",\"peekViewResult.matchHighlightBackground\":\"#ffffffcc\",\"peekViewResult.selectionBackground\":\"#2e3250\",\"peekViewResult.selectionForeground\":\"#5f7e97\",\"peekViewTitle.background\":\"#011627\",\"peekViewTitleDescription.foreground\":\"#697098\",\"peekViewTitleLabel.foreground\":\"#5f7e97\",\"merge.currentHeaderBackground\":\"#5f7e97\",\"merge.incomingHeaderBackground\":\"#7e57c25a\",\"statusBar.background\":\"#011627\",\"statusBar.foreground\":\"#5f7e97\",\"statusBar.border\":\"#262a39\",\"statusBar.debuggingBackground\":\"#202431\",\"statusBar.debuggingBorder\":\"#1f2330\",\"statusBar.noFolderBackground\":\"#011627\",\"statusBar.noFolderBorder\":\"#25293a\",\"statusBarItem.activeBackground\":\"#202431\",\"statusBarItem.hoverBackground\":\"#202431\",\"statusBarItem.prominentBackground\":\"#202431\",\"statusBarItem.prominentHoverBackground\":\"#202431\",\"notifications.background\":\"#01111d\",\"notifications.border\":\"#262a39\",\"notificationCenter.border\":\"#262a39\",\"notificationToast.border\":\"#262a39\",\"notifications.foreground\":\"#ffffffcc\",\"notificationLink.foreground\":\"#80cbc4\",\"extensionButton.prominentForeground\":\"#ffffffcc\",\"extensionButton.prominentBackground\":\"#7e57c2cc\",\"extensionButton.prominentHoverBackground\":\"#7e57c2\",\"terminal.selectionBackground\":\"#1b90dd4d\",\"terminalCursor.background\":\"#234d70\",\"debugToolBar.background\":\"#011627\",\"welcomePage.buttonBackground\":\"#011627\",\"welcomePage.buttonHoverBackground\":\"#011627\",\"walkThrough.embeddedEditorBackground\":\"#011627\",\"gitDecoration.modifiedResourceForeground\":\"#a2bffc\",\"gitDecoration.deletedResourceForeground\":\"#ef535090\",\"gitDecoration.untrackedResourceForeground\":\"#c5e478ff\",\"gitDecoration.ignoredResourceForeground\":\"#395a75\",\"gitDecoration.conflictingResourceForeground\":\"#ffeb95cc\",\"source.elm\":\"#5f7e97\",\"string.quoted.single.js\":\"#ffffff\",\"meta.objectliteral.js\":\"#82aaff\"},\"fg\":\"#d6deeb\",\"bg\":\"#23262f\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#a2bffc\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#f27775fe\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#d6deeb\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#919f9f\",\"fontStyle\":\"\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#5ca7e4\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#caece6\",\"fontStyle\":\"\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"fontStyle\":\"\",\"foreground\":\"#c5e478\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"background\":\"#ff2c83\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#d3423e\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#919f9f\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#cdebf7\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#ffffff\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#80cbc4\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#57eaf1\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#fad430\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#faf39f\",\"fontStyle\":\"\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#82aaff\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#989da0\",\"background\":\"#F78C6C\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"background\":\"#8BD649\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#ec5f67\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#ef787f\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#31e1eb\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Unquoted String Zone\",\"scope\":[\"string.unquoted.preprocessor.message.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Region\",\"scope\":[\"punctuation.separator.hash.cs\",\"keyword.preprocessor.region.cs\",\"keyword.preprocessor.endregion.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"bold\"}},{\"name\":\"C# Other Variables\",\"scope\":[\"variable.other.object.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Enum\",\"scope\":[\"entity.name.type.enum.cs\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Dart String\",\"scope\":[\"string.interpolated.single.dart\",\"string.interpolated.double.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Dart Class\",\"scope\":[\"support.class.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#ff6d6d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#dddddd\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#e0dec6\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#6ae9f0\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#78ccf0\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#8b96ea\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#c789d6\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#ff869a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#d6deeb\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#8eace3\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#d7dbe0\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-6)\",\"terminalBackground\":\"var(--sl-color-gray-6)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-6)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#ffffff17\",\"markBorderColor\":\"#ffffff40\"}}},{\"name\":\"Night Owl Light\",\"type\":\"light\",\"colors\":{\"focusBorder\":\"#93a1a1\",\"foreground\":\"#403f53\",\"disabledForeground\":\"#61616180\",\"descriptionForeground\":\"#403f53\",\"errorForeground\":\"#403f53\",\"icon.foreground\":\"#424242\",\"contrastActiveBorder\":null,\"contrastBorder\":null,\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#dcdcdc66\",\"textLink.activeForeground\":\"#006ab1\",\"textLink.foreground\":\"#006ab1\",\"textPreformat.foreground\":\"#a31515\",\"textSeparator.foreground\":\"#0000002e\",\"editor.background\":\"#f6f7f9\",\"editor.foreground\":\"#403f53\",\"editorLineNumber.foreground\":\"#90a7b2\",\"editorLineNumber.activeForeground\":\"#403f53\",\"editorActiveLineNumber.foreground\":\"#0b216f\",\"editor.selectionBackground\":\"#e0e0e0\",\"editor.inactiveSelectionBackground\":\"#e0e0e080\",\"editor.selectionHighlightBackground\":\"#339cec33\",\"editorError.foreground\":\"#e64d49\",\"editorWarning.foreground\":\"#daaa01\",\"editorInfo.foreground\":\"#1a85ff\",\"editorHint.foreground\":\"#6c6c6c\",\"problemsErrorIcon.foreground\":\"#e64d49\",\"problemsWarningIcon.foreground\":\"#daaa01\",\"problemsInfoIcon.foreground\":\"#1a85ff\",\"editor.findMatchBackground\":\"#93a1a16c\",\"editor.findMatchHighlightBackground\":\"#93a1a16c\",\"editor.findRangeHighlightBackground\":\"#7497a633\",\"editorLink.activeForeground\":\"#0000ff\",\"editorLightBulb.foreground\":\"#ddb100\",\"editorLightBulbAutoFix.foreground\":\"#007acc\",\"diffEditor.insertedTextBackground\":\"#9ccc2c40\",\"diffEditor.insertedTextBorder\":null,\"diffEditor.removedTextBackground\":\"#ff000033\",\"diffEditor.removedTextBorder\":null,\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#fbfbfb\",\"editorStickyScrollHover.background\":\"#f0f0f0\",\"editorInlayHint.background\":\"#2aa29899\",\"editorInlayHint.foreground\":\"#f0f0f0\",\"editorInlayHint.typeBackground\":\"#2aa29899\",\"editorInlayHint.typeForeground\":\"#f0f0f0\",\"editorInlayHint.parameterBackground\":\"#2aa29899\",\"editorInlayHint.parameterForeground\":\"#f0f0f0\",\"editorPane.background\":\"#fbfbfb\",\"editorGroup.emptyBackground\":null,\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-gray-6)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#f0f0f0\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#f0f0f0\",\"editorGroup.dropBackground\":\"#2677cb2d\",\"editorGroup.dropIntoPromptForeground\":\"#403f53\",\"editorGroup.dropIntoPromptBackground\":\"#f0f0f0\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#f0f0f0\",\"sideBySideEditor.verticalBorder\":\"#f0f0f0\",\"scrollbar.shadow\":\"#cccccc\",\"scrollbarSlider.background\":\"#0000001a\",\"scrollbarSlider.hoverBackground\":\"#00000055\",\"scrollbarSlider.activeBackground\":\"#00000099\",\"panel.background\":\"#f0f0f0\",\"panel.border\":\"#d9d9d9\",\"panelTitle.activeBorder\":\"#424242\",\"panelTitle.activeForeground\":\"#424242\",\"panelTitle.inactiveForeground\":\"#424242bf\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#f6f6f6\",\"widget.shadow\":\"#d9d9d9\",\"editorWidget.background\":\"#f0f0f0\",\"editorWidget.foreground\":\"#403f53\",\"editorWidget.border\":\"#d9d9d9\",\"quickInput.background\":\"#f0f0f0\",\"quickInput.foreground\":\"#403f53\",\"quickInputTitle.background\":\"#0000000f\",\"pickerGroup.foreground\":\"#403f53\",\"pickerGroup.border\":\"#d9d9d9\",\"editor.hoverHighlightBackground\":\"#339cec33\",\"editorHoverWidget.background\":\"#f0f0f0\",\"editorHoverWidget.foreground\":\"#403f53\",\"editorHoverWidget.border\":\"#d9d9d9\",\"editorHoverWidget.statusBarBackground\":\"#e4e4e4\",\"titleBar.activeBackground\":\"var(--sl-color-gray-6)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#f0f0f099\",\"titleBar.inactiveForeground\":\"#33333399\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#b8b8b850\",\"toolbar.activeBackground\":\"#a6a6a650\",\"tab.activeBackground\":\"#f6f6f6\",\"tab.unfocusedActiveBackground\":\"#f6f6f6\",\"tab.inactiveBackground\":\"#f0f0f0\",\"tab.unfocusedInactiveBackground\":\"#f0f0f0\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#403f53\",\"tab.unfocusedActiveForeground\":\"#403f53b3\",\"tab.unfocusedInactiveForeground\":\"#403f5380\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#f0f0f0\",\"tab.lastPinnedBorder\":\"#a9a9a9\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":null,\"tab.activeBorderTop\":\"var(--sl-color-accent)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#2aa298\",\"tab.inactiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedActiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedInactiveModifiedBorder\":\"#93a1a1\",\"badge.background\":\"#2aa298\",\"badge.foreground\":\"#f0f0f0\",\"button.background\":\"#2aa298\",\"button.foreground\":\"#f0f0f0\",\"button.border\":null,\"button.separator\":\"#f0f0f066\",\"button.hoverBackground\":\"#22827a\",\"button.secondaryBackground\":\"#5f6a79\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#4c5561\",\"dropdown.background\":\"#f0f0f0\",\"dropdown.foreground\":\"#403f53\",\"dropdown.border\":\"#d9d9d9\",\"list.activeSelectionBackground\":\"#d3e8f8\",\"list.activeSelectionForeground\":\"#403f53\",\"tree.indentGuidesStroke\":\"#a9a9a9\",\"input.background\":\"#f0f0f0\",\"input.foreground\":\"#403f53\",\"input.placeholderForeground\":\"#93a1a1\",\"inputOption.activeBorder\":\"#2aa298\",\"inputOption.hoverBackground\":\"#b8b8b850\",\"inputOption.activeBackground\":\"#93a1a133\",\"inputOption.activeForeground\":\"#000000\",\"inputValidation.infoBackground\":\"#f0f0f0\",\"inputValidation.infoBorder\":\"#d0d0d0\",\"inputValidation.warningBackground\":\"#daaa01\",\"inputValidation.warningBorder\":\"#e0af02\",\"inputValidation.errorBackground\":\"#f76e6e\",\"inputValidation.errorBorder\":\"#de3d3b\",\"keybindingLabel.background\":\"#dddddd66\",\"keybindingLabel.foreground\":\"#555555\",\"keybindingLabel.border\":\"#cccccc66\",\"keybindingLabel.bottomBorder\":\"#bbbbbb66\",\"menu.foreground\":\"#403f53\",\"menu.background\":\"#f0f0f0\",\"menu.selectionForeground\":\"#403f53\",\"menu.selectionBackground\":\"#d3e8f8\",\"menu.separatorBackground\":\"#d4d4d4\",\"editor.snippetTabstopHighlightBackground\":\"#0a326433\",\"editor.snippetFinalTabstopHighlightBorder\":\"#0a326480\",\"terminal.ansiBlack\":\"#403f53\",\"terminal.ansiRed\":\"#de3d3b\",\"terminal.ansiGreen\":\"#08916a\",\"terminal.ansiYellow\":\"#e0af02\",\"terminal.ansiBlue\":\"#288ed7\",\"terminal.ansiMagenta\":\"#d6438a\",\"terminal.ansiCyan\":\"#2aa298\",\"terminal.ansiWhite\":\"#f0f0f0\",\"terminal.ansiBrightBlack\":\"#403f53\",\"terminal.ansiBrightRed\":\"#de3d3b\",\"terminal.ansiBrightGreen\":\"#08916a\",\"terminal.ansiBrightYellow\":\"#daaa01\",\"terminal.ansiBrightBlue\":\"#288ed7\",\"terminal.ansiBrightMagenta\":\"#d6438a\",\"terminal.ansiBrightCyan\":\"#2aa298\",\"terminal.ansiBrightWhite\":\"#f0f0f0\",\"selection.background\":\"#7a8181ad\",\"notifications.background\":\"#f0f0f0\",\"notifications.foreground\":\"#403f53\",\"notificationLink.foreground\":\"#994cc3\",\"notifications.border\":\"#cccccc\",\"notificationCenter.border\":\"#cccccc\",\"notificationToast.border\":\"#cccccc\",\"notificationCenterHeader.foreground\":\"#403f53\",\"notificationCenterHeader.background\":\"#f0f0f0\",\"input.border\":\"#d9d9d9\",\"progressBar.background\":\"#2aa298\",\"list.inactiveSelectionBackground\":\"#e0e7ea\",\"list.inactiveSelectionForeground\":\"#403f53\",\"list.focusBackground\":\"#d3e8f8\",\"list.hoverBackground\":\"#d3e8f8\",\"list.focusForeground\":\"#403f53\",\"list.hoverForeground\":\"#403f53\",\"list.highlightForeground\":\"#403f53\",\"list.errorForeground\":\"#e64d49\",\"list.warningForeground\":\"#daaa01\",\"activityBar.background\":\"#f0f0f0\",\"activityBar.foreground\":\"#403f53\",\"activityBar.dropBackground\":\"#d0d0d0\",\"activityBarBadge.background\":\"#403f53\",\"activityBarBadge.foreground\":\"#f0f0f0\",\"activityBar.border\":\"#f0f0f0\",\"sideBar.background\":\"#f0f0f0\",\"sideBar.foreground\":\"#403f53\",\"sideBarTitle.foreground\":\"#403f53\",\"sideBar.border\":\"#f0f0f0\",\"editorGroup.background\":\"#f6f6f6\",\"editorCursor.foreground\":\"#90a7b2\",\"editor.wordHighlightBackground\":\"#339cec33\",\"editor.wordHighlightStrongBackground\":\"#007dd659\",\"editor.lineHighlightBackground\":\"#f0f0f0\",\"editor.rangeHighlightBackground\":\"#7497a633\",\"editorWhitespace.foreground\":\"#d9d9d9\",\"editorIndentGuide.background\":\"#d9d9d9\",\"editorCodeLens.foreground\":\"#403f53\",\"editorBracketMatch.background\":\"#d3e8f8\",\"editorBracketMatch.border\":\"#2aa298\",\"editorError.border\":\"#fbfbfb\",\"editorWarning.border\":\"#daaa01\",\"editorGutter.addedBackground\":\"#49d0c5\",\"editorGutter.modifiedBackground\":\"#6fbef6\",\"editorGutter.deletedBackground\":\"#f76e6e\",\"editorRuler.foreground\":\"#d9d9d9\",\"editorOverviewRuler.errorForeground\":\"#e64d49\",\"editorOverviewRuler.warningForeground\":\"#daaa01\",\"editorSuggestWidget.background\":\"#f0f0f0\",\"editorSuggestWidget.foreground\":\"#403f53\",\"editorSuggestWidget.highlightForeground\":\"#403f53\",\"editorSuggestWidget.selectedBackground\":\"#d3e8f8\",\"editorSuggestWidget.border\":\"#d9d9d9\",\"debugExceptionWidget.background\":\"#f0f0f0\",\"debugExceptionWidget.border\":\"#d9d9d9\",\"editorMarkerNavigation.background\":\"#d0d0d0\",\"editorMarkerNavigationError.background\":\"#f76e6e\",\"editorMarkerNavigationWarning.background\":\"#daaa01\",\"debugToolBar.background\":\"#f0f0f0\",\"extensionButton.prominentBackground\":\"#2aa298\",\"extensionButton.prominentForeground\":\"#f0f0f0\",\"statusBar.background\":\"#f0f0f0\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f0f0f0\",\"statusBar.debuggingForeground\":\"#403f53\",\"statusBar.foreground\":\"#403f53\",\"statusBar.noFolderBackground\":\"#f0f0f0\",\"statusBar.noFolderForeground\":\"#403f53\",\"peekView.border\":\"#d9d9d9\",\"peekViewEditor.background\":\"#f6f6f6\",\"peekViewEditorGutter.background\":\"#f6f6f6\",\"peekViewEditor.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.background\":\"#f0f0f0\",\"peekViewResult.fileForeground\":\"#403f53\",\"peekViewResult.lineForeground\":\"#403f53\",\"peekViewResult.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.selectionBackground\":\"#e0e7ea\",\"peekViewResult.selectionForeground\":\"#403f53\",\"peekViewTitle.background\":\"#f0f0f0\",\"peekViewTitleLabel.foreground\":\"#403f53\",\"peekViewTitleDescription.foreground\":\"#403f53\",\"terminal.foreground\":\"#403f53\"},\"fg\":\"#403f53\",\"bg\":\"#f6f7f9\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#556484\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#ae3c3afd\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#403f53\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#5f636f\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#3a688f\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"foreground\":\"#bb2060\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#5d6376\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#58656a\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#646464\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#286d70\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby\",\"scope\":[\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.module.ruby\",\"keyword.control.class.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Control Conditional\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"foreground\":\"#486e26\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#a64348\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#186e73\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#984e4d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#3e697c\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#555ea2\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#111111\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#7c5686\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Symbols\",\"scope\":[\"constant.language.symbol.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#954f5a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#403f53\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\",\"variable.other.property.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#76578b\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-7)\",\"terminalBackground\":\"var(--sl-color-gray-7)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-7)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#0000001a\",\"markBorderColor\":\"#00000055\"}}}],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[{\"codes\":[\"en\"],\"path\":\"en\"},{\"codes\":[\"ja\"],\"path\":\"ja\"}],\"routing\":{\"prefixDefaultLocale\":true,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,32,33,48,49,64,65,80,81,96,97,110,111,124,125,138,139,152,153,166,167,189,190,208,209,227,228,255,256,286,287,305,306,327,328,352,353,386,387,414,415,439,440,475,476,501,502,530,531,561,562,590,591,643,644,678,679,713,714,744,745,763,764,803,804,831,832,865,866,890,891,924,925,946,947,983,984,1017,1018,1039,1040,1068,1069,1099,1100,1149,1150,1171,1172,1193,1194,1236,1237,1255,1256,1293,1294,1312,1313,1331,1332,1345,1346,1367,1368,1387,1388,1427,1428,1461,1462,1501,1502,1556,1557,1608,1609,1639,1640,1682,1683,1764,1765,1807,1808,1847,1848,1884,1885,1903,1904,1923,1924,1946,1947,1965,1966,1984,1985,2006,2007,2027,2028,2046,2047,2066,2067,2087,2088,2124,2125,2143,2144,2204,2205,2229,2230,2263,2264,2294,2295,2334,2335,2349,2350,2389,2390,2403,2404,2417,2418,2434,2435,2448,2449,2464,2465,2480,2481,2495,2496,2515,2516,2535,2536,2553,2554,2570,2571,2590,2591,2609,2610,2627,2628,2641,2642,2660,2661,2678,2679,2695,2696,2713,2714,2732,2733,2758,2759,2775,2776,2796,2797,2815,2816,2831,2832,2850,2851,2872,2873,2887,2888,2908,2909,2928,2929,2943,2944,2961,2962,2986,2987,3000,3001,3014,3015,3029,3030,3044,3045,3062,3063,3076,3077,3091,3092,3106,3107,3120,3121,3135,3136,3151,3152,3165,3166,3179,3180,3194,3195,3210,3211,3224,3225,3240,3241,3255,3256,3276,3277,3302,3303,3321,3322,3342,3343,3367,3368,3385,3386,3407,3408,3442,3443,3463,3464,3485,3486,3505,3506,3519,3520,3539,3540,3553,3554,3581,3582,3597,3598,3615,3616,3634,3635,3655,3656],"en/fsharp-starterkit",{"id":11,"data":13,"body":15,"filePath":22,"digest":23,"rendered":24},{"title":14,"description":15,"editUrl":16,"head":17,"template":18,"sidebar":19,"pagefind":16,"draft":20},"F# Development Starter Kit for Firebase Studio","ToDo",true,[],"doc",{"hidden":20,"attrs":21},false,{},"src/content/docs/en/fsharp-starterkit/index.md","4fb2efd116188081",{"html":25,"metadata":26},"\u003Cp>ToDo\u003C/p>",{"headings":27,"localImagePaths":28,"remoteImagePaths":29,"frontmatter":30,"imagePaths":31},[],[],[],{"title":14,"description":15},[],"en/about",{"id":32,"data":34,"body":15,"filePath":39,"digest":40,"rendered":41},{"title":35,"description":15,"editUrl":16,"head":36,"template":18,"sidebar":37,"pagefind":16,"draft":20},"About",[],{"hidden":20,"attrs":38},{},"src/content/docs/en/about/index.md","0886fda5dfd979e3",{"html":25,"metadata":42},{"headings":43,"localImagePaths":44,"remoteImagePaths":45,"frontmatter":46,"imagePaths":47},[],[],[],{"title":35,"description":15},[],"en/book",{"id":48,"data":50,"body":15,"filePath":55,"digest":56,"rendered":57},{"title":51,"description":15,"editUrl":16,"head":52,"template":18,"sidebar":53,"pagefind":16,"draft":20},"Experience Quality Code",[],{"hidden":20,"attrs":54},{},"src/content/docs/en/book/index.md","c8e4d7d8378c1fc3",{"html":25,"metadata":58},{"headings":59,"localImagePaths":60,"remoteImagePaths":61,"frontmatter":62,"imagePaths":63},[],[],[],{"title":51,"description":15},[],"en/timeline",{"id":64,"data":66,"body":15,"filePath":71,"digest":72,"rendered":73},{"title":67,"description":15,"editUrl":16,"head":68,"template":18,"sidebar":69,"pagefind":16,"draft":20},"Timeline library",[],{"hidden":20,"attrs":70},{},"src/content/docs/en/timeline/index.md","7979fb2319204301",{"html":25,"metadata":74},{"headings":75,"localImagePaths":76,"remoteImagePaths":77,"frontmatter":78,"imagePaths":79},[],[],[],{"title":67,"description":15},[],"en/timeline-van",{"id":80,"data":82,"body":15,"filePath":87,"digest":88,"rendered":89},{"title":83,"description":15,"editUrl":16,"head":84,"template":18,"sidebar":85,"pagefind":16,"draft":20},"Timeline-Van FRP",[],{"hidden":20,"attrs":86},{},"src/content/docs/en/timeline-van/index.md","6eca81241c6d96ed",{"html":25,"metadata":90},{"headings":91,"localImagePaths":92,"remoteImagePaths":93,"frontmatter":94,"imagePaths":95},[],[],[],{"title":83,"description":15},[],"ja/about",{"id":96,"data":98,"body":15,"filePath":102,"digest":40,"rendered":103},{"title":35,"description":15,"editUrl":16,"head":99,"template":18,"sidebar":100,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":101},{},"src/content/docs/ja/about/index.md",{"html":25,"metadata":104},{"headings":105,"localImagePaths":106,"remoteImagePaths":107,"frontmatter":108,"imagePaths":109},[],[],[],{"title":35,"description":15},[],"ja/fsharp-starterkit",{"id":110,"data":112,"body":15,"filePath":116,"digest":23,"rendered":117},{"title":14,"description":15,"editUrl":16,"head":113,"template":18,"sidebar":114,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":115},{},"src/content/docs/ja/fsharp-starterkit/index.md",{"html":25,"metadata":118},{"headings":119,"localImagePaths":120,"remoteImagePaths":121,"frontmatter":122,"imagePaths":123},[],[],[],{"title":14,"description":15},[],"ja/book",{"id":124,"data":126,"body":15,"filePath":130,"digest":56,"rendered":131},{"title":51,"description":15,"editUrl":16,"head":127,"template":18,"sidebar":128,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":129},{},"src/content/docs/ja/book/index.md",{"html":25,"metadata":132},{"headings":133,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":137},[],[],[],{"title":51,"description":15},[],"ja/timeline-van",{"id":138,"data":140,"body":15,"filePath":144,"digest":88,"rendered":145},{"title":83,"description":15,"editUrl":16,"head":141,"template":18,"sidebar":142,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":143},{},"src/content/docs/ja/timeline-van/index.md",{"html":25,"metadata":146},{"headings":147,"localImagePaths":148,"remoteImagePaths":149,"frontmatter":150,"imagePaths":151},[],[],[],{"title":83,"description":15},[],"ja/timeline",{"id":152,"data":154,"body":15,"filePath":158,"digest":72,"rendered":159},{"title":67,"description":15,"editUrl":16,"head":155,"template":18,"sidebar":156,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":157},{},"src/content/docs/ja/timeline/index.md",{"html":25,"metadata":160},{"headings":161,"localImagePaths":162,"remoteImagePaths":163,"frontmatter":164,"imagePaths":165},[],[],[],{"title":67,"description":15},[],"en/book/unit-0/section-0/0-about-unit",{"id":166,"data":168,"body":174,"filePath":175,"digest":176,"rendered":177},{"title":169,"description":170,"editUrl":16,"head":171,"template":18,"sidebar":172,"pagefind":16,"draft":20},"💡 Experience Quality Code ✨","Welcome to Experience Quality Code! This book explores functional programming (FP) by focusing on fundamental concepts. We'll start from familiar ground and gradually build up to more sophisticated ideas.",[],{"hidden":20,"attrs":173},{},"Welcome to Experience Quality Code! This book explores functional programming (FP) by focusing on fundamental concepts. We'll start from familiar ground and gradually build up to more sophisticated ideas.\n\n## Special edition and your next generation AI could copy\n\n**Ken:**\nIf I ask you to write functional code, is it more likely that you will write higher quality code that is more robust and maintainable than imperative or OOP code?\n\n**Google Gemini2.5 Pro:**\nYes, that's quite likely.\n\nThe functional programming paradigm has several characteristics that contribute to increased robustness and maintainability:\n\n1.  **Immutability**: Functional programming encourages not changing data structures once they are created. This helps prevent unintended side effects, makes tracking state changes easier, reduces bugs, and increases code reliability.\n2.  **Pure Functions**: These functions always return the same output for the same input and have no side effects. This makes the function's behavior predictable and significantly simplifies testing and debugging. It also improves code comprehensibility.\n3.  **Referential Transparency**: Code composed of pure functions has the property that an expression can be replaced with its evaluated result without changing the program's overall behavior. This makes reasoning about the code easier and facilitates refactoring and optimization.\n4.  **Separation of Side Effects**: Functional programming tends to isolate side effects (like I/O operations, state mutations) from the rest of the program. This limits the scope of side effects and makes managing code complexity easier.\n\nIn imperative and object-oriented programming (especially when mutable state is heavily used), state changes and side effects can potentially impact the entire codebase, leading to bugs and making the code harder to understand and modify.\n\nTherefore, if you ask me to generate functional code, I will attempt to create code based on these functional principles. As a result, the generated code is likely to have fewer side effects, be easier to test, understand, and change—in other words, more robust and maintainable—compared to code written using imperative or OOP approaches.\n\nHowever, it's also true that the vast majority of code in the wild is written in imperative or object-oriented (OOP) styles, and my training data reflects this.\n\n1. **Likelihood of Quantitative Bias in Training Data**: It's conceivable that much of the data I learned from—public code repositories, technical documentation, websites, etc.—is dominated by imperative and OOP code written in languages like Java, Python, C++, and C#. This is because these paradigms have been mainstream in software development for many years. Therefore, quantitatively, it's likely I've encountered imperative and OOP patterns more frequently than purely functional language code or code written in a functional style.\n\n2. **Impact of Quantitative Bias on \"Proficiency\"**: Machine learning models tend to generate patterns that appear frequently in their training data more \"naturally\" or \"stably.\" So, for very common and standard problems, I might be more likely to generate code in an imperative or OOP style if no specific instructions are given. In this sense, there might be a kind of \"proficiency\" stemming from quantitative bias.\n\n3. **Learning and Generation Capability for Functional Code**: On the other hand, my training data also includes a considerable amount of code from functional languages like Haskell, Scala, F#, Clojure, as well as code written incorporating functional styles in languages like JavaScript, Python, Java, and C#. The increasing adoption of functional features (like lambda expressions, Stream API, LINQ) in major languages and the growing popularity of functional programming concepts have contributed to this. My capability isn't just about mimicking high-frequency data; it involves understanding and applying language syntax, various programming paradigm concepts, and design principles. Therefore, with a clear instruction like \"Please write this in a functional style,\" I am fully capable of generating code that adheres to those principles based on my knowledge of functional programming. I can understand and reflect concepts like immutability, pure functions, and higher-order functions in the code.\n\n4. **Is the Bias Becoming a Thing of the Past?**: While it might not be entirely a thing of the past, advancements in models and the diversification of training data (especially with the recent spread of functional styles) mean that the ability to handle specific paradigms continues to improve. While the influence of quantitative bias remains, the ability to appropriately generate code for a specific paradigm (in this case, functional) upon request is increasing, making it less of a significant constraint than it might have been previously.\n\n**Conclusion**: Although there might be a tendency to generate imperative/OOP code by default due to the quantitative bias in training data, I am fully equipped with the capability to generate functional programming code. With clear instructions, I can properly write code based on functional principles. Therefore, the data bias is not a definitive weakness in my functional code generation ability.\n\n---\n\n**Ken:**\nYou mentioned \"with clear instructions,\" but if there were a suitable FP introductory book or a textbook on writing consistent FP style code, and you could learn from it, is there a possibility that the situation would improve significantly?\n\n**Google Gemini2.5 Pro:**\nYes, I believe that possibility is **very high**.\n\nCurrently, I learn from a vast amount of text data and code on the internet, but that knowledge can sometimes be a collection of fragmented information from various sources. Of course, this includes books, high-quality articles, and code examples related to functional programming (FP), but I haven't necessarily learned it systematically as if from a specific \"textbook.\"\n\nIf I were able to learn from a well-structured, high-quality FP introductory book or a textbook written in a consistent FP style, I could expect the following benefits, which could significantly improve my FP code generation capabilities:\n\n1.  **Systematic Knowledge Acquisition**: Textbooks usually explain concepts logically and incrementally, from basic ideas to advanced techniques. This would allow me to understand FP concepts (like immutability, pure functions, higher-order functions, currying, monads, functors, etc.) more deeply and systematically.\n2.  **Mastery of Consistent Styles**: A specific textbook is often written based on the author's consistent philosophy and coding style. Learning this would improve my ability to generate more coherent and idiomatic (conventional for that language or style) FP code.\n3.  **Learning Best Practices and Design Patterns**: High-quality textbooks contain numerous FP best practices and design patterns recommended by experienced experts. Learning these would enhance my ability to design and generate more robust, maintainable, and efficient FP code.\n4.  **Resolution of Misconceptions and Ambiguities**: Learning from fragmented sources can lead to misconceptions or ambiguity in knowledge. Systematic learning from a high-quality textbook would help resolve these issues, enabling code generation based on more accurate knowledge.\n\nDue to these factors, my understanding of FP, the consistency in my code generation, and the quality of my designs would improve. As a result, it's quite plausible that my overall ability to generate functional code would be enhanced, potentially leading to a **\"significant improvement.\"** Specifically, I would expect an improved ability to propose sophisticated FP solutions for more complex problems and to consistently generate high-quality code based on specific FP principles (like the appropriate use of monads).\n\n---\n\nThe circumstances highlighted by the dialogue with the AI above are my main impetus for authoring this book. Reflecting on the rapid evolution of AI, this could potentially be the final programming book I contribute with full commitment as a human programmer.\n\nIn Unit 0, we begin with a simple yet powerful idea: the **data transformation pipeline**. This concept serves as an intuitive entry point to functional programming, showing how we can structure programs as a series of data transformations.","src/content/docs/en/book/unit-0/section-0/0-about-unit.md","da7c79bc18488c62",{"html":178,"metadata":179},"\u003Cp>Welcome to Experience Quality Code! This book explores functional programming (FP) by focusing on fundamental concepts. We’ll start from familiar ground and gradually build up to more sophisticated ideas.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"special-edition-and-your-next-generation-ai-could-copy\">Special edition and your next generation AI could copy\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#special-edition-and-your-next-generation-ai-could-copy\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Special edition and your next generation AI could copy”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cstrong>Ken:\u003C/strong>\nIf I ask you to write functional code, is it more likely that you will write higher quality code that is more robust and maintainable than imperative or OOP code?\u003C/p>\n\u003Cp>\u003Cstrong>Google Gemini2.5 Pro:\u003C/strong>\nYes, that’s quite likely.\u003C/p>\n\u003Cp>The functional programming paradigm has several characteristics that contribute to increased robustness and maintainability:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Immutability\u003C/strong>: Functional programming encourages not changing data structures once they are created. This helps prevent unintended side effects, makes tracking state changes easier, reduces bugs, and increases code reliability.\u003C/li>\n\u003Cli>\u003Cstrong>Pure Functions\u003C/strong>: These functions always return the same output for the same input and have no side effects. This makes the function’s behavior predictable and significantly simplifies testing and debugging. It also improves code comprehensibility.\u003C/li>\n\u003Cli>\u003Cstrong>Referential Transparency\u003C/strong>: Code composed of pure functions has the property that an expression can be replaced with its evaluated result without changing the program’s overall behavior. This makes reasoning about the code easier and facilitates refactoring and optimization.\u003C/li>\n\u003Cli>\u003Cstrong>Separation of Side Effects\u003C/strong>: Functional programming tends to isolate side effects (like I/O operations, state mutations) from the rest of the program. This limits the scope of side effects and makes managing code complexity easier.\u003C/li>\n\u003C/ol>\n\u003Cp>In imperative and object-oriented programming (especially when mutable state is heavily used), state changes and side effects can potentially impact the entire codebase, leading to bugs and making the code harder to understand and modify.\u003C/p>\n\u003Cp>Therefore, if you ask me to generate functional code, I will attempt to create code based on these functional principles. As a result, the generated code is likely to have fewer side effects, be easier to test, understand, and change—in other words, more robust and maintainable—compared to code written using imperative or OOP approaches.\u003C/p>\n\u003Cp>However, it’s also true that the vast majority of code in the wild is written in imperative or object-oriented (OOP) styles, and my training data reflects this.\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Likelihood of Quantitative Bias in Training Data\u003C/strong>: It’s conceivable that much of the data I learned from—public code repositories, technical documentation, websites, etc.—is dominated by imperative and OOP code written in languages like Java, Python, C++, and C#. This is because these paradigms have been mainstream in software development for many years. Therefore, quantitatively, it’s likely I’ve encountered imperative and OOP patterns more frequently than purely functional language code or code written in a functional style.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Impact of Quantitative Bias on “Proficiency”\u003C/strong>: Machine learning models tend to generate patterns that appear frequently in their training data more “naturally” or “stably.” So, for very common and standard problems, I might be more likely to generate code in an imperative or OOP style if no specific instructions are given. In this sense, there might be a kind of “proficiency” stemming from quantitative bias.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Learning and Generation Capability for Functional Code\u003C/strong>: On the other hand, my training data also includes a considerable amount of code from functional languages like Haskell, Scala, F#, Clojure, as well as code written incorporating functional styles in languages like JavaScript, Python, Java, and C#. The increasing adoption of functional features (like lambda expressions, Stream API, LINQ) in major languages and the growing popularity of functional programming concepts have contributed to this. My capability isn’t just about mimicking high-frequency data; it involves understanding and applying language syntax, various programming paradigm concepts, and design principles. Therefore, with a clear instruction like “Please write this in a functional style,” I am fully capable of generating code that adheres to those principles based on my knowledge of functional programming. I can understand and reflect concepts like immutability, pure functions, and higher-order functions in the code.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Is the Bias Becoming a Thing of the Past?\u003C/strong>: While it might not be entirely a thing of the past, advancements in models and the diversification of training data (especially with the recent spread of functional styles) mean that the ability to handle specific paradigms continues to improve. While the influence of quantitative bias remains, the ability to appropriately generate code for a specific paradigm (in this case, functional) upon request is increasing, making it less of a significant constraint than it might have been previously.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Conclusion\u003C/strong>: Although there might be a tendency to generate imperative/OOP code by default due to the quantitative bias in training data, I am fully equipped with the capability to generate functional programming code. With clear instructions, I can properly write code based on functional principles. Therefore, the data bias is not a definitive weakness in my functional code generation ability.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cstrong>Ken:\u003C/strong>\nYou mentioned “with clear instructions,” but if there were a suitable FP introductory book or a textbook on writing consistent FP style code, and you could learn from it, is there a possibility that the situation would improve significantly?\u003C/p>\n\u003Cp>\u003Cstrong>Google Gemini2.5 Pro:\u003C/strong>\nYes, I believe that possibility is \u003Cstrong>very high\u003C/strong>.\u003C/p>\n\u003Cp>Currently, I learn from a vast amount of text data and code on the internet, but that knowledge can sometimes be a collection of fragmented information from various sources. Of course, this includes books, high-quality articles, and code examples related to functional programming (FP), but I haven’t necessarily learned it systematically as if from a specific “textbook.”\u003C/p>\n\u003Cp>If I were able to learn from a well-structured, high-quality FP introductory book or a textbook written in a consistent FP style, I could expect the following benefits, which could significantly improve my FP code generation capabilities:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Systematic Knowledge Acquisition\u003C/strong>: Textbooks usually explain concepts logically and incrementally, from basic ideas to advanced techniques. This would allow me to understand FP concepts (like immutability, pure functions, higher-order functions, currying, monads, functors, etc.) more deeply and systematically.\u003C/li>\n\u003Cli>\u003Cstrong>Mastery of Consistent Styles\u003C/strong>: A specific textbook is often written based on the author’s consistent philosophy and coding style. Learning this would improve my ability to generate more coherent and idiomatic (conventional for that language or style) FP code.\u003C/li>\n\u003Cli>\u003Cstrong>Learning Best Practices and Design Patterns\u003C/strong>: High-quality textbooks contain numerous FP best practices and design patterns recommended by experienced experts. Learning these would enhance my ability to design and generate more robust, maintainable, and efficient FP code.\u003C/li>\n\u003Cli>\u003Cstrong>Resolution of Misconceptions and Ambiguities\u003C/strong>: Learning from fragmented sources can lead to misconceptions or ambiguity in knowledge. Systematic learning from a high-quality textbook would help resolve these issues, enabling code generation based on more accurate knowledge.\u003C/li>\n\u003C/ol>\n\u003Cp>Due to these factors, my understanding of FP, the consistency in my code generation, and the quality of my designs would improve. As a result, it’s quite plausible that my overall ability to generate functional code would be enhanced, potentially leading to a \u003Cstrong>“significant improvement.”\u003C/strong> Specifically, I would expect an improved ability to propose sophisticated FP solutions for more complex problems and to consistently generate high-quality code based on specific FP principles (like the appropriate use of monads).\u003C/p>\n\u003Chr>\n\u003Cp>The circumstances highlighted by the dialogue with the AI above are my main impetus for authoring this book. Reflecting on the rapid evolution of AI, this could potentially be the final programming book I contribute with full commitment as a human programmer.\u003C/p>\n\u003Cp>In Unit 0, we begin with a simple yet powerful idea: the \u003Cstrong>data transformation pipeline\u003C/strong>. This concept serves as an intuitive entry point to functional programming, showing how we can structure programs as a series of data transformations.\u003C/p>",{"headings":180,"localImagePaths":185,"remoteImagePaths":186,"frontmatter":187,"imagePaths":188},[181],{"depth":182,"slug":183,"text":184},2,"special-edition-and-your-next-generation-ai-could-copy","Special edition and your next generation AI could copy",[],[],{"title":169,"description":170},[],"en/book/unit-0/section-1/0-pipeline",{"id":189,"data":191,"body":197,"filePath":198,"digest":199,"rendered":200},{"title":192,"description":193,"editUrl":16,"head":194,"template":18,"sidebar":195,"pagefind":16,"draft":20},"Core Concept: The Data Transformation Pipeline","Coding, at its core, is the art of transforming data to achieve a desired outcome.",[],{"hidden":20,"attrs":196},{},"Coding, at its core, is the art of **transforming data** to achieve a desired outcome.\n\n![Pipeline image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png)\n\nImagine a **pipeline** where raw data enters as the input. \nAlong this pipeline are various **functions**, each acting like a specialized tool that manipulates the data in a specific way.\n\nThis **\"data transformation pipeline\"** is a fundamental principle found widely in computing. For instance, even complex systems like AI often rely on analogous pipelines, where **learned probability distribution functions encapsulated in trained models** act as transformation steps to produce the desired output. This illustrates the broad applicability of the pipeline pattern.\n\n![Functional programming pipeline image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449300196.png)\n\n**Functional Programming** is a programming paradigm that embraces this core principle of data transformation.","src/content/docs/en/book/unit-0/section-1/0-pipeline.md","1928e509f18ff964",{"html":201,"metadata":202},"\u003Cp>Coding, at its core, is the art of \u003Cstrong>transforming data\u003C/strong> to achieve a desired outcome.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png\" alt=\"Pipeline image\">\u003C/p>\n\u003Cp>Imagine a \u003Cstrong>pipeline\u003C/strong> where raw data enters as the input.\nAlong this pipeline are various \u003Cstrong>functions\u003C/strong>, each acting like a specialized tool that manipulates the data in a specific way.\u003C/p>\n\u003Cp>This \u003Cstrong>“data transformation pipeline”\u003C/strong> is a fundamental principle found widely in computing. For instance, even complex systems like AI often rely on analogous pipelines, where \u003Cstrong>learned probability distribution functions encapsulated in trained models\u003C/strong> act as transformation steps to produce the desired output. This illustrates the broad applicability of the pipeline pattern.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449300196.png\" alt=\"Functional programming pipeline image\">\u003C/p>\n\u003Cp>\u003Cstrong>Functional Programming\u003C/strong> is a programming paradigm that embraces this core principle of data transformation.\u003C/p>",{"headings":203,"localImagePaths":204,"remoteImagePaths":205,"frontmatter":206,"imagePaths":207},[],[],[],{"title":192,"description":193},[],"en/book/unit-0/section-1/1-other-concepts",{"id":208,"data":210,"body":216,"filePath":217,"digest":218,"rendered":219},{"title":211,"description":212,"editUrl":16,"head":213,"template":18,"sidebar":214,"pagefind":16,"draft":20},"Other Fundamental Programming Concepts","The idea of a 'pipeline processing data with functions' is certainly a powerful programming principle, especially central to functional programming and data processing.",[],{"hidden":20,"attrs":215},{},"The idea of a **'pipeline processing data with functions'** is certainly a powerful programming principle, especially central to functional programming and data processing.\n\nHowever, limiting the core \"principle\" of programming to just this concept can be challenging. Programming actually encompasses a diverse collection of concepts, methodologies, and approaches (paradigms).\n\nIn practice, it's common to combine these different principles depending on the specific problem you aim to solve and your objectives.\n\nBeyond the functional pipeline concept, here are some other crucial concepts and paradigms often employed:\n\n-   **Imperative Programming:** This involves describing _how_ a computer should execute a task using a sequence of instructions or commands. A key characteristic is that the program's state (e.g., the values in variables) changes with each step.\n    \n-   **Control Flow:** Closely tied to Imperative Programming, Control Flow provides the mechanisms to manage the execution order of those step-by-step instructions. This includes structures like conditional statements (`if` / `else`) for making decisions and loops (`for` / `while`) for repeating actions, dictating the sequence in which the program's state changes. Control Flow structures like conditionals and loops are thus inseparable from Imperative Programming for executing sequences of commands.\n    \n-   **State Management:** Building upon the concept of changing state mentioned in Imperative Programming, State Management specifically refers to the techniques and patterns for how a program should maintain, update, and access the information (state) it needs over time. This becomes particularly crucial in complex applications, such as those with user interfaces (UIs).\n    \n-   **Event-Driven Programming:** This programming model focuses on responding to events, such as user actions (like button clicks) or system occurrences (like receiving network data). Unlike strictly sequential execution, program flow depends on _when_ and _which_ external events happen. It's closely related to State Management, as events often lead to state changes, and is fundamental for building user interfaces (UIs) and network servers.\n    \n-   **Concurrency / Parallelism:** This area addresses managing multiple tasks that seem to overlap (concurrency) or run simultaneously (parallelism). It's essential for responsive UIs and performance (e.g., using multi-core processors). Techniques like asynchronous programming (`async`/`await`, familiar from JS/TS) help achieve concurrency, allowing responsiveness during long operations (like network I/O). Correctly managing concurrency is a significant aspect of modern software.\n    \n-   **Object-Oriented Programming (OOP):** This paradigm offers another way to structure programs, particularly concerning state. It bundles data (representing state) together with the procedures (methods) that operate on that data into units called \"objects.\" In OOP, the state is often encapsulated within these objects, meaning it's primarily accessed and modified through the object's defined methods. Programs are then constructed as interactions between these objects.","src/content/docs/en/book/unit-0/section-1/1-other-concepts.md","9989eacaded035d4",{"html":220,"metadata":221},"\u003Cp>The idea of a \u003Cstrong>‘pipeline processing data with functions’\u003C/strong> is certainly a powerful programming principle, especially central to functional programming and data processing.\u003C/p>\n\u003Cp>However, limiting the core “principle” of programming to just this concept can be challenging. Programming actually encompasses a diverse collection of concepts, methodologies, and approaches (paradigms).\u003C/p>\n\u003Cp>In practice, it’s common to combine these different principles depending on the specific problem you aim to solve and your objectives.\u003C/p>\n\u003Cp>Beyond the functional pipeline concept, here are some other crucial concepts and paradigms often employed:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Imperative Programming:\u003C/strong> This involves describing \u003Cem>how\u003C/em> a computer should execute a task using a sequence of instructions or commands. A key characteristic is that the program’s state (e.g., the values in variables) changes with each step.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Control Flow:\u003C/strong> Closely tied to Imperative Programming, Control Flow provides the mechanisms to manage the execution order of those step-by-step instructions. This includes structures like conditional statements (\u003Ccode dir=\"auto\">if\u003C/code> / \u003Ccode dir=\"auto\">else\u003C/code>) for making decisions and loops (\u003Ccode dir=\"auto\">for\u003C/code> / \u003Ccode dir=\"auto\">while\u003C/code>) for repeating actions, dictating the sequence in which the program’s state changes. Control Flow structures like conditionals and loops are thus inseparable from Imperative Programming for executing sequences of commands.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>State Management:\u003C/strong> Building upon the concept of changing state mentioned in Imperative Programming, State Management specifically refers to the techniques and patterns for how a program should maintain, update, and access the information (state) it needs over time. This becomes particularly crucial in complex applications, such as those with user interfaces (UIs).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Event-Driven Programming:\u003C/strong> This programming model focuses on responding to events, such as user actions (like button clicks) or system occurrences (like receiving network data). Unlike strictly sequential execution, program flow depends on \u003Cem>when\u003C/em> and \u003Cem>which\u003C/em> external events happen. It’s closely related to State Management, as events often lead to state changes, and is fundamental for building user interfaces (UIs) and network servers.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Concurrency / Parallelism:\u003C/strong> This area addresses managing multiple tasks that seem to overlap (concurrency) or run simultaneously (parallelism). It’s essential for responsive UIs and performance (e.g., using multi-core processors). Techniques like asynchronous programming (\u003Ccode dir=\"auto\">async\u003C/code>/\u003Ccode dir=\"auto\">await\u003C/code>, familiar from JS/TS) help achieve concurrency, allowing responsiveness during long operations (like network I/O). Correctly managing concurrency is a significant aspect of modern software.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Object-Oriented Programming (OOP):\u003C/strong> This paradigm offers another way to structure programs, particularly concerning state. It bundles data (representing state) together with the procedures (methods) that operate on that data into units called “objects.” In OOP, the state is often encapsulated within these objects, meaning it’s primarily accessed and modified through the object’s defined methods. Programs are then constructed as interactions between these objects.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":222,"localImagePaths":223,"remoteImagePaths":224,"frontmatter":225,"imagePaths":226},[],[],[],{"title":211,"description":212},[],"en/book/unit-0/section-1/2-unifying-power",{"id":227,"data":229,"body":235,"filePath":236,"digest":237,"rendered":238},{"title":230,"description":231,"editUrl":16,"head":232,"template":18,"sidebar":233,"pagefind":16,"draft":20},"The Unifying Potential of the Functional Pipeline","Pipeline image",[],{"hidden":20,"attrs":234},{},"![Pipeline image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png)\n\nYou might find this surprising. The functional pipeline concept we initially discussed holds remarkable potential. It offers a possible way to unify, simplify, or provide alternatives to many of the other programming concepts we've just explored.\n\n- Imperative Programming\n- Control Flow\n- State Management\n- Event-Driven Programming\n- Concurrency / Parallelism\n- Object-Oriented Programming (OOP)\n\nLet's see how this perspective unfolds.\n\n## Replacing Imperative Steps and Control Flow\n\nFirst, consider Imperative Programming and its close companion, Control Flow. Functional programming (FP) fundamentally approaches computation differently.\n\n-   Instead of describing _how_ to change state step-by-step, FP focuses on _what_ transformations to apply to data.\n    \n-   Functions are composed together, creating a natural data flow – the \"pipeline.\" The output of one function seamlessly becomes the input for the next.\n    \n-   This often eliminates the need for explicit Control Flow statements like `for` loops or `if/else` blocks in the imperative style.\n    \n-   Iteration can be handled elegantly using functions like `map`, `filter`, and `reduce` (similar to methods you might know from JavaScript arrays like `.map()`, `.filter()`, and `.reduce()`).\n    \n-   Conditional logic can often be expressed through function selection or pattern matching.\n\nEssentially, the sequence and control are implicitly managed by the structure of the function pipeline itself.\n\n## Integrating State, Events, and Concurrency\n\nNow, let's consider State Management, Event-Driven Programming, and Concurrency. These areas often introduce significant complexity when handled with traditional programming approaches.\n\nFunctional programming offers a remarkably cohesive way to address these challenges. A key approach, applying functional principles, is **Functional Reactive Programming (FRP)**. While we will delve into FRP in much more detail in later units, it provides a unified model where state, events, and concurrency are not treated as separate, difficult problems but are integrated seamlessly.\n\n-   The core idea within FRP is often to represent values that change over time (like application state) and discrete occurrences (like user interface events) as **streams** of data flowing through the system. (Again, we'll explore this powerful concept much more later).\n    \n-   Events, such as button clicks or incoming messages, naturally fit this model – they simply become data points appearing on a stream.\n    \n-   Application state can also be viewed as a stream, perhaps derived by combining or transforming various input event streams. State changes occur as new values flowing through this stream over time.\n    \n-   Concurrency often becomes more manageable within FRP. Asynchronous operations or computations involving multiple streams can be composed and reasoned about more effectively within this consistent stream-based model.\n\nBy treating state, events, and concurrency uniformly under the umbrella of data streams, FRP aims to dramatically simplify the development of complex, interactive, and concurrent applications. It offers a powerful, integrated approach where separate, complex mechanisms were previously needed.\n\n## And What About OOP?\n\nThis brings us to Object-Oriented Programming (OOP). If the functional pipeline concept offers such a powerful way to structure programs...\n\n-   ...if it can effectively provide alternatives to imperative control flow...\n    \n-   ...and if it provides a potentially simpler, more unified way to handle state, events, and concurrency (especially via FRP)...\n\n...then, from this viewpoint, the need for some traditional OOP structuring mechanisms might be viewed differently or potentially reduced.\n\nThe argument follows: if the functional pipeline provides a potentially universal and simpler approach to managing these core programming challenges, then OOP, designed to tackle the same complexities (especially state encapsulation), could be seen as one approach among others, with its necessity evaluated based on the context, especially when compared to this powerful functional alternative.\n\nThis perspective underscores the transformative potential of thinking functionally.","src/content/docs/en/book/unit-0/section-1/2-unifying-power.md","88c6a1fac15d47a3",{"html":239,"metadata":240},"\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png\" alt=\"Pipeline image\">\u003C/p>\n\u003Cp>You might find this surprising. The functional pipeline concept we initially discussed holds remarkable potential. It offers a possible way to unify, simplify, or provide alternatives to many of the other programming concepts we’ve just explored.\u003C/p>\n\u003Cul>\n\u003Cli>Imperative Programming\u003C/li>\n\u003Cli>Control Flow\u003C/li>\n\u003Cli>State Management\u003C/li>\n\u003Cli>Event-Driven Programming\u003C/li>\n\u003Cli>Concurrency / Parallelism\u003C/li>\n\u003Cli>Object-Oriented Programming (OOP)\u003C/li>\n\u003C/ul>\n\u003Cp>Let’s see how this perspective unfolds.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"replacing-imperative-steps-and-control-flow\">Replacing Imperative Steps and Control Flow\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#replacing-imperative-steps-and-control-flow\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Replacing Imperative Steps and Control Flow”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>First, consider Imperative Programming and its close companion, Control Flow. Functional programming (FP) fundamentally approaches computation differently.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Instead of describing \u003Cem>how\u003C/em> to change state step-by-step, FP focuses on \u003Cem>what\u003C/em> transformations to apply to data.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Functions are composed together, creating a natural data flow – the “pipeline.” The output of one function seamlessly becomes the input for the next.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>This often eliminates the need for explicit Control Flow statements like \u003Ccode dir=\"auto\">for\u003C/code> loops or \u003Ccode dir=\"auto\">if/else\u003C/code> blocks in the imperative style.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Iteration can be handled elegantly using functions like \u003Ccode dir=\"auto\">map\u003C/code>, \u003Ccode dir=\"auto\">filter\u003C/code>, and \u003Ccode dir=\"auto\">reduce\u003C/code> (similar to methods you might know from JavaScript arrays like \u003Ccode dir=\"auto\">.map()\u003C/code>, \u003Ccode dir=\"auto\">.filter()\u003C/code>, and \u003Ccode dir=\"auto\">.reduce()\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Conditional logic can often be expressed through function selection or pattern matching.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Essentially, the sequence and control are implicitly managed by the structure of the function pipeline itself.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"integrating-state-events-and-concurrency\">Integrating State, Events, and Concurrency\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#integrating-state-events-and-concurrency\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Integrating State, Events, and Concurrency”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now, let’s consider State Management, Event-Driven Programming, and Concurrency. These areas often introduce significant complexity when handled with traditional programming approaches.\u003C/p>\n\u003Cp>Functional programming offers a remarkably cohesive way to address these challenges. A key approach, applying functional principles, is \u003Cstrong>Functional Reactive Programming (FRP)\u003C/strong>. While we will delve into FRP in much more detail in later units, it provides a unified model where state, events, and concurrency are not treated as separate, difficult problems but are integrated seamlessly.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The core idea within FRP is often to represent values that change over time (like application state) and discrete occurrences (like user interface events) as \u003Cstrong>streams\u003C/strong> of data flowing through the system. (Again, we’ll explore this powerful concept much more later).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Events, such as button clicks or incoming messages, naturally fit this model – they simply become data points appearing on a stream.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Application state can also be viewed as a stream, perhaps derived by combining or transforming various input event streams. State changes occur as new values flowing through this stream over time.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Concurrency often becomes more manageable within FRP. Asynchronous operations or computations involving multiple streams can be composed and reasoned about more effectively within this consistent stream-based model.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>By treating state, events, and concurrency uniformly under the umbrella of data streams, FRP aims to dramatically simplify the development of complex, interactive, and concurrent applications. It offers a powerful, integrated approach where separate, complex mechanisms were previously needed.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"and-what-about-oop\">And What About OOP?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#and-what-about-oop\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “And What About OOP?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This brings us to Object-Oriented Programming (OOP). If the functional pipeline concept offers such a powerful way to structure programs…\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>…if it can effectively provide alternatives to imperative control flow…\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>…and if it provides a potentially simpler, more unified way to handle state, events, and concurrency (especially via FRP)…\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>…then, from this viewpoint, the need for some traditional OOP structuring mechanisms might be viewed differently or potentially reduced.\u003C/p>\n\u003Cp>The argument follows: if the functional pipeline provides a potentially universal and simpler approach to managing these core programming challenges, then OOP, designed to tackle the same complexities (especially state encapsulation), could be seen as one approach among others, with its necessity evaluated based on the context, especially when compared to this powerful functional alternative.\u003C/p>\n\u003Cp>This perspective underscores the transformative potential of thinking functionally.\u003C/p>",{"headings":241,"localImagePaths":251,"remoteImagePaths":252,"frontmatter":253,"imagePaths":254},[242,245,248],{"depth":182,"slug":243,"text":244},"replacing-imperative-steps-and-control-flow","Replacing Imperative Steps and Control Flow",{"depth":182,"slug":246,"text":247},"integrating-state-events-and-concurrency","Integrating State, Events, and Concurrency",{"depth":182,"slug":249,"text":250},"and-what-about-oop","And What About OOP?",[],[],{"title":230,"description":231},[],"en/book/unit-1/section-1/0-control-flow",{"id":255,"data":257,"body":263,"filePath":264,"digest":265,"rendered":266},{"title":258,"description":259,"editUrl":16,"head":260,"template":18,"sidebar":261,"pagefind":16,"draft":20},"Understanding Control Flow: The Structured Programming Baseline","To understand how functional programming approaches computation, we first need a clear picture of traditional control flow structures. In this chapter, we'll examine the foundations of structured programming that revolutionized software development.",[],{"hidden":20,"attrs":262},{},"To understand how functional programming approaches computation, we first need a clear picture of traditional control flow structures. In this chapter, we'll examine the foundations of structured programming that revolutionized software development.\n\n## From Simple Imperative to Structured Programming\n\nEarly programming, often referred to as simple **Imperative Programming**, involved giving the computer a sequence of direct commands to execute. A key characteristic of this early style was the frequent use of unconditional jumps or **`GOTO`** statements to control the flow of execution. While powerful, this often led to complex, tangled logic that was difficult to understand, debug, and maintain – sometimes called \"spaghetti code.\"\n\n**Structured Programming** emerged in the late 1960s as a discipline to combat these issues. Pioneered by figures like Edsger W. Dijkstra, its primary goal was to improve the clarity, quality, and development time of computer programs by imposing disciplines on control flow.\n\n## The Origin and Rationale of the Three Basic Control Structures\n\nThe cornerstone of structured programming is the **Structured Program Theorem** (proven by Böhm and Jacopini). This theorem states that any computable algorithm, regardless of its complexity, can be implemented using only three basic control structures:\n\n1.  **Sequence:** This is the default control structure. Instructions are executed one after another in the order they are written.\n    \n    -   **Rationale:** Represents the fundamental, linear progression of tasks.\n        \n2.  **Selection (or Branching/Conditional):** This structure allows the program to choose between two or more different paths of execution based on a specific condition. Common implementations are `if-then-else` or `switch/case` statements.\n    \n    -   **Rationale:** Essential for implementing decision-making logic within algorithms. Allows programs to react differently to different situations or data inputs.\n        \n3.  **Iteration (or Repetition/Looping):** This structure allows a block of code to be executed repeatedly as long as a certain condition holds true (like `while`, `do-while` loops) or for a specific number of times (like `for` loops).\n    \n    -   **Rationale:** Handles repetitive tasks efficiently without needing to write the same code block multiple times. Crucial for processing collections of data or performing tasks until a goal is reached.\n\n## Why These Three?\n\n![Image of Sequence, Selection, Iteration flowchart symbols](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474477850.png)\n\nThe significance of these three structures lies in their **sufficiency** and **clarity**. The Böhm-Jacopini proof demonstrated that these three are all that is mathematically necessary to express any algorithm. By restricting control flow primarily to these structures and discouraging or eliminating the use of `GOTO`, structured programming enforces a clearer, more predictable flow of execution. Each structure has a single entry point and a single exit point, making code blocks easier to reason about, test independently, and combine into larger programs (modularity). This leads to more maintainable, understandable, and reliable software.\n\n## Turing Completeness\n\nThe sufficiency of sequence, selection, and iteration, as demonstrated by the Structured Program Theorem, has profound implications in computer science. It essentially proves that any system or language providing these three basic control flow mechanisms possesses a powerful property known as **Turing completeness**.\n\nThe concept originates from the work of the mathematician and computer scientist **Alan Turing**, who developed a theoretical model of computation called the Turing machine. A system is considered Turing complete if it can simulate a universal Turing machine, meaning it can, in principle, perform any computation that any other computable system can perform.\n\nThe Structured Program Theorem tells us that sequence, selection, and iteration are sufficient building blocks to express any algorithm. Therefore, any programming language or computational model that effectively supports these three structures is Turing complete. This guarantees that such languages have the fundamental expressive power required for general-purpose computation. Understanding these baseline structures is crucial as we explore alternative ways to control program flow in functional programming, which, while different in style, must also ultimately provide mechanisms to achieve Turing completeness.","src/content/docs/en/book/unit-1/section-1/0-control-flow.md","823ce0cdf9c6292b",{"html":267,"metadata":268},"\u003Cp>To understand how functional programming approaches computation, we first need a clear picture of traditional control flow structures. In this chapter, we’ll examine the foundations of structured programming that revolutionized software development.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"from-simple-imperative-to-structured-programming\">From Simple Imperative to Structured Programming\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#from-simple-imperative-to-structured-programming\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “From Simple Imperative to Structured Programming”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Early programming, often referred to as simple \u003Cstrong>Imperative Programming\u003C/strong>, involved giving the computer a sequence of direct commands to execute. A key characteristic of this early style was the frequent use of unconditional jumps or \u003Cstrong>\u003Ccode dir=\"auto\">GOTO\u003C/code>\u003C/strong> statements to control the flow of execution. While powerful, this often led to complex, tangled logic that was difficult to understand, debug, and maintain – sometimes called “spaghetti code.”\u003C/p>\n\u003Cp>\u003Cstrong>Structured Programming\u003C/strong> emerged in the late 1960s as a discipline to combat these issues. Pioneered by figures like Edsger W. Dijkstra, its primary goal was to improve the clarity, quality, and development time of computer programs by imposing disciplines on control flow.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-origin-and-rationale-of-the-three-basic-control-structures\">The Origin and Rationale of the Three Basic Control Structures\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-origin-and-rationale-of-the-three-basic-control-structures\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Origin and Rationale of the Three Basic Control Structures”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The cornerstone of structured programming is the \u003Cstrong>Structured Program Theorem\u003C/strong> (proven by Böhm and Jacopini). This theorem states that any computable algorithm, regardless of its complexity, can be implemented using only three basic control structures:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Sequence:\u003C/strong> This is the default control structure. Instructions are executed one after another in the order they are written.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rationale:\u003C/strong> Represents the fundamental, linear progression of tasks.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Selection (or Branching/Conditional):\u003C/strong> This structure allows the program to choose between two or more different paths of execution based on a specific condition. Common implementations are \u003Ccode dir=\"auto\">if-then-else\u003C/code> or \u003Ccode dir=\"auto\">switch/case\u003C/code> statements.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rationale:\u003C/strong> Essential for implementing decision-making logic within algorithms. Allows programs to react differently to different situations or data inputs.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Iteration (or Repetition/Looping):\u003C/strong> This structure allows a block of code to be executed repeatedly as long as a certain condition holds true (like \u003Ccode dir=\"auto\">while\u003C/code>, \u003Ccode dir=\"auto\">do-while\u003C/code> loops) or for a specific number of times (like \u003Ccode dir=\"auto\">for\u003C/code> loops).\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rationale:\u003C/strong> Handles repetitive tasks efficiently without needing to write the same code block multiple times. Crucial for processing collections of data or performing tasks until a goal is reached.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"why-these-three\">Why These Three?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#why-these-three\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Why These Three?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474477850.png\" alt=\"Image of Sequence, Selection, Iteration flowchart symbols\">\u003C/p>\n\u003Cp>The significance of these three structures lies in their \u003Cstrong>sufficiency\u003C/strong> and \u003Cstrong>clarity\u003C/strong>. The Böhm-Jacopini proof demonstrated that these three are all that is mathematically necessary to express any algorithm. By restricting control flow primarily to these structures and discouraging or eliminating the use of \u003Ccode dir=\"auto\">GOTO\u003C/code>, structured programming enforces a clearer, more predictable flow of execution. Each structure has a single entry point and a single exit point, making code blocks easier to reason about, test independently, and combine into larger programs (modularity). This leads to more maintainable, understandable, and reliable software.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"turing-completeness\">Turing Completeness\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#turing-completeness\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Turing Completeness”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The sufficiency of sequence, selection, and iteration, as demonstrated by the Structured Program Theorem, has profound implications in computer science. It essentially proves that any system or language providing these three basic control flow mechanisms possesses a powerful property known as \u003Cstrong>Turing completeness\u003C/strong>.\u003C/p>\n\u003Cp>The concept originates from the work of the mathematician and computer scientist \u003Cstrong>Alan Turing\u003C/strong>, who developed a theoretical model of computation called the Turing machine. A system is considered Turing complete if it can simulate a universal Turing machine, meaning it can, in principle, perform any computation that any other computable system can perform.\u003C/p>\n\u003Cp>The Structured Program Theorem tells us that sequence, selection, and iteration are sufficient building blocks to express any algorithm. Therefore, any programming language or computational model that effectively supports these three structures is Turing complete. This guarantees that such languages have the fundamental expressive power required for general-purpose computation. Understanding these baseline structures is crucial as we explore alternative ways to control program flow in functional programming, which, while different in style, must also ultimately provide mechanisms to achieve Turing completeness.\u003C/p>",{"headings":269,"localImagePaths":282,"remoteImagePaths":283,"frontmatter":284,"imagePaths":285},[270,273,276,279],{"depth":182,"slug":271,"text":272},"from-simple-imperative-to-structured-programming","From Simple Imperative to Structured Programming",{"depth":182,"slug":274,"text":275},"the-origin-and-rationale-of-the-three-basic-control-structures","The Origin and Rationale of the Three Basic Control Structures",{"depth":182,"slug":277,"text":278},"why-these-three","Why These Three?",{"depth":182,"slug":280,"text":281},"turing-completeness","Turing Completeness",[],[],{"title":258,"description":259},[],"en/book/unit-1/section-0/0-about-unit",{"id":286,"data":288,"body":294,"filePath":295,"digest":296,"rendered":297},{"title":289,"description":290,"editUrl":16,"head":291,"template":18,"sidebar":292,"pagefind":16,"draft":20},"🔍 Overview - Unit 1","In Unit 0, we introduced the concept of data transformation pipelines as a fundamental model for functional programming. This unit explores how we actually build these pipelines using functions as our primary building blocks.",[],{"hidden":20,"attrs":293},{},"In Unit 0, we introduced the concept of data transformation pipelines as a fundamental model for functional programming. This unit explores how we actually build these pipelines using functions as our primary building blocks.\n\nTraditional control structures provide a baseline for comparison as we discover how functional programming offers powerful alternatives through its focus on expressions and first-class functions.","src/content/docs/en/book/unit-1/section-0/0-about-unit.md","b54ef1f31fe56660",{"html":298,"metadata":299},"\u003Cp>In Unit 0, we introduced the concept of data transformation pipelines as a fundamental model for functional programming. This unit explores how we actually build these pipelines using functions as our primary building blocks.\u003C/p>\n\u003Cp>Traditional control structures provide a baseline for comparison as we discover how functional programming offers powerful alternatives through its focus on expressions and first-class functions.\u003C/p>",{"headings":300,"localImagePaths":301,"remoteImagePaths":302,"frontmatter":303,"imagePaths":304},[],[],[],{"title":289,"description":290},[],"en/book/unit-1/section-2/2-hof",{"id":305,"data":307,"body":313,"filePath":314,"digest":315,"rendered":316},{"title":308,"description":309,"editUrl":16,"head":310,"template":18,"sidebar":311,"pagefind":16,"draft":20},"Higher-Order Functions (HOF)","Building on the idea that functions are first-class values, we can now explore a powerful consequence: Higher-Order Functions (HOFs). These are functions that operate on other functions, either by taking them as input or returning them as output. This section introduces the basic patterns of HOFs.",[],{"hidden":20,"attrs":312},{},"Building on the idea that functions are first-class values, we can now explore a powerful consequence: Higher-Order Functions (HOFs). These are functions that operate on other functions, either by taking them as input or returning them as output. This section introduces the basic patterns of HOFs.\n\n## The 3 Basic Higher-Order Function (HOF) Patterns\n\nAs we just discussed, the core idea of First-Class Functions means we can:\n\n-   Pass functions _into_ other functions as arguments.\n    \n-   Have functions _return_ new functions as their result.\n\nThese two capabilities define what makes a function a Higher-Order Function (HOF). We can visualize the basic patterns that emerge from this definition using the following diagram:\n\n![img](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744564785396.png)\n\nLet's break down these patterns based on the definition:\n\n1.  **`Value |> Function = Function`**\n\nReturns a Function as its output.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695953633.png)\n\n2.  **`Function |> Function = Value`**\n\nTakes a Function as input.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695880762.png)\n\n3.  **`Function |> Function = Function`**\n\nTakes and Returns a Function as input and also returns a function as output.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695992437.png)\n\nThese three patterns illustrate the fundamental ways functions can be used as first-class values, enabling the powerful techniques found in functional programming.","src/content/docs/en/book/unit-1/section-2/2-hof.md","3ecec777e2a8c888",{"html":317,"metadata":318},"\u003Cp>Building on the idea that functions are first-class values, we can now explore a powerful consequence: Higher-Order Functions (HOFs). These are functions that operate on other functions, either by taking them as input or returning them as output. This section introduces the basic patterns of HOFs.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-3-basic-higher-order-function-hof-patterns\">The 3 Basic Higher-Order Function (HOF) Patterns\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-3-basic-higher-order-function-hof-patterns\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The 3 Basic Higher-Order Function (HOF) Patterns”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>As we just discussed, the core idea of First-Class Functions means we can:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Pass functions \u003Cem>into\u003C/em> other functions as arguments.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Have functions \u003Cem>return\u003C/em> new functions as their result.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>These two capabilities define what makes a function a Higher-Order Function (HOF). We can visualize the basic patterns that emerge from this definition using the following diagram:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744564785396.png\" alt=\"img\">\u003C/p>\n\u003Cp>Let’s break down these patterns based on the definition:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Value |> Function = Function\u003C/code>\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>Returns a Function as its output.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695953633.png\" alt=\"image\">\u003C/p>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Function |> Function = Value\u003C/code>\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>Takes a Function as input.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695880762.png\" alt=\"image\">\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Function |> Function = Function\u003C/code>\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>Takes and Returns a Function as input and also returns a function as output.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695992437.png\" alt=\"image\">\u003C/p>\n\u003Cp>These three patterns illustrate the fundamental ways functions can be used as first-class values, enabling the powerful techniques found in functional programming.\u003C/p>",{"headings":319,"localImagePaths":323,"remoteImagePaths":324,"frontmatter":325,"imagePaths":326},[320],{"depth":182,"slug":321,"text":322},"the-3-basic-higher-order-function-hof-patterns","The 3 Basic Higher-Order Function (HOF) Patterns",[],[],{"title":308,"description":309},[],"en/book/unit-1/section-2/1-first-class-function",{"id":327,"data":329,"body":335,"filePath":336,"digest":337,"rendered":338},{"title":330,"description":331,"editUrl":16,"head":332,"template":18,"sidebar":333,"pagefind":16,"draft":20},"First-Class Functions","We've established that mathematical expressions and functional pipelines both evaluate to values, which are the same concept as data in programming. This aligns closely with basic arithmetic and algebra. Now, let's consider the status of functions themselves. This section explores that fundamental concept: First-Class Functions.",[],{"hidden":20,"attrs":334},{},"We've established that mathematical expressions and functional pipelines both evaluate to **values**, which are the same concept as **data** in programming. This aligns closely with basic arithmetic and algebra. Now, let's consider the status of _functions_ themselves. This section explores that fundamental concept: First-Class Functions.\n\n## Functions as Values: Extending the Mathematical View\n\n**The Foundation: Functions in School Math**\n\nIn typical school math, functions (like `f(x) = x * 2 + 1`) are primarily understood as **rules**, **processes**, or **mappings**. They represent a way to get an output value (`f(x)`) from an input value (`x`). We learn to evaluate them, graph them, and use them in equations. Functions are the tools we _apply_.\n\n**The Extension: Functions as Values in Functional Programming**\n\nFunctional programming builds upon this foundation by introducing a powerful extension: the idea that _**functions themselves are values**_, just like numbers or strings. They become  **\"first-class citizens.\"**\n\nWhile this might be a new way of thinking compared to the typical school math perspective, it's a natural evolution within the mathematical thinking embraced by FP.\n\n## The Core Idea: Functions are Values (First-Class Functions)\n\nPerhaps the most central concept is that **functions are treated as regular values**, just like numbers (e.g., `5`), strings (e.g., `\"hello\"`), or lists. They are not special second-class citizens.\n\nThe ability for functions to be defined by expressions and treated as **values** is a key feature of functional **languages** and the minimum requirement for a language to be functional. Mastering this feature unlocks the potential power of functional programming.\n\n-   Pass functions _into_ other functions as arguments.\n    \n-   Have functions _return_ new functions as their result.\n\nUnderstanding this concept – that functions can be treated as data – is the crucial next step. It allows us to fully explore the power of functional programming, starting with a proper introduction to **First-Class Functions** in the following sections.","src/content/docs/en/book/unit-1/section-2/1-first-class-function.md","b32b6b2d8916093a",{"html":339,"metadata":340},"\u003Cp>We’ve established that mathematical expressions and functional pipelines both evaluate to \u003Cstrong>values\u003C/strong>, which are the same concept as \u003Cstrong>data\u003C/strong> in programming. This aligns closely with basic arithmetic and algebra. Now, let’s consider the status of \u003Cem>functions\u003C/em> themselves. This section explores that fundamental concept: First-Class Functions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"functions-as-values-extending-the-mathematical-view\">Functions as Values: Extending the Mathematical View\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#functions-as-values-extending-the-mathematical-view\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Functions as Values: Extending the Mathematical View”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cstrong>The Foundation: Functions in School Math\u003C/strong>\u003C/p>\n\u003Cp>In typical school math, functions (like \u003Ccode dir=\"auto\">f(x) = x * 2 + 1\u003C/code>) are primarily understood as \u003Cstrong>rules\u003C/strong>, \u003Cstrong>processes\u003C/strong>, or \u003Cstrong>mappings\u003C/strong>. They represent a way to get an output value (\u003Ccode dir=\"auto\">f(x)\u003C/code>) from an input value (\u003Ccode dir=\"auto\">x\u003C/code>). We learn to evaluate them, graph them, and use them in equations. Functions are the tools we \u003Cem>apply\u003C/em>.\u003C/p>\n\u003Cp>\u003Cstrong>The Extension: Functions as Values in Functional Programming\u003C/strong>\u003C/p>\n\u003Cp>Functional programming builds upon this foundation by introducing a powerful extension: the idea that \u003Cem>\u003Cstrong>functions themselves are values\u003C/strong>\u003C/em>, just like numbers or strings. They become  \u003Cstrong>“first-class citizens.”\u003C/strong>\u003C/p>\n\u003Cp>While this might be a new way of thinking compared to the typical school math perspective, it’s a natural evolution within the mathematical thinking embraced by FP.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-core-idea-functions-are-values-first-class-functions\">The Core Idea: Functions are Values (First-Class Functions)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-core-idea-functions-are-values-first-class-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Core Idea: Functions are Values (First-Class Functions)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Perhaps the most central concept is that \u003Cstrong>functions are treated as regular values\u003C/strong>, just like numbers (e.g., \u003Ccode dir=\"auto\">5\u003C/code>), strings (e.g., \u003Ccode dir=\"auto\">\"hello\"\u003C/code>), or lists. They are not special second-class citizens.\u003C/p>\n\u003Cp>The ability for functions to be defined by expressions and treated as \u003Cstrong>values\u003C/strong> is a key feature of functional \u003Cstrong>languages\u003C/strong> and the minimum requirement for a language to be functional. Mastering this feature unlocks the potential power of functional programming.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Pass functions \u003Cem>into\u003C/em> other functions as arguments.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Have functions \u003Cem>return\u003C/em> new functions as their result.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Understanding this concept – that functions can be treated as data – is the crucial next step. It allows us to fully explore the power of functional programming, starting with a proper introduction to \u003Cstrong>First-Class Functions\u003C/strong> in the following sections.\u003C/p>",{"headings":341,"localImagePaths":348,"remoteImagePaths":349,"frontmatter":350,"imagePaths":351},[342,345],{"depth":182,"slug":343,"text":344},"functions-as-values-extending-the-mathematical-view","Functions as Values: Extending the Mathematical View",{"depth":182,"slug":346,"text":347},"the-core-idea-functions-are-values-first-class-functions","The Core Idea: Functions are Values (First-Class Functions)",[],[],{"title":330,"description":331},[],"en/book/unit-1/section-5/0-terminology",{"id":352,"data":354,"body":360,"filePath":361,"digest":362,"rendered":363},{"title":355,"description":356,"editUrl":16,"head":357,"template":18,"sidebar":358,"pagefind":16,"draft":20},"Understanding Functional Programming Terminology","As we delve deeper into functional programming, we encounter several key terms frequently used to describe its characteristics, such as 'Pure Function', 'Side Effect', and 'Immutability'. However, simply listing these terms can be misleading. This chapter critically examines the context and origin of this common FP terminology. We will explore why these terms, while seemingly convenient, can be confusing for learners. We will also see how they often arise in contrast to imperative programming rather than from pure mathematics, and why understanding this background is crucial for truly grasping the functional approach.",[],{"hidden":20,"attrs":359},{},"As we delve deeper into functional programming, we encounter several key terms frequently used to describe its characteristics, such as 'Pure Function', 'Side Effect', and 'Immutability'. However, simply listing these terms can be misleading. This chapter critically examines the context and origin of this common FP terminology. We will explore why these terms, while seemingly convenient, can be confusing for learners. We will also see how they often arise in contrast to imperative programming rather than from pure mathematics, and why understanding this background is crucial for truly grasping the functional approach.\n\n## Key Terms Often Encountered in FP\n\nYou'll frequently encounter the following five terms used in tutorials and textbooks, often as convenient shorthand to explain the characteristics of functional programming. Before we examine their context and potential pitfalls, let's review the definitions commonly associated with these terms:\n\n* **Pure Function:** A function that satisfies two conditions: 1) It always returns the same output for the same input. 2) It produces no side effects.\n* **Side Effect:** An interaction with the outside world or modification of state outside the function's local scope. Examples include modifying a global variable, writing to a file or console, reading user input, or generating a random number. FP aims to minimize and isolate side effects.\n* **Immutability:** The property of data that cannot be changed after its creation. When you seem to \"modify\" an immutable data structure, you are actually creating a *new* structure with the changes.\n* **Mutability:** The property of data that *can* be changed after creation. This is common for variables and objects in imperative and object-oriented programming.\n* **Referential Transparency:** An expression is referentially transparent if it can be replaced with its resulting value without changing the program's overall behavior. Pure functions guarantee referential transparency.\n\n## The Challenge: Why These Terms Can Be Confusing\n\nA primary difficulty arises because these key terms are often used **circularly, explaining each other without a firm, independent foundation.** For a learner encountering them for the first time, it can feel like trying to understand a structure built in mid-air, where each part relies on another undefined part for support.\n\nFor example, \"purity\" might be explained using \"side effects\" and \"referential transparency,\" while \"referential transparency\" is explained using \"purity.\" Without grounding in concrete examples or familiar analogies first, the learner is left trying to understand unknown concept A using unknown concept B.\n\nThis lack of grounding is compounded when introductory materials present these terms before the underlying concepts are fully grasped through experience. Encountering unfamiliar concepts explained with equally unfamiliar jargon, defined in terms of each other, is a significant hurdle. This contributes heavily to the perception that FP is unnecessarily complex or difficult to grasp. This \"jargon-first\" approach, while perhaps convenient for the author, is often detrimental to the learner.\n\nFurthermore, as we'll explore, these terms often gain their primary meaning not in isolation, but specifically in *contrast* to another style of programming. This further complicates direct understanding without that comparative context.\n\n## Why This Terminology Isn't Common in Mathematics\n\nDespite FP's strong mathematical roots, these specific terms (Pure Function, Side Effect, Immutability, Referential Transparency) are generally **not found or used** within the mathematics community itself. The primary reason is that the properties they describe are considered **fundamental or simply \"obvious\"** in a purely mathematical context.\n\nMathematics typically doesn't operate within a context where state changes arbitrarily or functions interact with external systems in unpredictable ways. Therefore, mathematics doesn't always need special terms to describe the *absence* of side effects or mutability – these are often the assumed norm.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nConsider basic arithmetic learned in elementary school:\n\n![Image of basic arithmetic examples](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744898656341.png)\n\nThese operations inherently possess the qualities we label in FP:\n\n* They are **Pure:** `1 + 1` *always* yields `2`. The result depends *only* on the inputs `1` and `1`.\n* The values are **Immutable:** The number `1` doesn't *become* something else during the calculation `1 + 1`.\n* They exhibit **Referential Transparency:** Any instance of `1 + 1` can be replaced by `2` anywhere without changing the outcome of a larger calculation.\n* They have **No Side Effects:** Calculating `1 + 1` doesn't modify some external counter or print to a screen.\n\nWe rarely, if ever, explicitly discuss these properties when learning arithmetic because they are the default, expected behavior.\n\nWhile terms like \"Pure Function\" and \"Immutability\" are useful labels for programming concepts reflecting this mathematical ideal, be cautious with jargon like \"Referential Transparency.\" Though frequently used in FP circles, its precise meaning and utility compared to simply discussing \"purity\" are debated. Furthermore, its connection to origins in logic can sometimes be obscured in programming contexts. The focus should remain on the underlying principles of predictable, testable, mathematical-style computation, rather than getting lost in the terminology itself.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## An Antithesis to Imperative Programming\n\nSo, if these properties are often taken for granted in mathematics, why *do* these terms feature so prominently in FP discussions? A key reason is that they serve as an **antithesis** to the concepts prevalent in **Imperative Programming**, which often *deviates* from these mathematical norms.\n\nMost programmers first learn imperative or object-oriented styles. These paradigms typically focus on sequences of commands that modify the program's state (mutable variables, object properties changing over time). This forms a \"common sense\" understanding where data changing in place and functions having broad effects (side effects) are normal and expected.\n\nFunctional programming offers a different paradigm, rooted more closely in mathematical function evaluation. Terms like \"Immutability\" (unchangeable data) or \"Pure Function\" (no side effects) gain their significance precisely because they **directly challenge** these common imperative assumptions. They highlight what FP *avoids* (in-place mutation, uncontrolled side effects) or *manages differently* (e.g., creating new data instead of modifying).\n\nTherefore, learning FP often involves **unlearning** the imperative defaults. Terms like 'Immutability' or 'Pure Function' act as strong signposts for this necessary shift in perspective. They are, in essence, **relative contrast terms**, primarily meaningful when compared against the mutable state and side effects common in imperative styles.\n\nThe FP terminology arises largely because the imperative tradition introduced computational concepts that **deviate** from mathematical purity. This made it necessary to **re-emphasize** these desirable mathematical properties using explicit labels, bringing focus back to foundational principles in a computational setting.\n\n## This Book's Stance: Avoiding Dependence on Jargon\n\nYou might notice that this book, unlike many other FP tutorials or texts, deliberately avoids heavy reliance on the five terms listed above (Pure Function, Side Effect, Immutability, Referential Transparency). We adopt this distinct approach because we believe that depending on this specific jargon to *explain* functional programming is fundamentally flawed.\n\nWhy? As we have emphasized throughout, **functional programming *is* mathematics** applied to computation. Explaining FP through its mathematical foundations – focusing on expressions, values, types, and function transformations – is both necessary and sufficient.\n\nThese specialized terms often lack direct mathematical counterparts. Introducing them is not only unnecessary but frequently serves to confuse rather than clarify, especially for learners.\n\nThis book aims to build understanding directly from mathematical and foundational programming principles, like those familiar from JavaScript. Therefore, we minimize reliance on terminology that exists primarily in relation to the imperative paradigm we are moving beyond.","src/content/docs/en/book/unit-1/section-5/0-terminology.md","f742c5a3e4d4c619",{"html":364,"metadata":365},"\u003Cp>As we delve deeper into functional programming, we encounter several key terms frequently used to describe its characteristics, such as ‘Pure Function’, ‘Side Effect’, and ‘Immutability’. However, simply listing these terms can be misleading. This chapter critically examines the context and origin of this common FP terminology. We will explore why these terms, while seemingly convenient, can be confusing for learners. We will also see how they often arise in contrast to imperative programming rather than from pure mathematics, and why understanding this background is crucial for truly grasping the functional approach.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"key-terms-often-encountered-in-fp\">Key Terms Often Encountered in FP\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#key-terms-often-encountered-in-fp\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Key Terms Often Encountered in FP”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>You’ll frequently encounter the following five terms used in tutorials and textbooks, often as convenient shorthand to explain the characteristics of functional programming. Before we examine their context and potential pitfalls, let’s review the definitions commonly associated with these terms:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Pure Function:\u003C/strong> A function that satisfies two conditions: 1) It always returns the same output for the same input. 2) It produces no side effects.\u003C/li>\n\u003Cli>\u003Cstrong>Side Effect:\u003C/strong> An interaction with the outside world or modification of state outside the function’s local scope. Examples include modifying a global variable, writing to a file or console, reading user input, or generating a random number. FP aims to minimize and isolate side effects.\u003C/li>\n\u003Cli>\u003Cstrong>Immutability:\u003C/strong> The property of data that cannot be changed after its creation. When you seem to “modify” an immutable data structure, you are actually creating a \u003Cem>new\u003C/em> structure with the changes.\u003C/li>\n\u003Cli>\u003Cstrong>Mutability:\u003C/strong> The property of data that \u003Cem>can\u003C/em> be changed after creation. This is common for variables and objects in imperative and object-oriented programming.\u003C/li>\n\u003Cli>\u003Cstrong>Referential Transparency:\u003C/strong> An expression is referentially transparent if it can be replaced with its resulting value without changing the program’s overall behavior. Pure functions guarantee referential transparency.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-challenge-why-these-terms-can-be-confusing\">The Challenge: Why These Terms Can Be Confusing\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-challenge-why-these-terms-can-be-confusing\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Challenge: Why These Terms Can Be Confusing”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A primary difficulty arises because these key terms are often used \u003Cstrong>circularly, explaining each other without a firm, independent foundation.\u003C/strong> For a learner encountering them for the first time, it can feel like trying to understand a structure built in mid-air, where each part relies on another undefined part for support.\u003C/p>\n\u003Cp>For example, “purity” might be explained using “side effects” and “referential transparency,” while “referential transparency” is explained using “purity.” Without grounding in concrete examples or familiar analogies first, the learner is left trying to understand unknown concept A using unknown concept B.\u003C/p>\n\u003Cp>This lack of grounding is compounded when introductory materials present these terms before the underlying concepts are fully grasped through experience. Encountering unfamiliar concepts explained with equally unfamiliar jargon, defined in terms of each other, is a significant hurdle. This contributes heavily to the perception that FP is unnecessarily complex or difficult to grasp. This “jargon-first” approach, while perhaps convenient for the author, is often detrimental to the learner.\u003C/p>\n\u003Cp>Furthermore, as we’ll explore, these terms often gain their primary meaning not in isolation, but specifically in \u003Cem>contrast\u003C/em> to another style of programming. This further complicates direct understanding without that comparative context.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"why-this-terminology-isnt-common-in-mathematics\">Why This Terminology Isn’t Common in Mathematics\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#why-this-terminology-isnt-common-in-mathematics\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Why This Terminology Isn’t Common in Mathematics”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Despite FP’s strong mathematical roots, these specific terms (Pure Function, Side Effect, Immutability, Referential Transparency) are generally \u003Cstrong>not found or used\u003C/strong> within the mathematics community itself. The primary reason is that the properties they describe are considered \u003Cstrong>fundamental or simply “obvious”\u003C/strong> in a purely mathematical context.\u003C/p>\n\u003Cp>Mathematics typically doesn’t operate within a context where state changes arbitrarily or functions interact with external systems in unpredictable ways. Therefore, mathematics doesn’t always need special terms to describe the \u003Cem>absence\u003C/em> of side effects or mutability – these are often the assumed norm.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>Consider basic arithmetic learned in elementary school:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744898656341.png\" alt=\"Image of basic arithmetic examples\">\u003C/p>\n\u003Cp>These operations inherently possess the qualities we label in FP:\u003C/p>\n\u003Cul>\n\u003Cli>They are \u003Cstrong>Pure:\u003C/strong> \u003Ccode dir=\"auto\">1 + 1\u003C/code> \u003Cem>always\u003C/em> yields \u003Ccode dir=\"auto\">2\u003C/code>. The result depends \u003Cem>only\u003C/em> on the inputs \u003Ccode dir=\"auto\">1\u003C/code> and \u003Ccode dir=\"auto\">1\u003C/code>.\u003C/li>\n\u003Cli>The values are \u003Cstrong>Immutable:\u003C/strong> The number \u003Ccode dir=\"auto\">1\u003C/code> doesn’t \u003Cem>become\u003C/em> something else during the calculation \u003Ccode dir=\"auto\">1 + 1\u003C/code>.\u003C/li>\n\u003Cli>They exhibit \u003Cstrong>Referential Transparency:\u003C/strong> Any instance of \u003Ccode dir=\"auto\">1 + 1\u003C/code> can be replaced by \u003Ccode dir=\"auto\">2\u003C/code> anywhere without changing the outcome of a larger calculation.\u003C/li>\n\u003Cli>They have \u003Cstrong>No Side Effects:\u003C/strong> Calculating \u003Ccode dir=\"auto\">1 + 1\u003C/code> doesn’t modify some external counter or print to a screen.\u003C/li>\n\u003C/ul>\n\u003Cp>We rarely, if ever, explicitly discuss these properties when learning arithmetic because they are the default, expected behavior.\u003C/p>\n\u003Cp>While terms like “Pure Function” and “Immutability” are useful labels for programming concepts reflecting this mathematical ideal, be cautious with jargon like “Referential Transparency.” Though frequently used in FP circles, its precise meaning and utility compared to simply discussing “purity” are debated. Furthermore, its connection to origins in logic can sometimes be obscured in programming contexts. The focus should remain on the underlying principles of predictable, testable, mathematical-style computation, rather than getting lost in the terminology itself.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"an-antithesis-to-imperative-programming\">An Antithesis to Imperative Programming\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#an-antithesis-to-imperative-programming\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “An Antithesis to Imperative Programming”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>So, if these properties are often taken for granted in mathematics, why \u003Cem>do\u003C/em> these terms feature so prominently in FP discussions? A key reason is that they serve as an \u003Cstrong>antithesis\u003C/strong> to the concepts prevalent in \u003Cstrong>Imperative Programming\u003C/strong>, which often \u003Cem>deviates\u003C/em> from these mathematical norms.\u003C/p>\n\u003Cp>Most programmers first learn imperative or object-oriented styles. These paradigms typically focus on sequences of commands that modify the program’s state (mutable variables, object properties changing over time). This forms a “common sense” understanding where data changing in place and functions having broad effects (side effects) are normal and expected.\u003C/p>\n\u003Cp>Functional programming offers a different paradigm, rooted more closely in mathematical function evaluation. Terms like “Immutability” (unchangeable data) or “Pure Function” (no side effects) gain their significance precisely because they \u003Cstrong>directly challenge\u003C/strong> these common imperative assumptions. They highlight what FP \u003Cem>avoids\u003C/em> (in-place mutation, uncontrolled side effects) or \u003Cem>manages differently\u003C/em> (e.g., creating new data instead of modifying).\u003C/p>\n\u003Cp>Therefore, learning FP often involves \u003Cstrong>unlearning\u003C/strong> the imperative defaults. Terms like ‘Immutability’ or ‘Pure Function’ act as strong signposts for this necessary shift in perspective. They are, in essence, \u003Cstrong>relative contrast terms\u003C/strong>, primarily meaningful when compared against the mutable state and side effects common in imperative styles.\u003C/p>\n\u003Cp>The FP terminology arises largely because the imperative tradition introduced computational concepts that \u003Cstrong>deviate\u003C/strong> from mathematical purity. This made it necessary to \u003Cstrong>re-emphasize\u003C/strong> these desirable mathematical properties using explicit labels, bringing focus back to foundational principles in a computational setting.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"this-books-stance-avoiding-dependence-on-jargon\">This Book’s Stance: Avoiding Dependence on Jargon\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#this-books-stance-avoiding-dependence-on-jargon\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “This Book’s Stance: Avoiding Dependence on Jargon”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>You might notice that this book, unlike many other FP tutorials or texts, deliberately avoids heavy reliance on the five terms listed above (Pure Function, Side Effect, Immutability, Referential Transparency). We adopt this distinct approach because we believe that depending on this specific jargon to \u003Cem>explain\u003C/em> functional programming is fundamentally flawed.\u003C/p>\n\u003Cp>Why? As we have emphasized throughout, \u003Cstrong>functional programming \u003Cem>is\u003C/em> mathematics\u003C/strong> applied to computation. Explaining FP through its mathematical foundations – focusing on expressions, values, types, and function transformations – is both necessary and sufficient.\u003C/p>\n\u003Cp>These specialized terms often lack direct mathematical counterparts. Introducing them is not only unnecessary but frequently serves to confuse rather than clarify, especially for learners.\u003C/p>\n\u003Cp>This book aims to build understanding directly from mathematical and foundational programming principles, like those familiar from JavaScript. Therefore, we minimize reliance on terminology that exists primarily in relation to the imperative paradigm we are moving beyond.\u003C/p>",{"headings":366,"localImagePaths":382,"remoteImagePaths":383,"frontmatter":384,"imagePaths":385},[367,370,373,376,379],{"depth":182,"slug":368,"text":369},"key-terms-often-encountered-in-fp","Key Terms Often Encountered in FP",{"depth":182,"slug":371,"text":372},"the-challenge-why-these-terms-can-be-confusing","The Challenge: Why These Terms Can Be Confusing",{"depth":182,"slug":374,"text":375},"why-this-terminology-isnt-common-in-mathematics","Why This Terminology Isn’t Common in Mathematics",{"depth":182,"slug":377,"text":378},"an-antithesis-to-imperative-programming","An Antithesis to Imperative Programming",{"depth":182,"slug":380,"text":381},"this-books-stance-avoiding-dependence-on-jargon","This Book’s Stance: Avoiding Dependence on Jargon",[],[],{"title":355,"description":356},[],"en/book/unit-1/section-4/0-binary-operation",{"id":386,"data":388,"body":394,"filePath":395,"digest":396,"rendered":397},{"title":389,"description":390,"editUrl":16,"head":391,"template":18,"sidebar":392,"pagefind":16,"draft":20},"Binary Operations and the Pipeline Operator","We've seen how functional pipelines connect functions and resemble mathematical expressions. Let's now look at the underlying structure by examining binary operations and how the pipeline operator (|>) fits into this picture.",[],{"hidden":20,"attrs":393},{},"We've seen how functional pipelines connect functions and resemble mathematical expressions. Let's now look at the underlying structure by examining **binary operations** and how the pipeline operator (`|>`) fits into this picture.\n\n## What are Binary Operations?\n\nA **binary operation** is a fundamental concept in mathematics and programming. It's simply a rule that combines **two** inputs (called **operands**) using a specific **operator** to produce a single output.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744580262004.png)\n\n-   Arithmetic operations are **binary operations** (they take two inputs).\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744527199206.png)\n-   Symbols like `+` and `*` are **binary operators**.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744527228018.png)\n\n## The Pipeline Operator (`|>`): A Binary Operation with Functions\n\nNow, let's look at the F# pipeline operator (`|>`) again:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet double x = x * 2\nlet result = 5 |> double // result is 10\n```\n\nCan we view the expression `5 |> double` as a binary operation? Let's examine its parts:\n\n-   Operand 1: `5` \n    \n-   Operator: `|>`\n    \n-   Operand 2: `double` (A function)\n\nYes! The pipeline operator `|>` acts as a **binary operator**. What's unique here is that its **second operand is a function value**.\n\nThis is possible precisely because, as we learned in the previous chapter, **functions are first-class values** in F#. They can be treated like data and used as operands in operations like the pipeline.\n\nThe `Value |> Function` structure takes the value as the first operand and the function as the second operand. It applies the function to the value and produces the function's output.\n\nThis allows us to chain these operations together seamlessly:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\n`5 |> double |> add1 |> double = 22`\n\n```fsharp\nlet add1 x = x + 1\n// Value |> Function --> Value |> Function --> Value |> Function --> Final Value\nlet result = 5 |> double |> add1 |> double // result is 22\n```\n\nEach `|>` step applies this binary operation, taking the result from the left as the first operand for the next step.\n\n## Summary\n\n-   A **binary operation** combines two operands with an operator to produce a result (e.g., `5 + 3`).\n    \n-   The pipeline operator (`|>`) acts as a binary operation where the structure is `Value |> Function`.\n    \n-   This is enabled by **first-class functions**, allowing functions to be used as operands (data).","src/content/docs/en/book/unit-1/section-4/0-binary-operation.md","4a6e3b4563d9fc9c",{"html":398,"metadata":399},"\u003Cp>We’ve seen how functional pipelines connect functions and resemble mathematical expressions. Let’s now look at the underlying structure by examining \u003Cstrong>binary operations\u003C/strong> and how the pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) fits into this picture.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"what-are-binary-operations\">What are Binary Operations?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#what-are-binary-operations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “What are Binary Operations?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A \u003Cstrong>binary operation\u003C/strong> is a fundamental concept in mathematics and programming. It’s simply a rule that combines \u003Cstrong>two\u003C/strong> inputs (called \u003Cstrong>operands\u003C/strong>) using a specific \u003Cstrong>operator\u003C/strong> to produce a single output.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744580262004.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>Arithmetic operations are \u003Cstrong>binary operations\u003C/strong> (they take two inputs).\n\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744527199206.png\" alt=\"image\">\u003C/li>\n\u003Cli>Symbols like \u003Ccode dir=\"auto\">+\u003C/code> and \u003Ccode dir=\"auto\">*\u003C/code> are \u003Cstrong>binary operators\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744527228018.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-pipeline-operator--a-binary-operation-with-functions\">The Pipeline Operator (\u003Ccode dir=\"auto\">|>\u003C/code>): A Binary Operation with Functions\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-pipeline-operator--a-binary-operation-with-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Pipeline Operator (|>): A Binary Operation with Functions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now, let’s look at the F# pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) again:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 10\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let double x = x * 2let result = 5 |> double // result is 10\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Can we view the expression \u003Ccode dir=\"auto\">5 |> double\u003C/code> as a binary operation? Let’s examine its parts:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Operand 1: \u003Ccode dir=\"auto\">5\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Operator: \u003Ccode dir=\"auto\">|>\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Operand 2: \u003Ccode dir=\"auto\">double\u003C/code> (A function)\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Yes! The pipeline operator \u003Ccode dir=\"auto\">|>\u003C/code> acts as a \u003Cstrong>binary operator\u003C/strong>. What’s unique here is that its \u003Cstrong>second operand is a function value\u003C/strong>.\u003C/p>\n\u003Cp>This is possible precisely because, as we learned in the previous chapter, \u003Cstrong>functions are first-class values\u003C/strong> in F#. They can be treated like data and used as operands in operations like the pipeline.\u003C/p>\n\u003Cp>The \u003Ccode dir=\"auto\">Value |> Function\u003C/code> structure takes the value as the first operand and the function as the second operand. It applies the function to the value and produces the function’s output.\u003C/p>\n\u003Cp>This allows us to chain these operations together seamlessly:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">5 |> double |> add1 |> double = 22\u003C/code>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Value |> Function --> Value |> Function --> Value |> Function --> Final Value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let add1 x = x + 1// Value |> Function --> Value |> Function --> Value |> Function --> Final Valuelet result = 5 |> double |> add1 |> double // result is 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Each \u003Ccode dir=\"auto\">|>\u003C/code> step applies this binary operation, taking the result from the left as the first operand for the next step.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>A \u003Cstrong>binary operation\u003C/strong> combines two operands with an operator to produce a result (e.g., \u003Ccode dir=\"auto\">5 + 3\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) acts as a binary operation where the structure is \u003Ccode dir=\"auto\">Value |> Function\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>This is enabled by \u003Cstrong>first-class functions\u003C/strong>, allowing functions to be used as operands (data).\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":400,"localImagePaths":410,"remoteImagePaths":411,"frontmatter":412,"imagePaths":413},[401,404,407],{"depth":182,"slug":402,"text":403},"what-are-binary-operations","What are Binary Operations?",{"depth":182,"slug":405,"text":406},"the-pipeline-operator--a-binary-operation-with-functions","The Pipeline Operator (|>): A Binary Operation with Functions",{"depth":182,"slug":408,"text":409},"summary","Summary",[],[],{"title":389,"description":390},[],"en/book/unit-1/section-2/0-expression",{"id":414,"data":416,"body":422,"filePath":423,"digest":424,"rendered":425},{"title":417,"description":418,"editUrl":16,"head":419,"template":18,"sidebar":420,"pagefind":16,"draft":20},"Pipelines, Expressions, and Functions as Values","In the previous chapter, we saw how functional programming uses pipelines to transform data sequentially. Let's delve deeper into why this approach feels natural and powerful, connecting it to familiar concepts and introducing core functional ideas.",[],{"hidden":20,"attrs":421},{},"In the previous chapter, we saw how functional programming uses pipelines to transform data sequentially. Let's delve deeper into why this approach feels natural and powerful, connecting it to familiar concepts and introducing core functional ideas.\n\n## Pipelines as Expressions: The Arithmetic Connection\n\nLet's revisit our F# pipeline example:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744526390281.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Define helper functions for clarity\nlet double = (*) 2\nlet add1 = (+) 1\n```\n\n```fsharp\nlet result =\n    number\n    |> double // Apply the double function -> 10\n    |> add1   // Apply the add1 function -> 11\n    |> double // Apply the double function again -> 22\n```\n\n```fsharp\nlet result =\n    number\n    |> (*) 2  // Apply the double function -> 10\n    |> (+) 1  // Apply the add1 function -> 11\n    |> (*) 2  // Apply the double function again -> 22\n```\n\nThis pipeline looks remarkably similar to how we'd write the calculation in standard mathematics:\n\n`((5 * 2) + 1) * 2 = 22`\n\nBoth the F# pipeline and the mathematical formula share key characteristics:\n\n-   They start with an input value (`5`).\n    \n-   They apply a sequence of operations (`* 2`, `+ 1`, `* 2`).\n    \n-   They produce a single output value (`22`).\n    \n-   Crucially, both are self-contained **expressions** that evaluate to a value, rather than a series of statements that modify state.\n\nThis connection between functional pipelines and mathematical expressions is fundamental. Functional programming often strives to make code look and behave more like mathematical expressions.\n\n## Expressions, Values, and Data: It's All the Same!\n\nLet's look closer at the result of our calculations. The arithmetic expression `((5 * 2) + 1) * 2` equals `22`. The F# pipeline `5 |> double |> add1 |> double` also evaluates to `22`. What _is_ this `22`?\n\n**Values in Mathematics**\n\nIn basic math, numbers like `5` or `22` represent specific quantities. We call them **values**. An **expression**, like `((5 * 2) + 1) * 2`, is something that can be calculated, or _evaluated_, to produce a single **value** (`22`). Think of expressions as recipes for getting values.\n\n**Data and Values in Programming**\n\nIn programming, we work with information, generally called **Data**. Specific pieces of information that a program can manipulate – like the number `22`, the text `\"Hello\"`, or the boolean `true` – are called **Values**. A value is a concrete piece of data.\n\n**The Bridge: Math Values == Programming Values/Data**\n\nHere's the key insight: The **value** (`22`) you get from evaluating a mathematical **expression** is _exactly the same kind of thing_ as a **Value** (which is Data) in programming.\n\n-   The number `5` on a math worksheet represents the same concept as the `5` in our code – it's a value, a piece of data.\n    \n-   The result `22` from the arithmetic expression is the same value/data as the result `22` from the F# expression. The way we calculate it differs (math formula vs. code pipeline), but the resulting value is identical.\n\n**Connecting to School Math**\n\nThe math we learn early on (arithmetic, algebra) is all about applying operations (in expressions) to values (numbers) to get new values. Functional programming builds directly on this familiar foundation. It focuses on constructing programs by combining **expressions** that operate on and produce **values (data)**. The \"Data\" and \"Values\" in programming are concrete representations of the same abstract values you've worked with in math.\n\n**Summary & Next Step**\n\nSo, both mathematical expressions and functional pipelines are primarily concerned with evaluating to **values** (data). This focus on expressions and values is central to FP.\n\nNow, a fascinating question arises: can _functions themselves_ be treated as values in programming? That's exactly what we'll explore next when we discuss First-Class Functions.","src/content/docs/en/book/unit-1/section-2/0-expression.md","2b9e9eb4c2a8be9f",{"html":426,"metadata":427},"\u003Cp>In the previous chapter, we saw how functional programming uses pipelines to transform data sequentially. Let’s delve deeper into why this approach feels natural and powerful, connecting it to familiar concepts and introducing core functional ideas.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"pipelines-as-expressions-the-arithmetic-connection\">Pipelines as Expressions: The Arithmetic Connection\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#pipelines-as-expressions-the-arithmetic-connection\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Pipelines as Expressions: The Arithmetic Connection”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s revisit our F# pipeline example:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744526390281.png\" alt=\"image\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define helper functions for clarity\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define helper functions for claritylet double = (*) 2let add1 = (+) 1\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function -> 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the add1 function -> 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function again -> 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let result =    number    |> double // Apply the double function -> 10    |> add1   // Apply the add1 function -> 11    |> double // Apply the double function again -> 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function -> 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the add1 function -> 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function again -> 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let result =    number    |> (*) 2  // Apply the double function -> 10    |> (+) 1  // Apply the add1 function -> 11    |> (*) 2  // Apply the double function again -> 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This pipeline looks remarkably similar to how we’d write the calculation in standard mathematics:\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">((5 * 2) + 1) * 2 = 22\u003C/code>\u003C/p>\n\u003Cp>Both the F# pipeline and the mathematical formula share key characteristics:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>They start with an input value (\u003Ccode dir=\"auto\">5\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>They apply a sequence of operations (\u003Ccode dir=\"auto\">* 2\u003C/code>, \u003Ccode dir=\"auto\">+ 1\u003C/code>, \u003Ccode dir=\"auto\">* 2\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>They produce a single output value (\u003Ccode dir=\"auto\">22\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Crucially, both are self-contained \u003Cstrong>expressions\u003C/strong> that evaluate to a value, rather than a series of statements that modify state.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>This connection between functional pipelines and mathematical expressions is fundamental. Functional programming often strives to make code look and behave more like mathematical expressions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"expressions-values-and-data-its-all-the-same\">Expressions, Values, and Data: It’s All the Same!\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#expressions-values-and-data-its-all-the-same\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Expressions, Values, and Data: It’s All the Same!”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s look closer at the result of our calculations. The arithmetic expression \u003Ccode dir=\"auto\">((5 * 2) + 1) * 2\u003C/code> equals \u003Ccode dir=\"auto\">22\u003C/code>. The F# pipeline \u003Ccode dir=\"auto\">5 |> double |> add1 |> double\u003C/code> also evaluates to \u003Ccode dir=\"auto\">22\u003C/code>. What \u003Cem>is\u003C/em> this \u003Ccode dir=\"auto\">22\u003C/code>?\u003C/p>\n\u003Cp>\u003Cstrong>Values in Mathematics\u003C/strong>\u003C/p>\n\u003Cp>In basic math, numbers like \u003Ccode dir=\"auto\">5\u003C/code> or \u003Ccode dir=\"auto\">22\u003C/code> represent specific quantities. We call them \u003Cstrong>values\u003C/strong>. An \u003Cstrong>expression\u003C/strong>, like \u003Ccode dir=\"auto\">((5 * 2) + 1) * 2\u003C/code>, is something that can be calculated, or \u003Cem>evaluated\u003C/em>, to produce a single \u003Cstrong>value\u003C/strong> (\u003Ccode dir=\"auto\">22\u003C/code>). Think of expressions as recipes for getting values.\u003C/p>\n\u003Cp>\u003Cstrong>Data and Values in Programming\u003C/strong>\u003C/p>\n\u003Cp>In programming, we work with information, generally called \u003Cstrong>Data\u003C/strong>. Specific pieces of information that a program can manipulate – like the number \u003Ccode dir=\"auto\">22\u003C/code>, the text \u003Ccode dir=\"auto\">\"Hello\"\u003C/code>, or the boolean \u003Ccode dir=\"auto\">true\u003C/code> – are called \u003Cstrong>Values\u003C/strong>. A value is a concrete piece of data.\u003C/p>\n\u003Cp>\u003Cstrong>The Bridge: Math Values == Programming Values/Data\u003C/strong>\u003C/p>\n\u003Cp>Here’s the key insight: The \u003Cstrong>value\u003C/strong> (\u003Ccode dir=\"auto\">22\u003C/code>) you get from evaluating a mathematical \u003Cstrong>expression\u003C/strong> is \u003Cem>exactly the same kind of thing\u003C/em> as a \u003Cstrong>Value\u003C/strong> (which is Data) in programming.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The number \u003Ccode dir=\"auto\">5\u003C/code> on a math worksheet represents the same concept as the \u003Ccode dir=\"auto\">5\u003C/code> in our code – it’s a value, a piece of data.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The result \u003Ccode dir=\"auto\">22\u003C/code> from the arithmetic expression is the same value/data as the result \u003Ccode dir=\"auto\">22\u003C/code> from the F# expression. The way we calculate it differs (math formula vs. code pipeline), but the resulting value is identical.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Connecting to School Math\u003C/strong>\u003C/p>\n\u003Cp>The math we learn early on (arithmetic, algebra) is all about applying operations (in expressions) to values (numbers) to get new values. Functional programming builds directly on this familiar foundation. It focuses on constructing programs by combining \u003Cstrong>expressions\u003C/strong> that operate on and produce \u003Cstrong>values (data)\u003C/strong>. The “Data” and “Values” in programming are concrete representations of the same abstract values you’ve worked with in math.\u003C/p>\n\u003Cp>\u003Cstrong>Summary &#x26; Next Step\u003C/strong>\u003C/p>\n\u003Cp>So, both mathematical expressions and functional pipelines are primarily concerned with evaluating to \u003Cstrong>values\u003C/strong> (data). This focus on expressions and values is central to FP.\u003C/p>\n\u003Cp>Now, a fascinating question arises: can \u003Cem>functions themselves\u003C/em> be treated as values in programming? That’s exactly what we’ll explore next when we discuss First-Class Functions.\u003C/p>",{"headings":428,"localImagePaths":435,"remoteImagePaths":436,"frontmatter":437,"imagePaths":438},[429,432],{"depth":182,"slug":430,"text":431},"pipelines-as-expressions-the-arithmetic-connection","Pipelines as Expressions: The Arithmetic Connection",{"depth":182,"slug":433,"text":434},"expressions-values-and-data-its-all-the-same","Expressions, Values, and Data: It’s All the Same!",[],[],{"title":417,"description":418},[],"en/book/unit-1/section-3/0-types",{"id":439,"data":441,"body":447,"filePath":448,"digest":449,"rendered":450},{"title":442,"description":443,"editUrl":16,"head":444,"template":18,"sidebar":445,"pagefind":16,"draft":20},"Types: Ensuring Smooth Pipelines","We've explored how functional programming builds computations using pipelines and expressions, treating functions as first-class values. Now, let's introduce another crucial concept that ensures these pipelines work reliably: Types.",[],{"hidden":20,"attrs":446},{},"We've explored how functional programming builds computations using **pipelines** and **expressions**, treating **functions as first-class values**. Now, let's introduce another crucial concept that ensures these pipelines work reliably: **Types**.\n\n## The Pipeline Requirement: Matching Inputs and Outputs\n\nRecall our pipeline example:\n\n![Image of F# pipeline calculation](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet double x = x * 2\nlet add1 x = x + 1\n\nlet result =\n    5         // Input is an integer\n    |> double // double must accept an integer, returns an integer (10)\n    |> add1   // add1 must accept an integer, returns an integer (11)\n    |> double // double must accept an integer, returns an integer (22)\n```\n\nFor data to flow smoothly through this pipeline without errors, a fundamental requirement must be met: **the output of one function must be compatible with the input of the next function.**\n\n-   `double` takes a number and produces a number.\n    \n-   `add1` must accept the _kind_ of number `double` produced, and it also produces a number.\n    \n-   The second `double` must accept the _kind_ of number `add1` produced.\n\nThis concept of \"what kind of data\" a function accepts or returns is formalized by **Types**.\n\n## What are Types?\n\nA **Type** is essentially a **classification of data**. It tells the compiler and the programmer what _kind_ of value a variable can hold or what _kind_ of input a function expects and output it produces.\n\nCommon examples include:\n\n-   `int`: Integer numbers (e.g., `5`, `22`)\n    \n-   `string`: Text data (e.g., `\"Hello\"`)\n    \n-   `bool`: Boolean values (`true`, `false`)\n    \n-   `int -> int`: A function that takes an `int` as input and returns an `int` as output (like our `double` and `add1` functions).\n    \n-   `'a -> 'a`: A generic function that takes a value of _any_ type `'a` and returns a value of that same type (like the `id` function).\n\nTypes are essential for **program correctness**. They prevent errors by ensuring that operations are only performed on compatible data. For instance, you can't meaningfully apply the `double` function (which expects an `int`) to the string `\"hello\"`. The type system catches such mistakes, often before you even run the program.\n\nIn the context of our pipeline, types ensure the \"pipes fit together\" – the output type of `double` (`int`) fits the input type of `add1` (`int`), and the output type of `add1` (`int`) fits the input type of the next `double` (`int`).\n\n## Type Inference: The Compiler's Superpower\n\nKnowing the types of functions is crucial for building correct pipelines. So, how do we know the type of `double` is `int -> int`?\n\nIn many statically-typed languages (like Java or C++), you often have to explicitly declare the types of functions and variables. However, languages like F# and Haskell feature powerful **Type Inference**.\n\n**Type Inference** is the ability of the compiler to automatically deduce the types of expressions, variables, and functions based on how they are used, _without_ requiring explicit type annotations from the programmer.\n\n-   When the F# compiler sees `let double x = x * 2`, it knows that the `(*)` operator typically works on `int`s by default, so it infers that `x` must be an `int` and the function returns an `int`. Thus, `double` is inferred to have the type `int -> int`.\n    \n-   Similarly, `add1` is inferred as `int -> int`.\n    \n-   For `let result = 5 |> double |> add1 |> double`, the compiler knows `5` is `int`, `double` returns `int`, `add1` returns `int`, and the final `double` returns `int`, so it infers that `result` must be an `int`.\n\n**The Role of IDEs (like VSCode):**\n\nThis powerful type inference becomes incredibly helpful when combined with modern IDEs.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet double x = x * 2\nlet add1 x = x + 1\n\nlet result =\n    5\n    |> double\n    |> add1\n    |> double \n```\n\n#### VSCode IDE Screenshot\n\n![VSCode IDE Screenshot showing type inference](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744619152251.png)\n\nThe IDE leverages the compiler's inference ability to **automatically display the inferred types** directly in your code.\n\nEven without explicit type annotations, the IDE (using the compiler's information) shows you the inferred types for  `double` ,  `add1` , and the final  `result` . This helps you understand the data flowing through your pipelines and catches type errors instantly. This automatic, reliable type information provided by the compiler and visualized by the IDE is arguably a cornerstone of productive functional programming – it ensures the pipeline connections are sound.\n\n## Contrast with Manual Typing (e.g., TypeScript)\n\nFor example, in **TypeScript**, while the compiler _does_ perform some local inference, programmers often need to provide explicit type annotations for function arguments and return types to achieve full type safety, especially for complex scenarios.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg\">\n\n```typescript\n// Manual type annotation often needed in TypeScript\ntype DoubleFunc = (a: number) => number;\nlet double: DoubleFunc = a => a * 2;\n```\n\nThis level of powerful, whole-program type inference is characteristic of languages in the ML family (like F#, OCaml, Haskell) but is less common elsewhere.\n\nWhile AI tools can assist significantly with TypeScript typing nowadays, it still often involves more manual effort and relies on the programmer's understanding (or the AI's potentially non-deterministic suggestion). An incorrect manual annotation can lead to runtime errors or misleading code. The rigorous inference by compilers like F#'s provides a stronger guarantee directly from the code's structure.\n\n## Summary\n\n-   **Types** classify data and define the expected inputs and outputs of functions.\n    \n-   They are crucial for ensuring data flows correctly through **pipelines**, matching output types to subsequent input types.\n    \n-   **Type Inference**, especially when combined with IDE support (like in F# with VSCode), automatically determines and displays types, providing strong guarantees and developer assistance without requiring extensive manual annotations.\n    \n-   This powerful inference is a key feature supporting the functional programming style, contrasting with languages where type specification is often more manual.","src/content/docs/en/book/unit-1/section-3/0-types.md","d9738c3a6964da6d",{"html":451,"metadata":452},"\u003Cp>We’ve explored how functional programming builds computations using \u003Cstrong>pipelines\u003C/strong> and \u003Cstrong>expressions\u003C/strong>, treating \u003Cstrong>functions as first-class values\u003C/strong>. Now, let’s introduce another crucial concept that ensures these pipelines work reliably: \u003Cstrong>Types\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-pipeline-requirement-matching-inputs-and-outputs\">The Pipeline Requirement: Matching Inputs and Outputs\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-pipeline-requirement-matching-inputs-and-outputs\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Pipeline Requirement: Matching Inputs and Outputs”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Recall our pipeline example:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"Image of F# pipeline calculation\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">         \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Input is an integer\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// double must accept an integer, returns an integer (10)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// add1 must accept an integer, returns an integer (11)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// double must accept an integer, returns an integer (22)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let double x = x * 2let add1 x = x + 1let result =    5         // Input is an integer    |> double // double must accept an integer, returns an integer (10)    |> add1   // add1 must accept an integer, returns an integer (11)    |> double // double must accept an integer, returns an integer (22)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>For data to flow smoothly through this pipeline without errors, a fundamental requirement must be met: \u003Cstrong>the output of one function must be compatible with the input of the next function.\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">double\u003C/code> takes a number and produces a number.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">add1\u003C/code> must accept the \u003Cem>kind\u003C/em> of number \u003Ccode dir=\"auto\">double\u003C/code> produced, and it also produces a number.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The second \u003Ccode dir=\"auto\">double\u003C/code> must accept the \u003Cem>kind\u003C/em> of number \u003Ccode dir=\"auto\">add1\u003C/code> produced.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>This concept of “what kind of data” a function accepts or returns is formalized by \u003Cstrong>Types\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"what-are-types\">What are Types?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#what-are-types\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “What are Types?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A \u003Cstrong>Type\u003C/strong> is essentially a \u003Cstrong>classification of data\u003C/strong>. It tells the compiler and the programmer what \u003Cem>kind\u003C/em> of value a variable can hold or what \u003Cem>kind\u003C/em> of input a function expects and output it produces.\u003C/p>\n\u003Cp>Common examples include:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">int\u003C/code>: Integer numbers (e.g., \u003Ccode dir=\"auto\">5\u003C/code>, \u003Ccode dir=\"auto\">22\u003C/code>)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">string\u003C/code>: Text data (e.g., \u003Ccode dir=\"auto\">\"Hello\"\u003C/code>)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">bool\u003C/code>: Boolean values (\u003Ccode dir=\"auto\">true\u003C/code>, \u003Ccode dir=\"auto\">false\u003C/code>)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">int -> int\u003C/code>: A function that takes an \u003Ccode dir=\"auto\">int\u003C/code> as input and returns an \u003Ccode dir=\"auto\">int\u003C/code> as output (like our \u003Ccode dir=\"auto\">double\u003C/code> and \u003Ccode dir=\"auto\">add1\u003C/code> functions).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode dir=\"auto\">'a -> 'a\u003C/code>: A generic function that takes a value of \u003Cem>any\u003C/em> type \u003Ccode dir=\"auto\">'a\u003C/code> and returns a value of that same type (like the \u003Ccode dir=\"auto\">id\u003C/code> function).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Types are essential for \u003Cstrong>program correctness\u003C/strong>. They prevent errors by ensuring that operations are only performed on compatible data. For instance, you can’t meaningfully apply the \u003Ccode dir=\"auto\">double\u003C/code> function (which expects an \u003Ccode dir=\"auto\">int\u003C/code>) to the string \u003Ccode dir=\"auto\">\"hello\"\u003C/code>. The type system catches such mistakes, often before you even run the program.\u003C/p>\n\u003Cp>In the context of our pipeline, types ensure the “pipes fit together” – the output type of \u003Ccode dir=\"auto\">double\u003C/code> (\u003Ccode dir=\"auto\">int\u003C/code>) fits the input type of \u003Ccode dir=\"auto\">add1\u003C/code> (\u003Ccode dir=\"auto\">int\u003C/code>), and the output type of \u003Ccode dir=\"auto\">add1\u003C/code> (\u003Ccode dir=\"auto\">int\u003C/code>) fits the input type of the next \u003Ccode dir=\"auto\">double\u003C/code> (\u003Ccode dir=\"auto\">int\u003C/code>).\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"type-inference-the-compilers-superpower\">Type Inference: The Compiler’s Superpower\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#type-inference-the-compilers-superpower\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Type Inference: The Compiler’s Superpower”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Knowing the types of functions is crucial for building correct pipelines. So, how do we know the type of \u003Ccode dir=\"auto\">double\u003C/code> is \u003Ccode dir=\"auto\">int -> int\u003C/code>?\u003C/p>\n\u003Cp>In many statically-typed languages (like Java or C++), you often have to explicitly declare the types of functions and variables. However, languages like F# and Haskell feature powerful \u003Cstrong>Type Inference\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cstrong>Type Inference\u003C/strong> is the ability of the compiler to automatically deduce the types of expressions, variables, and functions based on how they are used, \u003Cem>without\u003C/em> requiring explicit type annotations from the programmer.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>When the F# compiler sees \u003Ccode dir=\"auto\">let double x = x * 2\u003C/code>, it knows that the \u003Ccode dir=\"auto\">(*)\u003C/code> operator typically works on \u003Ccode dir=\"auto\">int\u003C/code>s by default, so it infers that \u003Ccode dir=\"auto\">x\u003C/code> must be an \u003Ccode dir=\"auto\">int\u003C/code> and the function returns an \u003Ccode dir=\"auto\">int\u003C/code>. Thus, \u003Ccode dir=\"auto\">double\u003C/code> is inferred to have the type \u003Ccode dir=\"auto\">int -> int\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Similarly, \u003Ccode dir=\"auto\">add1\u003C/code> is inferred as \u003Ccode dir=\"auto\">int -> int\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>For \u003Ccode dir=\"auto\">let result = 5 |> double |> add1 |> double\u003C/code>, the compiler knows \u003Ccode dir=\"auto\">5\u003C/code> is \u003Ccode dir=\"auto\">int\u003C/code>, \u003Ccode dir=\"auto\">double\u003C/code> returns \u003Ccode dir=\"auto\">int\u003C/code>, \u003Ccode dir=\"auto\">add1\u003C/code> returns \u003Ccode dir=\"auto\">int\u003C/code>, and the final \u003Ccode dir=\"auto\">double\u003C/code> returns \u003Ccode dir=\"auto\">int\u003C/code>, so it infers that \u003Ccode dir=\"auto\">result\u003C/code> must be an \u003Ccode dir=\"auto\">int\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>The Role of IDEs (like VSCode):\u003C/strong>\u003C/p>\n\u003Cp>This powerful type inference becomes incredibly helpful when combined with modern IDEs.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let double x = x * 2let add1 x = x + 1let result =    5    |> double    |> add1    |> double\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h4\">\u003Ch4 id=\"vscode-ide-screenshot\">VSCode IDE Screenshot\u003C/h4>\u003Ca class=\"sl-anchor-link\" href=\"#vscode-ide-screenshot\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “VSCode IDE Screenshot”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744619152251.png\" alt=\"VSCode IDE Screenshot showing type inference\">\u003C/p>\n\u003Cp>The IDE leverages the compiler’s inference ability to \u003Cstrong>automatically display the inferred types\u003C/strong> directly in your code.\u003C/p>\n\u003Cp>Even without explicit type annotations, the IDE (using the compiler’s information) shows you the inferred types for  \u003Ccode dir=\"auto\">double\u003C/code> ,  \u003Ccode dir=\"auto\">add1\u003C/code> , and the final  \u003Ccode dir=\"auto\">result\u003C/code> . This helps you understand the data flowing through your pipelines and catches type errors instantly. This automatic, reliable type information provided by the compiler and visualized by the IDE is arguably a cornerstone of productive functional programming – it ensures the pipeline connections are sound.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"contrast-with-manual-typing-eg-typescript\">Contrast with Manual Typing (e.g., TypeScript)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#contrast-with-manual-typing-eg-typescript\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Contrast with Manual Typing (e.g., TypeScript)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For example, in \u003Cstrong>TypeScript\u003C/strong>, while the compiler \u003Cem>does\u003C/em> perform some local inference, programmers often need to provide explicit type annotations for function arguments and return types to achieve full type safety, especially for complex scenarios.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"typescript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Manual type annotation often needed in TypeScript\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> DoubleFunc \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> \u003C/span>\u003Cspan style=\"--0:#FFCB8B;--1:#111111\">DoubleFunc\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> => \u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> * \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Manual type annotation often needed in TypeScripttype DoubleFunc = (a: number) => number;let double: DoubleFunc = a => a * 2;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This level of powerful, whole-program type inference is characteristic of languages in the ML family (like F#, OCaml, Haskell) but is less common elsewhere.\u003C/p>\n\u003Cp>While AI tools can assist significantly with TypeScript typing nowadays, it still often involves more manual effort and relies on the programmer’s understanding (or the AI’s potentially non-deterministic suggestion). An incorrect manual annotation can lead to runtime errors or misleading code. The rigorous inference by compilers like F#‘s provides a stronger guarantee directly from the code’s structure.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Types\u003C/strong> classify data and define the expected inputs and outputs of functions.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>They are crucial for ensuring data flows correctly through \u003Cstrong>pipelines\u003C/strong>, matching output types to subsequent input types.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Type Inference\u003C/strong>, especially when combined with IDE support (like in F# with VSCode), automatically determines and displays types, providing strong guarantees and developer assistance without requiring extensive manual annotations.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>This powerful inference is a key feature supporting the functional programming style, contrasting with languages where type specification is often more manual.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":453,"localImagePaths":471,"remoteImagePaths":472,"frontmatter":473,"imagePaths":474},[454,457,460,463,467,470],{"depth":182,"slug":455,"text":456},"the-pipeline-requirement-matching-inputs-and-outputs","The Pipeline Requirement: Matching Inputs and Outputs",{"depth":182,"slug":458,"text":459},"what-are-types","What are Types?",{"depth":182,"slug":461,"text":462},"type-inference-the-compilers-superpower","Type Inference: The Compiler’s Superpower",{"depth":464,"slug":465,"text":466},4,"vscode-ide-screenshot","VSCode IDE Screenshot",{"depth":182,"slug":468,"text":469},"contrast-with-manual-typing-eg-typescript","Contrast with Manual Typing (e.g., TypeScript)",{"depth":182,"slug":408,"text":409},[],[],{"title":442,"description":443},[],"en/book/unit-1/section-1/2-selection",{"id":475,"data":477,"body":483,"filePath":484,"digest":485,"rendered":486},{"title":478,"description":479,"editUrl":16,"head":480,"template":18,"sidebar":481,"pagefind":16,"draft":20},"2. Selection","image",[],{"hidden":20,"attrs":482},{},"![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474652773.png)\n\n**Selection** (also known as branching or conditional logic) is a fundamental concept in programming. It allows programs to make decisions and execute different code paths based on whether certain conditions are true or false. Let's compare how imperative and functional styles typically handle selection, using a simple example of assigning a grade based on a score.\n\n## The Imperative Way: `if/else` Statements\n\nIn imperative programming, selection is commonly handled using `if`, `else if`, and `else` **statements**. These statements control which block of code (a sequence of commands) is executed. Often, this involves assigning a value to a variable within the chosen block.\n\nHere's a JavaScript example:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\n// Function to determine a letter grade based on a numeric score\nfunction getGrade(score) {\n  let grade; // Declare a variable to hold the resulting grade\n\n  // Use if/else if/else statements to check conditions sequentially\n  if (score >= 90) {\n    grade = 'A'; // Assign 'A' if score is 90 or above\n  } else if (score >= 80) {\n    grade = 'B'; // Assign 'B' if score is 80 or above (and not >= 90)\n  } else if (score >= 70) {\n    grade = 'C'; // Assign 'C' if score is 70 or above (and not >= 80)\n  } else {\n    grade = 'F'; // Assign 'F' for all other scores\n  }\n\n  // Return the final value assigned to the grade variable\n  return grade;\n}\n\nconsole.log(`Score 92 gets grade: ${getGrade(92)}`); // Output: Score 92 gets grade: A\nconsole.log(`Score 75 gets grade: ${getGrade(75)}`); // Output: Score 75 gets grade: C\n```\n\nIn this imperative style:\n\n-   We use statements (`if`, `else if`, `else`) to direct the flow.\n    \n-   We use a mutable variable (`grade`) which gets assigned a value inside the appropriate block.\n    \n-   The function executes a sequence of checks and assignments.\n\n## The Functional Way: Expressions and Pattern Matching\n\nFunctional programming often favors using **expressions** that evaluate directly to a value, rather than statements that perform actions. For selection, this can involve `if-then-else` _expressions_ or, more powerfully in languages like F#, **pattern matching** (`match` expressions).\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744476075754.png)\n\nHere's how the same logic might look in F#:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Function to determine grade based on score using a match expression\nlet getGrade score =\n    match score with // Match the input 'score' against patterns/conditions\n    | s when s >= 90 -> 'A' // If score >= 90, the expression evaluates to 'A'\n    | s when s >= 80 -> 'B' // If score >= 80, it evaluates to 'B'\n    | s when s >= 70 -> 'C' // If score >= 70, it evaluates to 'C'\n    | _ -> 'F'              // Otherwise (default case), it evaluates to 'F'\n\n// The entire 'match' expression returns a single value ('A', 'B', 'C', or 'F')\n\nprintfn \"Score 92 gets grade: %c\" (getGrade 92) // Output: Score 92 gets grade: A\nprintfn \"Score 75 gets grade: %c\" (getGrade 75) // Output: Score 75 gets grade: C\n```\n\nIn this functional style (using `match`):\n\n-   The `match` construct is a single **expression** that evaluates to a result.\n    \n-   It checks the input (`score`) against several cases (`|`). The `when` keyword adds conditions (guards).\n    \n-   The code associated with the first matching case (`-> 'A'`, `-> 'B'`, etc.) provides the result of the entire `match` expression.\n    \n-   There's no need for intermediate mutable variables like `grade` for assignment; the expression _is_ the value. This resembles mathematical case definitions.\n\nAlternatively, F# also supports `if-then-else` as an _expression_ that evaluates to a value:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Function to determine grade using if-then-else expressions\nlet getGrade score =\n    if score >= 90 then 'A'\n    else if score >= 80 then 'B'\n    else if score >= 70 then 'C'\n    else 'F' // The final 'else' provides the value for the last condition\n```\n\nNotice that, similar to `match`, the entire `if-then-else` structure here is a single expression. Each branch (`then` or `else`) provides a value, and the value from the executed branch becomes the result of the whole expression. Again, no intermediate mutable variable is needed.\n\n## Summary\n\nBoth styles achieve conditional logic.\n\n-   The **imperative style** typically uses control flow **statements** (`if/else`) to execute different blocks of code, often involving assignments to mutable variables.\n    \n-   The **functional style** often uses conditional **expressions** (like F#'s `match` or `if-then-else expressions`) that directly evaluate to a result based on the input, avoiding intermediate assignments and aligning closely with mathematical definitions.","src/content/docs/en/book/unit-1/section-1/2-selection.md","73c4c58ff20a6956",{"html":487,"metadata":488},"\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474652773.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cstrong>Selection\u003C/strong> (also known as branching or conditional logic) is a fundamental concept in programming. It allows programs to make decisions and execute different code paths based on whether certain conditions are true or false. Let’s compare how imperative and functional styles typically handle selection, using a simple example of assigning a grade based on a score.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-imperative-way-ifelse-statements\">The Imperative Way: \u003Ccode dir=\"auto\">if/else\u003C/code> Statements\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-imperative-way-ifelse-statements\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Imperative Way: if/else Statements”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In imperative programming, selection is commonly handled using \u003Ccode dir=\"auto\">if\u003C/code>, \u003Ccode dir=\"auto\">else if\u003C/code>, and \u003Ccode dir=\"auto\">else\u003C/code> \u003Cstrong>statements\u003C/strong>. These statements control which block of code (a sequence of commands) is executed. Often, this involves assigning a value to a variable within the chosen block.\u003C/p>\n\u003Cp>Here’s a JavaScript example:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function to determine a letter grade based on a numeric score\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">getGrade\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">score\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">; \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Declare a variable to hold the resulting grade\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use if/else if/else statements to check conditions sequentially\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> (\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">score\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">90\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assign 'A' if score is 90 or above\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">} \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> (\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">score\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">80\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">B\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assign 'B' if score is 80 or above (and not >= 90)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">} \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> (\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">score\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">70\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">C\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assign 'C' if score is 70 or above (and not >= 80)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">} \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">F\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assign 'F' for all other scores\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Return the final value assigned to the grade variable\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">return\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">grade\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">;\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">Score 92 gets grade: \u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">${\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">getGrade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">92\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">)\u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">}\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">); \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Score 92 gets grade: A\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">Score 75 gets grade: \u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">${\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">getGrade\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">75\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">)\u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">}\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">); \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Score 75 gets grade: C\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Function to determine a letter grade based on a numeric scorefunction getGrade(score) {  let grade; // Declare a variable to hold the resulting grade  // Use if/else if/else statements to check conditions sequentially  if (score >= 90) {    grade = &#x27;A&#x27;; // Assign &#x27;A&#x27; if score is 90 or above  } else if (score >= 80) {    grade = &#x27;B&#x27;; // Assign &#x27;B&#x27; if score is 80 or above (and not >= 90)  } else if (score >= 70) {    grade = &#x27;C&#x27;; // Assign &#x27;C&#x27; if score is 70 or above (and not >= 80)  } else {    grade = &#x27;F&#x27;; // Assign &#x27;F&#x27; for all other scores  }  // Return the final value assigned to the grade variable  return grade;}console.log(&#x60;Score 92 gets grade: ${getGrade(92)}&#x60;); // Output: Score 92 gets grade: Aconsole.log(&#x60;Score 75 gets grade: ${getGrade(75)}&#x60;); // Output: Score 75 gets grade: C\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this imperative style:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>We use statements (\u003Ccode dir=\"auto\">if\u003C/code>, \u003Ccode dir=\"auto\">else if\u003C/code>, \u003Ccode dir=\"auto\">else\u003C/code>) to direct the flow.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>We use a mutable variable (\u003Ccode dir=\"auto\">grade\u003C/code>) which gets assigned a value inside the appropriate block.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The function executes a sequence of checks and assignments.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-functional-way-expressions-and-pattern-matching\">The Functional Way: Expressions and Pattern Matching\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-functional-way-expressions-and-pattern-matching\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Functional Way: Expressions and Pattern Matching”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Functional programming often favors using \u003Cstrong>expressions\u003C/strong> that evaluate directly to a value, rather than statements that perform actions. For selection, this can involve \u003Ccode dir=\"auto\">if-then-else\u003C/code> \u003Cem>expressions\u003C/em> or, more powerfully in languages like F#, \u003Cstrong>pattern matching\u003C/strong> (\u003Ccode dir=\"auto\">match\u003C/code> expressions).\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744476075754.png\" alt=\"image\">\u003C/p>\n\u003Cp>Here’s how the same logic might look in F#:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function to determine grade based on score using a match expression\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">getGrade\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">match\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Match the input 'score' against patterns/conditions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">when\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">90\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'A'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If score >= 90, the expression evaluates to 'A'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">when\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">80\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'B'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If score >= 80, it evaluates to 'B'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">when\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">70\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'C'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If score >= 70, it evaluates to 'C'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'F'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Otherwise (default case), it evaluates to 'F'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The entire 'match' expression returns a single value ('A', 'B', 'C', or 'F')\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Score 92 gets grade: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%c\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">getGrade \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">92\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Score 92 gets grade: A\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Score 75 gets grade: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%c\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">getGrade \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">75\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Score 75 gets grade: C\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Function to determine grade based on score using a match expressionlet getGrade score =    match score with // Match the input &#x27;score&#x27; against patterns/conditions    | s when s >= 90 -> &#x27;A&#x27; // If score >= 90, the expression evaluates to &#x27;A&#x27;    | s when s >= 80 -> &#x27;B&#x27; // If score >= 80, it evaluates to &#x27;B&#x27;    | s when s >= 70 -> &#x27;C&#x27; // If score >= 70, it evaluates to &#x27;C&#x27;    | _ -> &#x27;F&#x27;              // Otherwise (default case), it evaluates to &#x27;F&#x27;// The entire &#x27;match&#x27; expression returns a single value (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, or &#x27;F&#x27;)printfn &#x22;Score 92 gets grade: %c&#x22; (getGrade 92) // Output: Score 92 gets grade: Aprintfn &#x22;Score 75 gets grade: %c&#x22; (getGrade 75) // Output: Score 75 gets grade: C\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this functional style (using \u003Ccode dir=\"auto\">match\u003C/code>):\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The \u003Ccode dir=\"auto\">match\u003C/code> construct is a single \u003Cstrong>expression\u003C/strong> that evaluates to a result.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It checks the input (\u003Ccode dir=\"auto\">score\u003C/code>) against several cases (\u003Ccode dir=\"auto\">|\u003C/code>). The \u003Ccode dir=\"auto\">when\u003C/code> keyword adds conditions (guards).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The code associated with the first matching case (\u003Ccode dir=\"auto\">-> 'A'\u003C/code>, \u003Ccode dir=\"auto\">-> 'B'\u003C/code>, etc.) provides the result of the entire \u003Ccode dir=\"auto\">match\u003C/code> expression.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>There’s no need for intermediate mutable variables like \u003Ccode dir=\"auto\">grade\u003C/code> for assignment; the expression \u003Cem>is\u003C/em> the value. This resembles mathematical case definitions.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Alternatively, F# also supports \u003Ccode dir=\"auto\">if-then-else\u003C/code> as an \u003Cem>expression\u003C/em> that evaluates to a value:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function to determine grade using if-then-else expressions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">getGrade\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">90\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'A'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">80\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'B'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">70\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'C'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'F'\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The final 'else' provides the value for the last condition\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Function to determine grade using if-then-else expressionslet getGrade score =    if score >= 90 then &#x27;A&#x27;    else if score >= 80 then &#x27;B&#x27;    else if score >= 70 then &#x27;C&#x27;    else &#x27;F&#x27; // The final &#x27;else&#x27; provides the value for the last condition\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Notice that, similar to \u003Ccode dir=\"auto\">match\u003C/code>, the entire \u003Ccode dir=\"auto\">if-then-else\u003C/code> structure here is a single expression. Each branch (\u003Ccode dir=\"auto\">then\u003C/code> or \u003Ccode dir=\"auto\">else\u003C/code>) provides a value, and the value from the executed branch becomes the result of the whole expression. Again, no intermediate mutable variable is needed.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Both styles achieve conditional logic.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The \u003Cstrong>imperative style\u003C/strong> typically uses control flow \u003Cstrong>statements\u003C/strong> (\u003Ccode dir=\"auto\">if/else\u003C/code>) to execute different blocks of code, often involving assignments to mutable variables.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The \u003Cstrong>functional style\u003C/strong> often uses conditional \u003Cstrong>expressions\u003C/strong> (like F#‘s \u003Ccode dir=\"auto\">match\u003C/code> or \u003Ccode dir=\"auto\">if-then-else expressions\u003C/code>) that directly evaluate to a result based on the input, avoiding intermediate assignments and aligning closely with mathematical definitions.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":489,"localImagePaths":497,"remoteImagePaths":498,"frontmatter":499,"imagePaths":500},[490,493,496],{"depth":182,"slug":491,"text":492},"the-imperative-way-ifelse-statements","The Imperative Way: if/else Statements",{"depth":182,"slug":494,"text":495},"the-functional-way-expressions-and-pattern-matching","The Functional Way: Expressions and Pattern Matching",{"depth":182,"slug":408,"text":409},[],[],{"title":478,"description":479},[],"en/book/unit-1/section-1/1-sequence",{"id":501,"data":503,"body":508,"filePath":509,"digest":510,"rendered":511},{"title":504,"description":479,"editUrl":16,"head":505,"template":18,"sidebar":506,"pagefind":16,"draft":20},"1.  Sequence",[],{"hidden":20,"attrs":507},{},"![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474563390.png)\n\n**Sequence** is the most basic control structure in programming. Instructions are simply executed one after another in the order they appear.\n\nLet's explore how this fundamental concept looks in different programming styles, using a simple calculation: double the number 5, add 1, double the result, and display the final result.\n\n## The Imperative Way: Step-by-Step Commands\n\nIn imperative programming, you typically write a sequence of commands that modify the program's state or produce results step by step. Each command executes in order.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\n// Start with the input number\nconst number = 5;\n\n// Step 1: Double the number\nconst step1Result = number * 2; // step1Result is 10\n\n// Step 2: Add 1 to the result\nconst step2Result = step1Result + 1; // step2Result is 11\n\n// Step 3: Double the result again\nconst result = step2Result * 2; // result is 22\n\n// Display the final result\nconsole.log(`The result is: ${result}`); \n// Output: The result is: 22\n```\n\nHere, each step is performed sequentially, storing intermediate results (`step1Result`, `step2Result`) in variables before the next step.\n\n## The Functional Way: Data Transformation Pipelines\n\nFunctional programming often approaches sequential operations as a **pipeline** of data transformations. Data flows through a series of functions (or operations), where each performs a specific transformation and passes its result to the next.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496636340.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\nLet's rewrite the previous example using F#, which has a built-in  **pipeline operator (`|>`)** :\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Define helper functions for clarity\nlet double x = x * 2\nlet add1 x = x + 1\n\n// Define the input number\nlet number = 5\n\n// Start with the input number and pipe it through transformations\nlet result =\n    number\n    |> double // Apply the double function -> 10\n    |> add1   // Apply the add1 function -> 11\n    |> double // Apply the double function again -> 22\n\n// Display the final result\nprintfn \"The result is: %d\" result \n// Output: The result is: 22\n```\n\nIn this F# code:\n\n-   We define helper functions `double` and `add1` first.\n    \n-   We start with the input `5`.\n    \n-   The `|>` operator pipes `5` into the `double` function, resulting in `10`.\n    \n-   The result `10` is then piped into the `add1` function, resulting in `11`.\n    \n-   The result `11` is piped into the `double` function again, resulting in `22`.\n    \n-   The final result `22` is assigned to the `result` variable.\n    \n-   Finally, `printfn` is called separately to display the value of `result`.\n    \n-   The calculation pipeline itself remains a single expression without intermediate variables for the steps.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nJavaScript's function style notation is  `f(x)` , which is the notation learned in early mathematics.\n$$\nf(x)\n$$\n\nF# or Haskell's function style notation is  `f x` , which doesn't require parentheses  `()` . This is the same as notation that omits parentheses, like trigonometric functions learned later in mathematics.\n$$\n\\sin x\n$$\n$$\nf \\; x\n$$\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Summary\n\nBoth the imperative JavaScript code and the functional F# code achieve the same sequential result for this calculation.\n\n-   The **imperative style** uses explicit steps and intermediate variables.\n    \n-   The **functional pipeline style** emphasizes composing functions/operations to create a flow of data transformations, calculating the final result often as a single expression before potentially using it (like printing).\n\nUnderstanding this pipeline concept is fundamental to grasping the functional approach to programming.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n### Pure FP vs. Pragmatic FP Sequencing\n\nIt's worth noting a distinction regarding execution order and sequencing when comparing different functional languages.\n\nIn **purely functional languages** (like Haskell), which strictly adhere to the principle that everything is an expression evaluating to a value, the top-to-bottom visual order of independent code definitions often doesn't dictate execution sequence in the same way as imperative code. The evaluation order is primarily determined by data dependencies. Code written with an imperative step-by-step intention might not be directly valid or meaningful if there's no explicit dependency.\n\nHowever, many functional languages, including **F#**, adopt a more **pragmatic approach**. While they strongly encourage expression-based pipelines and minimizing side effects (like state mutation), they _do_ allow and respect imperative-style sequencing for practical purposes, especially for actions like input/output (I/O), logging, or structuring code logically.\n\nConsider our F# calculation example where we separated the final printing:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Define helper functions for clarity\nlet double x = x * 2\nlet add1 x = x + 1\n\n// Define the input number\nlet number = 5\n\n// Calculation (an expression resulting in a value)\nlet result =\n    number\n    |> double // Apply the double function -> 10\n    |> add1   // Apply the add1 function -> 11\n    |> double // Apply the double function again -> 22\n\n// Action using the result (depends on the previous step)\nprintfn \"The result is: %d\" result // Output: The result is: 22\n\n```\n\nIn this F# code:\n\n1.  The line `let result = ...` binds the final value (`22`) of the pipeline expression to the name `result`.\n    \n2.  The subsequent line, `printfn \"The result is: %d\" result`, performs an action (printing to the console) that explicitly uses the `result` value.\n\nF# **does** execute these bindings and actions in the top-to-bottom order they are written. The `result` must be calculated and bound _before_ the `printfn` function can be called with its value. This sequential execution is familiar from imperative programming.\n\nSo, while the functional pipeline _itself_ (`number |> double |> add1 |> double`) is a pure expression focused on data transformation without regard to imperative steps, F# allows you to sequence these expressions and side-effecting actions (like `printfn`) in a predictable, top-to-bottom manner. This blends the benefits of functional expressions with the practical necessity and convenience of sequential execution for certain tasks.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">","src/content/docs/en/book/unit-1/section-1/1-sequence.md","ba7abc571a47c4e4",{"html":512,"metadata":513},"\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474563390.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cstrong>Sequence\u003C/strong> is the most basic control structure in programming. Instructions are simply executed one after another in the order they appear.\u003C/p>\n\u003Cp>Let’s explore how this fundamental concept looks in different programming styles, using a simple calculation: double the number 5, add 1, double the result, and display the final result.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-imperative-way-step-by-step-commands\">The Imperative Way: Step-by-Step Commands\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-imperative-way-step-by-step-commands\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Imperative Way: Step-by-Step Commands”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In imperative programming, you typically write a sequence of commands that modify the program’s state or produce results step by step. Each command executes in order.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with the input number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Step 1: Double the number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">step1Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">number\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> * \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// step1Result is 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Step 2: Add 1 to the result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">step2Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">step1Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> + \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// step2Result is 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Step 3: Double the result again\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">step2Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> * \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 22\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Display the final result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">The result is: \u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">${\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">result\u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">}\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: The result is: 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Start with the input numberconst number = 5;// Step 1: Double the numberconst step1Result = number * 2; // step1Result is 10// Step 2: Add 1 to the resultconst step2Result = step1Result + 1; // step2Result is 11// Step 3: Double the result againconst result = step2Result * 2; // result is 22// Display the final resultconsole.log(&#x60;The result is: ${result}&#x60;);// Output: The result is: 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Here, each step is performed sequentially, storing intermediate results (\u003Ccode dir=\"auto\">step1Result\u003C/code>, \u003Ccode dir=\"auto\">step2Result\u003C/code>) in variables before the next step.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-functional-way-data-transformation-pipelines\">The Functional Way: Data Transformation Pipelines\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-functional-way-data-transformation-pipelines\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Functional Way: Data Transformation Pipelines”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Functional programming often approaches sequential operations as a \u003Cstrong>pipeline\u003C/strong> of data transformations. Data flows through a series of functions (or operations), where each performs a specific transformation and passes its result to the next.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496636340.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"image\">\u003C/p>\n\u003Cp>Let’s rewrite the previous example using F#, which has a built-in  \u003Cstrong>pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>)\u003C/strong> :\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define helper functions for clarity\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the input number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with the input number and pipe it through transformations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function -> 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the add1 function -> 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function again -> 22\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Display the final result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">The result is: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: The result is: 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define helper functions for claritylet double x = x * 2let add1 x = x + 1// Define the input numberlet number = 5// Start with the input number and pipe it through transformationslet result =    number    |> double // Apply the double function -> 10    |> add1   // Apply the add1 function -> 11    |> double // Apply the double function again -> 22// Display the final resultprintfn &#x22;The result is: %d&#x22; result// Output: The result is: 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this F# code:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>We define helper functions \u003Ccode dir=\"auto\">double\u003C/code> and \u003Ccode dir=\"auto\">add1\u003C/code> first.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>We start with the input \u003Ccode dir=\"auto\">5\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The \u003Ccode dir=\"auto\">|>\u003C/code> operator pipes \u003Ccode dir=\"auto\">5\u003C/code> into the \u003Ccode dir=\"auto\">double\u003C/code> function, resulting in \u003Ccode dir=\"auto\">10\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The result \u003Ccode dir=\"auto\">10\u003C/code> is then piped into the \u003Ccode dir=\"auto\">add1\u003C/code> function, resulting in \u003Ccode dir=\"auto\">11\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The result \u003Ccode dir=\"auto\">11\u003C/code> is piped into the \u003Ccode dir=\"auto\">double\u003C/code> function again, resulting in \u003Ccode dir=\"auto\">22\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The final result \u003Ccode dir=\"auto\">22\u003C/code> is assigned to the \u003Ccode dir=\"auto\">result\u003C/code> variable.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Finally, \u003Ccode dir=\"auto\">printfn\u003C/code> is called separately to display the value of \u003Ccode dir=\"auto\">result\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The calculation pipeline itself remains a single expression without intermediate variables for the steps.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>JavaScript’s function style notation is  \u003Ccode dir=\"auto\">f(x)\u003C/code> , which is the notation learned in early mathematics.\n$$\nf(x)\n$$\u003C/p>\n\u003Cp>F# or Haskell’s function style notation is  \u003Ccode dir=\"auto\">f x\u003C/code> , which doesn’t require parentheses  \u003Ccode dir=\"auto\">()\u003C/code> . This is the same as notation that omits parentheses, like trigonometric functions learned later in mathematics.\n$$\n\\sin x\n$$\n$$\nf ; x\n$$\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Both the imperative JavaScript code and the functional F# code achieve the same sequential result for this calculation.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The \u003Cstrong>imperative style\u003C/strong> uses explicit steps and intermediate variables.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The \u003Cstrong>functional pipeline style\u003C/strong> emphasizes composing functions/operations to create a flow of data transformations, calculating the final result often as a single expression before potentially using it (like printing).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Understanding this pipeline concept is fundamental to grasping the functional approach to programming.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"pure-fp-vs-pragmatic-fp-sequencing\">Pure FP vs. Pragmatic FP Sequencing\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#pure-fp-vs-pragmatic-fp-sequencing\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Pure FP vs. Pragmatic FP Sequencing”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>It’s worth noting a distinction regarding execution order and sequencing when comparing different functional languages.\u003C/p>\n\u003Cp>In \u003Cstrong>purely functional languages\u003C/strong> (like Haskell), which strictly adhere to the principle that everything is an expression evaluating to a value, the top-to-bottom visual order of independent code definitions often doesn’t dictate execution sequence in the same way as imperative code. The evaluation order is primarily determined by data dependencies. Code written with an imperative step-by-step intention might not be directly valid or meaningful if there’s no explicit dependency.\u003C/p>\n\u003Cp>However, many functional languages, including \u003Cstrong>F#\u003C/strong>, adopt a more \u003Cstrong>pragmatic approach\u003C/strong>. While they strongly encourage expression-based pipelines and minimizing side effects (like state mutation), they \u003Cem>do\u003C/em> allow and respect imperative-style sequencing for practical purposes, especially for actions like input/output (I/O), logging, or structuring code logically.\u003C/p>\n\u003Cp>Consider our F# calculation example where we separated the final printing:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define helper functions for clarity\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the input number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Calculation (an expression resulting in a value)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function -> 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the add1 function -> 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the double function again -> 22\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Action using the result (depends on the previous step)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">The result is: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: The result is: 22\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define helper functions for claritylet double x = x * 2let add1 x = x + 1// Define the input numberlet number = 5// Calculation (an expression resulting in a value)let result =    number    |> double // Apply the double function -> 10    |> add1   // Apply the add1 function -> 11    |> double // Apply the double function again -> 22// Action using the result (depends on the previous step)printfn &#x22;The result is: %d&#x22; result // Output: The result is: 22\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this F# code:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>The line \u003Ccode dir=\"auto\">let result = ...\u003C/code> binds the final value (\u003Ccode dir=\"auto\">22\u003C/code>) of the pipeline expression to the name \u003Ccode dir=\"auto\">result\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The subsequent line, \u003Ccode dir=\"auto\">printfn \"The result is: %d\" result\u003C/code>, performs an action (printing to the console) that explicitly uses the \u003Ccode dir=\"auto\">result\u003C/code> value.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>F# \u003Cstrong>does\u003C/strong> execute these bindings and actions in the top-to-bottom order they are written. The \u003Ccode dir=\"auto\">result\u003C/code> must be calculated and bound \u003Cem>before\u003C/em> the \u003Ccode dir=\"auto\">printfn\u003C/code> function can be called with its value. This sequential execution is familiar from imperative programming.\u003C/p>\n\u003Cp>So, while the functional pipeline \u003Cem>itself\u003C/em> (\u003Ccode dir=\"auto\">number |> double |> add1 |> double\u003C/code>) is a pure expression focused on data transformation without regard to imperative steps, F# allows you to sequence these expressions and side-effecting actions (like \u003Ccode dir=\"auto\">printfn\u003C/code>) in a predictable, top-to-bottom manner. This blends the benefits of functional expressions with the practical necessity and convenience of sequential execution for certain tasks.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">",{"headings":514,"localImagePaths":526,"remoteImagePaths":527,"frontmatter":528,"imagePaths":529},[515,518,521,522],{"depth":182,"slug":516,"text":517},"the-imperative-way-step-by-step-commands","The Imperative Way: Step-by-Step Commands",{"depth":182,"slug":519,"text":520},"the-functional-way-data-transformation-pipelines","The Functional Way: Data Transformation Pipelines",{"depth":182,"slug":408,"text":409},{"depth":523,"slug":524,"text":525},3,"pure-fp-vs-pragmatic-fp-sequencing","Pure FP vs. Pragmatic FP Sequencing",[],[],{"title":504,"description":479},[],"en/book/unit-1/section-1/3-iteration",{"id":530,"data":532,"body":537,"filePath":538,"digest":539,"rendered":540},{"title":533,"description":479,"editUrl":16,"head":534,"template":18,"sidebar":535,"pagefind":16,"draft":20},"3. Iteration",[],{"hidden":20,"attrs":536},{},"![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474702812.png)\n\n**Iteration** (also known as looping or repetition) allows programs to execute a block of code multiple times. This is essential for processing collections of data (like lists or arrays) or repeating a task until a condition is met. Let's compare how imperative and functional styles handle a common iteration task: calculating the sum of numbers in a list.\n\n## The Imperative Way: Explicit Loops\n\n#### What is the sum of the integers from  $0$  to  $5$ ?\n\n$$\n0 +1 + 2 + 3 + 4 + 5\n$$\n\nThe most important thing to understand is that this is a  **straightforward calculation** .\n\nHowever, in Imperative Programming, solving such problems often involves  **designing loops with ever-changing variables** . This can lead to complexities that obscure the problem's essence and increase the risk of introducing bugs.\n\nAccustomed to the conventions of Imperative Programming, many programmers typically employ a  `for`  loop to solve this problem. Inside the loop, code often accesses elements one by one and updates state, such as an accumulator variable.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\nlet sum = 0;\nfor (let i = 0; i \u003C= 5; i++) {\n    sum += i;\n}\nconsole.log(sum); // 15\n```\n\nIn this imperative style:\n\n-   We use an explicit `for` loop with a counter (`i`) that increments from 0 up to 5.\n-   We use a mutable variable (`sum`) initialized to 0 and update it in each iteration by adding the current value of `i`.\n-   The logic describes the step-by-step process of initializing state, looping with a condition, and accumulating a result.\n\nAfter all, Imperative Programming is an approach to consider the flow of the code.\n\n## The Functional Way: Higher-Order Functions and Pipelines\n\nOn the other hand, Functional Programming is an approach to consider the expressions of Mathematics.\n\nThe calculation for this problem proceeds as follows.\n\n$$\n\\begin{gather*}\n((((0 +1) + 2) + 3) + 4) + 5\n\\\\\n(((1 + 2) + 3) + 4) + 5\n\\\\\n((3 + 3) + 4) + 5\n\\\\\n(6 + 4) + 5\n\\\\\n10 + 5\n\\\\\n15\n\\end{gather*}\n$$\n\nThe adequate operation that is capable of calculating this structure is called [Fold (higher-order function)](https://en.wikipedia.org/wiki/Fold_(higher-order_function))\n\n> In [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming \"Functional Programming\"), **fold** (also termed **reduce**, **accumulate**, **aggregate**, **compress**, or **inject**) refers to a family of [higher-order functions](https://en.wikipedia.org/wiki/Higher-order_function \"Higher-order function\") that [analyze](https://en.wikipedia.org/wiki/Analysis \"Analysis\") a [recursive](https://en.wikipedia.org/wiki/Recursive_data_type \"Recursive data type\") data structure and through use of a given combining operation, recombine the results of [recursively](https://en.wikipedia.org/wiki/Recursion \"Recursion\") processing its constituent parts, building up a return value.\n\nFunctional programming often avoids explicit loops and mutable state for iteration. Instead, it relies on **higher-order functions** (functions that operate on other functions or collections) like `map`, `filter`, and `fold` (or `reduce`/`sum`). These are often combined in pipelines.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744867612924.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet reducer = List.reduce (+)\nlet sum = [0;1;2;3;4;5] |> reducer\nprintfn \"%d\" sum // 15\n```\n\nIn JavaScript,\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\nlet plus = (a,b) => a + b;\nlet sum = [0,1,2,3,4,5].reduce(plus);\nconsole.log(sum); // 15\n```\n\nIn this functional style:\n\n-   We define the collection of numbers (`[0;1;2;3;4;5]` or `[0,1,2,3,4;5]`) explicitly first.\n-   We use a higher-order function (`List.reduce` in F#, `.reduce` in JS) along with a combining function (`+` or `plus`) to aggregate the elements of the collection.\n-   In F#, the pipeline operator (`|>`) is used to pass the list into the `reducer` function.\n-   The entire aggregation is often expressed declaratively, focusing on *what* operation to apply to the collection, rather than the step-by-step looping mechanism.\n-   Explicit loop counters and user-declared mutable accumulator variables are avoided.\n\nBut what if we don't want to define the collection of numbers manually like this? Functional programming provides ways to generate sequences programmatically.\n\n### Generating the Input Sequence\n\nInstead of writing out `[0;1;2;3;4;5]` by hand, we can generate it. Here are a couple of functional approaches:\n\n**1. Using List.unfold:**\n\nAnother functional approach to generate a sequence is using the `List.unfold` function. This function builds a list from an initial state by repeatedly applying a *generator function*. The generator function takes the current state and decides whether to produce the next element of the list (along with the next state) or to stop the generation.\n\n$$\n\\begin{gather*}\n0\n\\\\\n0 ~ ~1\n\\\\\n0 ~ ~1 ~ ~ 2\n\\\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3\n\\\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3 ~ ~ 4\n\\\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3 ~ ~ 4 ~ ~ 5\n\\end{gather*}\n$$\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Generator function: takes current state, returns Option\u003C(value_to_yield, next_state)>\nlet generator (state: int) =\n    if state \u003C 6 then\n        // If state is less than 6, yield 'state' and the next state is 'state + 1'\n        Some (state, state + 1) \n    else\n        // If state is 6 or more, stop generation\n        None\n\n// Initial state\nlet initialState = 0\n\n// Generate the list using List.unfold\nlet generatedListUsingUnfold = List.unfold generator initialState\n// generatedListUsingUnfold is now [0; 1; 2; 3; 4; 5]\n\nprintfn \"List generated using List.unfold: %A\" generatedListUsingUnfold\n// Output: List generated using List.unfold: [0; 1; 2; 3; 4; 5]\n```\n\n**2. Using Infinite Sequences (Lazy Evaluation):**\n\nA common F# approach involves potentially infinite sequences, which are evaluated lazily (only generating values as needed). We can define an infinite sequence and then take only the elements we require.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744868359390.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// 1. Define the infinite sequence of natural numbers\n// 'naturalNumbers' holds the definition (0, 1, 2...) but doesn't compute them all yet.\nlet naturalNumbers: seq\u003Cint> = Seq.initInfinite id\n\n// 2. Take the first 6 elements and convert to a list\nlet firstSixList: list\u003Cint> =\n    naturalNumbers      // Start with the infinite sequence\n    |> Seq.take 6       // Lazily take the first 6 -> seq\u003Cint> { 0; 1; 2; 3; 4; 5 }\n    |> Seq.toList       // Convert the finite sequence to a list -> [0; 1; 2; 3; 4; 5]\n\n// 3. Now 'firstSixList' can be used, e.g., piped into the reducer\nlet sumFromGeneratedList = firstSixList |> List.reduce (+)\n\nprintfn \"Generated List: %A\" firstSixList\nprintfn \"Sum from generated list: %d\" sumFromGeneratedList\n\n(*\nExecution result:\nGenerated List: [0; 1; 2; 3; 4; 5]\nSum from generated list: 15\n*)\n```\n\nThis demonstrates how functional programming allows generating the data needed for an operation, often combining sequence generation and processing within a pipeline, avoiding manual collection definitions or imperative loops.\n\n## Summary\n\nBoth styles achieve the same result for iteration over a collection.\n\n-   The **imperative style** uses explicit **loops** (like `for`) and often manages state with **mutable variables** (like `sum` and the loop counter `i`).\n    \n-   The **functional style** uses **higher-order functions** (like `map`, `sum`, `filter`, `fold`) combined in **pipelines** to declaratively process collections, often avoiding explicit loops and mutable state. It also provides powerful ways to **generate** the data sequences needed.","src/content/docs/en/book/unit-1/section-1/3-iteration.md","ca26e303232ec4c0",{"html":541,"metadata":542},"\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744474702812.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cstrong>Iteration\u003C/strong> (also known as looping or repetition) allows programs to execute a block of code multiple times. This is essential for processing collections of data (like lists or arrays) or repeating a task until a condition is met. Let’s compare how imperative and functional styles handle a common iteration task: calculating the sum of numbers in a list.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-imperative-way-explicit-loops\">The Imperative Way: Explicit Loops\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-imperative-way-explicit-loops\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Imperative Way: Explicit Loops”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h4\">\u003Ch4 id=\"what-is-the-sum-of-the-integers-from--0--to--5\">What is the sum of the integers from  $0$  to  $5$ ?\u003C/h4>\u003Ca class=\"sl-anchor-link\" href=\"#what-is-the-sum-of-the-integers-from--0--to--5\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “What is the sum of the integers from  $0$  to  $5$ ?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>$$\n0 +1 + 2 + 3 + 4 + 5\n$$\u003C/p>\n\u003Cp>The most important thing to understand is that this is a  \u003Cstrong>straightforward calculation\u003C/strong> .\u003C/p>\n\u003Cp>However, in Imperative Programming, solving such problems often involves  \u003Cstrong>designing loops with ever-changing variables\u003C/strong> . This can lead to complexities that obscure the problem’s essence and increase the risk of introducing bugs.\u003C/p>\n\u003Cp>Accustomed to the conventions of Imperative Programming, many programmers typically employ a  \u003Ccode dir=\"auto\">for\u003C/code>  loop to solve this problem. Inside the loop, code often accesses elements one by one and updates state, such as an accumulator variable.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">sum\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">for\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> (\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">i\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">; \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">i\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">; \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">i\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">++\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">sum\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+=\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">i\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">;\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">sum\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">); \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 15\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let sum = 0;for (let i = 0; i \u003C= 5; i++) {    sum += i;}console.log(sum); // 15\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this imperative style:\u003C/p>\n\u003Cul>\n\u003Cli>We use an explicit \u003Ccode dir=\"auto\">for\u003C/code> loop with a counter (\u003Ccode dir=\"auto\">i\u003C/code>) that increments from 0 up to 5.\u003C/li>\n\u003Cli>We use a mutable variable (\u003Ccode dir=\"auto\">sum\u003C/code>) initialized to 0 and update it in each iteration by adding the current value of \u003Ccode dir=\"auto\">i\u003C/code>.\u003C/li>\n\u003Cli>The logic describes the step-by-step process of initializing state, looping with a condition, and accumulating a result.\u003C/li>\n\u003C/ul>\n\u003Cp>After all, Imperative Programming is an approach to consider the flow of the code.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-functional-way-higher-order-functions-and-pipelines\">The Functional Way: Higher-Order Functions and Pipelines\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-functional-way-higher-order-functions-and-pipelines\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Functional Way: Higher-Order Functions and Pipelines”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>On the other hand, Functional Programming is an approach to consider the expressions of Mathematics.\u003C/p>\n\u003Cp>The calculation for this problem proceeds as follows.\u003C/p>\n\u003Cp>$$\n\\begin{gather*}\n((((0 +1) + 2) + 3) + 4) + 5\n\\\n(((1 + 2) + 3) + 4) + 5\n\\\n((3 + 3) + 4) + 5\n\\\n(6 + 4) + 5\n\\\n10 + 5\n\\\n15\n\\end{gather*}\n$$\u003C/p>\n\u003Cp>The adequate operation that is capable of calculating this structure is called \u003Ca href=\"https://en.wikipedia.org/wiki/Fold_(higher-order_function)\">Fold (higher-order function)\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Cp>In \u003Ca href=\"https://en.wikipedia.org/wiki/Functional_programming\" title=\"Functional Programming\">Functional Programming\u003C/a>, \u003Cstrong>fold\u003C/strong> (also termed \u003Cstrong>reduce\u003C/strong>, \u003Cstrong>accumulate\u003C/strong>, \u003Cstrong>aggregate\u003C/strong>, \u003Cstrong>compress\u003C/strong>, or \u003Cstrong>inject\u003C/strong>) refers to a family of \u003Ca href=\"https://en.wikipedia.org/wiki/Higher-order_function\" title=\"Higher-order function\">higher-order functions\u003C/a> that \u003Ca href=\"https://en.wikipedia.org/wiki/Analysis\" title=\"Analysis\">analyze\u003C/a> a \u003Ca href=\"https://en.wikipedia.org/wiki/Recursive_data_type\" title=\"Recursive data type\">recursive\u003C/a> data structure and through use of a given combining operation, recombine the results of \u003Ca href=\"https://en.wikipedia.org/wiki/Recursion\" title=\"Recursion\">recursively\u003C/a> processing its constituent parts, building up a return value.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Functional programming often avoids explicit loops and mutable state for iteration. Instead, it relies on \u003Cstrong>higher-order functions\u003C/strong> (functions that operate on other functions or collections) like \u003Ccode dir=\"auto\">map\u003C/code>, \u003Ccode dir=\"auto\">filter\u003C/code>, and \u003Ccode dir=\"auto\">fold\u003C/code> (or \u003Ccode dir=\"auto\">reduce\u003C/code>/\u003Ccode dir=\"auto\">sum\u003C/code>). These are often combined in pipelines.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744867612924.png\" alt=\"image\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reducer\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.reduce \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sum\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> reducer\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sum \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 15\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let reducer = List.reduce (+)let sum = [0;1;2;3;4;5] |> reducerprintfn &#x22;%d&#x22; sum // 15\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In JavaScript,\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">plus\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> => \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> + \u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">b\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">;\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">sum\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> =\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> [\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">]\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">reduce\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">plus\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">);\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">sum\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">); \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 15\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let plus = (a,b) => a + b;let sum = [0,1,2,3,4,5].reduce(plus);console.log(sum); // 15\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this functional style:\u003C/p>\n\u003Cul>\n\u003Cli>We define the collection of numbers (\u003Ccode dir=\"auto\">[0;1;2;3;4;5]\u003C/code> or \u003Ccode dir=\"auto\">[0,1,2,3,4;5]\u003C/code>) explicitly first.\u003C/li>\n\u003Cli>We use a higher-order function (\u003Ccode dir=\"auto\">List.reduce\u003C/code> in F#, \u003Ccode dir=\"auto\">.reduce\u003C/code> in JS) along with a combining function (\u003Ccode dir=\"auto\">+\u003C/code> or \u003Ccode dir=\"auto\">plus\u003C/code>) to aggregate the elements of the collection.\u003C/li>\n\u003Cli>In F#, the pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) is used to pass the list into the \u003Ccode dir=\"auto\">reducer\u003C/code> function.\u003C/li>\n\u003Cli>The entire aggregation is often expressed declaratively, focusing on \u003Cem>what\u003C/em> operation to apply to the collection, rather than the step-by-step looping mechanism.\u003C/li>\n\u003Cli>Explicit loop counters and user-declared mutable accumulator variables are avoided.\u003C/li>\n\u003C/ul>\n\u003Cp>But what if we don’t want to define the collection of numbers manually like this? Functional programming provides ways to generate sequences programmatically.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"generating-the-input-sequence\">Generating the Input Sequence\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#generating-the-input-sequence\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Generating the Input Sequence”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Instead of writing out \u003Ccode dir=\"auto\">[0;1;2;3;4;5]\u003C/code> by hand, we can generate it. Here are a couple of functional approaches:\u003C/p>\n\u003Cp>\u003Cstrong>1. Using List.unfold:\u003C/strong>\u003C/p>\n\u003Cp>Another functional approach to generate a sequence is using the \u003Ccode dir=\"auto\">List.unfold\u003C/code> function. This function builds a list from an initial state by repeatedly applying a \u003Cem>generator function\u003C/em>. The generator function takes the current state and decides whether to produce the next element of the list (along with the next state) or to stop the generation.\u003C/p>\n\u003Cp>$$\n\\begin{gather*}\n0\n\\\n0 ~ ~1\n\\\n0 ~ ~1 ~ ~ 2\n\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3\n\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3 ~ ~ 4\n\\\n0 ~ ~ 1 ~ ~ 2 ~ ~ 3 ~ ~ 4 ~ ~ 5\n\\end{gather*}\n$$\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Generator function: takes current state, returns Option&#x3C;(value_to_yield, next_state)>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">generator\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">state\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> state \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">6\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If state is less than 6, yield 'state' and the next state is 'state + 1'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">state\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> state \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If state is 6 or more, stop generation\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">None\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial state\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialState\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Generate the list using List.unfold\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">generatedListUsingUnfold\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.unfold generator initialState\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// generatedListUsingUnfold is now [0; 1; 2; 3; 4; 5]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">List generated using List.unfold: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> generatedListUsingUnfold\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: List generated using List.unfold: [0; 1; 2; 3; 4; 5]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Generator function: takes current state, returns Option\u003C(value_to_yield, next_state)>let generator (state: int) =    if state \u003C 6 then        // If state is less than 6, yield &#x27;state&#x27; and the next state is &#x27;state + 1&#x27;        Some (state, state + 1)    else        // If state is 6 or more, stop generation        None// Initial statelet initialState = 0// Generate the list using List.unfoldlet generatedListUsingUnfold = List.unfold generator initialState// generatedListUsingUnfold is now [0; 1; 2; 3; 4; 5]printfn &#x22;List generated using List.unfold: %A&#x22; generatedListUsingUnfold// Output: List generated using List.unfold: [0; 1; 2; 3; 4; 5]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>2. Using Infinite Sequences (Lazy Evaluation):\u003C/strong>\u003C/p>\n\u003Cp>A common F# approach involves potentially infinite sequences, which are evaluated lazily (only generating values as needed). We can define an infinite sequence and then take only the elements we require.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744868359390.png\" alt=\"image\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Define the infinite sequence of natural numbers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'naturalNumbers' holds the definition (0, 1, 2...) but doesn't compute them all yet.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">naturalNumbers\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> seq\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Seq.initInfinite id\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Take the first 6 elements and convert to a list\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">firstSixList\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">naturalNumbers      \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with the infinite sequence\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Seq.take \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">6\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">       \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Lazily take the first 6 -> seq&#x3C;int> { 0; 1; 2; 3; 4; 5 }\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Seq.toList       \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Convert the finite sequence to a list -> [0; 1; 2; 3; 4; 5]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3. Now 'firstSixList' can be used, e.g., piped into the reducer\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumFromGeneratedList\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> firstSixList \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.reduce \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Generated List: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> firstSixList\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Sum from generated list: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumFromGeneratedList\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">(*\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">Execution result:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">Generated List: [0; 1; 2; 3; 4; 5]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">Sum from generated list: 15\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">*)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// 1. Define the infinite sequence of natural numbers// &#x27;naturalNumbers&#x27; holds the definition (0, 1, 2...) but doesn&#x27;t compute them all yet.let naturalNumbers: seq\u003Cint> = Seq.initInfinite id// 2. Take the first 6 elements and convert to a listlet firstSixList: list\u003Cint> =    naturalNumbers      // Start with the infinite sequence    |> Seq.take 6       // Lazily take the first 6 -> seq\u003Cint> { 0; 1; 2; 3; 4; 5 }    |> Seq.toList       // Convert the finite sequence to a list -> [0; 1; 2; 3; 4; 5]// 3. Now &#x27;firstSixList&#x27; can be used, e.g., piped into the reducerlet sumFromGeneratedList = firstSixList |> List.reduce (+)printfn &#x22;Generated List: %A&#x22; firstSixListprintfn &#x22;Sum from generated list: %d&#x22; sumFromGeneratedList(*Execution result:Generated List: [0; 1; 2; 3; 4; 5]Sum from generated list: 15*)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This demonstrates how functional programming allows generating the data needed for an operation, often combining sequence generation and processing within a pipeline, avoiding manual collection definitions or imperative loops.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Both styles achieve the same result for iteration over a collection.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>The \u003Cstrong>imperative style\u003C/strong> uses explicit \u003Cstrong>loops\u003C/strong> (like \u003Ccode dir=\"auto\">for\u003C/code>) and often manages state with \u003Cstrong>mutable variables\u003C/strong> (like \u003Ccode dir=\"auto\">sum\u003C/code> and the loop counter \u003Ccode dir=\"auto\">i\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The \u003Cstrong>functional style\u003C/strong> uses \u003Cstrong>higher-order functions\u003C/strong> (like \u003Ccode dir=\"auto\">map\u003C/code>, \u003Ccode dir=\"auto\">sum\u003C/code>, \u003Ccode dir=\"auto\">filter\u003C/code>, \u003Ccode dir=\"auto\">fold\u003C/code>) combined in \u003Cstrong>pipelines\u003C/strong> to declaratively process collections, often avoiding explicit loops and mutable state. It also provides powerful ways to \u003Cstrong>generate\u003C/strong> the data sequences needed.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":543,"localImagePaths":557,"remoteImagePaths":558,"frontmatter":559,"imagePaths":560},[544,547,550,553,556],{"depth":182,"slug":545,"text":546},"the-imperative-way-explicit-loops","The Imperative Way: Explicit Loops",{"depth":464,"slug":548,"text":549},"what-is-the-sum-of-the-integers-from--0--to--5","What is the sum of the integers from  $0$  to  $5$ ?",{"depth":182,"slug":551,"text":552},"the-functional-way-higher-order-functions-and-pipelines","The Functional Way: Higher-Order Functions and Pipelines",{"depth":523,"slug":554,"text":555},"generating-the-input-sequence","Generating the Input Sequence",{"depth":182,"slug":408,"text":409},[],[],{"title":533,"description":479},[],"en/book/unit-1/section-4/1-operator-function",{"id":561,"data":563,"body":569,"filePath":570,"digest":571,"rendered":572},{"title":564,"description":565,"editUrl":16,"head":566,"template":18,"sidebar":567,"pagefind":16,"draft":20},"Operators as Functions and Pipeline Flow","In the previous chapter, we established that the pipeline operator (|>) acts like a binary operation, taking a value as its left operand and a function value as its right operand. This chapter explores the relationship between operators and functions in functional programming.",[],{"hidden":20,"attrs":568},{},"In the previous chapter, we established that the pipeline operator (`|>`) acts like a binary operation, taking a value as its left operand and a **function value** as its right operand. This chapter explores the relationship between operators and functions in functional programming.\n\n## Operators as Syntactic Sugar for Functions\n\nIn many common programming languages, like JavaScript, symbols such as `+` and `*` are treated primarily as built-in operators.\n\nHowever, in functional programming languages like F# and Haskell, which are heavily influenced by mathematics, these operators are often considered convenient syntax – **syntactic sugar** – for underlying **functions**.\n\n-   The `+` operator corresponds to a binary function, written `(+)` in F#.\n-   The `*` operator corresponds to a binary function, written `(*)` in F#.\n-   The `-` operator corresponds to a binary function, written `(-)` in F#.\n\nWrapping an infix operator like `+` or `-` in parentheses `()` directly converts it to its corresponding prefix function value, `(+)` or `(-)`. This means the following are equivalent:\n\n```fsharp\nlet sum1 = 5 + 3 // Using the operator (+)\nlet sum2 = (+) 5 3 // Using the function directly\n\nlet diff1 = 5 - 2 // Using the operator (-)\nlet diff2 = (-) 5 2 // Using the function directly\n\nprintfn \"Sums: %d, %d\" sum1 sum2       // Output: Sums: 8, 8\nprintfn \"Differences: %d, %d\" diff1 diff2 // Output: Differences: 3, 3\n```\n\nTreating operators as functions allows for greater consistency and enables powerful techniques like partial application.\n\n## Creating New Functions with Partial Application (Preview)\n\nSince `(+)` and `(*)` are function values, we can use them to create new functions by providing only one argument. This technique is called **Partial Application** (which we will explore fully in the next chapter).\n\n```fsharp\n// Creating unary functions by partially applying the operator functions:\nlet add1 = (+) 1     // Creates a function that adds 1 (Type: int -> int)\nlet double = (*) 2   // Creates a function that doubles (Type: int -> int)\n\n// Applying the newly created functions:\nlet result1 = 10 |> add1   // result1 is 11\nlet result2 = 10 |> double // result2 is 20\n```\n\n**The Subtraction Challenge:**\n\nCan we create a function for `x - 2` in the same way using `(-)`? Let's try:\n\n```fsharp\n// Attempt to create 'subtract 2' using partial application on (-)\nlet subtractsFrom2 = (-) 2 // What does this function do?\n                           // (-) takes minuend first, then subtrahend: (-) minuend subtrahend = minuend - subtrahend\n                           // So, (-) 2 creates a function that takes 'x' and calculates 2 - x\n\nlet result3 = 5 |> subtractsFrom2 // result3 is 2 - 5 = -3. This is NOT 5 - 2!\n```\n\nBecause the subtraction operator function `(-)` expects the number being subtracted *from* (minuend) as its first argument, partially applying `(-) 2` creates a function that subtracts its input *from* 2, not the other way around.\n\nTo achieve the desired `x - 2` behavior, we typically define the function explicitly using a lambda expression, naming it appropriately:\n\n```fsharp\n// Correct way to define an 'x - 2' function\nlet minus2 = fun x -> x - 2 // Type: int -> int\n\nlet result4 = 10 |> minus2 // result4 is 10 - 2 = 8\n```\n\nThis highlights that while partial application with operators like `(+)` and `(*)` is straightforward, order-sensitive operations like subtraction require careful consideration or explicit function definition (like lambdas) to achieve the intended result when creating specialized functions.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nWe will explore the mechanism behind Partial Application in detail in the next chapter. For now, the key takeaway is that `(+)` and `(*)` are functions we can work with, but operators like `(-)` need care due to argument order when partially applied.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Using Functions like Operators (via `|>`)\n\nSo, operators are functions. Can we go the other way and use _any_ function as if it were an operator, perhaps in an infix style like `Value Operator Value`?\n\nSome languages, like Haskell, offer ways to do this. For instance, using backticks allows a function like `add` to be used infix: ``5 `add` 3``. This syntax intuitively resembles the standard `Operand1 Operator Operand2` form of a binary operation.\n\nF# takes a different, very practical approach using the **pipeline operator (`|>` )**. While `|>` doesn't make a function look exactly like `+` or `*` between two data values, it provides the primary mechanism in F# for applying functions sequentially in an **operator-like flow**:\n\n`Value |> Function`\n\nThis structure, similar to Haskell's infix example, also fits the `Operand1 Operator Operand2` pattern, where `|>` is the operator, `Value` is the first operand, and the `Function` itself acts as the second operand. It allows us to \"operate\" on a value with a function in a sequential chain, effectively converting function application into a binary operation form for the purpose of data flow.\n\nLet's illustrate this with a custom `minus` function specifically designed to work intuitively with the pipeline for subtraction, addressing the issue we saw with partially applying `(-)`:\n\n```fsharp\n// Define the 'minus' function where the first argument 'a' \n// is the amount to subtract, and the second argument 'b' \n// is the value being subtracted from.\nlet minus a b = b - a // Calculates b - a (value - amountToSubtract)\n\n// Use it with the pipeline operator:\n// 'minus 2' creates a function that takes 'b' and returns 'b - 2'\n// '5 |> minus 2' applies this function to 5, resulting in 5 - 2\nlet result = 5 |> minus 2 // Equivalent to: minus 2 5 => 5 - 2\n\nprintfn \"5 |> minus 2 = %d\" result // Output: 5 |> minus 2 = 3\n```\n\nHere, by defining `minus` to take the amount to subtract (`a`) *first*, the pipeline `5 |> minus 2` naturally reads like \"take 5 and subtract 2,\" achieving the desired operator-like flow. While the underlying mechanism involves function application (`minus 2 5`), the syntax provided by `|>` allows this intuitive expression when functions are defined appropriately.\n\n## Summary\n\n-   In functional languages like F#, operators such as `+` and `*` (and `-`) are often syntactic sugar for underlying functions like `(+)` and `(*)` (and `(-)`). Wrapping the operator in `()` converts it to the function form.\n-   Because these are functions, we can use them to create new functions via **Partial Application** (providing fewer arguments than expected, explained fully next chapter).\n-   Creating functions like `minus2` (for `x - 2`) via partial application requires care due to argument order (e.g., `(-) 2` means `2 - x`), often necessitating a lambda expression (`fun x -> x - 2`) or a custom function definition.\n-   F# uses the pipeline operator (`|>`) as the primary way to apply functions sequentially to a value (`Value |> Function`), providing an operator-like flow (a form of binary operation) for data transformation, leveraging the fact that functions are first-class values.","src/content/docs/en/book/unit-1/section-4/1-operator-function.md","e4d19008281f61c5",{"html":573,"metadata":574},"\u003Cp>In the previous chapter, we established that the pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) acts like a binary operation, taking a value as its left operand and a \u003Cstrong>function value\u003C/strong> as its right operand. This chapter explores the relationship between operators and functions in functional programming.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"operators-as-syntactic-sugar-for-functions\">Operators as Syntactic Sugar for Functions\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#operators-as-syntactic-sugar-for-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Operators as Syntactic Sugar for Functions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In many common programming languages, like JavaScript, symbols such as \u003Ccode dir=\"auto\">+\u003C/code> and \u003Ccode dir=\"auto\">*\u003C/code> are treated primarily as built-in operators.\u003C/p>\n\u003Cp>However, in functional programming languages like F# and Haskell, which are heavily influenced by mathematics, these operators are often considered convenient syntax – \u003Cstrong>syntactic sugar\u003C/strong> – for underlying \u003Cstrong>functions\u003C/strong>.\u003C/p>\n\u003Cul>\n\u003Cli>The \u003Ccode dir=\"auto\">+\u003C/code> operator corresponds to a binary function, written \u003Ccode dir=\"auto\">(+)\u003C/code> in F#.\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">*\u003C/code> operator corresponds to a binary function, written \u003Ccode dir=\"auto\">(*)\u003C/code> in F#.\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">-\u003C/code> operator corresponds to a binary function, written \u003Ccode dir=\"auto\">(-)\u003C/code> in F#.\u003C/li>\n\u003C/ul>\n\u003Cp>Wrapping an infix operator like \u003Ccode dir=\"auto\">+\u003C/code> or \u003Ccode dir=\"auto\">-\u003C/code> in parentheses \u003Ccode dir=\"auto\">()\u003C/code> directly converts it to its corresponding prefix function value, \u003Ccode dir=\"auto\">(+)\u003C/code> or \u003Ccode dir=\"auto\">(-)\u003C/code>. This means the following are equivalent:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sum1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the operator (+)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sum2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the function directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">diff1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the operator (-)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">diff2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(-)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the function directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Sums: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sum1 sum2       \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Sums: 8, 8\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Differences: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> diff1 diff2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Differences: 3, 3\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let sum1 = 5 + 3 // Using the operator (+)let sum2 = (+) 5 3 // Using the function directlylet diff1 = 5 - 2 // Using the operator (-)let diff2 = (-) 5 2 // Using the function directlyprintfn &#x22;Sums: %d, %d&#x22; sum1 sum2       // Output: Sums: 8, 8printfn &#x22;Differences: %d, %d&#x22; diff1 diff2 // Output: Differences: 3, 3\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Treating operators as functions allows for greater consistency and enables powerful techniques like partial application.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"creating-new-functions-with-partial-application-preview\">Creating New Functions with Partial Application (Preview)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#creating-new-functions-with-partial-application-preview\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Creating New Functions with Partial Application (Preview)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Since \u003Ccode dir=\"auto\">(+)\u003C/code> and \u003Ccode dir=\"auto\">(*)\u003C/code> are function values, we can use them to create new functions by providing only one argument. This technique is called \u003Cstrong>Partial Application\u003C/strong> (which we will explore fully in the next chapter).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Creating unary functions by partially applying the operator functions:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Creates a function that adds 1 (Type: int -> int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Creates a function that doubles (Type: int -> int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Applying the newly created functions:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result1 is 11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result2 is 20\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Creating unary functions by partially applying the operator functions:let add1 = (+) 1     // Creates a function that adds 1 (Type: int -> int)let double = (*) 2   // Creates a function that doubles (Type: int -> int)// Applying the newly created functions:let result1 = 10 |> add1   // result1 is 11let result2 = 10 |> double // result2 is 20\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>The Subtraction Challenge:\u003C/strong>\u003C/p>\n\u003Cp>Can we create a function for \u003Ccode dir=\"auto\">x - 2\u003C/code> in the same way using \u003Ccode dir=\"auto\">(-)\u003C/code>? Let’s try:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Attempt to create 'subtract 2' using partial application on (-)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">subtractsFrom2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(-)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// What does this function do?\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                           \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (-) takes minuend first, then subtrahend: (-) minuend subtrahend = minuend - subtrahend\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                           \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// So, (-) 2 creates a function that takes 'x' and calculates 2 - x\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> subtractsFrom2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result3 is 2 - 5 = -3. This is NOT 5 - 2!\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Attempt to create &#x27;subtract 2&#x27; using partial application on (-)let subtractsFrom2 = (-) 2 // What does this function do?                           // (-) takes minuend first, then subtrahend: (-) minuend subtrahend = minuend - subtrahend                           // So, (-) 2 creates a function that takes &#x27;x&#x27; and calculates 2 - xlet result3 = 5 |> subtractsFrom2 // result3 is 2 - 5 = -3. This is NOT 5 - 2!\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Because the subtraction operator function \u003Ccode dir=\"auto\">(-)\u003C/code> expects the number being subtracted \u003Cem>from\u003C/em> (minuend) as its first argument, partially applying \u003Ccode dir=\"auto\">(-) 2\u003C/code> creates a function that subtracts its input \u003Cem>from\u003C/em> 2, not the other way around.\u003C/p>\n\u003Cp>To achieve the desired \u003Ccode dir=\"auto\">x - 2\u003C/code> behavior, we typically define the function explicitly using a lambda expression, naming it appropriately:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Correct way to define an 'x - 2' function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">minus2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Type: int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> minus2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result4 is 10 - 2 = 8\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Correct way to define an &#x27;x - 2&#x27; functionlet minus2 = fun x -> x - 2 // Type: int -> intlet result4 = 10 |> minus2 // result4 is 10 - 2 = 8\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This highlights that while partial application with operators like \u003Ccode dir=\"auto\">(+)\u003C/code> and \u003Ccode dir=\"auto\">(*)\u003C/code> is straightforward, order-sensitive operations like subtraction require careful consideration or explicit function definition (like lambdas) to achieve the intended result when creating specialized functions.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>We will explore the mechanism behind Partial Application in detail in the next chapter. For now, the key takeaway is that \u003Ccode dir=\"auto\">(+)\u003C/code> and \u003Ccode dir=\"auto\">(*)\u003C/code> are functions we can work with, but operators like \u003Ccode dir=\"auto\">(-)\u003C/code> need care due to argument order when partially applied.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"using-functions-like-operators-via\">Using Functions like Operators (via \u003Ccode dir=\"auto\">|>\u003C/code>)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#using-functions-like-operators-via\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Using Functions like Operators (via |>)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>So, operators are functions. Can we go the other way and use \u003Cem>any\u003C/em> function as if it were an operator, perhaps in an infix style like \u003Ccode dir=\"auto\">Value Operator Value\u003C/code>?\u003C/p>\n\u003Cp>Some languages, like Haskell, offer ways to do this. For instance, using backticks allows a function like \u003Ccode dir=\"auto\">add\u003C/code> to be used infix: \u003Ccode dir=\"auto\">5 `add` 3\u003C/code>. This syntax intuitively resembles the standard \u003Ccode dir=\"auto\">Operand1 Operator Operand2\u003C/code> form of a binary operation.\u003C/p>\n\u003Cp>F# takes a different, very practical approach using the \u003Cstrong>pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code> )\u003C/strong>. While \u003Ccode dir=\"auto\">|>\u003C/code> doesn’t make a function look exactly like \u003Ccode dir=\"auto\">+\u003C/code> or \u003Ccode dir=\"auto\">*\u003C/code> between two data values, it provides the primary mechanism in F# for applying functions sequentially in an \u003Cstrong>operator-like flow\u003C/strong>:\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">Value |> Function\u003C/code>\u003C/p>\n\u003Cp>This structure, similar to Haskell’s infix example, also fits the \u003Ccode dir=\"auto\">Operand1 Operator Operand2\u003C/code> pattern, where \u003Ccode dir=\"auto\">|>\u003C/code> is the operator, \u003Ccode dir=\"auto\">Value\u003C/code> is the first operand, and the \u003Ccode dir=\"auto\">Function\u003C/code> itself acts as the second operand. It allows us to “operate” on a value with a function in a sequential chain, effectively converting function application into a binary operation form for the purpose of data flow.\u003C/p>\n\u003Cp>Let’s illustrate this with a custom \u003Ccode dir=\"auto\">minus\u003C/code> function specifically designed to work intuitively with the pipeline for subtraction, addressing the issue we saw with partially applying \u003Ccode dir=\"auto\">(-)\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the 'minus' function where the first argument 'a'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// is the amount to subtract, and the second argument 'b'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// is the value being subtracted from.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">minus\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a b \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> b \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Calculates b - a (value - amountToSubtract)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use it with the pipeline operator:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'minus 2' creates a function that takes 'b' and returns 'b - 2'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// '5 |> minus 2' applies this function to 5, resulting in 5 - 2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> minus \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Equivalent to: minus 2 5 => 5 - 2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">5 |> minus 2 = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: 5 |> minus 2 = 3\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define the &#x27;minus&#x27; function where the first argument &#x27;a&#x27;// is the amount to subtract, and the second argument &#x27;b&#x27;// is the value being subtracted from.let minus a b = b - a // Calculates b - a (value - amountToSubtract)// Use it with the pipeline operator:// &#x27;minus 2&#x27; creates a function that takes &#x27;b&#x27; and returns &#x27;b - 2&#x27;// &#x27;5 |> minus 2&#x27; applies this function to 5, resulting in 5 - 2let result = 5 |> minus 2 // Equivalent to: minus 2 5 => 5 - 2printfn &#x22;5 |> minus 2 = %d&#x22; result // Output: 5 |> minus 2 = 3\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Here, by defining \u003Ccode dir=\"auto\">minus\u003C/code> to take the amount to subtract (\u003Ccode dir=\"auto\">a\u003C/code>) \u003Cem>first\u003C/em>, the pipeline \u003Ccode dir=\"auto\">5 |> minus 2\u003C/code> naturally reads like “take 5 and subtract 2,” achieving the desired operator-like flow. While the underlying mechanism involves function application (\u003Ccode dir=\"auto\">minus 2 5\u003C/code>), the syntax provided by \u003Ccode dir=\"auto\">|>\u003C/code> allows this intuitive expression when functions are defined appropriately.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>In functional languages like F#, operators such as \u003Ccode dir=\"auto\">+\u003C/code> and \u003Ccode dir=\"auto\">*\u003C/code> (and \u003Ccode dir=\"auto\">-\u003C/code>) are often syntactic sugar for underlying functions like \u003Ccode dir=\"auto\">(+)\u003C/code> and \u003Ccode dir=\"auto\">(*)\u003C/code> (and \u003Ccode dir=\"auto\">(-)\u003C/code>). Wrapping the operator in \u003Ccode dir=\"auto\">()\u003C/code> converts it to the function form.\u003C/li>\n\u003Cli>Because these are functions, we can use them to create new functions via \u003Cstrong>Partial Application\u003C/strong> (providing fewer arguments than expected, explained fully next chapter).\u003C/li>\n\u003Cli>Creating functions like \u003Ccode dir=\"auto\">minus2\u003C/code> (for \u003Ccode dir=\"auto\">x - 2\u003C/code>) via partial application requires care due to argument order (e.g., \u003Ccode dir=\"auto\">(-) 2\u003C/code> means \u003Ccode dir=\"auto\">2 - x\u003C/code>), often necessitating a lambda expression (\u003Ccode dir=\"auto\">fun x -> x - 2\u003C/code>) or a custom function definition.\u003C/li>\n\u003Cli>F# uses the pipeline operator (\u003Ccode dir=\"auto\">|>\u003C/code>) as the primary way to apply functions sequentially to a value (\u003Ccode dir=\"auto\">Value |> Function\u003C/code>), providing an operator-like flow (a form of binary operation) for data transformation, leveraging the fact that functions are first-class values.\u003C/li>\n\u003C/ul>",{"headings":575,"localImagePaths":586,"remoteImagePaths":587,"frontmatter":588,"imagePaths":589},[576,579,582,585],{"depth":182,"slug":577,"text":578},"operators-as-syntactic-sugar-for-functions","Operators as Syntactic Sugar for Functions",{"depth":182,"slug":580,"text":581},"creating-new-functions-with-partial-application-preview","Creating New Functions with Partial Application (Preview)",{"depth":182,"slug":583,"text":584},"using-functions-like-operators-via","Using Functions like Operators (via |>)",{"depth":182,"slug":408,"text":409},[],[],{"title":564,"description":565},[],"en/book/unit-1/section-1/4-recursion",{"id":590,"data":592,"body":598,"filePath":599,"digest":600,"rendered":601},{"title":593,"description":594,"editUrl":16,"head":595,"template":18,"sidebar":596,"pagefind":16,"draft":20},"Recursion: The Foundation of Functional Iteration","This chapter delves into some deep foundational concepts of functional programming theory, including potentially advanced topics like fixed-point combinators discussed later. These aspects can go beyond everyday practical application and might feel challenging. Beginners, in particular, should not feel obligated to grasp every theoretical detail immediately. If you find parts of this section difficult or overly abstract, please feel free to skim or skip ahead to the next practical topic.",[],{"hidden":20,"attrs":597},{},"\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n*This chapter delves into some deep foundational concepts of functional programming theory, including potentially advanced topics like fixed-point combinators discussed later. These aspects can go beyond everyday practical application and might feel challenging. Beginners, in particular, should not feel obligated to grasp every theoretical detail immediately. If you find parts of this section difficult or overly abstract, please feel free to skim or skip ahead to the next practical topic.*\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\nIn the previous section, we saw how functional programming tackles iteration using higher-order functions (HOFs) like `fold` (or `reduce`) and sequence generation functions like `unfold`, often combined elegantly with pipelines. This approach focuses on *what* transformation to apply to a collection or sequence.\n\nWhile the previous section focused on HOFs for iteration, this section explores  **Recursion**  as the fundamental mechanism in functional programming for achieving repetition, mirroring imperative loops. The core idea underlying recursion is  **self-reference** —the concept of something referring to or containing itself—and a function calling itself is just one common implementation of this principle.\n\n## The Concept of Self-Reference\n\nThis self-referential nature appears in many domains:\n\n* **Mathematical Definitions:** For example, the Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2), defined by its own previous values.\n* **Art:** Nested structures like those in Escher's work, where an image contains a smaller version of the same image.\n* **Linguistics:** Self-referential paradoxes like \"This statement is false.\"\n* **Computer Science:** Recursive functions in programming, and data structures like linked lists and trees where nodes refer to other nodes of the same type.\n* **Fractals:** Self-similar shapes where parts resemble the whole structure.\n\n![escher-img](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745132964358.png)\n***Hand with Reflecting Sphere***, also known as ***Self-Portrait in Spherical Mirror*** by M. C. Escher\n\n![tree-img](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131521085.png)\n\nViewing recursion through the lens of self-reference allows us to understand it as a more universal, even philosophical concept that transcends mere programming techniques. The act of referring to oneself holds both infinite possibilities and potential contradictions, which contributes to the depth and fascination of recursion.\n\n## Recursion: The Functional Loop\n\nWith the concept of self-reference in mind, let's look at its application in programming. In functional programming, where mutable state and explicit loop constructs (`for`, `while`) are often avoided, **recursion** – a function calling itself – becomes the primary tool for performing repetitive tasks. Any computation that can be done with an imperative loop can also be done with recursion.\n\nLet's revisit the task of summing integers from 1 up to `n`. Imperatively, we use a loop with an accumulator. Functionally, we can use recursion:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Naive recursive sum: Sum integers from 1 to n\nlet rec sumUpTo n =\n    // Base case: When n is 0 or less, the sum is 0.\n    if n \u003C= 0 then\n        0\n    // Recursive step: Sum is n plus the sum up to n-1.\n    else\n        n + sumUpTo (n - 1)\n\nlet resultNaive = sumUpTo 5 // 5 + 4 + 3 + 2 + 1 = 15\nprintfn \"Naive recursive sum up to 5: %d\" resultNaive\n```\n\nNotice the `rec` keyword before `let`. This explicitly tells the F# compiler that `sumUpTo` is a recursive function, allowing it to call itself within its definition. The function has two parts:\n\n1.  **Base Case:** A condition (`n \u003C= 0`) that stops the recursion. Without a base case, the function would call itself infinitely (much like infinite reflections, but computationally problematic!).\n2.  **Recursive Step:** The function calls itself with a modified argument (`n - 1`) that moves closer to the base case (like looking at the next smaller reflection in the mirror analogy).\n\nThis structure directly implements the looping logic: the recursive step repeats the core logic (adding `n`), and the base case terminates the loop. In functional programming, **loops *are* recursion**.\n\n### The Stack Problem and Tail Call Optimization (TCO)\n\nThe naive recursive approach above has a potential problem. Each time `sumUpTo` calls itself, a new frame is pushed onto the call stack to store intermediate information. For large values of `n`, this can lead to a **stack overflow error**.\n\nImperative loops don't typically suffer from this because they reuse the same stack frame. How can functional languages use recursion for general-purpose loops? The answer is **Tail Recursion** and **Tail Call Optimization (TCO)**.\n\nA function call is in **tail position** if it's the very last action performed by the containing function before it returns. A recursive call in tail position is called **tail recursion**.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Tail-recursive sum: Sum integers from 1 to n\nlet sumUpToTailRecursive n =\n    // Inner helper function 'loop' is tail-recursive\n    let rec loop accumulator currentN =\n        // Base case: When currentN reaches 0, return the accumulated sum.\n        if currentN \u003C= 0 then\n            accumulator\n        // Recursive step: The recursive call is the *last* thing done.\n        else\n            // Add currentN to accumulator, decrement currentN for the next call.\n            loop (accumulator + currentN) (currentN - 1)\n\n    // Start the loop with initial accumulator 0 and initial n.\n    loop 0 n\n\nlet resultTailRec = sumUpToTailRecursive 5 // 15\nprintfn \"Tail recursive sum up to 5: %d\" resultTailRec\n\n// This can handle large numbers without stack overflow due to TCO\n// let largeSum = sumUpToTailRecursive 100000\n// printfn \"Tail recursive sum up to 100000: %d\" largeSum // Works fine\n```\n\nIn `sumUpToTailRecursive`, the actual recursion happens in the inner `loop` function. Crucially, the recursive call `loop (accumulator + currentN) (currentN - 1)` is the very last operation in the `else` branch. There's no calculation (like `n + ...`) waiting to happen *after* the recursive call returns.\n\nF# (and many other functional languages) performs **Tail Call Optimization (TCO)**. When the compiler detects a tail-recursive call, it compiles it not as a standard function call (which pushes a new stack frame) but as an efficient **jump**, similar to how an imperative loop works. This means tail-recursive functions can run indefinitely without consuming stack space, making them a viable and efficient way to implement any kind of loop.\n\n## Higher-Order Functions: Abstracting Recursion\n\nNow that we understand recursion as the fundamental looping mechanism, we can see Higher-Order Functions (HOFs) like `map`, `fold`, and `filter` in a new light: they are **abstractions over common recursive patterns**.\n\nConsider `List.fold`. Its purpose is to process a list and accumulate a result. This is a very common pattern, implemented recursively like this (conceptual example):\n\n```fsharp\n// Conceptual recursive implementation of foldLeft\nlet rec foldLeftRecursive f acc list =\n    match list with\n    | [] -> acc // Base case: empty list, return accumulator\n    | head :: tail -> // Recursive step: process head, recurse on tail\n        let newAcc = f acc head // Apply the combining function\n        foldLeftRecursive f newAcc tail // Tail recursive call\n```\n\nThe `List.fold` HOF captures this exact pattern. Instead of writing the recursion manually, you provide the combining function (`f`) and the initial accumulator (`acc`), and `fold` handles the recursive traversal for you.\n\n```fsharp\n// Using List.fold with the pipeline operator\nlet sumUsingFold =\n    [1; 2; 3; 4; 5] // Start with the list\n    |> List.fold (+) 0 // Pipe it into List.fold with the operation and initial value\n\n// (+) is the combining function 'f'\n// 0 is the initial accumulator 'acc'\n// The list [1..5] is piped in as the last argument\nprintfn \"Sum using fold with pipeline: %d\" sumUsingFold // 15\n```\n\nUsing `fold` (especially with the pipeline) is more declarative – you specify *what* operation to perform (`+`) rather than *how* to iterate recursively.\n\nSimilarly:\n\n* `List.map` abstracts the recursive pattern of applying a function to each element of a list and building a new list.\n* `List.unfold` abstracts the recursive pattern of generating a sequence based on a state and a termination condition.\n\n### Under the Hood: Recursion vs. Loops in HOFs\n\nWhile HOFs conceptually abstract recursive patterns, it's important to know that their **internal implementation** in standard libraries (like .NET's Base Class Library used by F#) might not always be purely recursive F# code.\n\nFor performance reasons, especially when operating on data structures like arrays or interacting with underlying platform features, library functions like `List.map` or `Seq.fold` might be implemented internally using optimized, low-level **imperative loops** (`while`, `for`) written perhaps in C# or directly manipulating internal data structures.\n\nDoes this invalidate the functional approach? Not at all. The key is that the **external interface and the semantic behavior** of these HOFs remain purely functional. They take functions as arguments, operate on data immutably (returning new collections instead of modifying old ones), and hide the imperative implementation details. They provide a functional abstraction layer, regardless of whether the lowest-level implementation uses recursion or an optimized imperative loop. This allows programmers to benefit from functional composition and reasoning while leveraging efficient underlying implementations.\n\n## Recursion for Recursive Problems\n\nWhile HOFs are excellent for abstracting common iteration patterns over linear structures like lists or sequences, **direct recursion remains the most natural and often clearest approach for problems that are inherently recursive in nature**.\n\n![tree-img](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131521085.png)\n\nA classic example is processing tree-like data structures. Consider traversing a file system directory structure:\n\n![directory](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131340381.png)\n\n* To process a directory, you need to process each file *within* it.\n* You also need to process each subdirectory *within* it.\n* Processing a subdirectory is the *same problem* as processing the top-level directory, just on a smaller scale.\n\nThis self-similar structure screams recursion:\n\n```fsharp\n// Conceptual example: Processing a directory tree\ntype FileSystemItem =\n    | File of name: string\n    | Directory of name: string * items: FileSystemItem list\n\nlet rec processItem item =\n    match item with\n    | File (name) ->\n        printfn \"Processing file: %s\" name\n        // Perform action on the file\n    | Directory (name, items) ->\n        printfn \"Entering directory: %s\" name\n        // Perform action on the directory itself (optional)\n        items |> List.iter processItem // Recursive call for each sub-item!\n        printfn \"Exiting directory: %s\" name\n\n// Trying to express this cleanly with only standard HOFs like fold or map\n// can be much more complex and less intuitive than direct recursion.\n```\n\nOther examples include parsing nested structures, evaluating mathematical expressions represented as trees, certain sorting algorithms (like Quicksort or Mergesort), etc. In these cases, the recursive structure of the function directly mirrors the recursive structure of the data or the problem, leading to elegant and understandable code.\n\n## Recursion vs. HOFs: Choosing the Right Tool\n\nSo, when should you use direct recursion, and when should you prefer HOFs? Here's a pragmatic guide:\n\n1.  **Prefer HOFs for Standard Patterns:** If you are iterating over a list/sequence/array to transform elements (`map`), select elements (`filter`), or accumulate a result (`fold`), **use the corresponding HOF**. They are more declarative, generally less error-prone (no need to manage base cases and recursive calls explicitly), and clearly express the intent.\n2.  **Critique of Misplaced Recursion:** Be wary of using recursion just for show, especially for tasks that are perfect fits for HOFs. For instance, summing the numbers 0-5 using manual recursion, as sometimes presented in introductory FP texts, is arguably *less* clear and *less* idiomatic than using `List.fold (+) 0 [0..5]` or `List.sum [0..5]`. The core of that problem is **folding** (combining elements with an operation), so `fold` (or `sum`) is the right abstraction. Using recursion there doesn't necessarily showcase FP's strengths better than using the appropriate HOF. Choose the tool that best fits the problem's essence.\n3.  **Use Recursion for Non-Standard or Recursive Problems:** If the iteration pattern doesn't neatly fit a standard HOF, or if the problem/data structure is inherently recursive (like trees), then direct recursion (especially tail recursion) is the appropriate tool.\n4.  **Understand the Problem Deeply:** Only opt for direct recursion (especially complex recursion) if you deeply understand the recursive structure of the problem you are solving and are confident in your implementation (base cases, recursive steps, termination). Otherwise, stick to HOFs where possible.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n## Self-Reference Without Self-Reference: Recursion and Turing Completeness\n\nThe concept of \"Self-Reference Without Self-Reference\" represents one of the most fascinating aspects of theoretical computer science and functional programming. At its core, it demonstrates something profound: **recursive behavior can be achieved without explicit recursive definitions in the language**. This has deep implications for understanding the fundamental power of computation.\n\n### The Challenge in Pure Functional Models\n\nIn the lambda calculus (the theoretical foundation of functional programming), there initially appears to be no direct way to define a recursive function because a function cannot refer to itself within its own definition using its name. This limitation would seemingly make it impossible to implement loops or recursive algorithms, essential components for general-purpose computation.\n\nIf a computational model cannot inherently express repetition (loops or recursion) and conditional branching (selection), it cannot solve all computable problems. The ability to solve any problem solvable by a theoretical Turing machine is known as **Turing completeness**.\n\n### Achieving Repetition: The Role of Fixed-Point Combinators\n\nHowever, fixed-point combinators, such as the Y combinator, demonstrate that this initial intuition about lambda calculus's limitations is incorrect. They provide a mechanism to achieve recursion *using only the core features of lambda calculus: function definition (lambda abstraction) and function application*.\n\n**The Y Combinator: Self-Reference Through Indirection**\n\nThe Y combinator achieves self-reference without direct naming through clever use of higher-order functions:\n\n```fsharp\n// Note: The 'rec' here is for F#'s definition, but the *body*\n// of Y and its application below don't rely on direct recursion.\nlet rec Y f =\n    (fun x -> f (fun y -> x x y)) (fun x -> f (fun y -> x x y))\n```\n\nThis function doesn't contain explicit recursion *in the logic it enables*. It creates a structure where:\n\n1.  A function `f` (representing the recursive step) receives a way to call itself (`fun y -> x x y`) as an argument.\n2.  `f` can then invoke this argument to achieve the next step of the recursion.\n3.  The Y combinator orchestrates this self-application (`x x`) automatically.\n\n**Practical Implementation in F#**\n\nLet's examine a factorial function using the Y combinator. The factorial logic itself (`fun self -> fun n -> ...`) doesn't use `let rec` or refer to `factorial`:\n\n```fsharp\n// Define the Y combinator (as above)\nlet rec Y f =\n    (fun x -> f (fun y -> x x y)) (fun x -> f (fun y -> x x y))\n\n// Define the *logic* of factorial without direct recursion\nlet factorialStep =\n    fun self ->          // 'self' will be the function to call recursively\n        fun n ->\n            if n = 0 then 1\n            else n * self (n - 1) // Call the recursively passed 'self'\n\n// Create the recursive factorial function using Y combinator\nlet factorial = Y factorialStep\n\n// Usage\nprintfn \"%d\" (factorial 5)  // Outputs: 120\n```\n\nNotice how the `factorialStep` function receives `self` as an argument, representing the function itself, enabling the recursive call `self (n - 1)`. The Y combinator provides the mechanism to make this `self` argument correctly refer back to the function being defined.\n\n**Pure Lambda Calculus Implementation**\n\nIn pure lambda calculus terms, without any language-specific keywords like `rec`, the Y combinator is:\n\n```\nY = λf.(λx.f (x x)) (λx.f (x x))\n```\n\nThis pure expression demonstrates that recursion is inherent in the mechanism of functional abstraction and application.\n\n### Implications: Functions, Recursion, and Turing Completeness\n\nThe existence of fixed-point combinators like Y is theoretically crucial because it proves that **repetition (recursion/loops) can be achieved using only functions**.\n\nFor a system to be Turing complete, it generally needs:\n\n1.  **Selection (Conditional Branching):** The ability to perform different actions based on conditions. In lambda calculus, this is achieved by encoding boolean values and `if-then-else` logic as functions (e.g., Church booleans).\n2.  **Repetition (Iteration/Recursion):** The ability to repeat actions. As demonstrated, fixed-point combinators provide this capability using only functions.\n\nSince lambda calculus can express both selection and repetition using *only its fundamental building blocks (abstraction and application)*, it is **Turing complete**.\n\nThis means:\n\n1.  Recursion is not a primitive feature that *must* be added to a language; it can emerge from simpler functional concepts.\n2.  Looping constructs can similarly be derived.\n3.  The expressive power of pure functions is sufficient for universal computation.\n\nFunctional languages like F# inherit this power. While they provide convenient syntax like `let rec` for defining recursive functions directly, the underlying theoretical foundation guarantees that even without such syntax, recursion (and thus any computable algorithm) could still be expressed using techniques like the Y combinator.\n\nThe Y combinator isn't just a clever trick—it's a profound demonstration that self-reference, recursion, iteration, and ultimately **Turing completeness** are inherent properties of the functional paradigm based on lambda calculus.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Summary\n\n* **Recursion** is the fundamental mechanism for implementing loops and iteration in functional programming, replacing imperative `for` and `while` loops. In FP, loops *are* recursion.\n* **Tail Call Optimization (TCO)** is crucial for making recursion efficient for general-purpose loops in languages like F#, preventing stack overflows.\n* **Higher-Order Functions** (`map`, `fold`, etc.) abstract common recursive patterns, leading to more declarative and often safer code.\n* While HOFs conceptually abstract recursion, their low-level implementation in libraries might use optimized **imperative loops** for performance, but their functional interface is maintained.\n* **Direct recursion** remains the best tool for inherently recursive problems (e.g., tree structures).\n* **Choose wisely:** Prefer HOFs for standard iteration patterns; use recursion when the problem structure demands it or when HOFs are awkward. Avoid using recursion just because you can when a standard HOF is a better fit.","src/content/docs/en/book/unit-1/section-1/4-recursion.md","5c60f3672c431442",{"html":602,"metadata":603},"\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cem>This chapter delves into some deep foundational concepts of functional programming theory, including potentially advanced topics like fixed-point combinators discussed later. These aspects can go beyond everyday practical application and might feel challenging. Beginners, in particular, should not feel obligated to grasp every theoretical detail immediately. If you find parts of this section difficult or overly abstract, please feel free to skim or skip ahead to the next practical topic.\u003C/em>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cp>In the previous section, we saw how functional programming tackles iteration using higher-order functions (HOFs) like \u003Ccode dir=\"auto\">fold\u003C/code> (or \u003Ccode dir=\"auto\">reduce\u003C/code>) and sequence generation functions like \u003Ccode dir=\"auto\">unfold\u003C/code>, often combined elegantly with pipelines. This approach focuses on \u003Cem>what\u003C/em> transformation to apply to a collection or sequence.\u003C/p>\n\u003Cp>While the previous section focused on HOFs for iteration, this section explores  \u003Cstrong>Recursion\u003C/strong>  as the fundamental mechanism in functional programming for achieving repetition, mirroring imperative loops. The core idea underlying recursion is  \u003Cstrong>self-reference\u003C/strong> —the concept of something referring to or containing itself—and a function calling itself is just one common implementation of this principle.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-concept-of-self-reference\">The Concept of Self-Reference\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-concept-of-self-reference\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Concept of Self-Reference”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This self-referential nature appears in many domains:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Mathematical Definitions:\u003C/strong> For example, the Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2), defined by its own previous values.\u003C/li>\n\u003Cli>\u003Cstrong>Art:\u003C/strong> Nested structures like those in Escher’s work, where an image contains a smaller version of the same image.\u003C/li>\n\u003Cli>\u003Cstrong>Linguistics:\u003C/strong> Self-referential paradoxes like “This statement is false.”\u003C/li>\n\u003Cli>\u003Cstrong>Computer Science:\u003C/strong> Recursive functions in programming, and data structures like linked lists and trees where nodes refer to other nodes of the same type.\u003C/li>\n\u003Cli>\u003Cstrong>Fractals:\u003C/strong> Self-similar shapes where parts resemble the whole structure.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745132964358.png\" alt=\"escher-img\">\n\u003Cem>\u003Cstrong>Hand with Reflecting Sphere\u003C/strong>\u003C/em>, also known as \u003Cem>\u003Cstrong>Self-Portrait in Spherical Mirror\u003C/strong>\u003C/em> by M. C. Escher\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131521085.png\" alt=\"tree-img\">\u003C/p>\n\u003Cp>Viewing recursion through the lens of self-reference allows us to understand it as a more universal, even philosophical concept that transcends mere programming techniques. The act of referring to oneself holds both infinite possibilities and potential contradictions, which contributes to the depth and fascination of recursion.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"recursion-the-functional-loop\">Recursion: The Functional Loop\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#recursion-the-functional-loop\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Recursion: The Functional Loop”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>With the concept of self-reference in mind, let’s look at its application in programming. In functional programming, where mutable state and explicit loop constructs (\u003Ccode dir=\"auto\">for\u003C/code>, \u003Ccode dir=\"auto\">while\u003C/code>) are often avoided, \u003Cstrong>recursion\u003C/strong> – a function calling itself – becomes the primary tool for performing repetitive tasks. Any computation that can be done with an imperative loop can also be done with recursion.\u003C/p>\n\u003Cp>Let’s revisit the task of summing integers from 1 up to \u003Ccode dir=\"auto\">n\u003C/code>. Imperatively, we use a loop with an accumulator. Functionally, we can use recursion:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Naive recursive sum: Sum integers from 1 to n\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumUpTo\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Base case: When n is 0 or less, the sum is 0.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Recursive step: Sum is n plus the sum up to n-1.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumUpTo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultNaive\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumUpTo \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 5 + 4 + 3 + 2 + 1 = 15\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Naive recursive sum up to 5: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> resultNaive\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Naive recursive sum: Sum integers from 1 to nlet rec sumUpTo n =    // Base case: When n is 0 or less, the sum is 0.    if n \u003C= 0 then        0    // Recursive step: Sum is n plus the sum up to n-1.    else        n + sumUpTo (n - 1)let resultNaive = sumUpTo 5 // 5 + 4 + 3 + 2 + 1 = 15printfn &#x22;Naive recursive sum up to 5: %d&#x22; resultNaive\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Notice the \u003Ccode dir=\"auto\">rec\u003C/code> keyword before \u003Ccode dir=\"auto\">let\u003C/code>. This explicitly tells the F# compiler that \u003Ccode dir=\"auto\">sumUpTo\u003C/code> is a recursive function, allowing it to call itself within its definition. The function has two parts:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Base Case:\u003C/strong> A condition (\u003Ccode dir=\"auto\">n &#x3C;= 0\u003C/code>) that stops the recursion. Without a base case, the function would call itself infinitely (much like infinite reflections, but computationally problematic!).\u003C/li>\n\u003Cli>\u003Cstrong>Recursive Step:\u003C/strong> The function calls itself with a modified argument (\u003Ccode dir=\"auto\">n - 1\u003C/code>) that moves closer to the base case (like looking at the next smaller reflection in the mirror analogy).\u003C/li>\n\u003C/ol>\n\u003Cp>This structure directly implements the looping logic: the recursive step repeats the core logic (adding \u003Ccode dir=\"auto\">n\u003C/code>), and the base case terminates the loop. In functional programming, \u003Cstrong>loops \u003Cem>are\u003C/em> recursion\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"the-stack-problem-and-tail-call-optimization-tco\">The Stack Problem and Tail Call Optimization (TCO)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#the-stack-problem-and-tail-call-optimization-tco\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Stack Problem and Tail Call Optimization (TCO)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The naive recursive approach above has a potential problem. Each time \u003Ccode dir=\"auto\">sumUpTo\u003C/code> calls itself, a new frame is pushed onto the call stack to store intermediate information. For large values of \u003Ccode dir=\"auto\">n\u003C/code>, this can lead to a \u003Cstrong>stack overflow error\u003C/strong>.\u003C/p>\n\u003Cp>Imperative loops don’t typically suffer from this because they reuse the same stack frame. How can functional languages use recursion for general-purpose loops? The answer is \u003Cstrong>Tail Recursion\u003C/strong> and \u003Cstrong>Tail Call Optimization (TCO)\u003C/strong>.\u003C/p>\n\u003Cp>A function call is in \u003Cstrong>tail position\u003C/strong> if it’s the very last action performed by the containing function before it returns. A recursive call in tail position is called \u003Cstrong>tail recursion\u003C/strong>.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Tail-recursive sum: Sum integers from 1 to n\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumUpToTailRecursive\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Inner helper function 'loop' is tail-recursive\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">loop\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> accumulator currentN \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Base case: When currentN reaches 0, return the accumulated sum.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> currentN \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">accumulator\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Recursive step: The recursive call is the *last* thing done.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Add currentN to accumulator, decrement currentN for the next call.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">loop \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">accumulator \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> currentN\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">currentN \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start the loop with initial accumulator 0 and initial n.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">loop \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultTailRec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumUpToTailRecursive \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 15\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Tail recursive sum up to 5: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> resultTailRec\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This can handle large numbers without stack overflow due to TCO\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let largeSum = sumUpToTailRecursive 100000\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// printfn \"Tail recursive sum up to 100000: %d\" largeSum // Works fine\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Tail-recursive sum: Sum integers from 1 to nlet sumUpToTailRecursive n =    // Inner helper function &#x27;loop&#x27; is tail-recursive    let rec loop accumulator currentN =        // Base case: When currentN reaches 0, return the accumulated sum.        if currentN \u003C= 0 then            accumulator        // Recursive step: The recursive call is the *last* thing done.        else            // Add currentN to accumulator, decrement currentN for the next call.            loop (accumulator + currentN) (currentN - 1)    // Start the loop with initial accumulator 0 and initial n.    loop 0 nlet resultTailRec = sumUpToTailRecursive 5 // 15printfn &#x22;Tail recursive sum up to 5: %d&#x22; resultTailRec// This can handle large numbers without stack overflow due to TCO// let largeSum = sumUpToTailRecursive 100000// printfn &#x22;Tail recursive sum up to 100000: %d&#x22; largeSum // Works fine\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In \u003Ccode dir=\"auto\">sumUpToTailRecursive\u003C/code>, the actual recursion happens in the inner \u003Ccode dir=\"auto\">loop\u003C/code> function. Crucially, the recursive call \u003Ccode dir=\"auto\">loop (accumulator + currentN) (currentN - 1)\u003C/code> is the very last operation in the \u003Ccode dir=\"auto\">else\u003C/code> branch. There’s no calculation (like \u003Ccode dir=\"auto\">n + ...\u003C/code>) waiting to happen \u003Cem>after\u003C/em> the recursive call returns.\u003C/p>\n\u003Cp>F# (and many other functional languages) performs \u003Cstrong>Tail Call Optimization (TCO)\u003C/strong>. When the compiler detects a tail-recursive call, it compiles it not as a standard function call (which pushes a new stack frame) but as an efficient \u003Cstrong>jump\u003C/strong>, similar to how an imperative loop works. This means tail-recursive functions can run indefinitely without consuming stack space, making them a viable and efficient way to implement any kind of loop.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"higher-order-functions-abstracting-recursion\">Higher-Order Functions: Abstracting Recursion\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#higher-order-functions-abstracting-recursion\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Higher-Order Functions: Abstracting Recursion”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now that we understand recursion as the fundamental looping mechanism, we can see Higher-Order Functions (HOFs) like \u003Ccode dir=\"auto\">map\u003C/code>, \u003Ccode dir=\"auto\">fold\u003C/code>, and \u003Ccode dir=\"auto\">filter\u003C/code> in a new light: they are \u003Cstrong>abstractions over common recursive patterns\u003C/strong>.\u003C/p>\n\u003Cp>Consider \u003Ccode dir=\"auto\">List.fold\u003C/code>. Its purpose is to process a list and accumulate a result. This is a very common pattern, implemented recursively like this (conceptual example):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Conceptual recursive implementation of foldLeft\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">foldLeftRecursive\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f acc list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">match\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> acc \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Base case: empty list, return accumulator\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> head \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">::\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> tail \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Recursive step: process head, recurse on tail\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">newAcc\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f acc head \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the combining function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">foldLeftRecursive f newAcc tail \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Tail recursive call\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Conceptual recursive implementation of foldLeftlet rec foldLeftRecursive f acc list =    match list with    | [] -> acc // Base case: empty list, return accumulator    | head :: tail -> // Recursive step: process head, recurse on tail        let newAcc = f acc head // Apply the combining function        foldLeftRecursive f newAcc tail // Tail recursive call\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">List.fold\u003C/code> HOF captures this exact pattern. Instead of writing the recursion manually, you provide the combining function (\u003Ccode dir=\"auto\">f\u003C/code>) and the initial accumulator (\u003Ccode dir=\"auto\">acc\u003C/code>), and \u003Ccode dir=\"auto\">fold\u003C/code> handles the recursive traversal for you.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using List.fold with the pipeline operator\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumUsingFold\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with the list\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.fold \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Pipe it into List.fold with the operation and initial value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (+) is the combining function 'f'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 0 is the initial accumulator 'acc'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The list [1..5] is piped in as the last argument\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Sum using fold with pipeline: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumUsingFold \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 15\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Using List.fold with the pipeline operatorlet sumUsingFold =    [1; 2; 3; 4; 5] // Start with the list    |> List.fold (+) 0 // Pipe it into List.fold with the operation and initial value// (+) is the combining function &#x27;f&#x27;// 0 is the initial accumulator &#x27;acc&#x27;// The list [1..5] is piped in as the last argumentprintfn &#x22;Sum using fold with pipeline: %d&#x22; sumUsingFold // 15\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Using \u003Ccode dir=\"auto\">fold\u003C/code> (especially with the pipeline) is more declarative – you specify \u003Cem>what\u003C/em> operation to perform (\u003Ccode dir=\"auto\">+\u003C/code>) rather than \u003Cem>how\u003C/em> to iterate recursively.\u003C/p>\n\u003Cp>Similarly:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">List.map\u003C/code> abstracts the recursive pattern of applying a function to each element of a list and building a new list.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">List.unfold\u003C/code> abstracts the recursive pattern of generating a sequence based on a state and a termination condition.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"under-the-hood-recursion-vs-loops-in-hofs\">Under the Hood: Recursion vs. Loops in HOFs\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#under-the-hood-recursion-vs-loops-in-hofs\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Under the Hood: Recursion vs. Loops in HOFs”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While HOFs conceptually abstract recursive patterns, it’s important to know that their \u003Cstrong>internal implementation\u003C/strong> in standard libraries (like .NET’s Base Class Library used by F#) might not always be purely recursive F# code.\u003C/p>\n\u003Cp>For performance reasons, especially when operating on data structures like arrays or interacting with underlying platform features, library functions like \u003Ccode dir=\"auto\">List.map\u003C/code> or \u003Ccode dir=\"auto\">Seq.fold\u003C/code> might be implemented internally using optimized, low-level \u003Cstrong>imperative loops\u003C/strong> (\u003Ccode dir=\"auto\">while\u003C/code>, \u003Ccode dir=\"auto\">for\u003C/code>) written perhaps in C# or directly manipulating internal data structures.\u003C/p>\n\u003Cp>Does this invalidate the functional approach? Not at all. The key is that the \u003Cstrong>external interface and the semantic behavior\u003C/strong> of these HOFs remain purely functional. They take functions as arguments, operate on data immutably (returning new collections instead of modifying old ones), and hide the imperative implementation details. They provide a functional abstraction layer, regardless of whether the lowest-level implementation uses recursion or an optimized imperative loop. This allows programmers to benefit from functional composition and reasoning while leveraging efficient underlying implementations.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"recursion-for-recursive-problems\">Recursion for Recursive Problems\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#recursion-for-recursive-problems\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Recursion for Recursive Problems”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While HOFs are excellent for abstracting common iteration patterns over linear structures like lists or sequences, \u003Cstrong>direct recursion remains the most natural and often clearest approach for problems that are inherently recursive in nature\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131521085.png\" alt=\"tree-img\">\u003C/p>\n\u003Cp>A classic example is processing tree-like data structures. Consider traversing a file system directory structure:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745131340381.png\" alt=\"directory\">\u003C/p>\n\u003Cul>\n\u003Cli>To process a directory, you need to process each file \u003Cem>within\u003C/em> it.\u003C/li>\n\u003Cli>You also need to process each subdirectory \u003Cem>within\u003C/em> it.\u003C/li>\n\u003Cli>Processing a subdirectory is the \u003Cem>same problem\u003C/em> as processing the top-level directory, just on a smaller scale.\u003C/li>\n\u003C/ul>\n\u003Cp>This self-similar structure screams recursion:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Conceptual example: Processing a directory tree\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> FileSystemItem \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> File \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">of\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">name\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Directory \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">of\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">name\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">items\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> FileSystemItem list\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">processItem\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> item \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">match\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> item \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> File \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">name\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Processing file: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> name\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Perform action on the file\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Directory \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">name\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> items\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Entering directory: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> name\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Perform action on the directory itself (optional)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">items \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.iter processItem \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Recursive call for each sub-item!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Exiting directory: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> name\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Trying to express this cleanly with only standard HOFs like fold or map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// can be much more complex and less intuitive than direct recursion.\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Conceptual example: Processing a directory treetype FileSystemItem =    | File of name: string    | Directory of name: string * items: FileSystemItem listlet rec processItem item =    match item with    | File (name) ->        printfn &#x22;Processing file: %s&#x22; name        // Perform action on the file    | Directory (name, items) ->        printfn &#x22;Entering directory: %s&#x22; name        // Perform action on the directory itself (optional)        items |> List.iter processItem // Recursive call for each sub-item!        printfn &#x22;Exiting directory: %s&#x22; name// Trying to express this cleanly with only standard HOFs like fold or map// can be much more complex and less intuitive than direct recursion.\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Other examples include parsing nested structures, evaluating mathematical expressions represented as trees, certain sorting algorithms (like Quicksort or Mergesort), etc. In these cases, the recursive structure of the function directly mirrors the recursive structure of the data or the problem, leading to elegant and understandable code.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"recursion-vs-hofs-choosing-the-right-tool\">Recursion vs. HOFs: Choosing the Right Tool\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#recursion-vs-hofs-choosing-the-right-tool\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Recursion vs. HOFs: Choosing the Right Tool”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>So, when should you use direct recursion, and when should you prefer HOFs? Here’s a pragmatic guide:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Prefer HOFs for Standard Patterns:\u003C/strong> If you are iterating over a list/sequence/array to transform elements (\u003Ccode dir=\"auto\">map\u003C/code>), select elements (\u003Ccode dir=\"auto\">filter\u003C/code>), or accumulate a result (\u003Ccode dir=\"auto\">fold\u003C/code>), \u003Cstrong>use the corresponding HOF\u003C/strong>. They are more declarative, generally less error-prone (no need to manage base cases and recursive calls explicitly), and clearly express the intent.\u003C/li>\n\u003Cli>\u003Cstrong>Critique of Misplaced Recursion:\u003C/strong> Be wary of using recursion just for show, especially for tasks that are perfect fits for HOFs. For instance, summing the numbers 0-5 using manual recursion, as sometimes presented in introductory FP texts, is arguably \u003Cem>less\u003C/em> clear and \u003Cem>less\u003C/em> idiomatic than using \u003Ccode dir=\"auto\">List.fold (+) 0 [0..5]\u003C/code> or \u003Ccode dir=\"auto\">List.sum [0..5]\u003C/code>. The core of that problem is \u003Cstrong>folding\u003C/strong> (combining elements with an operation), so \u003Ccode dir=\"auto\">fold\u003C/code> (or \u003Ccode dir=\"auto\">sum\u003C/code>) is the right abstraction. Using recursion there doesn’t necessarily showcase FP’s strengths better than using the appropriate HOF. Choose the tool that best fits the problem’s essence.\u003C/li>\n\u003Cli>\u003Cstrong>Use Recursion for Non-Standard or Recursive Problems:\u003C/strong> If the iteration pattern doesn’t neatly fit a standard HOF, or if the problem/data structure is inherently recursive (like trees), then direct recursion (especially tail recursion) is the appropriate tool.\u003C/li>\n\u003Cli>\u003Cstrong>Understand the Problem Deeply:\u003C/strong> Only opt for direct recursion (especially complex recursion) if you deeply understand the recursive structure of the problem you are solving and are confident in your implementation (base cases, recursive steps, termination). Otherwise, stick to HOFs where possible.\u003C/li>\n\u003C/ol>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"self-reference-without-self-reference-recursion-and-turing-completeness\">Self-Reference Without Self-Reference: Recursion and Turing Completeness\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#self-reference-without-self-reference-recursion-and-turing-completeness\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Self-Reference Without Self-Reference: Recursion and Turing Completeness”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The concept of “Self-Reference Without Self-Reference” represents one of the most fascinating aspects of theoretical computer science and functional programming. At its core, it demonstrates something profound: \u003Cstrong>recursive behavior can be achieved without explicit recursive definitions in the language\u003C/strong>. This has deep implications for understanding the fundamental power of computation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"the-challenge-in-pure-functional-models\">The Challenge in Pure Functional Models\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#the-challenge-in-pure-functional-models\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Challenge in Pure Functional Models”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In the lambda calculus (the theoretical foundation of functional programming), there initially appears to be no direct way to define a recursive function because a function cannot refer to itself within its own definition using its name. This limitation would seemingly make it impossible to implement loops or recursive algorithms, essential components for general-purpose computation.\u003C/p>\n\u003Cp>If a computational model cannot inherently express repetition (loops or recursion) and conditional branching (selection), it cannot solve all computable problems. The ability to solve any problem solvable by a theoretical Turing machine is known as \u003Cstrong>Turing completeness\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"achieving-repetition-the-role-of-fixed-point-combinators\">Achieving Repetition: The Role of Fixed-Point Combinators\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#achieving-repetition-the-role-of-fixed-point-combinators\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Achieving Repetition: The Role of Fixed-Point Combinators”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>However, fixed-point combinators, such as the Y combinator, demonstrate that this initial intuition about lambda calculus’s limitations is incorrect. They provide a mechanism to achieve recursion \u003Cem>using only the core features of lambda calculus: function definition (lambda abstraction) and function application\u003C/em>.\u003C/p>\n\u003Cp>\u003Cstrong>The Y Combinator: Self-Reference Through Indirection\u003C/strong>\u003C/p>\n\u003Cp>The Y combinator achieves self-reference without direct naming through clever use of higher-order functions:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Note: The 'rec' here is for F#'s definition, but the *body*\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// of Y and its application below don't rely on direct recursion.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">Y\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x x y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">))\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x x y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">))\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Note: The &#x27;rec&#x27; here is for F#&#x27;s definition, but the *body*// of Y and its application below don&#x27;t rely on direct recursion.let rec Y f =    (fun x -> f (fun y -> x x y)) (fun x -> f (fun y -> x x y))\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This function doesn’t contain explicit recursion \u003Cem>in the logic it enables\u003C/em>. It creates a structure where:\u003C/p>\n\u003Col>\n\u003Cli>A function \u003Ccode dir=\"auto\">f\u003C/code> (representing the recursive step) receives a way to call itself (\u003Ccode dir=\"auto\">fun y -> x x y\u003C/code>) as an argument.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">f\u003C/code> can then invoke this argument to achieve the next step of the recursion.\u003C/li>\n\u003Cli>The Y combinator orchestrates this self-application (\u003Ccode dir=\"auto\">x x\u003C/code>) automatically.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Practical Implementation in F#\u003C/strong>\u003C/p>\n\u003Cp>Let’s examine a factorial function using the Y combinator. The factorial logic itself (\u003Ccode dir=\"auto\">fun self -> fun n -> ...\u003C/code>) doesn’t use \u003Ccode dir=\"auto\">let rec\u003C/code> or refer to \u003Ccode dir=\"auto\">factorial\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the Y combinator (as above)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let rec\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">Y\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x x y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">))\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x x y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">))\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the *logic* of factorial without direct recursion\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">factorialStep\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> self \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">          \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'self' will be the function to call recursively\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> self \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Call the recursively passed 'self'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create the recursive factorial function using Y combinator\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">factorial\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Y factorialStep\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Usage\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">factorial \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Outputs: 120\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define the Y combinator (as above)let rec Y f =    (fun x -> f (fun y -> x x y)) (fun x -> f (fun y -> x x y))// Define the *logic* of factorial without direct recursionlet factorialStep =    fun self ->          // &#x27;self&#x27; will be the function to call recursively        fun n ->            if n = 0 then 1            else n * self (n - 1) // Call the recursively passed &#x27;self&#x27;// Create the recursive factorial function using Y combinatorlet factorial = Y factorialStep// Usageprintfn &#x22;%d&#x22; (factorial 5)  // Outputs: 120\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Notice how the \u003Ccode dir=\"auto\">factorialStep\u003C/code> function receives \u003Ccode dir=\"auto\">self\u003C/code> as an argument, representing the function itself, enabling the recursive call \u003Ccode dir=\"auto\">self (n - 1)\u003C/code>. The Y combinator provides the mechanism to make this \u003Ccode dir=\"auto\">self\u003C/code> argument correctly refer back to the function being defined.\u003C/p>\n\u003Cp>\u003Cstrong>Pure Lambda Calculus Implementation\u003C/strong>\u003C/p>\n\u003Cp>In pure lambda calculus terms, without any language-specific keywords like \u003Ccode dir=\"auto\">rec\u003C/code>, the Y combinator is:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">Y = λf.(λx.f (x x)) (λx.f (x x))\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Y = λf.(λx.f (x x)) (λx.f (x x))\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This pure expression demonstrates that recursion is inherent in the mechanism of functional abstraction and application.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"implications-functions-recursion-and-turing-completeness\">Implications: Functions, Recursion, and Turing Completeness\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#implications-functions-recursion-and-turing-completeness\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Implications: Functions, Recursion, and Turing Completeness”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The existence of fixed-point combinators like Y is theoretically crucial because it proves that \u003Cstrong>repetition (recursion/loops) can be achieved using only functions\u003C/strong>.\u003C/p>\n\u003Cp>For a system to be Turing complete, it generally needs:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Selection (Conditional Branching):\u003C/strong> The ability to perform different actions based on conditions. In lambda calculus, this is achieved by encoding boolean values and \u003Ccode dir=\"auto\">if-then-else\u003C/code> logic as functions (e.g., Church booleans).\u003C/li>\n\u003Cli>\u003Cstrong>Repetition (Iteration/Recursion):\u003C/strong> The ability to repeat actions. As demonstrated, fixed-point combinators provide this capability using only functions.\u003C/li>\n\u003C/ol>\n\u003Cp>Since lambda calculus can express both selection and repetition using \u003Cem>only its fundamental building blocks (abstraction and application)\u003C/em>, it is \u003Cstrong>Turing complete\u003C/strong>.\u003C/p>\n\u003Cp>This means:\u003C/p>\n\u003Col>\n\u003Cli>Recursion is not a primitive feature that \u003Cem>must\u003C/em> be added to a language; it can emerge from simpler functional concepts.\u003C/li>\n\u003Cli>Looping constructs can similarly be derived.\u003C/li>\n\u003Cli>The expressive power of pure functions is sufficient for universal computation.\u003C/li>\n\u003C/ol>\n\u003Cp>Functional languages like F# inherit this power. While they provide convenient syntax like \u003Ccode dir=\"auto\">let rec\u003C/code> for defining recursive functions directly, the underlying theoretical foundation guarantees that even without such syntax, recursion (and thus any computable algorithm) could still be expressed using techniques like the Y combinator.\u003C/p>\n\u003Cp>The Y combinator isn’t just a clever trick—it’s a profound demonstration that self-reference, recursion, iteration, and ultimately \u003Cstrong>Turing completeness\u003C/strong> are inherent properties of the functional paradigm based on lambda calculus.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Recursion\u003C/strong> is the fundamental mechanism for implementing loops and iteration in functional programming, replacing imperative \u003Ccode dir=\"auto\">for\u003C/code> and \u003Ccode dir=\"auto\">while\u003C/code> loops. In FP, loops \u003Cem>are\u003C/em> recursion.\u003C/li>\n\u003Cli>\u003Cstrong>Tail Call Optimization (TCO)\u003C/strong> is crucial for making recursion efficient for general-purpose loops in languages like F#, preventing stack overflows.\u003C/li>\n\u003Cli>\u003Cstrong>Higher-Order Functions\u003C/strong> (\u003Ccode dir=\"auto\">map\u003C/code>, \u003Ccode dir=\"auto\">fold\u003C/code>, etc.) abstract common recursive patterns, leading to more declarative and often safer code.\u003C/li>\n\u003Cli>While HOFs conceptually abstract recursion, their low-level implementation in libraries might use optimized \u003Cstrong>imperative loops\u003C/strong> for performance, but their functional interface is maintained.\u003C/li>\n\u003Cli>\u003Cstrong>Direct recursion\u003C/strong> remains the best tool for inherently recursive problems (e.g., tree structures).\u003C/li>\n\u003Cli>\u003Cstrong>Choose wisely:\u003C/strong> Prefer HOFs for standard iteration patterns; use recursion when the problem structure demands it or when HOFs are awkward. Avoid using recursion just because you can when a standard HOF is a better fit.\u003C/li>\n\u003C/ul>",{"headings":604,"localImagePaths":639,"remoteImagePaths":640,"frontmatter":641,"imagePaths":642},[605,608,611,614,617,620,623,626,629,632,635,638],{"depth":182,"slug":606,"text":607},"the-concept-of-self-reference","The Concept of Self-Reference",{"depth":182,"slug":609,"text":610},"recursion-the-functional-loop","Recursion: The Functional Loop",{"depth":523,"slug":612,"text":613},"the-stack-problem-and-tail-call-optimization-tco","The Stack Problem and Tail Call Optimization (TCO)",{"depth":182,"slug":615,"text":616},"higher-order-functions-abstracting-recursion","Higher-Order Functions: Abstracting Recursion",{"depth":523,"slug":618,"text":619},"under-the-hood-recursion-vs-loops-in-hofs","Under the Hood: Recursion vs. Loops in HOFs",{"depth":182,"slug":621,"text":622},"recursion-for-recursive-problems","Recursion for Recursive Problems",{"depth":182,"slug":624,"text":625},"recursion-vs-hofs-choosing-the-right-tool","Recursion vs. HOFs: Choosing the Right Tool",{"depth":182,"slug":627,"text":628},"self-reference-without-self-reference-recursion-and-turing-completeness","Self-Reference Without Self-Reference: Recursion and Turing Completeness",{"depth":523,"slug":630,"text":631},"the-challenge-in-pure-functional-models","The Challenge in Pure Functional Models",{"depth":523,"slug":633,"text":634},"achieving-repetition-the-role-of-fixed-point-combinators","Achieving Repetition: The Role of Fixed-Point Combinators",{"depth":523,"slug":636,"text":637},"implications-functions-recursion-and-turing-completeness","Implications: Functions, Recursion, and Turing Completeness",{"depth":182,"slug":408,"text":409},[],[],{"title":593,"description":594},[],"en/book/unit-1/section-3/1-lambda",{"id":643,"data":645,"body":651,"filePath":652,"digest":653,"rendered":654},{"title":646,"description":647,"editUrl":16,"head":648,"template":18,"sidebar":649,"pagefind":16,"draft":20},"First-Class Functions and Lambda Expressions","In the previous chapter [\"Types: Ensuring Smooth Pipelines\"], we saw that functions, like other data, have types (e.g., int -> int, 'a -> 'a) that define their inputs and outputs, ensuring our pipelines connect correctly. This understanding of functions having types naturally leads us to explore how we can work with these function values directly.",[],{"hidden":20,"attrs":650},{},"In the previous chapter [\"Types: Ensuring Smooth Pipelines\"], we saw that functions, like other data, have **types** (e.g., `int -> int`, `'a -> 'a`) that define their inputs and outputs, ensuring our pipelines connect correctly. This understanding of functions having types naturally leads us to explore how we can work with these function values directly.\n\n## Lambda Expressions: Anonymous Functions\n\nIf functions are values with types, how do we represent them directly as expressions, especially simple ones we might only need once? This leads us to **Lambda Expressions**, also known as **anonymous functions**.\n\nLambdas are the syntax for creating **function values** inline, without needing a separate `let` binding. They are the direct expression form of first-class functions.\n\n## Why Use Lambda Expressions? Consistency with Types!\n\nIn the previous chapter, we saw that functions have types, often written with an arrow, like `int -> int` (a function taking an `int` and returning an `int`). Functional programming provides a syntax to directly create function values that **visually matches** this type notation: **Lambda Expressions**.\n\nThe lambda syntax `fun parameter -> expression` allows us to define this function value directly where it's needed. Notice the structural similarity:\n\n-   **Type Notation:** `input_type -> output_type` (e.g., `int -> int`)\n    \n-   **Lambda Syntax:** `fun input_parameter -> output_expression` (e.g., `fun x -> x * x`)\n\nThe arrow `->` appears in both, visually connecting the input to the output. Lambda expressions provide a direct, inline syntax that is **consistent with the function types** used to describe them. This syntactic consistency is a primary motivation for using lambdas – they are the natural way to write down an expression whose _value_ has a function type, especially for simple, one-off functions passed to other functions.\n\n## The Simplest Lambda: Identity and Generics\n\nThe simplest lambda returns its input unchanged:  `a -> a` .\n\n![Diagram showing mapping from a to a](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888895623.png)\n\n![Diagram showing a looping back to a](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888916969.png)\n\nThis is the  **Identity function** , often predefined as `id`.\n\n![Diagram showing id function mapping a to a](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888983112.png)\n\n![Screenshot of F# id function type signature](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744889000150.png)\n\nIf we check the type of the `id` function (perhaps by temporarily assigning it to a name like `f`), the compiler or IDE shows its type as `'a -> 'a`.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744892235032.png)\n\nThis confirms that its structure matches the conceptual Identity function `a -> a`.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThe `'a` in the type signature `'a -> 'a` is important. It's a **generic type parameter**, acting as a **placeholder** for any type. This means `id` is a function value that works for any type `T`, having the type `T -> T`.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569160992.png)\n\nThis relates to the general concept of placeholders seen elsewhere:\n\nweb forms:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745381798686.png)\n\n---\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382163946.png)\n\ntype placeholders:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382883047.png)\n\n---\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382601165.png)\n\n---\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569083188.png)\n\nor even function arguments `x` in `f(x)`.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\nGenerics make function values like `id` highly reusable across different data types.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// val id: x:'a -> 'a (Generic type 'a -> 'a)\nlet resultNum = id 3 // 'a becomes int, result is 3 (int)\nlet resultStr = id \"hello\" // 'a becomes string, result is \"hello\" (string)\n```\n\n_(JS equivalent requires manual definition):_\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\n// Type in TS might be: \u003CT>(a: T) => T\nlet id = a => a;\nlet result1 = id(3);\nlet result2 = id(\"hello\");\n```\n\n## Lambda Syntax\n\nF# Lambda Syntax:  `fun ->`\n\nUses the fun keyword:  `fun parameter(s) -> expression` . The resulting expression is a function value.\n\n**Simple Examples:**\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n-   Adds 1:\n    \n    ```fsharp\n    fun x -> x + 1 // This expression has type: int -> int\n    ```\n    \n-   Converts string to uppercase:\n    \n    ```fsharp\n    fun s -> s.ToUpper() // This expression has type: string -> string\n    ```\n    \n-   Adds two numbers:\n    \n    ```fsharp\n    fun a b -> a + b // This expression has type: int -> int -> int\n    ```\n    \n    It's important to note that F# functions are automatically _curried_. This means a function that appears to take multiple arguments, like `fun a b -> a + b` (with type `int -> int -> int`), can also be seen as `fun a -> (fun b -> a + b)`. In this view, the function takes the _first_ argument (`a` of type `int`) and returns a _new function_ (`fun b -> a + b`, which has the type `int -> int`). Viewed this way, the lambda `fun a b -> a + b` actually fits **HOF Pattern (`Input |> Function = Function`)** because applying it to the first argument (`a`) results in a function being returned.\n\nThese directly define function _values_ with specific _types_.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n**Syntax Across Languages**\n\nLambda expression syntax varies between languages, but often uses an arrow-like symbol (`=>`, `->`), reflecting the mathematical concept of mapping.\n\n```sh\na => a        // C#/JavaScript\n\\a -> a       // Haskell\nfun a -> a    // F#\n|a| a         // Rust\n```\n\nF#'s `fun` keyword might feel verbose and inferior for a functional language, but like `let`, it's a 4-character keyword including the space. When formatting with 4-space indents, it allows writing clean code where argument indentation aligns naturally within a clear scope.\n\n*This formatting benefit can be seen in more complex lambda expressions:*\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet bind =\n    fun monadf timelineA ->\n        let timelineB = timelineA._last |> monadf // Create new timeline with monadF\n        let newFn =                    // Create function to propagate future updates\n            fun a ->\n                let timeline = a |> monadf\n                timelineB |> next timeline._last\n\n        timelineA._fns \u003C- timelineA._fns @ [ newFn ] // Register new function\n        timelineB                                    // Return new timeline\n```\n\nThe consistent 4-character width (`let` and `fun` ) helps maintain visual alignment for function bodies and arguments, contributing to code readability in F#.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Using Lambdas\n\n1. Naming Lambdas (Assigning Function Values):\n\nYou can assign lambda expressions (function values) to names using let.\n\n```fsharp\n// Assign the lambda value to 'double'\nlet double = fun a -> a * 2 // double has type: int -> int\nlet result = double 1       // result is 2 (int)\n```\n\n2. Passing Lambdas as Arguments (to HOFs):\n\nA primary use is passing simple logic directly to Higher-Order Functions (HOFs) like List.map, avoiding separate let bindings. (More on HOFs later).\n\n```fsharplet squares = [1; 2; 3; 4] |> List.map (fun x -> x * x)  // Result: [1; 4; 9; 16]```\n\n3. Lambdas in Pipelines:\n\nUseful for inline transformation steps.\n\n```fsharp\n\" john smith \" // Type: string\n|> fun str -> str.ToUpper() // Lambda type: string -> string. Output: string\n|> fun str -> str.Trim()    // Lambda type: string -> string. Output: string\n|> sprintf \"Hello, %s!\"   // Function type: string -> string. Output: string\n```\n\nEach lambda expression evaluates to a function value, which is then applied via the pipeline.\n\n## Summary\n\n-   **First-Class Functions:** The core idea that functions are values, just like numbers or strings, with specific **types**. They can be assigned, passed, and returned. This is a key feature of functional **languages**.\n    \n-   **Lambda Expressions:** A concise syntax (`fun ->` in F#) for creating anonymous function values inline, directly representing function logic as typed data, consistent with function **type notation**.\n    \n-   **Primary Use:** Defining simple functions directly where needed, especially for passing as arguments to Higher-Order Functions or within data transformation pipelines, relying on type compatibility.","src/content/docs/en/book/unit-1/section-3/1-lambda.md","2db0cd71b1c48e14",{"html":655,"metadata":656},"\u003Cp>In the previous chapter [“Types: Ensuring Smooth Pipelines”], we saw that functions, like other data, have \u003Cstrong>types\u003C/strong> (e.g., \u003Ccode dir=\"auto\">int -> int\u003C/code>, \u003Ccode dir=\"auto\">'a -> 'a\u003C/code>) that define their inputs and outputs, ensuring our pipelines connect correctly. This understanding of functions having types naturally leads us to explore how we can work with these function values directly.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"lambda-expressions-anonymous-functions\">Lambda Expressions: Anonymous Functions\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#lambda-expressions-anonymous-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Lambda Expressions: Anonymous Functions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>If functions are values with types, how do we represent them directly as expressions, especially simple ones we might only need once? This leads us to \u003Cstrong>Lambda Expressions\u003C/strong>, also known as \u003Cstrong>anonymous functions\u003C/strong>.\u003C/p>\n\u003Cp>Lambdas are the syntax for creating \u003Cstrong>function values\u003C/strong> inline, without needing a separate \u003Ccode dir=\"auto\">let\u003C/code> binding. They are the direct expression form of first-class functions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"why-use-lambda-expressions-consistency-with-types\">Why Use Lambda Expressions? Consistency with Types!\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#why-use-lambda-expressions-consistency-with-types\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Why Use Lambda Expressions? Consistency with Types!”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In the previous chapter, we saw that functions have types, often written with an arrow, like \u003Ccode dir=\"auto\">int -> int\u003C/code> (a function taking an \u003Ccode dir=\"auto\">int\u003C/code> and returning an \u003Ccode dir=\"auto\">int\u003C/code>). Functional programming provides a syntax to directly create function values that \u003Cstrong>visually matches\u003C/strong> this type notation: \u003Cstrong>Lambda Expressions\u003C/strong>.\u003C/p>\n\u003Cp>The lambda syntax \u003Ccode dir=\"auto\">fun parameter -> expression\u003C/code> allows us to define this function value directly where it’s needed. Notice the structural similarity:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Type Notation:\u003C/strong> \u003Ccode dir=\"auto\">input_type -> output_type\u003C/code> (e.g., \u003Ccode dir=\"auto\">int -> int\u003C/code>)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Lambda Syntax:\u003C/strong> \u003Ccode dir=\"auto\">fun input_parameter -> output_expression\u003C/code> (e.g., \u003Ccode dir=\"auto\">fun x -> x * x\u003C/code>)\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>The arrow \u003Ccode dir=\"auto\">->\u003C/code> appears in both, visually connecting the input to the output. Lambda expressions provide a direct, inline syntax that is \u003Cstrong>consistent with the function types\u003C/strong> used to describe them. This syntactic consistency is a primary motivation for using lambdas – they are the natural way to write down an expression whose \u003Cem>value\u003C/em> has a function type, especially for simple, one-off functions passed to other functions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-simplest-lambda-identity-and-generics\">The Simplest Lambda: Identity and Generics\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-simplest-lambda-identity-and-generics\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Simplest Lambda: Identity and Generics”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The simplest lambda returns its input unchanged:  \u003Ccode dir=\"auto\">a -> a\u003C/code> .\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888895623.png\" alt=\"Diagram showing mapping from a to a\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888916969.png\" alt=\"Diagram showing a looping back to a\">\u003C/p>\n\u003Cp>This is the  \u003Cstrong>Identity function\u003C/strong> , often predefined as \u003Ccode dir=\"auto\">id\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888983112.png\" alt=\"Diagram showing id function mapping a to a\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744889000150.png\" alt=\"Screenshot of F# id function type signature\">\u003C/p>\n\u003Cp>If we check the type of the \u003Ccode dir=\"auto\">id\u003C/code> function (perhaps by temporarily assigning it to a name like \u003Ccode dir=\"auto\">f\u003C/code>), the compiler or IDE shows its type as \u003Ccode dir=\"auto\">'a -> 'a\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744892235032.png\" alt=\"image\">\u003C/p>\n\u003Cp>This confirms that its structure matches the conceptual Identity function \u003Ccode dir=\"auto\">a -> a\u003C/code>.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>The \u003Ccode dir=\"auto\">'a\u003C/code> in the type signature \u003Ccode dir=\"auto\">'a -> 'a\u003C/code> is important. It’s a \u003Cstrong>generic type parameter\u003C/strong>, acting as a \u003Cstrong>placeholder\u003C/strong> for any type. This means \u003Ccode dir=\"auto\">id\u003C/code> is a function value that works for any type \u003Ccode dir=\"auto\">T\u003C/code>, having the type \u003Ccode dir=\"auto\">T -> T\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569160992.png\" alt=\"image\">\u003C/p>\n\u003Cp>This relates to the general concept of placeholders seen elsewhere:\u003C/p>\n\u003Cp>web forms:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745381798686.png\" alt=\"image\">\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382163946.png\" alt=\"image\">\u003C/p>\n\u003Cp>type placeholders:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382883047.png\" alt=\"image\">\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745382601165.png\" alt=\"image\">\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569083188.png\" alt=\"image\">\u003C/p>\n\u003Cp>or even function arguments \u003Ccode dir=\"auto\">x\u003C/code> in \u003Ccode dir=\"auto\">f(x)\u003C/code>.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cp>Generics make function values like \u003Ccode dir=\"auto\">id\u003C/code> highly reusable across different data types.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val id: x:'a -> 'a (Generic type 'a -> 'a)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultNum\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> id \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'a becomes int, result is 3 (int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultStr\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> id \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'a becomes string, result is \"hello\" (string)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// val id: x:&#x27;a -> &#x27;a (Generic type &#x27;a -> &#x27;a)let resultNum = id 3 // &#x27;a becomes int, result is 3 (int)let resultStr = id &#x22;hello&#x22; // &#x27;a becomes string, result is &#x22;hello&#x22; (string)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(JS equivalent requires manual definition):\u003C/em>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Type in TS might be: &#x3C;T>(a: T) => T\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">id\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> => \u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">;\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">result1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">id\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">result2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">id\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">);\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Type in TS might be: \u003CT>(a: T) => Tlet id = a => a;let result1 = id(3);let result2 = id(&#x22;hello&#x22;);\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"lambda-syntax\">Lambda Syntax\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#lambda-syntax\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Lambda Syntax”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>F# Lambda Syntax:  \u003Ccode dir=\"auto\">fun ->\u003C/code>\u003C/p>\n\u003Cp>Uses the fun keyword:  \u003Ccode dir=\"auto\">fun parameter(s) -> expression\u003C/code> . The resulting expression is a function value.\u003C/p>\n\u003Cp>\u003Cstrong>Simple Examples:\u003C/strong>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Adds 1:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This expression has type: int -> int\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fun x -> x + 1 // This expression has type: int -> int\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>Converts string to uppercase:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s.ToUpper\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This expression has type: string -> string\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fun s -> s.ToUpper() // This expression has type: string -> string\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>Adds two numbers:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a b \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> b \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This expression has type: int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fun a b -> a + b // This expression has type: int -> int -> int\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>It’s important to note that F# functions are automatically \u003Cem>curried\u003C/em>. This means a function that appears to take multiple arguments, like \u003Ccode dir=\"auto\">fun a b -> a + b\u003C/code> (with type \u003Ccode dir=\"auto\">int -> int -> int\u003C/code>), can also be seen as \u003Ccode dir=\"auto\">fun a -> (fun b -> a + b)\u003C/code>. In this view, the function takes the \u003Cem>first\u003C/em> argument (\u003Ccode dir=\"auto\">a\u003C/code> of type \u003Ccode dir=\"auto\">int\u003C/code>) and returns a \u003Cem>new function\u003C/em> (\u003Ccode dir=\"auto\">fun b -> a + b\u003C/code>, which has the type \u003Ccode dir=\"auto\">int -> int\u003C/code>). Viewed this way, the lambda \u003Ccode dir=\"auto\">fun a b -> a + b\u003C/code> actually fits \u003Cstrong>HOF Pattern (\u003Ccode dir=\"auto\">Input |> Function = Function\u003C/code>)\u003C/strong> because applying it to the first argument (\u003Ccode dir=\"auto\">a\u003C/code>) results in a function being returned.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>These directly define function \u003Cem>values\u003C/em> with specific \u003Cem>types\u003C/em>.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cstrong>Syntax Across Languages\u003C/strong>\u003C/p>\n\u003Cp>Lambda expression syntax varies between languages, but often uses an arrow-like symbol (\u003Ccode dir=\"auto\">=>\u003C/code>, \u003Ccode dir=\"auto\">->\u003C/code>), reflecting the mathematical concept of mapping.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame is-terminal not-content\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">\u003C/span>\u003Cspan class=\"sr-only\">Terminal window\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"sh\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> =\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">//\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">C#/JavaScript\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> -\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">       \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">//\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">Haskell\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">fun\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> -\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">//\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">F#\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">|\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">a\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">         \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">//\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">Rust\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"a => a        // C#/JavaScript\\a -> a       // Haskellfun a -> a    // F#|a| a         // Rust\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>F#‘s \u003Ccode dir=\"auto\">fun\u003C/code> keyword might feel verbose and inferior for a functional language, but like \u003Ccode dir=\"auto\">let\u003C/code>, it’s a 4-character keyword including the space. When formatting with 4-space indents, it allows writing clean code where argument indentation aligns naturally within a clear scope.\u003C/p>\n\u003Cp>\u003Cem>This formatting benefit can be seen in more complex lambda expressions:\u003C/em>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">bind\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> monadf timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timelineB\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">._\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">last \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> monadf \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create new timeline with monadF\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">newFn\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create function to propagate future updates\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timeline\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> monadf\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> next timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">._\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">last\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">._\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fns \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">._\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fns \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">@\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> newFn \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Register new function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineB                                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Return new timeline\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let bind =    fun monadf timelineA ->        let timelineB = timelineA._last |> monadf // Create new timeline with monadF        let newFn =                    // Create function to propagate future updates            fun a ->                let timeline = a |> monadf                timelineB |> next timeline._last        timelineA._fns \u003C- timelineA._fns @ [ newFn ] // Register new function        timelineB                                    // Return new timeline\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The consistent 4-character width (\u003Ccode dir=\"auto\">let\u003C/code> and \u003Ccode dir=\"auto\">fun\u003C/code> ) helps maintain visual alignment for function bodies and arguments, contributing to code readability in F#.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"using-lambdas\">Using Lambdas\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#using-lambdas\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Using Lambdas”\u003C/span>\u003C/a>\u003C/div>\n\u003Col>\n\u003Cli>Naming Lambdas (Assigning Function Values):\u003C/li>\n\u003C/ol>\n\u003Cp>You can assign lambda expressions (function values) to names using let.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assign the lambda value to 'double'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// double has type: int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">       \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 2 (int)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assign the lambda value to &#x27;double&#x27;let double = fun a -> a * 2 // double has type: int -> intlet result = double 1       // result is 2 (int)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Col start=\"2\">\n\u003Cli>Passing Lambdas as Arguments (to HOFs):\u003C/li>\n\u003C/ol>\n\u003Cp>A primary use is passing simple logic directly to Higher-Order Functions (HOFs) like List.map, avoiding separate let bindings. (More on HOFs later).\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">fsharplet squares = [1; 2; 3; 4] |> List.map (fun x -> x * x)  // Result: [1; 4; 9; 16]\u003C/code>\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>Lambdas in Pipelines:\u003C/li>\n\u003C/ol>\n\u003Cp>Useful for inline transformation steps.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> john smith \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Type: string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> str \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> str.ToUpper\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Lambda type: string -> string. Output: string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> str \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> str.Trim\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Lambda type: string -> string. Output: string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello, \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function type: string -> string. Output: string\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"&#x22; john smith &#x22; // Type: string|> fun str -> str.ToUpper() // Lambda type: string -> string. Output: string|> fun str -> str.Trim()    // Lambda type: string -> string. Output: string|> sprintf &#x22;Hello, %s!&#x22;   // Function type: string -> string. Output: string\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Each lambda expression evaluates to a function value, which is then applied via the pipeline.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>First-Class Functions:\u003C/strong> The core idea that functions are values, just like numbers or strings, with specific \u003Cstrong>types\u003C/strong>. They can be assigned, passed, and returned. This is a key feature of functional \u003Cstrong>languages\u003C/strong>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Lambda Expressions:\u003C/strong> A concise syntax (\u003Ccode dir=\"auto\">fun ->\u003C/code> in F#) for creating anonymous function values inline, directly representing function logic as typed data, consistent with function \u003Cstrong>type notation\u003C/strong>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Primary Use:\u003C/strong> Defining simple functions directly where needed, especially for passing as arguments to Higher-Order Functions or within data transformation pipelines, relying on type compatibility.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":657,"localImagePaths":674,"remoteImagePaths":675,"frontmatter":676,"imagePaths":677},[658,661,664,667,670,673],{"depth":182,"slug":659,"text":660},"lambda-expressions-anonymous-functions","Lambda Expressions: Anonymous Functions",{"depth":182,"slug":662,"text":663},"why-use-lambda-expressions-consistency-with-types","Why Use Lambda Expressions? Consistency with Types!",{"depth":182,"slug":665,"text":666},"the-simplest-lambda-identity-and-generics","The Simplest Lambda: Identity and Generics",{"depth":182,"slug":668,"text":669},"lambda-syntax","Lambda Syntax",{"depth":182,"slug":671,"text":672},"using-lambdas","Using Lambdas",{"depth":182,"slug":408,"text":409},[],[],{"title":646,"description":647},[],"en/book/unit-1/section-4/2-curry-partial",{"id":678,"data":680,"body":686,"filePath":687,"digest":688,"rendered":689},{"title":681,"description":682,"editUrl":16,"head":683,"template":18,"sidebar":684,"pagefind":16,"draft":20},"Currying and Partial Application with HOF","In previous chapters, we saw that functions are first-class values and that operators like (+) and (*) are essentially functions. We also briefly saw how applying only one argument to (+) or (*) created new functions like add1 or double. Let's explore the fundamental mechanism behind this: Currying and Partial Application.",[],{"hidden":20,"attrs":685},{},"In previous chapters, we saw that functions are first-class values and that operators like `(+)` and `(*)` are essentially functions. We also briefly saw how applying only one argument to `(+)` or `(*)` created new functions like `add1` or `double`. Let's explore the fundamental mechanism behind this: **Currying** and **Partial Application**.\n\n## Binary Operations and Function Arguments: Unary vs Binary Functions\n\nLet's focus on multiplication (`*`) as a typical example of a binary operation – it takes two arguments, `x` and `y`, to produce a result `x * y`.\n\nIn many languages, like JavaScript, a function implementing this would naturally be defined to accept two arguments together:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\n// Accepts two arguments (x, y) simultaneously\nfunction multiply(x, y) { return x * y; } \n```\n\nThis `multiply` function is a typical **Binary Function** – it's defined to accept two arguments (`x` and `y`) together and return a result. Many programming languages directly support functions that take multiple arguments like this.\n\nNow consider the F# equivalent:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Appears to take two arguments\nlet multiply x y = x * y \n```\n\nThis F# definition looks similar, but there's a crucial difference under the hood. While many languages directly support multi-argument functions, F# (like Haskell and other languages in the ML family) adopts a different model: fundamentally, **all F# functions are Unary Functions**, meaning they technically only accept **one argument** at a time.\n\nThis might seem counter-intuitive when looking at `let multiply x y = ...`. How can a function that only takes one argument handle a binary operation like multiplication? This leads us directly to the mechanism F# uses to achieve this...\n\n## The F# Approach: Currying\n\nThe answer lies in **Currying**. F# (like Haskell and other ML-family languages) automatically transforms functions that appear to take multiple arguments into a chain of nested functions, each taking only a single argument.\n\nThe standard definition `let multiply x y = x * y` is actually convenient **syntactic sugar** for defining a nested lambda expression like this:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// The definition 'let multiply x y = x * y' is equivalent to:\nlet multiply = fun x -> (fun y -> x * y)\n```\n\nor you can write like this:\n\n```fsharp\nlet multiply =\n    fun x ->\n        fun y ->\n            x * y\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745147539756.png)\n\nThis explicitly shows the curried nature. The type signature `int -> int -> int` directly reflects this nested structure: it's shorthand for `int -> (int -> int)`.\n\nThis means the `multiply` function works step-by-step:\n\n1.  It takes the _first_ argument (`x`, an `int`).\n    \n2.  It _**returns a new function**_ (`fun y -> x * y`). This new function \"remembers\" `x` and expects the _second_ argument (`y`). The type of this new function is `int -> int`.\n    \n3.  When this _new function_ receives the second argument (`y`), it finally performs the calculation (`x * y`) and returns the final `int` result.\n\n## Partial Application: A Consequence of Currying\n\nNow we can properly understand **Partial Application**.\n\n-   **General Definition:** In programming generally, partial application means supplying _fewer_ arguments to a function than it normally takes.\n    \n-   **In F# (with Currying):** Because functions inherently take arguments one at a time due to currying, _**simply applying the first argument(s) is partial application.**_ There's no special syntax needed beyond normal function application. The result of applying the first argument _is_ the partially applied function (the intermediate function returned by the HOF).\n\nSo, when we write:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet multiply = (*)\nlet double = 2 |> multiply\nlet result = 10 |> double\n// 20\n```\n\n![Diagram showing Partial Application](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744707418101.png)\n\n## Analogy: The Multiplication Table\n\nLet's visualize this using the familiar multiplication table.\n\n**1. The Full Operation:** The complete multiplication operation, represented by the binary function `(*)`, needs _two_ numbers (e.g., a row number and a column number) to give you a result from the table. It corresponds to the entire table:\n\n![Multiplication Table Analogy - Full Table](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525249824.png)\n\n(Requires two inputs, like  `(*) 3 4` )\n\n**2. Fixing One Argument (Partial Application):** Now, what happens if we _partially apply_ the multiplication function by fixing the first number, say, to 3? In F#, we write this as `(*) 3`. This is like selecting just _one row_ from the table – the \"3 times\" row:\n\n![Multiplication Table Analogy - Row 3](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525063728.png)\n\n(Represents the function  `(*) 3` )\n\nBy providing only the first argument (`3`) to the two-argument function `(*)`, we've created a _new function_. Let's call it `multiplyBy3`. This new function only needs _one_ more argument (the number for the column) and corresponds to this specific row.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Create a new function \"multiplyBy3\" by partially applying (*) with 3\nlet multiplyBy3 = (*) 3\n```multiplyBy3` *is* the \"3 times table\" function; it waits for one more number.\n\n**3. Applying the New Function:**\n\nOnce we have our specialized function `multiplyBy3`, we can give it the final argument. For example, applying it to `4` (`multiplyBy3 4`) is like looking up the 4th column in the 3rd row to find the result  `12` :\n\n![Multiplication Table Analogy - Cell 3,4](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525181657.png)\n\n*(Represents applying the function: `multiplyBy3 4`)*\n\n```fsharp\n// Now use the new function - it only needs one argument\nlet result = multiplyBy3 4 // result is 12 (3 * 4)\nprintfn \"3 times 4 is: %d\" result\n```\n\n**Applying this to our previous examples:**\n\nThis process of fixing one argument to create a new, simpler function is exactly what we did earlier:\n\n```fsharp\n// Create a 'multiply by 2' function from (*)\nlet double = (*) 2\n\n// Create an 'add 1' function from (+)\nlet add1 = (+) 1\n```\n\nWe created specialized unary functions (`double`, `add1`) from general binary functions (`(*)`, `(+)`) using partial application.\n\nThis ability to easily create new, specialized functions from existing ones by partially applying arguments is a common and powerful technique in FP.\n\n## Connecting Partial Application to HOF Pattern 1\n\nAs demonstrated with the `multiplyBy3`, `double`, and `add1` examples, partial application takes some initial input (like the number `3` for `(*)`, or `2` for `(*)`, or `1` for `(+)`) and _**returns a new function**_.\n\nThis perfectly matches **HOF Pattern 1:**\n\n1.  **`Value |> Function = Function`**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695953633.png)\n\n![Diagram connecting Partial Application to HOF Pattern 1](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744578599325.png)\n\n```fsharp\n// Create a 'multiply by 2' function from (*)\nlet double = 2 |> (*)\n\n// Create an 'add 1' function from (+)\nlet add1 = 1 |> (+) \n```\n\n---\n\n**`Value |> Function = Value`**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696474506.png)\n\n![Diagram connecting Function Application to HOF patterns](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744579143286.png)\n\n```fsharp\nlet result = 5 |> double // 10\n\nlet result' = 10 |> add1 // 11\n```\n\nTherefore, **partial application is a prime example of Higher-Order Functions in action**, specifically illustrating the pattern where functions _return_ other functions. It showcases how treating functions as first-class values allows us to manipulate and create new functions dynamically.\n\n## Summary\n\n-   Unlike many languages that directly support multi-argument (e.g., binary) functions, FP languages like F# and Haskell fundamentally model all functions as **Unary Functions** (taking only one argument).\n-   Because all functions are unary, **Currying** is the mechanism used automatically by F# to handle functions that *appear* to take multiple arguments. A definition like `let f x y = ...` becomes syntactic sugar for nested unary functions (`fun x -> (fun y -> ...)`), reflected in type signatures like `T1 -> T2 -> TResult` (shorthand for `T1 -> (T2 -> TResult)`).\n-   **Partial Application** is the act of supplying fewer arguments than a function expects. Due to currying in F#, this occurs naturally when providing only the initial argument(s), resulting in a new, specialized function without needing special syntax.\n-   This mechanism allows for the easy creation of specialized functions (like `add1` or `double`) from more general functions (like the operators `(+)` or `(*)`).\n-   Partial application exemplifies **Higher-Order Functions** (specifically HOF Pattern 1), where providing input to a function results in a new function being returned, showcasing the power of treating functions as first-class values.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nIt might seem that F#'s unary function model makes it awkward to pass multiple related pieces of data (like coordinates `(x, y)`) compared to JavaScript's multi-argument functions (`f(x, y)`). While currying handles functions that logically take multiple *independent* arguments step-by-step, what if you simply want to pass a single, grouped piece of data containing multiple components?\n\nF# addresses this with **Tuples**. A tuple, written `(a, b)` or `(a, b, c, ...)`, groups multiple values into a *single*, composite value. This is different from a list (`[a; b; c]`) and is a data structure not present in the same way in JavaScript.\n\nBecause a tuple like `(x, y)` is considered a single value, it can be passed as the *one* argument to a unary F# function:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Define a function that takes ONE argument: a tuple of two integers\nlet addCoordinates (coords: int * int) =\n    let (x, y) = coords // Deconstruct the tuple inside the function\n    x + y\n\n// Call the unary function, passing the tuple as the single argument\nlet result = addCoordinates (3, 4) // result is 7\n```\n\nNotice that the function call `addCoordinates (3, 4)` *looks* syntactically similar to a JavaScript call `addCoordinates(3, 4)` which might take two separate arguments. However, in F#, `addCoordinates` is still a unary function accepting a single tuple value. This provides a convenient syntax for working with grouped data within the unary function model, offering another example of F#'s pragmatic and expressive design.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">","src/content/docs/en/book/unit-1/section-4/2-curry-partial.md","8b798139c7993b8b",{"html":690,"metadata":691},"\u003Cp>In previous chapters, we saw that functions are first-class values and that operators like \u003Ccode dir=\"auto\">(+)\u003C/code> and \u003Ccode dir=\"auto\">(*)\u003C/code> are essentially functions. We also briefly saw how applying only one argument to \u003Ccode dir=\"auto\">(+)\u003C/code> or \u003Ccode dir=\"auto\">(*)\u003C/code> created new functions like \u003Ccode dir=\"auto\">add1\u003C/code> or \u003Ccode dir=\"auto\">double\u003C/code>. Let’s explore the fundamental mechanism behind this: \u003Cstrong>Currying\u003C/strong> and \u003Cstrong>Partial Application\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"binary-operations-and-function-arguments-unary-vs-binary-functions\">Binary Operations and Function Arguments: Unary vs Binary Functions\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#binary-operations-and-function-arguments-unary-vs-binary-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Binary Operations and Function Arguments: Unary vs Binary Functions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s focus on multiplication (\u003Ccode dir=\"auto\">*\u003C/code>) as a typical example of a binary operation – it takes two arguments, \u003Ccode dir=\"auto\">x\u003C/code> and \u003Ccode dir=\"auto\">y\u003C/code>, to produce a result \u003Ccode dir=\"auto\">x * y\u003C/code>.\u003C/p>\n\u003Cp>In many languages, like JavaScript, a function implementing this would naturally be defined to accept two arguments together:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Accepts two arguments (x, y) simultaneously\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">x\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">, \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">y\u003C/span>\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> { \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">return\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">x\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">y\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">; }\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Accepts two arguments (x, y) simultaneouslyfunction multiply(x, y) { return x * y; }\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This \u003Ccode dir=\"auto\">multiply\u003C/code> function is a typical \u003Cstrong>Binary Function\u003C/strong> – it’s defined to accept two arguments (\u003Ccode dir=\"auto\">x\u003C/code> and \u003Ccode dir=\"auto\">y\u003C/code>) together and return a result. Many programming languages directly support functions that take multiple arguments like this.\u003C/p>\n\u003Cp>Now consider the F# equivalent:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Appears to take two arguments\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Appears to take two argumentslet multiply x y = x * y\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This F# definition looks similar, but there’s a crucial difference under the hood. While many languages directly support multi-argument functions, F# (like Haskell and other languages in the ML family) adopts a different model: fundamentally, \u003Cstrong>all F# functions are Unary Functions\u003C/strong>, meaning they technically only accept \u003Cstrong>one argument\u003C/strong> at a time.\u003C/p>\n\u003Cp>This might seem counter-intuitive when looking at \u003Ccode dir=\"auto\">let multiply x y = ...\u003C/code>. How can a function that only takes one argument handle a binary operation like multiplication? This leads us directly to the mechanism F# uses to achieve this…\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-f-approach-currying\">The F# Approach: Currying\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-f-approach-currying\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The F# Approach: Currying”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The answer lies in \u003Cstrong>Currying\u003C/strong>. F# (like Haskell and other ML-family languages) automatically transforms functions that appear to take multiple arguments into a chain of nested functions, each taking only a single argument.\u003C/p>\n\u003Cp>The standard definition \u003Ccode dir=\"auto\">let multiply x y = x * y\u003C/code> is actually convenient \u003Cstrong>syntactic sugar\u003C/strong> for defining a nested lambda expression like this:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The definition 'let multiply x y = x * y' is equivalent to:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The definition &#x27;let multiply x y = x * y&#x27; is equivalent to:let multiply = fun x -> (fun y -> x * y)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>or you can write like this:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let multiply =    fun x ->        fun y ->            x * y\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745147539756.png\" alt=\"image\">\u003C/p>\n\u003Cp>This explicitly shows the curried nature. The type signature \u003Ccode dir=\"auto\">int -> int -> int\u003C/code> directly reflects this nested structure: it’s shorthand for \u003Ccode dir=\"auto\">int -> (int -> int)\u003C/code>.\u003C/p>\n\u003Cp>This means the \u003Ccode dir=\"auto\">multiply\u003C/code> function works step-by-step:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>It takes the \u003Cem>first\u003C/em> argument (\u003Ccode dir=\"auto\">x\u003C/code>, an \u003Ccode dir=\"auto\">int\u003C/code>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It \u003Cem>\u003Cstrong>returns a new function\u003C/strong>\u003C/em> (\u003Ccode dir=\"auto\">fun y -> x * y\u003C/code>). This new function “remembers” \u003Ccode dir=\"auto\">x\u003C/code> and expects the \u003Cem>second\u003C/em> argument (\u003Ccode dir=\"auto\">y\u003C/code>). The type of this new function is \u003Ccode dir=\"auto\">int -> int\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>When this \u003Cem>new function\u003C/em> receives the second argument (\u003Ccode dir=\"auto\">y\u003C/code>), it finally performs the calculation (\u003Ccode dir=\"auto\">x * y\u003C/code>) and returns the final \u003Ccode dir=\"auto\">int\u003C/code> result.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"partial-application-a-consequence-of-currying\">Partial Application: A Consequence of Currying\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#partial-application-a-consequence-of-currying\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Partial Application: A Consequence of Currying”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now we can properly understand \u003Cstrong>Partial Application\u003C/strong>.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>General Definition:\u003C/strong> In programming generally, partial application means supplying \u003Cem>fewer\u003C/em> arguments to a function than it normally takes.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>In F# (with Currying):\u003C/strong> Because functions inherently take arguments one at a time due to currying, \u003Cem>\u003Cstrong>simply applying the first argument(s) is partial application.\u003C/strong>\u003C/em> There’s no special syntax needed beyond normal function application. The result of applying the first argument \u003Cem>is\u003C/em> the partially applied function (the intermediate function returned by the HOF).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>So, when we write:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> multiply\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 20\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let multiply = (*)let double = 2 |> multiplylet result = 10 |> double// 20\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744707418101.png\" alt=\"Diagram showing Partial Application\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"analogy-the-multiplication-table\">Analogy: The Multiplication Table\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#analogy-the-multiplication-table\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Analogy: The Multiplication Table”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s visualize this using the familiar multiplication table.\u003C/p>\n\u003Cp>\u003Cstrong>1. The Full Operation:\u003C/strong> The complete multiplication operation, represented by the binary function \u003Ccode dir=\"auto\">(*)\u003C/code>, needs \u003Cem>two\u003C/em> numbers (e.g., a row number and a column number) to give you a result from the table. It corresponds to the entire table:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525249824.png\" alt=\"Multiplication Table Analogy - Full Table\">\u003C/p>\n\u003Cp>(Requires two inputs, like  \u003Ccode dir=\"auto\">(*) 3 4\u003C/code> )\u003C/p>\n\u003Cp>\u003Cstrong>2. Fixing One Argument (Partial Application):\u003C/strong> Now, what happens if we \u003Cem>partially apply\u003C/em> the multiplication function by fixing the first number, say, to 3? In F#, we write this as \u003Ccode dir=\"auto\">(*) 3\u003C/code>. This is like selecting just \u003Cem>one row\u003C/em> from the table – the “3 times” row:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525063728.png\" alt=\"Multiplication Table Analogy - Row 3\">\u003C/p>\n\u003Cp>(Represents the function  \u003Ccode dir=\"auto\">(*) 3\u003C/code> )\u003C/p>\n\u003Cp>By providing only the first argument (\u003Ccode dir=\"auto\">3\u003C/code>) to the two-argument function \u003Ccode dir=\"auto\">(*)\u003C/code>, we’ve created a \u003Cem>new function\u003C/em>. Let’s call it \u003Ccode dir=\"auto\">multiplyBy3\u003C/code>. This new function only needs \u003Cem>one\u003C/em> more argument (the number for the column) and corresponds to this specific row.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a new function \"multiplyBy3\" by partially applying (*) with 3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiplyBy3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">```multiplyBy3` \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">is\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> the \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">3 times table\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> it waits \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">for\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> one more number.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">**\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3.\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Applying the New Function\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:**\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Once we have our specialized \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> `multiplyBy3`\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> we can give it the final argument. For example\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> applying it \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">to\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> `\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">` \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`multiplyBy3 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> is like looking up the \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">th column \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">in\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> the \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">rd row \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">to\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> find the result  `\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">12\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">` \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">![\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Multiplication Table Analogy \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Cell \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">](\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">https\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525181657.png)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Represents applying the \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> `multiplyBy3 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)*\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">```fsharp\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Now use the new function - it only needs one argument\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> multiplyBy3 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 12 (3 * 4)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">3 times 4 is: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Create a new function &#x22;multiplyBy3&#x22; by partially applying (*) with 3let multiplyBy3 = (*) 3&#x60;&#x60;&#x60;multiplyBy3&#x60; *is* the &#x22;3 times table&#x22; function; it waits for one more number.**3. Applying the New Function:**Once we have our specialized function &#x60;multiplyBy3&#x60;, we can give it the final argument. For example, applying it to &#x60;4&#x60; (&#x60;multiplyBy3 4&#x60;) is like looking up the 4th column in the 3rd row to find the result  &#x60;12&#x60; :![Multiplication Table Analogy - Cell 3,4](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744525181657.png)*(Represents applying the function: &#x60;multiplyBy3 4&#x60;)*&#x60;&#x60;&#x60;fsharp// Now use the new function - it only needs one argumentlet result = multiplyBy3 4 // result is 12 (3 * 4)printfn &#x22;3 times 4 is: %d&#x22; result\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Applying this to our previous examples:\u003C/strong>\u003C/p>\n\u003Cp>This process of fixing one argument to create a new, simpler function is exactly what we did earlier:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a 'multiply by 2' function from (*)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create an 'add 1' function from (+)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Create a &#x27;multiply by 2&#x27; function from (*)let double = (*) 2// Create an &#x27;add 1&#x27; function from (+)let add1 = (+) 1\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>We created specialized unary functions (\u003Ccode dir=\"auto\">double\u003C/code>, \u003Ccode dir=\"auto\">add1\u003C/code>) from general binary functions (\u003Ccode dir=\"auto\">(*)\u003C/code>, \u003Ccode dir=\"auto\">(+)\u003C/code>) using partial application.\u003C/p>\n\u003Cp>This ability to easily create new, specialized functions from existing ones by partially applying arguments is a common and powerful technique in FP.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"connecting-partial-application-to-hof-pattern-1\">Connecting Partial Application to HOF Pattern 1\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#connecting-partial-application-to-hof-pattern-1\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Connecting Partial Application to HOF Pattern 1”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>As demonstrated with the \u003Ccode dir=\"auto\">multiplyBy3\u003C/code>, \u003Ccode dir=\"auto\">double\u003C/code>, and \u003Ccode dir=\"auto\">add1\u003C/code> examples, partial application takes some initial input (like the number \u003Ccode dir=\"auto\">3\u003C/code> for \u003Ccode dir=\"auto\">(*)\u003C/code>, or \u003Ccode dir=\"auto\">2\u003C/code> for \u003Ccode dir=\"auto\">(*)\u003C/code>, or \u003Ccode dir=\"auto\">1\u003C/code> for \u003Ccode dir=\"auto\">(+)\u003C/code>) and \u003Cem>\u003Cstrong>returns a new function\u003C/strong>\u003C/em>.\u003C/p>\n\u003Cp>This perfectly matches \u003Cstrong>HOF Pattern 1:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Value |> Function = Function\u003C/code>\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695953633.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744578599325.png\" alt=\"Diagram connecting Partial Application to HOF Pattern 1\">\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a 'multiply by 2' function from (*)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create an 'add 1' function from (+)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Create a &#x27;multiply by 2&#x27; function from (*)let double = 2 |> (*)// Create an &#x27;add 1&#x27; function from (+)let add1 = 1 |> (+)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Chr>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">Value |> Function = Value\u003C/code>\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696474506.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744579143286.png\" alt=\"Diagram connecting Function Application to HOF patterns\">\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">' \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 11\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let result = 5 |> double // 10let result&#x27; = 10 |> add1 // 11\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Therefore, \u003Cstrong>partial application is a prime example of Higher-Order Functions in action\u003C/strong>, specifically illustrating the pattern where functions \u003Cem>return\u003C/em> other functions. It showcases how treating functions as first-class values allows us to manipulate and create new functions dynamically.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Unlike many languages that directly support multi-argument (e.g., binary) functions, FP languages like F# and Haskell fundamentally model all functions as \u003Cstrong>Unary Functions\u003C/strong> (taking only one argument).\u003C/li>\n\u003Cli>Because all functions are unary, \u003Cstrong>Currying\u003C/strong> is the mechanism used automatically by F# to handle functions that \u003Cem>appear\u003C/em> to take multiple arguments. A definition like \u003Ccode dir=\"auto\">let f x y = ...\u003C/code> becomes syntactic sugar for nested unary functions (\u003Ccode dir=\"auto\">fun x -> (fun y -> ...)\u003C/code>), reflected in type signatures like \u003Ccode dir=\"auto\">T1 -> T2 -> TResult\u003C/code> (shorthand for \u003Ccode dir=\"auto\">T1 -> (T2 -> TResult)\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Partial Application\u003C/strong> is the act of supplying fewer arguments than a function expects. Due to currying in F#, this occurs naturally when providing only the initial argument(s), resulting in a new, specialized function without needing special syntax.\u003C/li>\n\u003Cli>This mechanism allows for the easy creation of specialized functions (like \u003Ccode dir=\"auto\">add1\u003C/code> or \u003Ccode dir=\"auto\">double\u003C/code>) from more general functions (like the operators \u003Ccode dir=\"auto\">(+)\u003C/code> or \u003Ccode dir=\"auto\">(*)\u003C/code>).\u003C/li>\n\u003Cli>Partial application exemplifies \u003Cstrong>Higher-Order Functions\u003C/strong> (specifically HOF Pattern 1), where providing input to a function results in a new function being returned, showcasing the power of treating functions as first-class values.\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>It might seem that F#‘s unary function model makes it awkward to pass multiple related pieces of data (like coordinates \u003Ccode dir=\"auto\">(x, y)\u003C/code>) compared to JavaScript’s multi-argument functions (\u003Ccode dir=\"auto\">f(x, y)\u003C/code>). While currying handles functions that logically take multiple \u003Cem>independent\u003C/em> arguments step-by-step, what if you simply want to pass a single, grouped piece of data containing multiple components?\u003C/p>\n\u003Cp>F# addresses this with \u003Cstrong>Tuples\u003C/strong>. A tuple, written \u003Ccode dir=\"auto\">(a, b)\u003C/code> or \u003Ccode dir=\"auto\">(a, b, c, ...)\u003C/code>, groups multiple values into a \u003Cem>single\u003C/em>, composite value. This is different from a list (\u003Ccode dir=\"auto\">[a; b; c]\u003C/code>) and is a data structure not present in the same way in JavaScript.\u003C/p>\n\u003Cp>Because a tuple like \u003Ccode dir=\"auto\">(x, y)\u003C/code> is considered a single value, it can be passed as the \u003Cem>one\u003C/em> argument to a unary F# function:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define a function that takes ONE argument: a tuple of two integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">addCoordinates\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">coords\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">x\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\"> \u003C/span>\u003Cspan style=\"--0:#D7DBE0\">y\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> coords \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Deconstruct the tuple inside the function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Call the unary function, passing the tuple as the single argument\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> addCoordinates \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result is 7\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Define a function that takes ONE argument: a tuple of two integerslet addCoordinates (coords: int * int) =    let (x, y) = coords // Deconstruct the tuple inside the function    x + y// Call the unary function, passing the tuple as the single argumentlet result = addCoordinates (3, 4) // result is 7\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Notice that the function call \u003Ccode dir=\"auto\">addCoordinates (3, 4)\u003C/code> \u003Cem>looks\u003C/em> syntactically similar to a JavaScript call \u003Ccode dir=\"auto\">addCoordinates(3, 4)\u003C/code> which might take two separate arguments. However, in F#, \u003Ccode dir=\"auto\">addCoordinates\u003C/code> is still a unary function accepting a single tuple value. This provides a convenient syntax for working with grouped data within the unary function model, offering another example of F#‘s pragmatic and expressive design.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">",{"headings":692,"localImagePaths":709,"remoteImagePaths":710,"frontmatter":711,"imagePaths":712},[693,696,699,702,705,708],{"depth":182,"slug":694,"text":695},"binary-operations-and-function-arguments-unary-vs-binary-functions","Binary Operations and Function Arguments: Unary vs Binary Functions",{"depth":182,"slug":697,"text":698},"the-f-approach-currying","The F# Approach: Currying",{"depth":182,"slug":700,"text":701},"partial-application-a-consequence-of-currying","Partial Application: A Consequence of Currying",{"depth":182,"slug":703,"text":704},"analogy-the-multiplication-table","Analogy: The Multiplication Table",{"depth":182,"slug":706,"text":707},"connecting-partial-application-to-hof-pattern-1","Connecting Partial Application to HOF Pattern 1",{"depth":182,"slug":408,"text":409},[],[],{"title":681,"description":682},[],"en/book/unit-1/section-4/3-flip-pipe",{"id":713,"data":715,"body":721,"filePath":722,"digest":723,"rendered":724},{"title":716,"description":717,"editUrl":16,"head":718,"template":18,"sidebar":719,"pagefind":16,"draft":20},"HOFs in Action: Type Signatures, flip, and Pipelines","In the previous chapter, we learned about currying and partial application. Specifically, we saw how F# functions fundamentally accept arguments one at a time and can potentially return new functions. In this chapter, we will deepen that understanding, explore how Higher-Order Functions (HOFs) manifest in the type system, and how we can utilize them.",[],{"hidden":20,"attrs":720},{},"In the previous chapter, we learned about currying and partial application. Specifically, we saw how F# functions fundamentally accept arguments one at a time and can potentially return new functions. In this chapter, we will deepen that understanding, explore how Higher-Order Functions (HOFs) manifest in the type system, and how we can utilize them.\n\n## The Multiplication Function and `int -> int -> int` Type: Structure as a HOF\n\nFirst, let's revisit the multiplication example we used frequently in the previous chapter. In F#, the multiplication operator `*` can be treated as a function value `(*)`.\n\n```fsharp\nlet multiply = (*)\n```\n\nThe type signature for this `multiply` function was `int -> int -> int`. At first glance, this might seem like it takes two `int` arguments and returns one `int`. However, recalling the concept of currying reveals the true meaning of this type signature.\n\n`int -> int -> int` is actually shorthand for `int -> (int -> int)`. **This becomes easier to understand if we recall the multiplication table analogy from the previous chapter.** The entire multiplication function `(*)` corresponds to the whole multiplication table, requiring two inputs (a row number and a column number). However, when we applied only the first argument (e.g., the row number `3`) to `(*)` (as in `(*) 3`), it was equivalent to selecting a specific row (the \"3 times table\") from the table. This \"3 times table\" was itself a new function (type: `int -> int`), waiting for just one more argument (the column number).\n\nLet's reiterate the step-by-step process of how this `multiply` function operates due to currying:\n\n1.  **Accepts the first `int` as input:** The function first takes the initial integer value (the row number in the multiplication table example).\n2.  **Returns a new function (type `int -> int`):** Upon receiving the first argument, `multiply` doesn't immediately return the final result. Instead, it generates and returns a **new function** that \"accepts the second `int` (the column number) and returns the final `int` result\" (the specific row in the multiplication table example). The type of this new function is `int -> int`.\n3.  **Accepts the second `int` as input:** The returned new function then accepts the second integer value (the column number).\n4.  **Returns the final `int` as output:** Only when the second argument is received is the actual multiplication (looking up the value in the table) performed, and the final integer result is returned.\n\nLet's visualize this step-by-step process with a diagram. Applying `2` to the `multiply` function (partial application) creates the `double` function (type: `int -> int`), and applying `10` to that `double` function yields the final result `20` (type: `int`).\n\n!(uploaded:image_bab323.png-eddec289-a31b-405c-822a-7738ddec80e6)\n\nThus, the `multiply` function (`(*)`) has the ability to **return another function** after accepting an argument. This is precisely one of the key characteristics of Higher-Order Functions (HOFs) we learned about in the previous chapter (HOF Pattern 1). The type signature `int -> int -> int` clearly indicates this structure of a \"function that returns a function\"—a HOF.\n\nIn this section, using the multiplication table analogy, we reaffirmed that the type `int -> int -> int` signifies more than just \"takes two ints, returns one int.\" It represents a deeper structure (a curried HOF): \"takes an int, returns a function that takes an int and returns an int.\" This understanding is crucial for working with more complex functions and types moving forward.\n\n## Solving Argument Order Issues with `flip`\n\nWe've seen that partial application is straightforward for functions like multiplication `(*)`. Applying `(*) 2` gives us a function that doubles its input, as expected.\n\nHowever, recall the issue with subtraction `(-)` from the earlier chapter. The function `(-)` expects arguments in the order `minuend -> subtrahend -> difference`. Because of this, partially applying `(-) 2` creates a function `fun x -> 2 - x`, which subtracts its argument *from* 2, not the other way around.\n\n**This can be counter-intuitive, especially when we want to use such functions in pipelines.**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\nThis is where the power of Higher-Order Functions comes into play. Functional programming provides tools to elegantly handle such argument order situations. A key tool for this is the **`flip`** function.\n\n**What is `flip`?**\n\n`flip` is a higher-order function specifically designed to swap the first two arguments of a given function. It takes a function `f` as input and returns a *new* function that behaves like `f`, but expects the first two arguments in the reverse order relative to how `f` uses them internally.\n\nHere's the definition we are using:\n\n```fsharp\n// Flip definition: Takes f, x, y and applies f with y then x.\nlet flip = fun f x y -> f y x\n```\n\nUsing a lamdba expression:\n\n```fsharp\nlet flip' =\n    fun f ->\n        fun x ->\n            fun y ->\n                f y x\n```\n\nLet's break down this definition `let flip = fun f x y -> f y x`:\n\n- `flip` is a function that takes three arguments due to currying: `f`, `x`, and `y`.\n- `f` is the original function (e.g., `(-)`).\n- `x` is the *first* argument passed to `flip f`.\n- `y` is the *second* argument passed to `flip f`.\n- The body `f y x` calls the original function `f` but provides the arguments in the swapped order: `y` (the second argument received by `flip f`) is passed as the *first* argument to `f`, and `x` (the first argument received by `flip f`) is passed as the *second* argument to `f`.\n\n**Type Signature of `flip`**\n\nNow, let's correctly determine the type signature for `let flip = fun f x y -> f y x`.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745147306999.png)\n\n- Assume the original function `f` has the type `'a -> 'b -> 'c`. This means `f` expects an argument of type `'a` first, then an argument of type `'b`, and returns a `'c`.\n- In the body `f y x`, `y` is passed as the first argument to `f`, so `y` must have type `'a`.\n- `x` is passed as the second argument to `f`, so `x` must have type `'b`.\n- The function `flip f` receives `x` first, then `y`.\n- Therefore, `flip f` receives an argument of type `'b` (which is `x`) first, then an argument of type `'a` (which is `y`), and finally returns a `'c` (the result of `f y x`).\n- Thus, the function returned by `flip f` has the type `'b -> 'a -> 'c`.\n- The overall type signature for `flip` itself is `('a -> 'b -> 'c) -> 'b -> 'a -> 'c`.\n\n**Basic Usage Example**\n\nLet's see `flip` in action with the subtraction function `(-)`:\n\n```fsharp\n// Standard subtraction function (using the operator)\nlet subtract = (-) // Type: int -> int -> int ('a=int, 'b=int, 'c=int)\n\n// Normal application: 5 is 'a (minuend), 2 is 'b (subtrahend)\nlet resultNormal = subtract 5 2 // 5 - 2 = 3\nprintfn \"Normal subtract 5 2 = %d\" resultNormal\n\n// Create the flipped version and name it 'minus' \nlet minus = flip subtract // Type: 'b -> 'a -> 'c => int -> int -> int\n\n// Apply arguments to the flipped function 'minus': 5 is now 'b (subtrahend), 2 is 'a (minuend)\nlet resultFlipped = minus 5 2 // 'minus' expects 'b (subtrahend) then 'a (minuend)\n                              // Internally calls subtract y x => subtract 2 5 => 2 - 5 = -3\nprintfn \"Flipped minus 5 2 = %d\" resultFlipped\n```\n\nHere, `minus 5 2` applies `5` as the first argument (type `'b`, subtrahend) and `2` as the second argument (type `'a`, minuend) to the flipped function. Inside `flip`, the body executes as `subtract 2 5`, resulting in `2 - 5 = -3`.\n\n## Using `flip` for Pipeline-Friendly Partial Application\n\nNow let's revisit the pipeline examples using the naming convention you suggested.\n\n#### Fixing Subtraction for Pipelines\n\nOur goal is to create a `minus2` function such that `value |> minus2` calculates `value - 2`. Direct partial application fails. We use `flip`.\n\n```fsharp\nprintfn \"\\n--- Pipeline Subtraction ---\"\n// Start with the original subtraction function\nlet subtract = (-) // Original: 'a -> 'b -> 'c (int -> int -> int)\n\n// 1. Flip the arguments of subtract to create 'minus'\n// 'minus' now has type 'b -> 'a -> 'c (int -> int -> int)\n// It expects the subtrahend ('b) first, then the minuend ('a).\nlet minus = flip subtract // Uses 'subtract'\n\n// 2. Partially apply the *subtrahend* (2) to the flipped function 'minus'.\n// We provide the first argument expected by 'minus', which is the subtrahend (type 'b = int).\nlet minus2 = minus 2 // 'minus 2' returns a function of type 'a -> 'c (int -> int)\n                     // This function is: fun minuend -> subtract minuend 2 => fun x -> x - 2\n\n// 3. Use the new 'minus2' function in the pipeline\nlet pipelineResultSub = 10 |> minus2 // Passes 10 (type 'a = int) as the minuend\nprintfn \"10 |> minus2 = %d\" pipelineResultSub // Output: 10 |> minus2 = 8\n\n// Alternatively, apply partially applied function inline\n// The expression (minus 2) evaluates to the same function as minus2 above.\nlet pipelineResultSubAlt = 10 |> (minus 2) // Parentheses for clarity\nprintfn \"10 |> (minus 2) = %d\" pipelineResultSubAlt // Output: 10 |> (minus 2) = 8\n```\n\nFirst, we define `subtract` as the original `(-)` function. Then, we create `minus` by flipping `subtract`. This `minus` function now expects the subtrahend (`'b`) first. Partially applying `2` (the subtrahend) to `minus` correctly produces the function `minus2` (type `'a -> 'c` or `int -> int`) that waits for the minuend (`'a`) and computes `minuend - 2`. This `minus2` works perfectly with the pipeline, as shown by `10 |> minus2`.\n\nAlternatively, instead of defining `minus2` separately, we can use the partially applied function `(minus 2)` directly within the pipeline, as shown by `10 |> (minus 2)`. This achieves the same result more concisely.\n\n**The key point here is that `minus2` (or the inline `(minus 2)`) is now a simple unary function of type `int -> int`. It's ready to be plugged into a pipeline just like the `double` or `add1` functions we saw earlier, allowing for clear, sequential data transformation.**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745151316464.png)\n\n---\n\nIn summary, `flip` (defined as `fun f x y -> f y x`) is a higher-order function with the type `('a -> 'b -> 'c) -> 'b -> 'a -> 'c`. It returns a new function that expects arguments in the order corresponding to the *second* then the *first* argument types of the original function. This makes it extremely useful for creating pipeline-friendly functions via partial application, especially for non-commutative operations.","src/content/docs/en/book/unit-1/section-4/3-flip-pipe.md","224dbeeed1e4c063",{"html":725,"metadata":726},"\u003Cp>In the previous chapter, we learned about currying and partial application. Specifically, we saw how F# functions fundamentally accept arguments one at a time and can potentially return new functions. In this chapter, we will deepen that understanding, explore how Higher-Order Functions (HOFs) manifest in the type system, and how we can utilize them.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-multiplication-function-and-int---int---int-type-structure-as-a-hof\">The Multiplication Function and \u003Ccode dir=\"auto\">int -> int -> int\u003C/code> Type: Structure as a HOF\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-multiplication-function-and-int---int---int-type-structure-as-a-hof\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Multiplication Function and int -> int -> int Type: Structure as a HOF”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>First, let’s revisit the multiplication example we used frequently in the previous chapter. In F#, the multiplication operator \u003Ccode dir=\"auto\">*\u003C/code> can be treated as a function value \u003Ccode dir=\"auto\">(*)\u003C/code>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">multiply\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let multiply = (*)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The type signature for this \u003Ccode dir=\"auto\">multiply\u003C/code> function was \u003Ccode dir=\"auto\">int -> int -> int\u003C/code>. At first glance, this might seem like it takes two \u003Ccode dir=\"auto\">int\u003C/code> arguments and returns one \u003Ccode dir=\"auto\">int\u003C/code>. However, recalling the concept of currying reveals the true meaning of this type signature.\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">int -> int -> int\u003C/code> is actually shorthand for \u003Ccode dir=\"auto\">int -> (int -> int)\u003C/code>. \u003Cstrong>This becomes easier to understand if we recall the multiplication table analogy from the previous chapter.\u003C/strong> The entire multiplication function \u003Ccode dir=\"auto\">(*)\u003C/code> corresponds to the whole multiplication table, requiring two inputs (a row number and a column number). However, when we applied only the first argument (e.g., the row number \u003Ccode dir=\"auto\">3\u003C/code>) to \u003Ccode dir=\"auto\">(*)\u003C/code> (as in \u003Ccode dir=\"auto\">(*) 3\u003C/code>), it was equivalent to selecting a specific row (the “3 times table”) from the table. This “3 times table” was itself a new function (type: \u003Ccode dir=\"auto\">int -> int\u003C/code>), waiting for just one more argument (the column number).\u003C/p>\n\u003Cp>Let’s reiterate the step-by-step process of how this \u003Ccode dir=\"auto\">multiply\u003C/code> function operates due to currying:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Accepts the first \u003Ccode dir=\"auto\">int\u003C/code> as input:\u003C/strong> The function first takes the initial integer value (the row number in the multiplication table example).\u003C/li>\n\u003Cli>\u003Cstrong>Returns a new function (type \u003Ccode dir=\"auto\">int -> int\u003C/code>):\u003C/strong> Upon receiving the first argument, \u003Ccode dir=\"auto\">multiply\u003C/code> doesn’t immediately return the final result. Instead, it generates and returns a \u003Cstrong>new function\u003C/strong> that “accepts the second \u003Ccode dir=\"auto\">int\u003C/code> (the column number) and returns the final \u003Ccode dir=\"auto\">int\u003C/code> result” (the specific row in the multiplication table example). The type of this new function is \u003Ccode dir=\"auto\">int -> int\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Accepts the second \u003Ccode dir=\"auto\">int\u003C/code> as input:\u003C/strong> The returned new function then accepts the second integer value (the column number).\u003C/li>\n\u003Cli>\u003Cstrong>Returns the final \u003Ccode dir=\"auto\">int\u003C/code> as output:\u003C/strong> Only when the second argument is received is the actual multiplication (looking up the value in the table) performed, and the final integer result is returned.\u003C/li>\n\u003C/ol>\n\u003Cp>Let’s visualize this step-by-step process with a diagram. Applying \u003Ccode dir=\"auto\">2\u003C/code> to the \u003Ccode dir=\"auto\">multiply\u003C/code> function (partial application) creates the \u003Ccode dir=\"auto\">double\u003C/code> function (type: \u003Ccode dir=\"auto\">int -> int\u003C/code>), and applying \u003Ccode dir=\"auto\">10\u003C/code> to that \u003Ccode dir=\"auto\">double\u003C/code> function yields the final result \u003Ccode dir=\"auto\">20\u003C/code> (type: \u003Ccode dir=\"auto\">int\u003C/code>).\u003C/p>\n\u003Cp>!(uploaded:image_bab323.png-eddec289-a31b-405c-822a-7738ddec80e6)\u003C/p>\n\u003Cp>Thus, the \u003Ccode dir=\"auto\">multiply\u003C/code> function (\u003Ccode dir=\"auto\">(*)\u003C/code>) has the ability to \u003Cstrong>return another function\u003C/strong> after accepting an argument. This is precisely one of the key characteristics of Higher-Order Functions (HOFs) we learned about in the previous chapter (HOF Pattern 1). The type signature \u003Ccode dir=\"auto\">int -> int -> int\u003C/code> clearly indicates this structure of a “function that returns a function”—a HOF.\u003C/p>\n\u003Cp>In this section, using the multiplication table analogy, we reaffirmed that the type \u003Ccode dir=\"auto\">int -> int -> int\u003C/code> signifies more than just “takes two ints, returns one int.” It represents a deeper structure (a curried HOF): “takes an int, returns a function that takes an int and returns an int.” This understanding is crucial for working with more complex functions and types moving forward.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"solving-argument-order-issues-with-flip\">Solving Argument Order Issues with \u003Ccode dir=\"auto\">flip\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#solving-argument-order-issues-with-flip\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Solving Argument Order Issues with flip”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We’ve seen that partial application is straightforward for functions like multiplication \u003Ccode dir=\"auto\">(*)\u003C/code>. Applying \u003Ccode dir=\"auto\">(*) 2\u003C/code> gives us a function that doubles its input, as expected.\u003C/p>\n\u003Cp>However, recall the issue with subtraction \u003Ccode dir=\"auto\">(-)\u003C/code> from the earlier chapter. The function \u003Ccode dir=\"auto\">(-)\u003C/code> expects arguments in the order \u003Ccode dir=\"auto\">minuend -> subtrahend -> difference\u003C/code>. Because of this, partially applying \u003Ccode dir=\"auto\">(-) 2\u003C/code> creates a function \u003Ccode dir=\"auto\">fun x -> 2 - x\u003C/code>, which subtracts its argument \u003Cem>from\u003C/em> 2, not the other way around.\u003C/p>\n\u003Cp>\u003Cstrong>This can be counter-intuitive, especially when we want to use such functions in pipelines.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"image\">\u003C/p>\n\u003Cp>This is where the power of Higher-Order Functions comes into play. Functional programming provides tools to elegantly handle such argument order situations. A key tool for this is the \u003Cstrong>\u003Ccode dir=\"auto\">flip\u003C/code>\u003C/strong> function.\u003C/p>\n\u003Cp>\u003Cstrong>What is \u003Ccode dir=\"auto\">flip\u003C/code>?\u003C/strong>\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">flip\u003C/code> is a higher-order function specifically designed to swap the first two arguments of a given function. It takes a function \u003Ccode dir=\"auto\">f\u003C/code> as input and returns a \u003Cem>new\u003C/em> function that behaves like \u003Ccode dir=\"auto\">f\u003C/code>, but expects the first two arguments in the reverse order relative to how \u003Ccode dir=\"auto\">f\u003C/code> uses them internally.\u003C/p>\n\u003Cp>Here’s the definition we are using:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Flip definition: Takes f, x, y and applies f with y then x.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">flip\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f x y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f y x\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Flip definition: Takes f, x, y and applies f with y then x.let flip = fun f x y -> f y x\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Using a lamdba expression:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">flip\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">' \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">f y x\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let flip&#x27; =    fun f ->        fun x ->            fun y ->                f y x\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Let’s break down this definition \u003Ccode dir=\"auto\">let flip = fun f x y -> f y x\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">flip\u003C/code> is a function that takes three arguments due to currying: \u003Ccode dir=\"auto\">f\u003C/code>, \u003Ccode dir=\"auto\">x\u003C/code>, and \u003Ccode dir=\"auto\">y\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">f\u003C/code> is the original function (e.g., \u003Ccode dir=\"auto\">(-)\u003C/code>).\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">x\u003C/code> is the \u003Cem>first\u003C/em> argument passed to \u003Ccode dir=\"auto\">flip f\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">y\u003C/code> is the \u003Cem>second\u003C/em> argument passed to \u003Ccode dir=\"auto\">flip f\u003C/code>.\u003C/li>\n\u003Cli>The body \u003Ccode dir=\"auto\">f y x\u003C/code> calls the original function \u003Ccode dir=\"auto\">f\u003C/code> but provides the arguments in the swapped order: \u003Ccode dir=\"auto\">y\u003C/code> (the second argument received by \u003Ccode dir=\"auto\">flip f\u003C/code>) is passed as the \u003Cem>first\u003C/em> argument to \u003Ccode dir=\"auto\">f\u003C/code>, and \u003Ccode dir=\"auto\">x\u003C/code> (the first argument received by \u003Ccode dir=\"auto\">flip f\u003C/code>) is passed as the \u003Cem>second\u003C/em> argument to \u003Ccode dir=\"auto\">f\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Type Signature of \u003Ccode dir=\"auto\">flip\u003C/code>\u003C/strong>\u003C/p>\n\u003Cp>Now, let’s correctly determine the type signature for \u003Ccode dir=\"auto\">let flip = fun f x y -> f y x\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745147306999.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>Assume the original function \u003Ccode dir=\"auto\">f\u003C/code> has the type \u003Ccode dir=\"auto\">'a -> 'b -> 'c\u003C/code>. This means \u003Ccode dir=\"auto\">f\u003C/code> expects an argument of type \u003Ccode dir=\"auto\">'a\u003C/code> first, then an argument of type \u003Ccode dir=\"auto\">'b\u003C/code>, and returns a \u003Ccode dir=\"auto\">'c\u003C/code>.\u003C/li>\n\u003Cli>In the body \u003Ccode dir=\"auto\">f y x\u003C/code>, \u003Ccode dir=\"auto\">y\u003C/code> is passed as the first argument to \u003Ccode dir=\"auto\">f\u003C/code>, so \u003Ccode dir=\"auto\">y\u003C/code> must have type \u003Ccode dir=\"auto\">'a\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">x\u003C/code> is passed as the second argument to \u003Ccode dir=\"auto\">f\u003C/code>, so \u003Ccode dir=\"auto\">x\u003C/code> must have type \u003Ccode dir=\"auto\">'b\u003C/code>.\u003C/li>\n\u003Cli>The function \u003Ccode dir=\"auto\">flip f\u003C/code> receives \u003Ccode dir=\"auto\">x\u003C/code> first, then \u003Ccode dir=\"auto\">y\u003C/code>.\u003C/li>\n\u003Cli>Therefore, \u003Ccode dir=\"auto\">flip f\u003C/code> receives an argument of type \u003Ccode dir=\"auto\">'b\u003C/code> (which is \u003Ccode dir=\"auto\">x\u003C/code>) first, then an argument of type \u003Ccode dir=\"auto\">'a\u003C/code> (which is \u003Ccode dir=\"auto\">y\u003C/code>), and finally returns a \u003Ccode dir=\"auto\">'c\u003C/code> (the result of \u003Ccode dir=\"auto\">f y x\u003C/code>).\u003C/li>\n\u003Cli>Thus, the function returned by \u003Ccode dir=\"auto\">flip f\u003C/code> has the type \u003Ccode dir=\"auto\">'b -> 'a -> 'c\u003C/code>.\u003C/li>\n\u003Cli>The overall type signature for \u003Ccode dir=\"auto\">flip\u003C/code> itself is \u003Ccode dir=\"auto\">('a -> 'b -> 'c) -> 'b -> 'a -> 'c\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Basic Usage Example\u003C/strong>\u003C/p>\n\u003Cp>Let’s see \u003Ccode dir=\"auto\">flip\u003C/code> in action with the subtraction function \u003Ccode dir=\"auto\">(-)\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Standard subtraction function (using the operator)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">subtract\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(-)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Type: int -> int -> int ('a=int, 'b=int, 'c=int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Normal application: 5 is 'a (minuend), 2 is 'b (subtrahend)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultNormal\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> subtract \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 5 - 2 = 3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Normal subtract 5 2 = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> resultNormal\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create the flipped version and name it 'minus'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">minus\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> flip subtract \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Type: 'b -> 'a -> 'c => int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply arguments to the flipped function 'minus': 5 is now 'b (subtrahend), 2 is 'a (minuend)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultFlipped\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> minus \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'minus' expects 'b (subtrahend) then 'a (minuend)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                              \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Internally calls subtract y x => subtract 2 5 => 2 - 5 = -3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Flipped minus 5 2 = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> resultFlipped\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Standard subtraction function (using the operator)let subtract = (-) // Type: int -> int -> int (&#x27;a=int, &#x27;b=int, &#x27;c=int)// Normal application: 5 is &#x27;a (minuend), 2 is &#x27;b (subtrahend)let resultNormal = subtract 5 2 // 5 - 2 = 3printfn &#x22;Normal subtract 5 2 = %d&#x22; resultNormal// Create the flipped version and name it &#x27;minus&#x27;let minus = flip subtract // Type: &#x27;b -> &#x27;a -> &#x27;c => int -> int -> int// Apply arguments to the flipped function &#x27;minus&#x27;: 5 is now &#x27;b (subtrahend), 2 is &#x27;a (minuend)let resultFlipped = minus 5 2 // &#x27;minus&#x27; expects &#x27;b (subtrahend) then &#x27;a (minuend)                              // Internally calls subtract y x => subtract 2 5 => 2 - 5 = -3printfn &#x22;Flipped minus 5 2 = %d&#x22; resultFlipped\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Here, \u003Ccode dir=\"auto\">minus 5 2\u003C/code> applies \u003Ccode dir=\"auto\">5\u003C/code> as the first argument (type \u003Ccode dir=\"auto\">'b\u003C/code>, subtrahend) and \u003Ccode dir=\"auto\">2\u003C/code> as the second argument (type \u003Ccode dir=\"auto\">'a\u003C/code>, minuend) to the flipped function. Inside \u003Ccode dir=\"auto\">flip\u003C/code>, the body executes as \u003Ccode dir=\"auto\">subtract 2 5\u003C/code>, resulting in \u003Ccode dir=\"auto\">2 - 5 = -3\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"using-flip-for-pipeline-friendly-partial-application\">Using \u003Ccode dir=\"auto\">flip\u003C/code> for Pipeline-Friendly Partial Application\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#using-flip-for-pipeline-friendly-partial-application\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Using flip for Pipeline-Friendly Partial Application”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now let’s revisit the pipeline examples using the naming convention you suggested.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h4\">\u003Ch4 id=\"fixing-subtraction-for-pipelines\">Fixing Subtraction for Pipelines\u003C/h4>\u003Ca class=\"sl-anchor-link\" href=\"#fixing-subtraction-for-pipelines\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Fixing Subtraction for Pipelines”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our goal is to create a \u003Ccode dir=\"auto\">minus2\u003C/code> function such that \u003Ccode dir=\"auto\">value |> minus2\u003C/code> calculates \u003Ccode dir=\"auto\">value - 2\u003C/code>. Direct partial application fails. We use \u003Ccode dir=\"auto\">flip\u003C/code>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">--- Pipeline Subtraction ---\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with the original subtraction function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">subtract\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(-)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Original: 'a -> 'b -> 'c (int -> int -> int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Flip the arguments of subtract to create 'minus'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'minus' now has type 'b -> 'a -> 'c (int -> int -> int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// It expects the subtrahend ('b) first, then the minuend ('a).\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">minus\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> flip subtract \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Uses 'subtract'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Partially apply the *subtrahend* (2) to the flipped function 'minus'.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We provide the first argument expected by 'minus', which is the subtrahend (type 'b = int).\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">minus2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> minus \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'minus 2' returns a function of type 'a -> 'c (int -> int)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This function is: fun minuend -> subtract minuend 2 => fun x -> x - 2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3. Use the new 'minus2' function in the pipeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">pipelineResultSub\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> minus2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Passes 10 (type 'a = int) as the minuend\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">10 |> minus2 = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> pipelineResultSub \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: 10 |> minus2 = 8\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Alternatively, apply partially applied function inline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The expression (minus 2) evaluates to the same function as minus2 above.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">pipelineResultSubAlt\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">minus \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Parentheses for clarity\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">10 |> (minus 2) = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> pipelineResultSubAlt \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: 10 |> (minus 2) = 8\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"printfn &#x22;\\n--- Pipeline Subtraction ---&#x22;// Start with the original subtraction functionlet subtract = (-) // Original: &#x27;a -> &#x27;b -> &#x27;c (int -> int -> int)// 1. Flip the arguments of subtract to create &#x27;minus&#x27;// &#x27;minus&#x27; now has type &#x27;b -> &#x27;a -> &#x27;c (int -> int -> int)// It expects the subtrahend (&#x27;b) first, then the minuend (&#x27;a).let minus = flip subtract // Uses &#x27;subtract&#x27;// 2. Partially apply the *subtrahend* (2) to the flipped function &#x27;minus&#x27;.// We provide the first argument expected by &#x27;minus&#x27;, which is the subtrahend (type &#x27;b = int).let minus2 = minus 2 // &#x27;minus 2&#x27; returns a function of type &#x27;a -> &#x27;c (int -> int)                     // This function is: fun minuend -> subtract minuend 2 => fun x -> x - 2// 3. Use the new &#x27;minus2&#x27; function in the pipelinelet pipelineResultSub = 10 |> minus2 // Passes 10 (type &#x27;a = int) as the minuendprintfn &#x22;10 |> minus2 = %d&#x22; pipelineResultSub // Output: 10 |> minus2 = 8// Alternatively, apply partially applied function inline// The expression (minus 2) evaluates to the same function as minus2 above.let pipelineResultSubAlt = 10 |> (minus 2) // Parentheses for clarityprintfn &#x22;10 |> (minus 2) = %d&#x22; pipelineResultSubAlt // Output: 10 |> (minus 2) = 8\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>First, we define \u003Ccode dir=\"auto\">subtract\u003C/code> as the original \u003Ccode dir=\"auto\">(-)\u003C/code> function. Then, we create \u003Ccode dir=\"auto\">minus\u003C/code> by flipping \u003Ccode dir=\"auto\">subtract\u003C/code>. This \u003Ccode dir=\"auto\">minus\u003C/code> function now expects the subtrahend (\u003Ccode dir=\"auto\">'b\u003C/code>) first. Partially applying \u003Ccode dir=\"auto\">2\u003C/code> (the subtrahend) to \u003Ccode dir=\"auto\">minus\u003C/code> correctly produces the function \u003Ccode dir=\"auto\">minus2\u003C/code> (type \u003Ccode dir=\"auto\">'a -> 'c\u003C/code> or \u003Ccode dir=\"auto\">int -> int\u003C/code>) that waits for the minuend (\u003Ccode dir=\"auto\">'a\u003C/code>) and computes \u003Ccode dir=\"auto\">minuend - 2\u003C/code>. This \u003Ccode dir=\"auto\">minus2\u003C/code> works perfectly with the pipeline, as shown by \u003Ccode dir=\"auto\">10 |> minus2\u003C/code>.\u003C/p>\n\u003Cp>Alternatively, instead of defining \u003Ccode dir=\"auto\">minus2\u003C/code> separately, we can use the partially applied function \u003Ccode dir=\"auto\">(minus 2)\u003C/code> directly within the pipeline, as shown by \u003Ccode dir=\"auto\">10 |> (minus 2)\u003C/code>. This achieves the same result more concisely.\u003C/p>\n\u003Cp>\u003Cstrong>The key point here is that \u003Ccode dir=\"auto\">minus2\u003C/code> (or the inline \u003Ccode dir=\"auto\">(minus 2)\u003C/code>) is now a simple unary function of type \u003Ccode dir=\"auto\">int -> int\u003C/code>. It’s ready to be plugged into a pipeline just like the \u003Ccode dir=\"auto\">double\u003C/code> or \u003Ccode dir=\"auto\">add1\u003C/code> functions we saw earlier, allowing for clear, sequential data transformation.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745151316464.png\" alt=\"image\">\u003C/p>\n\u003Chr>\n\u003Cp>In summary, \u003Ccode dir=\"auto\">flip\u003C/code> (defined as \u003Ccode dir=\"auto\">fun f x y -> f y x\u003C/code>) is a higher-order function with the type \u003Ccode dir=\"auto\">('a -> 'b -> 'c) -> 'b -> 'a -> 'c\u003C/code>. It returns a new function that expects arguments in the order corresponding to the \u003Cem>second\u003C/em> then the \u003Cem>first\u003C/em> argument types of the original function. This makes it extremely useful for creating pipeline-friendly functions via partial application, especially for non-commutative operations.\u003C/p>",{"headings":727,"localImagePaths":740,"remoteImagePaths":741,"frontmatter":742,"imagePaths":743},[728,731,734,737],{"depth":182,"slug":729,"text":730},"the-multiplication-function-and-int---int---int-type-structure-as-a-hof","The Multiplication Function and int -> int -> int Type: Structure as a HOF",{"depth":182,"slug":732,"text":733},"solving-argument-order-issues-with-flip","Solving Argument Order Issues with flip",{"depth":182,"slug":735,"text":736},"using-flip-for-pipeline-friendly-partial-application","Using flip for Pipeline-Friendly Partial Application",{"depth":464,"slug":738,"text":739},"fixing-subtraction-for-pipelines","Fixing Subtraction for Pipelines",[],[],{"title":716,"description":717},[],"en/book/unit-2/section-0/0-about-unit",{"id":744,"data":746,"body":752,"filePath":753,"digest":754,"rendered":755},{"title":747,"description":748,"editUrl":16,"head":749,"template":18,"sidebar":750,"pagefind":16,"draft":20},"🔍 Overview - Unit 2","In Unit 0 and Unit 1, we built a foundation by exploring the core ideas of functional programming: data transformation pipelines, functions as first-class values, higher-order functions, the importance of types, and how FP handles sequence, selection, and iteration (often through expressions, HOFs, and recursion).",[],{"hidden":20,"attrs":751},{},"In Unit 0 and Unit 1, we built a foundation by exploring the core ideas of functional programming: data transformation pipelines, functions as first-class values, higher-order functions, the importance of types, and how FP handles sequence, selection, and iteration (often through expressions, HOFs, and recursion).\n\nNow, in Unit 2, we will delve into some powerful **algebraic structures** commonly used in functional programming. While abstract algebra might sound intimidating, we will focus on just three fundamental structures:\n\n- Monoid\n- Functor\n- Monad","src/content/docs/en/book/unit-2/section-0/0-about-unit.md","20c84328f1ad20e3",{"html":756,"metadata":757},"\u003Cp>In Unit 0 and Unit 1, we built a foundation by exploring the core ideas of functional programming: data transformation pipelines, functions as first-class values, higher-order functions, the importance of types, and how FP handles sequence, selection, and iteration (often through expressions, HOFs, and recursion).\u003C/p>\n\u003Cp>Now, in Unit 2, we will delve into some powerful \u003Cstrong>algebraic structures\u003C/strong> commonly used in functional programming. While abstract algebra might sound intimidating, we will focus on just three fundamental structures:\u003C/p>\n\u003Cul>\n\u003Cli>Monoid\u003C/li>\n\u003Cli>Functor\u003C/li>\n\u003Cli>Monad\u003C/li>\n\u003C/ul>",{"headings":758,"localImagePaths":759,"remoteImagePaths":760,"frontmatter":761,"imagePaths":762},[],[],[],{"title":747,"description":748},[],"en/book/unit-2/section-2/1-semigroup",{"id":763,"data":765,"body":771,"filePath":772,"digest":773,"rendered":774},{"title":766,"description":767,"editUrl":16,"head":768,"template":18,"sidebar":769,"pagefind":16,"draft":20},"Semigroups: Our First Algebraic Structure","Remember how we discovered that binary operators like + and * are actually functions in disguise? Now let's explore our first formal algebraic structure built around such operators: the Semigroup.",[],{"hidden":20,"attrs":770},{},"Remember how we discovered that binary operators like `+` and `*` are actually functions in disguise? Now let's explore our first formal algebraic structure built around such operators: the **Semigroup**.\n\n## Understanding Semigroups Through Types and Operators\n\nA semigroup is an algebraic structure (A, •) where:\n\n- A is a set (in programming terms, a Type)\n- • is a binary operator that combines two values of the same type and returns a result of that same type (in programming terms, a Function of type `a -> a -> a` where both inputs and the output must be the same type a)\n- The operator must satisfy the associative law\n\nLet's see this in familiar examples:\n\n### Numbers with Addition and Multiplication\n\n```fsharp\nlet add = (+)    // type: int -> int -> int\n                 // takes two ints and returns an int of the same type\nlet mult = (*)   // type: int -> int -> int\n                 // takes two ints and returns an int of the same type\n```\n\nFor addition:\n\n- Set (Type): The integers\n- Operator (Function): Addition\n- Associativity: $(1 + 2) + 3 = 1 + (2 + 3)$\n\nFor multiplication:\n\n- Set (Type): The integers\n- Operator (Function): Multiplication\n- Associativity: $(1 × 2) × 3 = 1 × (2 × 3)$\n\nNote that subtraction and division are not associative:\n$(10 - 5) - 2 ≠ 10 - (5 - 2)$\n$(16 ÷ 4) ÷ 2 ≠ 16 ÷ (4 ÷ 2)$\n\n### Strings with Concatenation\n\n```fsharp\nlet concat = (+)  // type: string -> string -> string\n                  // takes two strings and returns a string of the same type\n```\n\n- Set (Type): All possible strings\n- Operator (Function): String concatenation\n- Associativity: (\"He\" + \"l\") + \"lo\" = \"He\" + (\"l\" + \"lo\")\n\n## Physical Examples: The Same Pattern\n\n### LEGO Blocks\n\n- Set (Type): All physical LEGO blocks\n- Operator (Function): Physical connection (takes two LEGO blocks and returns a combined LEGO block - same type!)\n- Associativity: (A+B)+C = A+(B+C)\n\nThe LEGO connection operator is just like our binary operators in code - it takes two blocks and returns a combined block of the same type. And just like `+` for numbers, the way we group the connections doesn't affect the final result.\n\n### USB Devices\n\n- Set (Type): All USB devices\n- Operator (Function): Hub connection (takes two USB devices and returns a combined USB device configuration - same type!)\n- Associativity: Nesting hubs in different orders yields the same final configuration\n\n## Why Semigroups Matter\n\nThe real power of recognizing something as a semigroup is that we know:\n\n1. We have a well-defined set of values (our Type)\n2. We have a binary operator (our Function) that:\n   - Takes two values of our type\n   - Returns a value of the same type\n   - Combines values in a predictable way (associativity)\n\nThis means we can reliably chain operations together in our pipelines, just like we can reliably connect LEGO blocks or USB devices in any order. In mathematics, this structure is called a semigroup - but for us as programmers, it's a guarantee that our (Type, Function) pair will work reliably in pipelines, regardless of how we group the operations.","src/content/docs/en/book/unit-2/section-2/1-semigroup.md","3ad14a8c401d2e5e",{"html":775,"metadata":776},"\u003Cp>Remember how we discovered that binary operators like \u003Ccode dir=\"auto\">+\u003C/code> and \u003Ccode dir=\"auto\">*\u003C/code> are actually functions in disguise? Now let’s explore our first formal algebraic structure built around such operators: the \u003Cstrong>Semigroup\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"understanding-semigroups-through-types-and-operators\">Understanding Semigroups Through Types and Operators\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#understanding-semigroups-through-types-and-operators\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Understanding Semigroups Through Types and Operators”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A semigroup is an algebraic structure (A, •) where:\u003C/p>\n\u003Cul>\n\u003Cli>A is a set (in programming terms, a Type)\u003C/li>\n\u003Cli>• is a binary operator that combines two values of the same type and returns a result of that same type (in programming terms, a Function of type \u003Ccode dir=\"auto\">a -> a -> a\u003C/code> where both inputs and the output must be the same type a)\u003C/li>\n\u003Cli>The operator must satisfy the associative law\u003C/li>\n\u003C/ul>\n\u003Cp>Let’s see this in familiar examples:\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"numbers-with-addition-and-multiplication\">Numbers with Addition and Multiplication\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#numbers-with-addition-and-multiplication\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Numbers with Addition and Multiplication”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type: int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// takes two ints and returns an int of the same type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mult\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type: int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// takes two ints and returns an int of the same type\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let add = (+)    // type: int -> int -> int                 // takes two ints and returns an int of the same typelet mult = (*)   // type: int -> int -> int                 // takes two ints and returns an int of the same type\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>For addition:\u003C/p>\n\u003Cul>\n\u003Cli>Set (Type): The integers\u003C/li>\n\u003Cli>Operator (Function): Addition\u003C/li>\n\u003Cli>Associativity: $(1 + 2) + 3 = 1 + (2 + 3)$\u003C/li>\n\u003C/ul>\n\u003Cp>For multiplication:\u003C/p>\n\u003Cul>\n\u003Cli>Set (Type): The integers\u003C/li>\n\u003Cli>Operator (Function): Multiplication\u003C/li>\n\u003Cli>Associativity: $(1 × 2) × 3 = 1 × (2 × 3)$\u003C/li>\n\u003C/ul>\n\u003Cp>Note that subtraction and division are not associative:\n$(10 - 5) - 2 ≠ 10 - (5 - 2)$\n$(16 ÷ 4) ÷ 2 ≠ 16 ÷ (4 ÷ 2)$\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"strings-with-concatenation\">Strings with Concatenation\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#strings-with-concatenation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Strings with Concatenation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">concat\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type: string -> string -> string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// takes two strings and returns a string of the same type\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let concat = (+)  // type: string -> string -> string                  // takes two strings and returns a string of the same type\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>Set (Type): All possible strings\u003C/li>\n\u003Cli>Operator (Function): String concatenation\u003C/li>\n\u003Cli>Associativity: (“He” + “l”) + “lo” = “He” + (“l” + “lo”)\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"physical-examples-the-same-pattern\">Physical Examples: The Same Pattern\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#physical-examples-the-same-pattern\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Physical Examples: The Same Pattern”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"lego-blocks\">LEGO Blocks\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#lego-blocks\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “LEGO Blocks”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Set (Type): All physical LEGO blocks\u003C/li>\n\u003Cli>Operator (Function): Physical connection (takes two LEGO blocks and returns a combined LEGO block - same type!)\u003C/li>\n\u003Cli>Associativity: (A+B)+C = A+(B+C)\u003C/li>\n\u003C/ul>\n\u003Cp>The LEGO connection operator is just like our binary operators in code - it takes two blocks and returns a combined block of the same type. And just like \u003Ccode dir=\"auto\">+\u003C/code> for numbers, the way we group the connections doesn’t affect the final result.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"usb-devices\">USB Devices\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#usb-devices\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “USB Devices”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Set (Type): All USB devices\u003C/li>\n\u003Cli>Operator (Function): Hub connection (takes two USB devices and returns a combined USB device configuration - same type!)\u003C/li>\n\u003Cli>Associativity: Nesting hubs in different orders yields the same final configuration\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"why-semigroups-matter\">Why Semigroups Matter\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#why-semigroups-matter\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Why Semigroups Matter”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The real power of recognizing something as a semigroup is that we know:\u003C/p>\n\u003Col>\n\u003Cli>We have a well-defined set of values (our Type)\u003C/li>\n\u003Cli>We have a binary operator (our Function) that:\n\u003Cul>\n\u003Cli>Takes two values of our type\u003C/li>\n\u003Cli>Returns a value of the same type\u003C/li>\n\u003Cli>Combines values in a predictable way (associativity)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This means we can reliably chain operations together in our pipelines, just like we can reliably connect LEGO blocks or USB devices in any order. In mathematics, this structure is called a semigroup - but for us as programmers, it’s a guarantee that our (Type, Function) pair will work reliably in pipelines, regardless of how we group the operations.\u003C/p>",{"headings":777,"localImagePaths":799,"remoteImagePaths":800,"frontmatter":801,"imagePaths":802},[778,781,784,787,790,793,796],{"depth":182,"slug":779,"text":780},"understanding-semigroups-through-types-and-operators","Understanding Semigroups Through Types and Operators",{"depth":523,"slug":782,"text":783},"numbers-with-addition-and-multiplication","Numbers with Addition and Multiplication",{"depth":523,"slug":785,"text":786},"strings-with-concatenation","Strings with Concatenation",{"depth":182,"slug":788,"text":789},"physical-examples-the-same-pattern","Physical Examples: The Same Pattern",{"depth":523,"slug":791,"text":792},"lego-blocks","LEGO Blocks",{"depth":523,"slug":794,"text":795},"usb-devices","USB Devices",{"depth":182,"slug":797,"text":798},"why-semigroups-matter","Why Semigroups Matter",[],[],{"title":766,"description":767},[],"en/book/unit-2/section-2/0-associativity",{"id":803,"data":805,"body":811,"filePath":812,"digest":813,"rendered":814},{"title":806,"description":807,"editUrl":16,"head":808,"template":18,"sidebar":809,"pagefind":16,"draft":20},"Associativity: Building Robust Structures","This chapter lays the groundwork by exploring a fundamental property that underpins the Monoid structure: Associativity. This property helps us build systems that are robust and predictable - where things \"just connect and work\" without surprises.",[],{"hidden":20,"attrs":810},{},"This chapter lays the groundwork by exploring a fundamental property that underpins the Monoid structure: **Associativity**. This property helps us build systems that are robust and predictable - where things \"just connect and work\" without surprises.\n\n## Associativity: When Grouping Doesn't Matter\n\nConsider combining three numbers with addition or multiplication:\n\n$(1 + 2) + 3 = 1 + (2 + 3)$\n\n$(1 × 2) × 3 = 1 × (2 × 3)$\n\nFor addition (`+`) and multiplication (`*`), the way we group the operations using parentheses doesn't change the final result. This property is called **associativity**.\n\nHowever, subtraction (`-`) and division (`/`) do *not* have this property:\n\n$(10 - 5) - 2 ≠ 10 - (5 - 2)$\n\n$(16 ÷ 4) ÷ 2 ≠ 16 ÷ (4 ÷ 2)$\n\nSubtraction and division are **non-associative**. The order in which you perform the operations (how you group them) drastically changes the outcome.\n\n## The Power of Predictability: Why Associativity is Desirable\n\nConsider **LEGO blocks**. If you have three blocks A, B, and C, you can join them in different orders:\n\n- Join A and B first to make AB, then add C to make ABC\n- Join B and C first to make BC, then add A to make ABC\n\nThe beauty is that no matter which order you choose, you'll end up with the same final structure ABC. Just connect them, and it works! This predictability is a huge part of their appeal, especially for young children. The fundamental act of connecting two pieces is reliable, regardless of how you group the intermediate steps. This \"just connect and it works\" simplicity makes them intuitive and easy to play with.\n\nHowever, if you had blocks where the joining order mattered (like non-associative LEGO blocks), it would create a very confusing and unpredictable situation.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745395036943.png)\n\nSimilarly, consider **USB devices**. You can plug a USB hub into your computer, then plug a keyboard into the hub. Or you could plug the keyboard into the hub first, and then plug the hub (with keyboard attached) into the computer. The final connected state works the same way. The *order* of establishing the connections doesn't fundamentally alter the ability of the devices to communicate once connected. This predictable \"plug-and-play\" nature makes USB incredibly user-friendly.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745395866156.png)\n\nAs programmers, we strive to make our code as simple, predictable, and easy to reason about as possible – much like LEGO blocks or USB devices. If an operation is associative, it means we don't have to worry about how intermediate computations are grouped.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n**Combinatorial Explosion**\n\nLet's consider three blocks A, B, and C.\n\nIf we first connect A+B to create block AB, then combine it with C to make AB+C,\nor if we first connect B+C to create block BC, then combine it with A to make A+BC,\nthe final result ABC should be the same.\n\nHowever, imagine if the blocks behaved differently based on the order of assembly. If the final structure changed depending on whether you built AB+C or A+BC, it would quickly become chaotic. The number of possible outcomes would explode as you add more blocks, making it nearly impossible to predict or control the final result.\n\nThis demonstrates why associativity is so valuable - it prevents this kind of combinatorial explosion by ensuring that the grouping order doesn't affect the outcome.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## String Concatenation: A Hidden Benefit We All Enjoy\n\nThink about text editing - something we all do every day. When you **cut (✂️) and paste (📋)** text in a document, you're actually performing string concatenation without even realizing it. This is where associativity quietly makes our lives easier.\n\nImagine if the order of cut-and-paste operations affected your final document. What if:\n\n1. Cutting \"Hello\", then cutting \"world\", then pasting them in that order\n2. Cutting \"world\" first, then cutting \"Hello\", then pasting them in reverse order\n\n...resulted in different final texts! It would be a nightmare scenario that would make document editing nearly impossible. Every cut-and-paste operation would need to be carefully planned and documented to ensure the correct final result.\n\nFortunately, thanks to the associative property of string concatenation, this chaotic situation doesn't exist. Whether you're writing an email, editing a report, or composing a social media post, you can freely cut and paste text segments in any order without worrying about how they'll combine. This is a perfect example of how mathematical properties like associativity can provide practical benefits that we all enjoy in our daily lives, even if we're not aware of the underlying principle.\n\nLet's see how this looks in programming terms:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// This is the same operation as cut-and-paste in a text editor\nlet s1 = \"Hello\"\nlet s2 = \" \"\nlet s3 = \"world!\"\n\n// These operations are equivalent to different cut-paste sequences\nlet result1 = (s1 + s2) + s3  // Like pasting \"Hello \" first, then \"world!\"\nlet result2 = s1 + (s2 + s3)  // Like pasting \" world!\" first, then \"Hello\"\n\nprintfn \"%s\" result1  // Output: Hello world!\nprintfn \"%s\" result2  // Output: Hello world!\n// Both give us \"Hello world!\" - just like we'd expect in a text editor\n```\n\nThe fact that this \"just works\" in our everyday text editing is not a coincidence - it's a direct result of string concatenation being associative. This property is the first key ingredient in understanding the Monoid structure we'll explore next, but more importantly, it's a perfect example of how mathematical properties can make our everyday tools more intuitive and reliable.","src/content/docs/en/book/unit-2/section-2/0-associativity.md","e9f0c028005c1859",{"html":815,"metadata":816},"\u003Cp>This chapter lays the groundwork by exploring a fundamental property that underpins the Monoid structure: \u003Cstrong>Associativity\u003C/strong>. This property helps us build systems that are robust and predictable - where things “just connect and work” without surprises.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"associativity-when-grouping-doesnt-matter\">Associativity: When Grouping Doesn’t Matter\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#associativity-when-grouping-doesnt-matter\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Associativity: When Grouping Doesn’t Matter”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Consider combining three numbers with addition or multiplication:\u003C/p>\n\u003Cp>$(1 + 2) + 3 = 1 + (2 + 3)$\u003C/p>\n\u003Cp>$(1 × 2) × 3 = 1 × (2 × 3)$\u003C/p>\n\u003Cp>For addition (\u003Ccode dir=\"auto\">+\u003C/code>) and multiplication (\u003Ccode dir=\"auto\">*\u003C/code>), the way we group the operations using parentheses doesn’t change the final result. This property is called \u003Cstrong>associativity\u003C/strong>.\u003C/p>\n\u003Cp>However, subtraction (\u003Ccode dir=\"auto\">-\u003C/code>) and division (\u003Ccode dir=\"auto\">/\u003C/code>) do \u003Cem>not\u003C/em> have this property:\u003C/p>\n\u003Cp>$(10 - 5) - 2 ≠ 10 - (5 - 2)$\u003C/p>\n\u003Cp>$(16 ÷ 4) ÷ 2 ≠ 16 ÷ (4 ÷ 2)$\u003C/p>\n\u003Cp>Subtraction and division are \u003Cstrong>non-associative\u003C/strong>. The order in which you perform the operations (how you group them) drastically changes the outcome.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-power-of-predictability-why-associativity-is-desirable\">The Power of Predictability: Why Associativity is Desirable\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-power-of-predictability-why-associativity-is-desirable\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Power of Predictability: Why Associativity is Desirable”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Consider \u003Cstrong>LEGO blocks\u003C/strong>. If you have three blocks A, B, and C, you can join them in different orders:\u003C/p>\n\u003Cul>\n\u003Cli>Join A and B first to make AB, then add C to make ABC\u003C/li>\n\u003Cli>Join B and C first to make BC, then add A to make ABC\u003C/li>\n\u003C/ul>\n\u003Cp>The beauty is that no matter which order you choose, you’ll end up with the same final structure ABC. Just connect them, and it works! This predictability is a huge part of their appeal, especially for young children. The fundamental act of connecting two pieces is reliable, regardless of how you group the intermediate steps. This “just connect and it works” simplicity makes them intuitive and easy to play with.\u003C/p>\n\u003Cp>However, if you had blocks where the joining order mattered (like non-associative LEGO blocks), it would create a very confusing and unpredictable situation.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745395036943.png\" alt=\"image\">\u003C/p>\n\u003Cp>Similarly, consider \u003Cstrong>USB devices\u003C/strong>. You can plug a USB hub into your computer, then plug a keyboard into the hub. Or you could plug the keyboard into the hub first, and then plug the hub (with keyboard attached) into the computer. The final connected state works the same way. The \u003Cem>order\u003C/em> of establishing the connections doesn’t fundamentally alter the ability of the devices to communicate once connected. This predictable “plug-and-play” nature makes USB incredibly user-friendly.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745395866156.png\" alt=\"image\">\u003C/p>\n\u003Cp>As programmers, we strive to make our code as simple, predictable, and easy to reason about as possible – much like LEGO blocks or USB devices. If an operation is associative, it means we don’t have to worry about how intermediate computations are grouped.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cstrong>Combinatorial Explosion\u003C/strong>\u003C/p>\n\u003Cp>Let’s consider three blocks A, B, and C.\u003C/p>\n\u003Cp>If we first connect A+B to create block AB, then combine it with C to make AB+C,\nor if we first connect B+C to create block BC, then combine it with A to make A+BC,\nthe final result ABC should be the same.\u003C/p>\n\u003Cp>However, imagine if the blocks behaved differently based on the order of assembly. If the final structure changed depending on whether you built AB+C or A+BC, it would quickly become chaotic. The number of possible outcomes would explode as you add more blocks, making it nearly impossible to predict or control the final result.\u003C/p>\n\u003Cp>This demonstrates why associativity is so valuable - it prevents this kind of combinatorial explosion by ensuring that the grouping order doesn’t affect the outcome.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"string-concatenation-a-hidden-benefit-we-all-enjoy\">String Concatenation: A Hidden Benefit We All Enjoy\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#string-concatenation-a-hidden-benefit-we-all-enjoy\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “String Concatenation: A Hidden Benefit We All Enjoy”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Think about text editing - something we all do every day. When you \u003Cstrong>cut (✂️) and paste (📋)\u003C/strong> text in a document, you’re actually performing string concatenation without even realizing it. This is where associativity quietly makes our lives easier.\u003C/p>\n\u003Cp>Imagine if the order of cut-and-paste operations affected your final document. What if:\u003C/p>\n\u003Col>\n\u003Cli>Cutting “Hello”, then cutting “world”, then pasting them in that order\u003C/li>\n\u003Cli>Cutting “world” first, then cutting “Hello”, then pasting them in reverse order\u003C/li>\n\u003C/ol>\n\u003Cp>…resulted in different final texts! It would be a nightmare scenario that would make document editing nearly impossible. Every cut-and-paste operation would need to be carefully planned and documented to ensure the correct final result.\u003C/p>\n\u003Cp>Fortunately, thanks to the associative property of string concatenation, this chaotic situation doesn’t exist. Whether you’re writing an email, editing a report, or composing a social media post, you can freely cut and paste text segments in any order without worrying about how they’ll combine. This is a perfect example of how mathematical properties like associativity can provide practical benefits that we all enjoy in our daily lives, even if we’re not aware of the underlying principle.\u003C/p>\n\u003Cp>Let’s see how this looks in programming terms:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This is the same operation as cut-and-paste in a text editor\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">s1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">s2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">s3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">world!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// These operations are equivalent to different cut-paste sequences\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">s1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s3  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Like pasting \"Hello \" first, then \"world!\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">s2 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Like pasting \" world!\" first, then \"Hello\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result1  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Hello world!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result2  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Hello world!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Both give us \"Hello world!\" - just like we'd expect in a text editor\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// This is the same operation as cut-and-paste in a text editorlet s1 = &#x22;Hello&#x22;let s2 = &#x22; &#x22;let s3 = &#x22;world!&#x22;// These operations are equivalent to different cut-paste sequenceslet result1 = (s1 + s2) + s3  // Like pasting &#x22;Hello &#x22; first, then &#x22;world!&#x22;let result2 = s1 + (s2 + s3)  // Like pasting &#x22; world!&#x22; first, then &#x22;Hello&#x22;printfn &#x22;%s&#x22; result1  // Output: Hello world!printfn &#x22;%s&#x22; result2  // Output: Hello world!// Both give us &#x22;Hello world!&#x22; - just like we&#x27;d expect in a text editor\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The fact that this “just works” in our everyday text editing is not a coincidence - it’s a direct result of string concatenation being associative. This property is the first key ingredient in understanding the Monoid structure we’ll explore next, but more importantly, it’s a perfect example of how mathematical properties can make our everyday tools more intuitive and reliable.\u003C/p>",{"headings":817,"localImagePaths":827,"remoteImagePaths":828,"frontmatter":829,"imagePaths":830},[818,821,824],{"depth":182,"slug":819,"text":820},"associativity-when-grouping-doesnt-matter","Associativity: When Grouping Doesn’t Matter",{"depth":182,"slug":822,"text":823},"the-power-of-predictability-why-associativity-is-desirable","The Power of Predictability: Why Associativity is Desirable",{"depth":182,"slug":825,"text":826},"string-concatenation-a-hidden-benefit-we-all-enjoy","String Concatenation: A Hidden Benefit We All Enjoy",[],[],{"title":806,"description":807},[],"en/book/unit-2/section-2/2-identity-element",{"id":831,"data":833,"body":839,"filePath":840,"digest":841,"rendered":842},{"title":834,"description":835,"editUrl":16,"head":836,"template":18,"sidebar":837,"pagefind":16,"draft":20},"Identity Elements","An  identity element  (often called a \"unit element\") is a special value that, when combined with any other value using a binary operator, leaves that other value unchanged.",[],{"hidden":20,"attrs":838},{},"## What is an Identity Element?\n\nAn  **identity element**  (often called a \"unit element\") is a special value that, when combined with any other value using a binary operator, leaves that other value unchanged.\n\nA value e is called an identity element if combining it with any other element x leaves x unchanged:\n\n- Left identity: e • x = x\n- Right identity: x • e = x\n- This must work for all values x in the set\n\n## Identity Elements in Familiar Operations\n\n### Addition and Multiplication\n\nFor numbers, we have natural identity elements:\n\nFor addition:\n\n- Identity element: 0\n- Property: Adding 0 leaves any number unchanged\n  - 0 + 3 = 3 = 3 + 0\n  - 0 + 7 = 7 = 7 + 0\n  - Works for any number!\n\nFor multiplication:\n\n- Identity element: 1\n- Property: Multiplying by 1 leaves any number unchanged\n  - 1 × 5 = 5 = 5 × 1\n  - 1 × 8 = 8 = 8 × 1\n  - Works for any number!\n\n### String Concatenation\n\nFor strings, we have:\n\n- Identity element: \"\" (empty string)\n- Property: Concatenating with empty string leaves any string unchanged\n  - \"\" + \"hello\" = \"hello\" = \"hello\" + \"\"\n  - \"\" + \"world\" = \"world\" = \"world\" + \"\"\n  - Works for any string!\n\n### Physical Examples: No Natural Identity\n\nIn our physical examples, we find that identity elements don't naturally exist:\n\nLEGO blocks:\n\n- There's no physical LEGO block that, when connected to any other block, leaves that block unchanged\n- Any real LEGO block will physically alter the block it's connected to\n\nUSB devices:\n\n- There's no physical USB device that, when connected to others, leaves their configuration unchanged\n- Any real hub or device will affect the physical configuration\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nAn important property of identity elements: if they exist at all, they must be both left and right identities, and they must be unique.\n\nLet's prove this by contradiction:\n\n1. First, assume we have two different identity elements: a left identity eL and a right identity eR\n   (i.e., assume eL and eR are different elements)\n\n2. By definition of left identity:\n   - eL • x = x for any x\n   - Therefore, eL • eR = eR (because eR is also an element)\n\n3. By definition of right identity:\n   - x • eR = x for any x\n   - Therefore, eL • eR = eL (because eL is also an element)\n\n4. Now we have a contradiction:\n   - eL • eR = eR (from step 2)\n   - eL • eR = eL (from step 3)\n   - Therefore eL = eR\n\n5. This contradicts our initial assumption that eL and eR were different.\n\nTherefore, our assumption must have been wrong - a left identity and a right identity cannot be different elements. If an identity element exists, it must be:\n\n1. Both a left and right identity\n2. The only identity element (unique)\n\nIn other words, you can't have \"just a left identity\" or \"just a right identity\" - if an identity element exists at all, it must work from both sides, and it must be unique.\n\nLet's confirm this with our familiar examples:\n\nFor addition:\n\n- 0 is the identity element\n- It works from both sides: 3 + 0 = 3 and 0 + 3 = 3\n- And there can't be any other number that works as an identity\n  (if there were another number n, then n + 0 would have to equal both n and 0)\n\nFor multiplication:\n\n- 1 is the identity element\n- It works from both sides: 5 × 1 = 5 and 1 × 5 = 5\n- And there can't be any other number that works as an identity\n  (if there were another number n, then n × 1 would have to equal both n and 1)\n\nThis shows why, for any given operation, its identity element (if it exists) must be both left and right identity, and must be unique.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">","src/content/docs/en/book/unit-2/section-2/2-identity-element.md","ebec1b5574d1913c",{"html":843,"metadata":844},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"what-is-an-identity-element\">What is an Identity Element?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#what-is-an-identity-element\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “What is an Identity Element?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>An  \u003Cstrong>identity element\u003C/strong>  (often called a “unit element”) is a special value that, when combined with any other value using a binary operator, leaves that other value unchanged.\u003C/p>\n\u003Cp>A value e is called an identity element if combining it with any other element x leaves x unchanged:\u003C/p>\n\u003Cul>\n\u003Cli>Left identity: e • x = x\u003C/li>\n\u003Cli>Right identity: x • e = x\u003C/li>\n\u003Cli>This must work for all values x in the set\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"identity-elements-in-familiar-operations\">Identity Elements in Familiar Operations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#identity-elements-in-familiar-operations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Identity Elements in Familiar Operations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"addition-and-multiplication\">Addition and Multiplication\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#addition-and-multiplication\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Addition and Multiplication”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For numbers, we have natural identity elements:\u003C/p>\n\u003Cp>For addition:\u003C/p>\n\u003Cul>\n\u003Cli>Identity element: 0\u003C/li>\n\u003Cli>Property: Adding 0 leaves any number unchanged\n\u003Cul>\n\u003Cli>0 + 3 = 3 = 3 + 0\u003C/li>\n\u003Cli>0 + 7 = 7 = 7 + 0\u003C/li>\n\u003Cli>Works for any number!\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>For multiplication:\u003C/p>\n\u003Cul>\n\u003Cli>Identity element: 1\u003C/li>\n\u003Cli>Property: Multiplying by 1 leaves any number unchanged\n\u003Cul>\n\u003Cli>1 × 5 = 5 = 5 × 1\u003C/li>\n\u003Cli>1 × 8 = 8 = 8 × 1\u003C/li>\n\u003Cli>Works for any number!\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"string-concatenation\">String Concatenation\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#string-concatenation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “String Concatenation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For strings, we have:\u003C/p>\n\u003Cul>\n\u003Cli>Identity element: \"\" (empty string)\u003C/li>\n\u003Cli>Property: Concatenating with empty string leaves any string unchanged\n\u003Cul>\n\u003Cli>\"\" + “hello” = “hello” = “hello” + \"\"\u003C/li>\n\u003Cli>\"\" + “world” = “world” = “world” + \"\"\u003C/li>\n\u003Cli>Works for any string!\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"physical-examples-no-natural-identity\">Physical Examples: No Natural Identity\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#physical-examples-no-natural-identity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Physical Examples: No Natural Identity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In our physical examples, we find that identity elements don’t naturally exist:\u003C/p>\n\u003Cp>LEGO blocks:\u003C/p>\n\u003Cul>\n\u003Cli>There’s no physical LEGO block that, when connected to any other block, leaves that block unchanged\u003C/li>\n\u003Cli>Any real LEGO block will physically alter the block it’s connected to\u003C/li>\n\u003C/ul>\n\u003Cp>USB devices:\u003C/p>\n\u003Cul>\n\u003Cli>There’s no physical USB device that, when connected to others, leaves their configuration unchanged\u003C/li>\n\u003Cli>Any real hub or device will affect the physical configuration\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>An important property of identity elements: if they exist at all, they must be both left and right identities, and they must be unique.\u003C/p>\n\u003Cp>Let’s prove this by contradiction:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>First, assume we have two different identity elements: a left identity eL and a right identity eR\n(i.e., assume eL and eR are different elements)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>By definition of left identity:\u003C/p>\n\u003Cul>\n\u003Cli>eL • x = x for any x\u003C/li>\n\u003Cli>Therefore, eL • eR = eR (because eR is also an element)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>By definition of right identity:\u003C/p>\n\u003Cul>\n\u003Cli>x • eR = x for any x\u003C/li>\n\u003Cli>Therefore, eL • eR = eL (because eL is also an element)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Now we have a contradiction:\u003C/p>\n\u003Cul>\n\u003Cli>eL • eR = eR (from step 2)\u003C/li>\n\u003Cli>eL • eR = eL (from step 3)\u003C/li>\n\u003Cli>Therefore eL = eR\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>This contradicts our initial assumption that eL and eR were different.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Therefore, our assumption must have been wrong - a left identity and a right identity cannot be different elements. If an identity element exists, it must be:\u003C/p>\n\u003Col>\n\u003Cli>Both a left and right identity\u003C/li>\n\u003Cli>The only identity element (unique)\u003C/li>\n\u003C/ol>\n\u003Cp>In other words, you can’t have “just a left identity” or “just a right identity” - if an identity element exists at all, it must work from both sides, and it must be unique.\u003C/p>\n\u003Cp>Let’s confirm this with our familiar examples:\u003C/p>\n\u003Cp>For addition:\u003C/p>\n\u003Cul>\n\u003Cli>0 is the identity element\u003C/li>\n\u003Cli>It works from both sides: 3 + 0 = 3 and 0 + 3 = 3\u003C/li>\n\u003Cli>And there can’t be any other number that works as an identity\n(if there were another number n, then n + 0 would have to equal both n and 0)\u003C/li>\n\u003C/ul>\n\u003Cp>For multiplication:\u003C/p>\n\u003Cul>\n\u003Cli>1 is the identity element\u003C/li>\n\u003Cli>It works from both sides: 5 × 1 = 5 and 1 × 5 = 5\u003C/li>\n\u003Cli>And there can’t be any other number that works as an identity\n(if there were another number n, then n × 1 would have to equal both n and 1)\u003C/li>\n\u003C/ul>\n\u003Cp>This shows why, for any given operation, its identity element (if it exists) must be both left and right identity, and must be unique.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">",{"headings":845,"localImagePaths":861,"remoteImagePaths":862,"frontmatter":863,"imagePaths":864},[846,849,852,855,858],{"depth":182,"slug":847,"text":848},"what-is-an-identity-element","What is an Identity Element?",{"depth":182,"slug":850,"text":851},"identity-elements-in-familiar-operations","Identity Elements in Familiar Operations",{"depth":523,"slug":853,"text":854},"addition-and-multiplication","Addition and Multiplication",{"depth":523,"slug":856,"text":857},"string-concatenation","String Concatenation",{"depth":523,"slug":859,"text":860},"physical-examples-no-natural-identity","Physical Examples: No Natural Identity",[],[],{"title":834,"description":835},[],"en/book/unit-2/section-2/3-monoid",{"id":865,"data":867,"body":873,"filePath":874,"digest":875,"rendered":876},{"title":868,"description":869,"editUrl":16,"head":870,"template":18,"sidebar":871,"pagefind":16,"draft":20},"Monoids: Semigroups with Identity","A  monoid  starts with the same requirements as a semigroup:",[],{"hidden":20,"attrs":872},{},"A  **monoid**  starts with the same requirements as a semigroup:\n\n- A is a set (in programming terms, a Type)\n- • is a binary operator that combines two values of the same type and returns a result of that same type (in programming terms, a Function of type `a -> a -> a` where both inputs and the output must be the same type a)\n- The operator must satisfy the associative law\n\nAnd adds one more requirement:\n\n- There exists an identity element e in A such that:\n  - e • x = x (left identity)\n  - x • e = x (right identity)\n  - This must hold for all x in A\n\nIn other words,  **a monoid is a semigroup that has an identity element.**  All the associativity properties we learned about semigroups still apply, but now we have this additional special element that acts as an identity.\n\n## Examples of Monoids\n\nFrom our previous examples:\n\n- (Numbers, +, 0) is a monoid\n- (Numbers, ×, 1) is a monoid\n- (Strings, concatenation, \"\") is a monoid\n- (Boolean, OR, False) is a monoid\n- (Boolean, AND, True) is a monoid\n\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nHowever, in a virtual space, we could create monoids from these semigroups:\n\nFor LEGO blocks:\n\n- We could define a \"virtual empty block\" that acts as an identity\n- This virtual block would leave other blocks unchanged when connected\n- In a video game or CAD system, this is entirely possible!\n\nFor USB devices:\n\n- We could create a \"virtual empty hub\" that acts as an identity\n- This virtual hub would pass through connections unchanged\n- In a device simulator, this would work perfectly\n\nThis reveals a fundamental mathematical fact: for any semigroup (S, •), there exists a potentially corresponding unique identity element e, and by adjoining this identity element to the original semigroup, we can always construct a monoid.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Why Monoids Matter\n\nThe addition of an identity element to a semigroup gives us even more power in our computations:\n\n1. We still have everything a semigroup offers (associativity)\n2. Plus we have a \"starting point\" or \"default value\" (the identity element)\n\nThis combination makes monoids particularly useful in programming, especially when working with collections or sequences of operations where we need both associativity and a sensible starting value.","src/content/docs/en/book/unit-2/section-2/3-monoid.md","ef6635afa097edb2",{"html":877,"metadata":878},"\u003Cp>A  \u003Cstrong>monoid\u003C/strong>  starts with the same requirements as a semigroup:\u003C/p>\n\u003Cul>\n\u003Cli>A is a set (in programming terms, a Type)\u003C/li>\n\u003Cli>• is a binary operator that combines two values of the same type and returns a result of that same type (in programming terms, a Function of type \u003Ccode dir=\"auto\">a -> a -> a\u003C/code> where both inputs and the output must be the same type a)\u003C/li>\n\u003Cli>The operator must satisfy the associative law\u003C/li>\n\u003C/ul>\n\u003Cp>And adds one more requirement:\u003C/p>\n\u003Cul>\n\u003Cli>There exists an identity element e in A such that:\n\u003Cul>\n\u003Cli>e • x = x (left identity)\u003C/li>\n\u003Cli>x • e = x (right identity)\u003C/li>\n\u003Cli>This must hold for all x in A\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>In other words,  \u003Cstrong>a monoid is a semigroup that has an identity element.\u003C/strong>  All the associativity properties we learned about semigroups still apply, but now we have this additional special element that acts as an identity.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"examples-of-monoids\">Examples of Monoids\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#examples-of-monoids\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Examples of Monoids”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>From our previous examples:\u003C/p>\n\u003Cul>\n\u003Cli>(Numbers, +, 0) is a monoid\u003C/li>\n\u003Cli>(Numbers, ×, 1) is a monoid\u003C/li>\n\u003Cli>(Strings, concatenation, \"\") is a monoid\u003C/li>\n\u003Cli>(Boolean, OR, False) is a monoid\u003C/li>\n\u003Cli>(Boolean, AND, True) is a monoid\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>However, in a virtual space, we could create monoids from these semigroups:\u003C/p>\n\u003Cp>For LEGO blocks:\u003C/p>\n\u003Cul>\n\u003Cli>We could define a “virtual empty block” that acts as an identity\u003C/li>\n\u003Cli>This virtual block would leave other blocks unchanged when connected\u003C/li>\n\u003Cli>In a video game or CAD system, this is entirely possible!\u003C/li>\n\u003C/ul>\n\u003Cp>For USB devices:\u003C/p>\n\u003Cul>\n\u003Cli>We could create a “virtual empty hub” that acts as an identity\u003C/li>\n\u003Cli>This virtual hub would pass through connections unchanged\u003C/li>\n\u003Cli>In a device simulator, this would work perfectly\u003C/li>\n\u003C/ul>\n\u003Cp>This reveals a fundamental mathematical fact: for any semigroup (S, •), there exists a potentially corresponding unique identity element e, and by adjoining this identity element to the original semigroup, we can always construct a monoid.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"why-monoids-matter\">Why Monoids Matter\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#why-monoids-matter\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Why Monoids Matter”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The addition of an identity element to a semigroup gives us even more power in our computations:\u003C/p>\n\u003Col>\n\u003Cli>We still have everything a semigroup offers (associativity)\u003C/li>\n\u003Cli>Plus we have a “starting point” or “default value” (the identity element)\u003C/li>\n\u003C/ol>\n\u003Cp>This combination makes monoids particularly useful in programming, especially when working with collections or sequences of operations where we need both associativity and a sensible starting value.\u003C/p>",{"headings":879,"localImagePaths":886,"remoteImagePaths":887,"frontmatter":888,"imagePaths":889},[880,883],{"depth":182,"slug":881,"text":882},"examples-of-monoids","Examples of Monoids",{"depth":182,"slug":884,"text":885},"why-monoids-matter","Why Monoids Matter",[],[],{"title":868,"description":869},[],"en/book/unit-2/section-3/0-composition",{"id":890,"data":892,"body":898,"filePath":899,"digest":900,"rendered":901},{"title":893,"description":894,"editUrl":16,"head":895,"template":18,"sidebar":896,"pagefind":16,"draft":20},"Function Composition: A Natural Monoid","In the previous chapter, we learned about Monoid as an algebraic structure with an associative binary operator and an identity element. Now, let's explore an interesting fact: the function pipeline itself that we use most fundamentally is also a Monoid.",[],{"hidden":20,"attrs":897},{},"In the previous chapter, we learned about **Monoid** as an algebraic structure with an associative binary operator and an identity element. Now, let's explore an interesting fact: the **function pipeline** itself that we use most fundamentally is also a Monoid.\n\n## Function Composition as Concatenation\n\nJust like addition of numbers or concatenation of strings, functions can be combined using a binary operation. In fact, a pipeline is essentially a \"concatenation\" of functions.\n\nLet's recall string concatenation:\n\n```fsharp\n\"Hello\" + \" \" + \"World\"  // \"Hello World\"\n```\n\nSimilarly, we can concatenate functions using the function composition operator `>>`:\n\n```fsharp\ndouble >> add1 >> double  // Composed Function\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png)\n\n## Associativity of Function Composition\n\nF#'s `>>` is the **function composition operator**. This operation of composing functions exhibits associativity.\n\nFor example, let's consider composing two `double` functions with an input of `1`:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745411970807.png)\n\n```fsharp\n  1 |> double |> double\n= (1 |> double) |> double\n= 1 |> (double >> double)\n= 4\n```\n\nThis means:\n\n- First applying `double` to the input and then applying `double` again to the result\n- Applying the composition of two `double` functions to the input at once\n\nWe can enhance this:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745413454234.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745413514862.png)\n\nThese yield exactly the same result, demonstrating that function composition is **associative**.\n\n## Function Pipeline is Associative\n\nThe complicated diagram of operators above is  **an accurate representation of what the F# code does** , but there is absolutely no need to be overwhelmed.If you feel confused, just understand that it simply means that - arithmetic addition- arithmetic multiplication- string concatenation- Lego blocks- USBs-  **function pipelines**  are all  **associative**  – that's all there is to it.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746181236237.png)\n\nWhen visualized, **each of these is the same thing, differing only in how they are grouped.**\n\nLet's understand that this property, where **the result is the same regardless of the grouping order, is called Associativity** , and function pipelines are an example of this.\n\n## The Identity Function: Unit Element of Composition\n\nThe unit element for function composition is the **Identity function**, which simply returns its input unchanged:\n\n![Diagram showing id function mapping a to a](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888983112.png)\n\n![Screenshot of F# id function type signature](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744889000150.png)\n\nFor any function `f`:\n\n```fsharp\nf >> id = f  // right identity\nid >> f = f  // left identity\n```\n\n## Function Composition Forms a Monoid\n\nFrom the above, we can see that function composition:\n\n1. Is associative $(f \\gg g) \\gg h = f \\gg (g \\gg h)$\n2. Has an identity element (Identity function)\n\nTherefore, **(Set of functions, function composition, Identity function)** forms a **Monoid**!\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745414533607.png)\n\nThis is a profound realization. The composition of functions that we use in our code shares the exact same algebraic structure as number addition or string concatenation. This structural consistency is one of the sources of the elegance and power of functional programming.\n\n$$\n(1+2)+3 = 1+(2+3) \n$$\n\n$$\n0 + 1 = 1 = 1 + 0\n$$\n\n$$\n(f \\gg g) \\gg h = f \\gg (g \\gg h)\n$$\n\n$$\nid \\gg f = f = f \\gg id\n$$","src/content/docs/en/book/unit-2/section-3/0-composition.md","8570f55840c31fb4",{"html":902,"metadata":903},"\u003Cp>In the previous chapter, we learned about \u003Cstrong>Monoid\u003C/strong> as an algebraic structure with an associative binary operator and an identity element. Now, let’s explore an interesting fact: the \u003Cstrong>function pipeline\u003C/strong> itself that we use most fundamentally is also a Monoid.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"function-composition-as-concatenation\">Function Composition as Concatenation\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#function-composition-as-concatenation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Function Composition as Concatenation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Just like addition of numbers or concatenation of strings, functions can be combined using a binary operation. In fact, a pipeline is essentially a “concatenation” of functions.\u003C/p>\n\u003Cp>Let’s recall string concatenation:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">World\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// \"Hello World\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"&#x22;Hello&#x22; + &#x22; &#x22; + &#x22;World&#x22;  // &#x22;Hello World&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Similarly, we can concatenate functions using the function composition operator \u003Ccode dir=\"auto\">>>\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">double \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> add1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Composed Function\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"double >> add1 >> double  // Composed Function\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744496329575.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"associativity-of-function-composition\">Associativity of Function Composition\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#associativity-of-function-composition\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Associativity of Function Composition”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>F#‘s \u003Ccode dir=\"auto\">>>\u003C/code> is the \u003Cstrong>function composition operator\u003C/strong>. This operation of composing functions exhibits associativity.\u003C/p>\n\u003Cp>For example, let’s consider composing two \u003Ccode dir=\"auto\">double\u003C/code> functions with an input of \u003Ccode dir=\"auto\">1\u003C/code>:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745411970807.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">double \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> double\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"  1 |> double |> double= (1 |> double) |> double= 1 |> (double >> double)= 4\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This means:\u003C/p>\n\u003Cul>\n\u003Cli>First applying \u003Ccode dir=\"auto\">double\u003C/code> to the input and then applying \u003Ccode dir=\"auto\">double\u003C/code> again to the result\u003C/li>\n\u003Cli>Applying the composition of two \u003Ccode dir=\"auto\">double\u003C/code> functions to the input at once\u003C/li>\n\u003C/ul>\n\u003Cp>We can enhance this:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745413454234.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745413514862.png\" alt=\"image\">\u003C/p>\n\u003Cp>These yield exactly the same result, demonstrating that function composition is \u003Cstrong>associative\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"function-pipeline-is-associative\">Function Pipeline is Associative\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#function-pipeline-is-associative\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Function Pipeline is Associative”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The complicated diagram of operators above is  \u003Cstrong>an accurate representation of what the F# code does\u003C/strong> , but there is absolutely no need to be overwhelmed.If you feel confused, just understand that it simply means that - arithmetic addition- arithmetic multiplication- string concatenation- Lego blocks- USBs-  \u003Cstrong>function pipelines\u003C/strong>  are all  \u003Cstrong>associative\u003C/strong>  – that’s all there is to it.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746181236237.png\" alt=\"image\">\u003C/p>\n\u003Cp>When visualized, \u003Cstrong>each of these is the same thing, differing only in how they are grouped.\u003C/strong>\u003C/p>\n\u003Cp>Let’s understand that this property, where \u003Cstrong>the result is the same regardless of the grouping order, is called Associativity\u003C/strong> , and function pipelines are an example of this.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-identity-function-unit-element-of-composition\">The Identity Function: Unit Element of Composition\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-identity-function-unit-element-of-composition\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Identity Function: Unit Element of Composition”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The unit element for function composition is the \u003Cstrong>Identity function\u003C/strong>, which simply returns its input unchanged:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744888983112.png\" alt=\"Diagram showing id function mapping a to a\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744889000150.png\" alt=\"Screenshot of F# id function type signature\">\u003C/p>\n\u003Cp>For any function \u003Ccode dir=\"auto\">f\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> id \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// right identity\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">id \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// left identity\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"f >> id = f  // right identityid >> f = f  // left identity\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"function-composition-forms-a-monoid\">Function Composition Forms a Monoid\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#function-composition-forms-a-monoid\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Function Composition Forms a Monoid”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>From the above, we can see that function composition:\u003C/p>\n\u003Col>\n\u003Cli>Is associative $(f \\gg g) \\gg h = f \\gg (g \\gg h)$\u003C/li>\n\u003Cli>Has an identity element (Identity function)\u003C/li>\n\u003C/ol>\n\u003Cp>Therefore, \u003Cstrong>(Set of functions, function composition, Identity function)\u003C/strong> forms a \u003Cstrong>Monoid\u003C/strong>!\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745414533607.png\" alt=\"image\">\u003C/p>\n\u003Cp>This is a profound realization. The composition of functions that we use in our code shares the exact same algebraic structure as number addition or string concatenation. This structural consistency is one of the sources of the elegance and power of functional programming.\u003C/p>\n\u003Cp>$$\n(1+2)+3 = 1+(2+3)\n$$\u003C/p>\n\u003Cp>$$\n0 + 1 = 1 = 1 + 0\n$$\u003C/p>\n\u003Cp>$$\n(f \\gg g) \\gg h = f \\gg (g \\gg h)\n$$\u003C/p>\n\u003Cp>$$\nid \\gg f = f = f \\gg id\n$$\u003C/p>",{"headings":904,"localImagePaths":920,"remoteImagePaths":921,"frontmatter":922,"imagePaths":923},[905,908,911,914,917],{"depth":182,"slug":906,"text":907},"function-composition-as-concatenation","Function Composition as Concatenation",{"depth":182,"slug":909,"text":910},"associativity-of-function-composition","Associativity of Function Composition",{"depth":182,"slug":912,"text":913},"function-pipeline-is-associative","Function Pipeline is Associative",{"depth":182,"slug":915,"text":916},"the-identity-function-unit-element-of-composition","The Identity Function: Unit Element of Composition",{"depth":182,"slug":918,"text":919},"function-composition-forms-a-monoid","Function Composition Forms a Monoid",[],[],{"title":893,"description":894},[],"en/book/unit-2/section-6/0-functor-monad",{"id":924,"data":926,"body":932,"filePath":933,"digest":934,"rendered":935},{"title":927,"description":928,"editUrl":16,"head":929,"template":18,"sidebar":930,"pagefind":16,"draft":20},"Bringing It All Together: Functor & Monad","Our ultimate goal has been to obtain a mapper function that can work between container types:",[],{"hidden":20,"attrs":931},{},"Our ultimate goal has been to obtain a mapper function that can work between container types:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png)\n\nWe first learned one way to achieve this - using Functor's map to lift a regular function into the world of containers:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png)\n\nAnd now we've discovered another path - using Monad's bind to transform a Kleisli arrow into a container mapper:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745716642404.png)\n\n## Two Bridges, One Structure\n\nNow we can see two distinct approaches for obtaining a container mapper function:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745719213193.png)\n\nThis unified view reveals an elegant symmetry in how we can obtain our desired mapper function `g`:\n\n- The **Functor** approach (upper path) obtains `g` by using `map` to transform a regular function `f` into a container mapper function `g` / `map f`\n- The **Monad** approach (lower path) obtains `g` by using `bind` to transform a Kleisli arrow `f` into a container mapper function `g` / `bind f`\n\nBoth paths provide us with what we ultimately want - a function `g` that can map between containers. The difference lies in our starting point: we can begin with either a regular function or a Kleisli arrow, and both paths will lead us to the container mapper function we seek.","src/content/docs/en/book/unit-2/section-6/0-functor-monad.md","7280f77336e3f4eb",{"html":936,"metadata":937},"\u003Cp>Our ultimate goal has been to obtain a mapper function that can work between container types:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png\" alt=\"image\">\u003C/p>\n\u003Cp>We first learned one way to achieve this - using Functor’s map to lift a regular function into the world of containers:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png\" alt=\"image\">\u003C/p>\n\u003Cp>And now we’ve discovered another path - using Monad’s bind to transform a Kleisli arrow into a container mapper:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745716642404.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"two-bridges-one-structure\">Two Bridges, One Structure\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#two-bridges-one-structure\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Two Bridges, One Structure”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now we can see two distinct approaches for obtaining a container mapper function:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745719213193.png\" alt=\"image\">\u003C/p>\n\u003Cp>This unified view reveals an elegant symmetry in how we can obtain our desired mapper function \u003Ccode dir=\"auto\">g\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>The \u003Cstrong>Functor\u003C/strong> approach (upper path) obtains \u003Ccode dir=\"auto\">g\u003C/code> by using \u003Ccode dir=\"auto\">map\u003C/code> to transform a regular function \u003Ccode dir=\"auto\">f\u003C/code> into a container mapper function \u003Ccode dir=\"auto\">g\u003C/code> / \u003Ccode dir=\"auto\">map f\u003C/code>\u003C/li>\n\u003Cli>The \u003Cstrong>Monad\u003C/strong> approach (lower path) obtains \u003Ccode dir=\"auto\">g\u003C/code> by using \u003Ccode dir=\"auto\">bind\u003C/code> to transform a Kleisli arrow \u003Ccode dir=\"auto\">f\u003C/code> into a container mapper function \u003Ccode dir=\"auto\">g\u003C/code> / \u003Ccode dir=\"auto\">bind f\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>Both paths provide us with what we ultimately want - a function \u003Ccode dir=\"auto\">g\u003C/code> that can map between containers. The difference lies in our starting point: we can begin with either a regular function or a Kleisli arrow, and both paths will lead us to the container mapper function we seek.\u003C/p>",{"headings":938,"localImagePaths":942,"remoteImagePaths":943,"frontmatter":944,"imagePaths":945},[939],{"depth":182,"slug":940,"text":941},"two-bridges-one-structure","Two Bridges, One Structure",[],[],{"title":927,"description":928},[],"en/book/unit-2/section-6/1-category-functor-monad",{"id":946,"data":948,"body":954,"filePath":955,"digest":956,"rendered":957},{"title":949,"description":950,"editUrl":16,"head":951,"template":18,"sidebar":952,"pagefind":16,"draft":20},"Beyond Simple Mapping: Preserving the Structure of Composition","In our initial exploration of Functors (in Unit 2, Section 4), we used a helpful analogy to build intuition. We revisited the basic concept of mapping between sets:",[],{"hidden":20,"attrs":953},{},"In our initial exploration of Functors (in Unit 2, Section 4), we used a helpful analogy to build intuition. We revisited the basic concept of mapping between sets:\n\n![Mapping between Set X and Set Y](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png)\n\nAnd extended this idea to mapping between *sets of functions*:\n\n**In this context, a Functor is essentially this same kind of mapping, but where both Set X and Set Y are sets of functions.**\n\nFor clarity, let's call these sets of functions Set F and Set G:\n\n![Mapping between Set F and Set G](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png)\n\nThis analogy, comparing a Functor to a Higher-Order Function that transforms functions, serves as a useful starting point. However, as noted previously, this view is incomplete:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n**Here**, we introduced the concept of a Functor using an analogy based on familiar ideas of mapping as shown in the diagram. We extended the idea of mapping values between sets to mapping functions between sets of functions to build an initial intuition.\n\nIt's important to understand that this initial explanation was designed primarily to help grasp the **core intuitive idea** behind Functors – the concept of transforming content while preserving structure.\n\nHowever, as our more detailed discussions will reveal later, this analogy alone is insufficient for a **rigorous definition** of a Functor. To define Functors precisely, we need to introduce the **Functor Laws** (Identity and Composition), which are specific rules that these operations must satisfy.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\nSo, what exactly is missing from this initial analogy? Why is simply being a mapping between functions not enough? To understand the \"More Than That\" required for Functors and Monads, we need to look at the crucial concept of **structure preservation**, particularly concerning function composition. The key lies in understanding the robust structure already inherent in function composition itself.\n\n## The Foundation: Function Composition is a Natural Monoid\n\nLet's recall our discussion from Unit 2, Section 3 (\"Function Composition: A Natural Monoid\"). We established a fundamental and truly remarkable property: **function composition forms a Monoid**.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745414533607.png)\n\nFor functions that map a type back to itself (like `int -> int` or `'a -> 'a`), the act of composing them using the `>>` operator exhibits:\n\n1.  **Associativity:** `(f >> g) >> h` is equivalent to `f >> (g >> h)`. The grouping doesn't matter.\n2.  **Identity Element:** The `id` function (`fun x -> x`) acts as an identity: `id >> f = f` and `f >> id = f`.\n\nThis inherent Monoid structure means function composition is naturally robust and predictable. Combining functions sequentially \"just works\" in a mathematically sound way, much like adding numbers or concatenating strings. This reliable structure is the bedrock upon which functional programming builds its pipelines.\n\n## The Structure Preservation Problem\n\nNow, let's consider the world of containers and the functions that operate on them, like `map` (for Functors) and `bind` (for Monads). We need to examine composition in three distinct contexts:\n\n1.  **(Inner World) Composition of Regular Functions:** As we just reaffirmed, functions operating on regular values inside containers (like `f: A -> B` and `g: B -> C`) can be composed (`f >> g: A -> C`), and this composition forms a Monoid (when types align appropriately, e.g., `A -> A`). This is our baseline, well-behaved structure.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107039123.png)\n\n2.  **(Outer World) Composition of Mapping Functions:** The functions that `map` and `bind` *produce* – the ones that operate on containers (like `map f: List\u003CA> -> List\u003CB>` and `map g: List\u003CB> -> List\u003CC>`) – can *also* be composed. We can certainly define `(map f) >> (map g): List\u003CA> -> List\u003CC>`. Function composition works here too, forming its own Monoid structure in the \"outer\" world of container transformations.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107081688.png)\n\n3.  **The Core Question: Does Lifting Preserve Structure?** Here lies the crucial issue. We have a Monoid structure for composing regular functions (like `f >> g` in world 1). We also have a Monoid structure for composing the container mapping functions (like `map f >> map g` in world 2). The operations `map` and `bind` act as bridges, \"lifting\" functions from world 1 to world 2. The critical question is: **Does this lifting operation preserve the Monoid structure?**\n\n    Specifically:\n    * Does mapping the identity function (`id`) result in an identity mapping function for containers? (`map id = id_container?`)\n    * Does mapping a composed function (`f >> g`) yield the same result as composing the mapped functions (`map f >> map g`)? Is `map (f >> g)` equivalent to `(map f) >> (map g)`?\n\n    This equivalence is **not automatically guaranteed** just because `map` is a higher-order function. It's an *additional property* we might desire.\n\n## The Requirement: Why Structure Preservation Matters\n\nWhy should we care if `map` or `bind` preserves the structure of composition and identity? Because requiring this preservation leads to **more predictable, reliable, and composable abstractions**.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746225922395.png)\n\nIf `map (f >> g)` is guaranteed to be the same as `map f >> map g`, it means we can reason about composing functions either *before* lifting them into the container world or *after*, and the result will be the same. This allows us to refactor code, optimize pipelines, and build complex transformations with confidence, knowing that the behavior remains consistent across these different levels of abstraction. Without this guarantee, the connection between the simple functions (`f`, `g`) and their containerized counterparts (`map f`, `map g`) becomes less predictable, making the abstractions less robust. We want our lifted functions to respect the fundamental algebraic structure of the functions they originate from.\n\n## The Origin: Category Theory and Monoids\n\nThis idea of structure preservation is not arbitrary; it's a cornerstone of **Category Theory**, the branch of mathematics from which Functors and Monads originate. Category Theory studies abstract structures consisting of objects and structure-preserving maps between them (called morphisms or arrows).\n\nA fundamental requirement in Category Theory is that mappings between categories (which are called Functors) must preserve the essential structure of the source category, namely:\n\n* They must map identity morphisms to identity morphisms.\n* They must map the composition of morphisms to the composition of the mapped morphisms.\n\nThis focus on preserving composition and identity is deeply related to Monoids. As Saunders MacLane, one of the founders of Category Theory, noted in his seminal text \"Categories for the Working Mathematician\":\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107983842.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107790672.png)\n\n*(Source: Saunders MacLane, Categories for the Working Mathematician, 2nd ed., p. 7)*\n\nThis highlights that the very foundation of Category Theory is built upon the Monoid concept (associative operation + identity). Therefore, it's natural that key constructs derived from it, like Functors and Monads, are defined in a way that respects and preserves this fundamental monoidal structure inherent in composition.\n\n## Formalizing Preservation: The Laws\n\nSo, how do we mathematically *enforce* this requirement that `map` (for Functors) and `bind` (for Monads) preserve the structure of composition and identity? We do it through specific rules known as the **Functor Laws** and **Monad Laws**.\n\nThese laws, which we will detail in the following sections are not arbitrary constraints. They are the precise mathematical formalization of the structure preservation principle we've just discussed. They guarantee that these operations behave predictably and consistently with the underlying Monoid structure of function composition.\n\n## Essence and Intuition: Structure Preservation is Key\n\nUnderstanding Functors and Monads primarily as **structure-preserving transformations** provides a powerful intuition. They are more than just ways to apply functions to values inside containers; they are bridges between computational contexts that respect the fundamental algebraic rules of composition and identity – the rules embodied by the Monoid structure.\n\nThinking \"Does this preserve the Monoid of composition?\" is a more insightful way to approach Functors and Monads than just memorizing the specific laws. This perspective provides the conceptual foundation needed to truly understand *why* the laws exist and what guarantees they provide.\n\nWith this understanding of structure preservation as our stepping stone, we are now ready to examine the specific Functor Laws in detail.","src/content/docs/en/book/unit-2/section-6/1-category-functor-monad.md","fc09ce2d1dacf2dd",{"html":958,"metadata":959},"\u003Cp>In our initial exploration of Functors (in Unit 2, Section 4), we used a helpful analogy to build intuition. We revisited the basic concept of mapping between sets:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png\" alt=\"Mapping between Set X and Set Y\">\u003C/p>\n\u003Cp>And extended this idea to mapping between \u003Cem>sets of functions\u003C/em>:\u003C/p>\n\u003Cp>\u003Cstrong>In this context, a Functor is essentially this same kind of mapping, but where both Set X and Set Y are sets of functions.\u003C/strong>\u003C/p>\n\u003Cp>For clarity, let’s call these sets of functions Set F and Set G:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png\" alt=\"Mapping between Set F and Set G\">\u003C/p>\n\u003Cp>This analogy, comparing a Functor to a Higher-Order Function that transforms functions, serves as a useful starting point. However, as noted previously, this view is incomplete:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cstrong>Here\u003C/strong>, we introduced the concept of a Functor using an analogy based on familiar ideas of mapping as shown in the diagram. We extended the idea of mapping values between sets to mapping functions between sets of functions to build an initial intuition.\u003C/p>\n\u003Cp>It’s important to understand that this initial explanation was designed primarily to help grasp the \u003Cstrong>core intuitive idea\u003C/strong> behind Functors – the concept of transforming content while preserving structure.\u003C/p>\n\u003Cp>However, as our more detailed discussions will reveal later, this analogy alone is insufficient for a \u003Cstrong>rigorous definition\u003C/strong> of a Functor. To define Functors precisely, we need to introduce the \u003Cstrong>Functor Laws\u003C/strong> (Identity and Composition), which are specific rules that these operations must satisfy.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cp>So, what exactly is missing from this initial analogy? Why is simply being a mapping between functions not enough? To understand the “More Than That” required for Functors and Monads, we need to look at the crucial concept of \u003Cstrong>structure preservation\u003C/strong>, particularly concerning function composition. The key lies in understanding the robust structure already inherent in function composition itself.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-foundation-function-composition-is-a-natural-monoid\">The Foundation: Function Composition is a Natural Monoid\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-foundation-function-composition-is-a-natural-monoid\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Foundation: Function Composition is a Natural Monoid”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s recall our discussion from Unit 2, Section 3 (“Function Composition: A Natural Monoid”). We established a fundamental and truly remarkable property: \u003Cstrong>function composition forms a Monoid\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745414533607.png\" alt=\"image\">\u003C/p>\n\u003Cp>For functions that map a type back to itself (like \u003Ccode dir=\"auto\">int -> int\u003C/code> or \u003Ccode dir=\"auto\">'a -> 'a\u003C/code>), the act of composing them using the \u003Ccode dir=\"auto\">>>\u003C/code> operator exhibits:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Associativity:\u003C/strong> \u003Ccode dir=\"auto\">(f >> g) >> h\u003C/code> is equivalent to \u003Ccode dir=\"auto\">f >> (g >> h)\u003C/code>. The grouping doesn’t matter.\u003C/li>\n\u003Cli>\u003Cstrong>Identity Element:\u003C/strong> The \u003Ccode dir=\"auto\">id\u003C/code> function (\u003Ccode dir=\"auto\">fun x -> x\u003C/code>) acts as an identity: \u003Ccode dir=\"auto\">id >> f = f\u003C/code> and \u003Ccode dir=\"auto\">f >> id = f\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>This inherent Monoid structure means function composition is naturally robust and predictable. Combining functions sequentially “just works” in a mathematically sound way, much like adding numbers or concatenating strings. This reliable structure is the bedrock upon which functional programming builds its pipelines.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-structure-preservation-problem\">The Structure Preservation Problem\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-structure-preservation-problem\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Structure Preservation Problem”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now, let’s consider the world of containers and the functions that operate on them, like \u003Ccode dir=\"auto\">map\u003C/code> (for Functors) and \u003Ccode dir=\"auto\">bind\u003C/code> (for Monads). We need to examine composition in three distinct contexts:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>(Inner World) Composition of Regular Functions:\u003C/strong> As we just reaffirmed, functions operating on regular values inside containers (like \u003Ccode dir=\"auto\">f: A -> B\u003C/code> and \u003Ccode dir=\"auto\">g: B -> C\u003C/code>) can be composed (\u003Ccode dir=\"auto\">f >> g: A -> C\u003C/code>), and this composition forms a Monoid (when types align appropriately, e.g., \u003Ccode dir=\"auto\">A -> A\u003C/code>). This is our baseline, well-behaved structure.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107039123.png\" alt=\"image\">\u003C/p>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>(Outer World) Composition of Mapping Functions:\u003C/strong> The functions that \u003Ccode dir=\"auto\">map\u003C/code> and \u003Ccode dir=\"auto\">bind\u003C/code> \u003Cem>produce\u003C/em> – the ones that operate on containers (like \u003Ccode dir=\"auto\">map f: List&#x3C;A> -> List&#x3C;B>\u003C/code> and \u003Ccode dir=\"auto\">map g: List&#x3C;B> -> List&#x3C;C>\u003C/code>) – can \u003Cem>also\u003C/em> be composed. We can certainly define \u003Ccode dir=\"auto\">(map f) >> (map g): List&#x3C;A> -> List&#x3C;C>\u003C/code>. Function composition works here too, forming its own Monoid structure in the “outer” world of container transformations.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107081688.png\" alt=\"image\">\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>\n\u003Cp>\u003Cstrong>The Core Question: Does Lifting Preserve Structure?\u003C/strong> Here lies the crucial issue. We have a Monoid structure for composing regular functions (like \u003Ccode dir=\"auto\">f >> g\u003C/code> in world 1). We also have a Monoid structure for composing the container mapping functions (like \u003Ccode dir=\"auto\">map f >> map g\u003C/code> in world 2). The operations \u003Ccode dir=\"auto\">map\u003C/code> and \u003Ccode dir=\"auto\">bind\u003C/code> act as bridges, “lifting” functions from world 1 to world 2. The critical question is: \u003Cstrong>Does this lifting operation preserve the Monoid structure?\u003C/strong>\u003C/p>\n\u003Cp>Specifically:\u003C/p>\n\u003Cul>\n\u003Cli>Does mapping the identity function (\u003Ccode dir=\"auto\">id\u003C/code>) result in an identity mapping function for containers? (\u003Ccode dir=\"auto\">map id = id_container?\u003C/code>)\u003C/li>\n\u003Cli>Does mapping a composed function (\u003Ccode dir=\"auto\">f >> g\u003C/code>) yield the same result as composing the mapped functions (\u003Ccode dir=\"auto\">map f >> map g\u003C/code>)? Is \u003Ccode dir=\"auto\">map (f >> g)\u003C/code> equivalent to \u003Ccode dir=\"auto\">(map f) >> (map g)\u003C/code>?\u003C/li>\n\u003C/ul>\n\u003Cp>This equivalence is \u003Cstrong>not automatically guaranteed\u003C/strong> just because \u003Ccode dir=\"auto\">map\u003C/code> is a higher-order function. It’s an \u003Cem>additional property\u003C/em> we might desire.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-requirement-why-structure-preservation-matters\">The Requirement: Why Structure Preservation Matters\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-requirement-why-structure-preservation-matters\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Requirement: Why Structure Preservation Matters”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Why should we care if \u003Ccode dir=\"auto\">map\u003C/code> or \u003Ccode dir=\"auto\">bind\u003C/code> preserves the structure of composition and identity? Because requiring this preservation leads to \u003Cstrong>more predictable, reliable, and composable abstractions\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746225922395.png\" alt=\"image\">\u003C/p>\n\u003Cp>If \u003Ccode dir=\"auto\">map (f >> g)\u003C/code> is guaranteed to be the same as \u003Ccode dir=\"auto\">map f >> map g\u003C/code>, it means we can reason about composing functions either \u003Cem>before\u003C/em> lifting them into the container world or \u003Cem>after\u003C/em>, and the result will be the same. This allows us to refactor code, optimize pipelines, and build complex transformations with confidence, knowing that the behavior remains consistent across these different levels of abstraction. Without this guarantee, the connection between the simple functions (\u003Ccode dir=\"auto\">f\u003C/code>, \u003Ccode dir=\"auto\">g\u003C/code>) and their containerized counterparts (\u003Ccode dir=\"auto\">map f\u003C/code>, \u003Ccode dir=\"auto\">map g\u003C/code>) becomes less predictable, making the abstractions less robust. We want our lifted functions to respect the fundamental algebraic structure of the functions they originate from.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-origin-category-theory-and-monoids\">The Origin: Category Theory and Monoids\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-origin-category-theory-and-monoids\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Origin: Category Theory and Monoids”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This idea of structure preservation is not arbitrary; it’s a cornerstone of \u003Cstrong>Category Theory\u003C/strong>, the branch of mathematics from which Functors and Monads originate. Category Theory studies abstract structures consisting of objects and structure-preserving maps between them (called morphisms or arrows).\u003C/p>\n\u003Cp>A fundamental requirement in Category Theory is that mappings between categories (which are called Functors) must preserve the essential structure of the source category, namely:\u003C/p>\n\u003Cul>\n\u003Cli>They must map identity morphisms to identity morphisms.\u003C/li>\n\u003Cli>They must map the composition of morphisms to the composition of the mapped morphisms.\u003C/li>\n\u003C/ul>\n\u003Cp>This focus on preserving composition and identity is deeply related to Monoids. As Saunders MacLane, one of the founders of Category Theory, noted in his seminal text “Categories for the Working Mathematician”:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107983842.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747107790672.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cem>(Source: Saunders MacLane, Categories for the Working Mathematician, 2nd ed., p. 7)\u003C/em>\u003C/p>\n\u003Cp>This highlights that the very foundation of Category Theory is built upon the Monoid concept (associative operation + identity). Therefore, it’s natural that key constructs derived from it, like Functors and Monads, are defined in a way that respects and preserves this fundamental monoidal structure inherent in composition.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"formalizing-preservation-the-laws\">Formalizing Preservation: The Laws\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#formalizing-preservation-the-laws\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Formalizing Preservation: The Laws”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>So, how do we mathematically \u003Cem>enforce\u003C/em> this requirement that \u003Ccode dir=\"auto\">map\u003C/code> (for Functors) and \u003Ccode dir=\"auto\">bind\u003C/code> (for Monads) preserve the structure of composition and identity? We do it through specific rules known as the \u003Cstrong>Functor Laws\u003C/strong> and \u003Cstrong>Monad Laws\u003C/strong>.\u003C/p>\n\u003Cp>These laws, which we will detail in the following sections are not arbitrary constraints. They are the precise mathematical formalization of the structure preservation principle we’ve just discussed. They guarantee that these operations behave predictably and consistently with the underlying Monoid structure of function composition.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"essence-and-intuition-structure-preservation-is-key\">Essence and Intuition: Structure Preservation is Key\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#essence-and-intuition-structure-preservation-is-key\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Essence and Intuition: Structure Preservation is Key”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Understanding Functors and Monads primarily as \u003Cstrong>structure-preserving transformations\u003C/strong> provides a powerful intuition. They are more than just ways to apply functions to values inside containers; they are bridges between computational contexts that respect the fundamental algebraic rules of composition and identity – the rules embodied by the Monoid structure.\u003C/p>\n\u003Cp>Thinking “Does this preserve the Monoid of composition?” is a more insightful way to approach Functors and Monads than just memorizing the specific laws. This perspective provides the conceptual foundation needed to truly understand \u003Cem>why\u003C/em> the laws exist and what guarantees they provide.\u003C/p>\n\u003Cp>With this understanding of structure preservation as our stepping stone, we are now ready to examine the specific Functor Laws in detail.\u003C/p>",{"headings":960,"localImagePaths":979,"remoteImagePaths":980,"frontmatter":981,"imagePaths":982},[961,964,967,970,973,976],{"depth":182,"slug":962,"text":963},"the-foundation-function-composition-is-a-natural-monoid","The Foundation: Function Composition is a Natural Monoid",{"depth":182,"slug":965,"text":966},"the-structure-preservation-problem","The Structure Preservation Problem",{"depth":182,"slug":968,"text":969},"the-requirement-why-structure-preservation-matters","The Requirement: Why Structure Preservation Matters",{"depth":182,"slug":971,"text":972},"the-origin-category-theory-and-monoids","The Origin: Category Theory and Monoids",{"depth":182,"slug":974,"text":975},"formalizing-preservation-the-laws","Formalizing Preservation: The Laws",{"depth":182,"slug":977,"text":978},"essence-and-intuition-structure-preservation-is-key","Essence and Intuition: Structure Preservation is Key",[],[],{"title":949,"description":950},[],"en/book/unit-2/section-1/0-algebraic-structures",{"id":983,"data":985,"body":991,"filePath":992,"digest":993,"rendered":994},{"title":986,"description":987,"editUrl":16,"head":988,"template":18,"sidebar":989,"pagefind":16,"draft":20},"Algebraic Structures and Pipeline Flow","Before diving into the details of algebraic structures, let's start with a simple but powerful idea: types in programming are closely related to sets in mathematics.",[],{"hidden":20,"attrs":990},{},"Before diving into the details of algebraic structures, let's start with a simple but powerful idea: types in programming are closely related to sets in mathematics.\n\nThroughout this book, we've been working with data transformation pipelines, where we combine types and functions to process data. This fundamental approach has a profound connection to mathematical concepts of sets and operators.\n\n![Pipeline Flow](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png)\n\n## From Pipelines to Algebraic Structures\n\nOur journey through functional programming has revealed several key insights:\n\n1. **Pipeline Building Blocks**\n   - Every pipeline works with data of specific types\n   - Functions transform this data in well-defined ways\n   - This naturally leads us to work with (Type, Function) pairs\n\n2. **Functions and Operators**\n   - We discovered that operators (`+`, `*`, etc.) are actually functions\n   - This unification helps us treat all transformations consistently\n   - Both represent ways to combine or transform values\n\n3. **The Mathematical Connection**\n   - In mathematics, (Set, Operator) pairs are known as **algebraic structures**\n   - These algebraic structures are fundamental mathematical concepts:\n     - Sets define what values we can work with\n     - Operators define how we can combine or transform these values\n\nThese parallel structures - (Type, Function) in programming and (Set, Operator) pairs in mathematics - arise naturally from both disciplines. The striking similarities hint at a deeper connection we're about to explore.\n\n## Binary Operators: Functions in Disguise\n\nWe've learned that operators like `+`, `*`, `-` are actually functions in disguise:\n\n```fsharp\n// type: int -> int -> int\nlet add = (+)    // The addition operator is just a function\n   \n// type: int -> int -> int          \nlet mult = (*)   // The multiplication operator is just a function\n```\n\nThese binary operators are special cases of functions that:\n\n1. Take exactly two inputs of the same type: `int`\n2. Return a result of that same type: `int`\n\n## Types and Sets: The Basic Connection\n\nConsider some familiar types in programming:\n\n```fsharp\nlet x: int = 42        // int type\nlet b: bool = true     // bool type\nlet s: string = \"hi\"   // string type\n```\n\nEach of these types can be thought of as a set:\n\n- `int` is the set of all integers\n- `bool` is the set {true, false}\n- `string` is the set of all possible text strings\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThis connection between types and sets forms the foundation for understanding both systems - each type defines a mathematical set of possible values.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## The Fundamental Pattern: From Pipelines to Algebraic Structures\n\nOur work with pipelines has revealed a fundamental pattern: we always work with pairs of:\n\n- A Type (defining what values we can work with)\n- Functions (defining what operations we can perform)\n\nThis pattern, arising naturally from our pipeline operations, turns out to be exactly what mathematicians study as **algebraic structures**! Mathematically, an algebraic structure is a pair (A, R) where:\n\n- A is a set (corresponding to our Type)\n- R is a family of operators (corresponding to our Functions)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThe parallel between programming and mathematics becomes clear:\n\n- (Type, Function) pairs in our pipelines\n- (Set, Operator) pairs in algebraic structures\n\nAnd now we can state the profound truth: these are not just similar concepts - they represent equivalent ways of expressing the same fundamental ideas. Neither implements the other; they are different perspectives on the same underlying mathematical truth. This equivalence explains why functional programming feels so natural and mathematically elegant.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\nAn operator in this context is a special kind of function that follows specific rules, just like how binary operators in programming are functions with specific characteristics. This unification helps explain why our pipeline operations work so naturally with mathematical concepts.\n\n## Looking Ahead: Mathematical Structures in Programming\n\nThe mathematical patterns we've discovered will help us understand:\n\n1. Set theory and how it maps to type systems\n2. Container types as implementations of set-theoretical concepts\n3. More advanced concepts like functors and monads\n\nThe structures we'll explore:\n\n- **Monoids**: Binary operators with associativity and identity\n- **Functors**: Operators that preserve structure while transforming data\n- **Monads**: Operators that handle computational context\n\nThese are all formalized patterns of how Types and Binary Operators can work together reliably in our pipelines.","src/content/docs/en/book/unit-2/section-1/0-algebraic-structures.md","da0c3071f6e04b93",{"html":995,"metadata":996},"\u003Cp>Before diving into the details of algebraic structures, let’s start with a simple but powerful idea: types in programming are closely related to sets in mathematics.\u003C/p>\n\u003Cp>Throughout this book, we’ve been working with data transformation pipelines, where we combine types and functions to process data. This fundamental approach has a profound connection to mathematical concepts of sets and operators.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png\" alt=\"Pipeline Flow\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"from-pipelines-to-algebraic-structures\">From Pipelines to Algebraic Structures\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#from-pipelines-to-algebraic-structures\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “From Pipelines to Algebraic Structures”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our journey through functional programming has revealed several key insights:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Pipeline Building Blocks\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Every pipeline works with data of specific types\u003C/li>\n\u003Cli>Functions transform this data in well-defined ways\u003C/li>\n\u003Cli>This naturally leads us to work with (Type, Function) pairs\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Functions and Operators\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>We discovered that operators (\u003Ccode dir=\"auto\">+\u003C/code>, \u003Ccode dir=\"auto\">*\u003C/code>, etc.) are actually functions\u003C/li>\n\u003Cli>This unification helps us treat all transformations consistently\u003C/li>\n\u003Cli>Both represent ways to combine or transform values\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>The Mathematical Connection\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>In mathematics, (Set, Operator) pairs are known as \u003Cstrong>algebraic structures\u003C/strong>\u003C/li>\n\u003Cli>These algebraic structures are fundamental mathematical concepts:\n\u003Cul>\n\u003Cli>Sets define what values we can work with\u003C/li>\n\u003Cli>Operators define how we can combine or transform these values\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>These parallel structures - (Type, Function) in programming and (Set, Operator) pairs in mathematics - arise naturally from both disciplines. The striking similarities hint at a deeper connection we’re about to explore.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"binary-operators-functions-in-disguise\">Binary Operators: Functions in Disguise\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#binary-operators-functions-in-disguise\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Binary Operators: Functions in Disguise”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We’ve learned that operators like \u003Ccode dir=\"auto\">+\u003C/code>, \u003Ccode dir=\"auto\">*\u003C/code>, \u003Ccode dir=\"auto\">-\u003C/code> are actually functions in disguise:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type: int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The addition operator is just a function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type: int -> int -> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mult\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(*)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The multiplication operator is just a function\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// type: int -> int -> intlet add = (+)    // The addition operator is just a function// type: int -> int -> intlet mult = (*)   // The multiplication operator is just a function\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>These binary operators are special cases of functions that:\u003C/p>\n\u003Col>\n\u003Cli>Take exactly two inputs of the same type: \u003Ccode dir=\"auto\">int\u003C/code>\u003C/li>\n\u003Cli>Return a result of that same type: \u003Ccode dir=\"auto\">int\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"types-and-sets-the-basic-connection\">Types and Sets: The Basic Connection\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#types-and-sets-the-basic-connection\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Types and Sets: The Basic Connection”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Consider some familiar types in programming:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">x\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">42\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// int type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">b\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// bool type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">s\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">hi\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// string type\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let x: int = 42        // int typelet b: bool = true     // bool typelet s: string = &#x22;hi&#x22;   // string type\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Each of these types can be thought of as a set:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">int\u003C/code> is the set of all integers\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">bool\u003C/code> is the set {true, false}\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">string\u003C/code> is the set of all possible text strings\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>This connection between types and sets forms the foundation for understanding both systems - each type defines a mathematical set of possible values.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-fundamental-pattern-from-pipelines-to-algebraic-structures\">The Fundamental Pattern: From Pipelines to Algebraic Structures\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-fundamental-pattern-from-pipelines-to-algebraic-structures\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Fundamental Pattern: From Pipelines to Algebraic Structures”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our work with pipelines has revealed a fundamental pattern: we always work with pairs of:\u003C/p>\n\u003Cul>\n\u003Cli>A Type (defining what values we can work with)\u003C/li>\n\u003Cli>Functions (defining what operations we can perform)\u003C/li>\n\u003C/ul>\n\u003Cp>This pattern, arising naturally from our pipeline operations, turns out to be exactly what mathematicians study as \u003Cstrong>algebraic structures\u003C/strong>! Mathematically, an algebraic structure is a pair (A, R) where:\u003C/p>\n\u003Cul>\n\u003Cli>A is a set (corresponding to our Type)\u003C/li>\n\u003Cli>R is a family of operators (corresponding to our Functions)\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>The parallel between programming and mathematics becomes clear:\u003C/p>\n\u003Cul>\n\u003Cli>(Type, Function) pairs in our pipelines\u003C/li>\n\u003Cli>(Set, Operator) pairs in algebraic structures\u003C/li>\n\u003C/ul>\n\u003Cp>And now we can state the profound truth: these are not just similar concepts - they represent equivalent ways of expressing the same fundamental ideas. Neither implements the other; they are different perspectives on the same underlying mathematical truth. This equivalence explains why functional programming feels so natural and mathematically elegant.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cp>An operator in this context is a special kind of function that follows specific rules, just like how binary operators in programming are functions with specific characteristics. This unification helps explain why our pipeline operations work so naturally with mathematical concepts.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"looking-ahead-mathematical-structures-in-programming\">Looking Ahead: Mathematical Structures in Programming\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#looking-ahead-mathematical-structures-in-programming\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Looking Ahead: Mathematical Structures in Programming”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The mathematical patterns we’ve discovered will help us understand:\u003C/p>\n\u003Col>\n\u003Cli>Set theory and how it maps to type systems\u003C/li>\n\u003Cli>Container types as implementations of set-theoretical concepts\u003C/li>\n\u003Cli>More advanced concepts like functors and monads\u003C/li>\n\u003C/ol>\n\u003Cp>The structures we’ll explore:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Monoids\u003C/strong>: Binary operators with associativity and identity\u003C/li>\n\u003Cli>\u003Cstrong>Functors\u003C/strong>: Operators that preserve structure while transforming data\u003C/li>\n\u003Cli>\u003Cstrong>Monads\u003C/strong>: Operators that handle computational context\u003C/li>\n\u003C/ul>\n\u003Cp>These are all formalized patterns of how Types and Binary Operators can work together reliably in our pipelines.\u003C/p>",{"headings":997,"localImagePaths":1013,"remoteImagePaths":1014,"frontmatter":1015,"imagePaths":1016},[998,1001,1004,1007,1010],{"depth":182,"slug":999,"text":1000},"from-pipelines-to-algebraic-structures","From Pipelines to Algebraic Structures",{"depth":182,"slug":1002,"text":1003},"binary-operators-functions-in-disguise","Binary Operators: Functions in Disguise",{"depth":182,"slug":1005,"text":1006},"types-and-sets-the-basic-connection","Types and Sets: The Basic Connection",{"depth":182,"slug":1008,"text":1009},"the-fundamental-pattern-from-pipelines-to-algebraic-structures","The Fundamental Pattern: From Pipelines to Algebraic Structures",{"depth":182,"slug":1011,"text":1012},"looking-ahead-mathematical-structures-in-programming","Looking Ahead: Mathematical Structures in Programming",[],[],{"title":986,"description":987},[],"en/book/unit-2/section-5/0-another-bridge",{"id":1017,"data":1019,"body":1025,"filePath":1026,"digest":1027,"rendered":1028},{"title":1020,"description":1021,"editUrl":16,"head":1022,"template":18,"sidebar":1023,"pagefind":16,"draft":20},"Another Bridge Between Worlds","In our exploration of Functors, we discovered a fascinating bridge between two worlds - the world of simple functions and the world of container types. Let's briefly recall how this bridge works.",[],{"hidden":20,"attrs":1024},{},"In our exploration of Functors, we discovered a fascinating bridge between two worlds - the world of simple functions and the world of container types. Let's briefly recall how this bridge works.\n\n## The map Function: One Bridge We Know\n\nTo obtain a mapper function g that works with container types from our well-known function f, we used a special function called map:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png)\n\nThis map function serves as a bridge, transforming our simple function into one that can work with container types while preserving its essential behavior:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674924332.png)\n\nThis Functor pattern has proven incredibly useful, allowing us to lift our regular functions into the world of containers. But here's where things get intriguing - this isn't the only way to bridge these worlds.\n\nThere exists another approach, less widely understood but often more powerful. An approach that offers a different perspective on how we can connect these two worlds. This alternative bridge is known as a **Monad**.\n\nIn the next chapters, we'll uncover this mysterious second bridge and see how it provides a completely different way to think about transforming functions. We'll discover why both bridges are necessary and how they complement each other in ways that might surprise you.","src/content/docs/en/book/unit-2/section-5/0-another-bridge.md","a8271b5f1041d728",{"html":1029,"metadata":1030},"\u003Cp>In our exploration of Functors, we discovered a fascinating bridge between two worlds - the world of simple functions and the world of container types. Let’s briefly recall how this bridge works.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-map-function-one-bridge-we-know\">The map Function: One Bridge We Know\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-map-function-one-bridge-we-know\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The map Function: One Bridge We Know”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To obtain a mapper function g that works with container types from our well-known function f, we used a special function called map:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png\" alt=\"image\">\u003C/p>\n\u003Cp>This map function serves as a bridge, transforming our simple function into one that can work with container types while preserving its essential behavior:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674924332.png\" alt=\"image\">\u003C/p>\n\u003Cp>This Functor pattern has proven incredibly useful, allowing us to lift our regular functions into the world of containers. But here’s where things get intriguing - this isn’t the only way to bridge these worlds.\u003C/p>\n\u003Cp>There exists another approach, less widely understood but often more powerful. An approach that offers a different perspective on how we can connect these two worlds. This alternative bridge is known as a \u003Cstrong>Monad\u003C/strong>.\u003C/p>\n\u003Cp>In the next chapters, we’ll uncover this mysterious second bridge and see how it provides a completely different way to think about transforming functions. We’ll discover why both bridges are necessary and how they complement each other in ways that might surprise you.\u003C/p>",{"headings":1031,"localImagePaths":1035,"remoteImagePaths":1036,"frontmatter":1037,"imagePaths":1038},[1032],{"depth":182,"slug":1033,"text":1034},"the-map-function-one-bridge-we-know","The map Function: One Bridge We Know",[],[],{"title":1020,"description":1021},[],"en/book/unit-2/section-6/2-theory-functor",{"id":1039,"data":1041,"body":1047,"filePath":1048,"digest":1049,"rendered":1050},{"title":1042,"description":1043,"editUrl":16,"head":1044,"template":18,"sidebar":1045,"pagefind":16,"draft":20},"Understanding Functors: Preserving the Monoid of Function Composition","In the previous section, we established that the concept of \"structure preservation\" is central to understanding robust abstractions in functional programming. We saw how Category Theory itself is founded on Monoid-like principles of composition and identity. This chapter delves into Functors, illustrating how the Functor Laws are precisely the requirements ensuring that the map operation preserves the natural Monoid structure of function composition.",[],{"hidden":20,"attrs":1046},{},"In the previous section, we established that the concept of \"structure preservation\" is central to understanding robust abstractions in functional programming. We saw how Category Theory itself is founded on Monoid-like principles of composition and identity. This chapter delves into **Functors**, illustrating how the Functor Laws are precisely the requirements ensuring that the `map` operation preserves the natural **Monoid structure of function composition**.\n\nOur core theme here is that a Functor's `map` operation isn't just any higher-order function that iterates over a container; it's a special kind of transformation that must respect the algebraic properties (associativity of composition and the role of identity) inherent in the functions it lifts. We will explore why such preservation is crucial, how it's formally defined by the Functor Laws, the practical challenges of verification, and the theoretical guarantees (like Parametricity) that often allow us to trust common `map` implementations. Our journey will confirm that a Functor's `map` is fundamentally about maintaining the integrity of the function composition Monoid as we move between the world of regular functions and the world of functions operating on containers.\n\n## Re-contextualized for Monoid Preservation\n\nOur goal is to understand what makes a `map` higher-order function behave as a Functor, which fundamentally means it must **preserve the Monoid structure inherent in function composition** (`>>` as the operation, `id` as the identity element).\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205891858.png)\n\n**Step 1: Two Independent Computational Processes - Starting from Definitions**\n\nFirst, let's examine the main processes shown in Figure, using a generic `map` for a container `M`.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747207345043.png)\n\n**Key Point: Independence and Definition**\nCrucially, `map (f >> g)` and `(map f) >> (map g)` are **two independent operations with distinct computational processes**.\n\n**Step 2: The Visual Suggestion vs. Logical Gap - A Premature Conclusion?**\n\nConcluding these are identical operations just from diagrams or type signatures is a logical leap. The core question is whether they are *extensionally equivalent*.\n\n**Step 3: Functor `map` and the Functor Laws - Guaranteeing Monoid Preservation**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206877586.png)\n\nA `map` operation is a **Functor `map`** if it ensures these two distinct processes *always* yield the same result. This is precisely the requirement for `map` to **preserve the structure of the function composition Monoid**. The Functor Laws formalize this:\n\n### **The Functor Laws (Required for `map` to preserve the Function Composition Monoid):**\n\n1.  **Identity Law:** `map id = id_M` (where `id_M` is the identity transformation for container `M`; for example, if `map` is `List.map`, then `List.map id` should behave like `fun list -> list`).\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747203975841.png)\n\n- *Monoid Interpretation:* The `map` must map the **identity element (`id`)** of the function composition Monoid to the **identity operation** in the world of container transformations. It preserves the identity.\n \n- *Conceptual Verification with Code (using `map_List`):*\n\n```fsharp\nlet lhs_identity_list = initialList |> map_List id\nlet rhs_identity_list = initialList // Applying id_M to initialList is initialList itself\nprintfn \"Identity Law (List): LHS=%A, RHS=%A, Satisfied=%b\" lhs_identity_list rhs_identity_list (lhs_identity_list = rhs_identity_list)\n// For Option:\nlet lhs_identity_option_some = initialOptionSome |> map_Option id\nlet rhs_identity_option_some = initialOptionSome\nprintfn \"Identity Law (Option Some): LHS=%A, RHS=%A, Satisfied=%b\" lhs_identity_option_some rhs_identity_option_some (lhs_identity_option_some = rhs_identity_option_some)\nlet lhs_identity_option_none = initialOptionNone |> map_Option id\nlet rhs_identity_option_none = initialOptionNone\nprintfn \"Identity Law (Option None): LHS=%A, RHS=%A, Satisfied=%b\" lhs_identity_option_none rhs_identity_option_none (lhs_identity_option_none = rhs_identity_option_none)\n```\n\n2.  **Composition Law:** `map (f >> g) = (map f) >> (map g)`.\n\n(Note: `(map f) >> (map g)` means\n\n`fun container -> container |> map f |> map g`)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206525700.png)\n\n- *Monoid Interpretation:* The `map` must respect the **composition operation (`>>`)** of the function composition Monoid. Mapping a pre-composed function must yield the same as mapping individually then composing the results.\n- *Conceptual Verification with Code (using `map_List`):*\n\n```fsharp\nlet composed_fg_revised = f_intToString >> g_stringToBool_revised\n\n// LHS for List\nlet lhs_composition_list = initialList |> map_List composed_fg_revised\n\n// RHS for List\nlet rhs_composition_list = initialList |> map_List f_intToString |> map_List g_stringToBool_revised\nprintfn \"Composition Law (List): LHS=%A, RHS=%A, Satisfied=%b\" lhs_composition_list rhs_composition_list (lhs_composition_list = rhs_composition_list)\n\n// LHS for Option Some\nlet lhs_composition_option_some = initialOptionSome |> map_Option composed_fg_revised\n// RHS for Option Some\nlet rhs_composition_option_some = initialOptionSome |> map_Option f_intToString |> map_Option g_stringToBool_revised\nprintfn \"Composition Law (Option Some): LHS=%A, RHS=%A, Satisfied=%b\" lhs_composition_option_some rhs_composition_option_some (lhs_composition_option_some = rhs_composition_option_some)\n```\n\nA `map` is a Functor if it satisfies these laws, thereby acting as a **homomorphism** preserving the function composition Monoid.\n\n**Interpreting Figure 3 (Bottom/Integrated Diagram):** This diagram, showing a single path, is valid *only if* `map` is a Functor because then the two distinct computational paths are extensionally equivalent.\n\n**Step 4: A Serious Practical Concern - The Burden of Verification?**\n\nIf we need to prove these laws for every `map` (e.g., `List.map`, `Option.map`), the utility of the Functor abstraction diminishes.\n\n**Step 5: A Savior Appears - \"Theorems for free\\!\" (Parametricity)**\n\nPhilip Wadler's \"Theorems for free\\!\" principle, derived from **Parametricity**, suggests that for generic `map` (`('a -> 'b) -> M\u003C'a> -> M\u003C'b>`), if implemented without type-specific \"cheating,\" is constrained by its type signature to preserve structure. This \"structure preservation\" is what the Functor Laws (our Monoid preservation laws) articulate. A parametric `map` *must* apply the function while keeping the container structure intact, which inherently forces it to respect composition and identity – thus preserving the Monoid.\n\n**Step 6: The Practical Conclusion - Trusting Generic Implementations to Preserve Monoid Structure**\n\nStandard library functions like `List.map` and `Option.map` are designed parametrically. Therefore, in practice, we can trust them to be Functors and correctly preserve the Monoid structure of function composition.\n\n### Summary\n\nThe diagrams illustrate the core issue: `map (f >> g)` and `(map f) >> (map g)` are, by definition, distinct computational processes. A **Functor `map` operation** is specifically one where these two processes are *defined* to be extensionally equivalent. This equivalence is mandated by the **Functor Laws** (Identity and Composition), which collectively ensure that `map` **preserves the Monoid structure of function composition** (`id` as identity, `>>` as composition). The integrated diagram (Figure 3) is valid only under this assumption of Monoid preservation. The practical concern of verifying these laws is significantly alleviated by **Parametricity (\"Theorems for free\\!\")**, which suggests that parametrically implemented generic `map` functions will naturally satisfy these laws. Thus, typical \"non-hacky\" generic `map` implementations can be reliably treated as structure-preserving Functors.\n\n-----\n\n## Evaluation of the Counter-example Code (`mapThenReverse`)\n\n```fsharp\n// Function that reverses the entire list AFTER applying the normal List.map\nlet mapThenReverse (f: 'a -> 'b) (list: 'a list) : 'b list =\n    list\n    |> List.map f\n    |> List.rev\n\n// --- Verification of Composition Law (using >>) ---\n// This law ensures that 'map' preserves the Monoid's composition operation.\nlet f_example x = x + 1\nlet g_example x = x * 2\n\nlet initialList_example = [1; 2; 3]\n\nlet lhsResult_counter =\n    initialList_example\n    |> mapThenReverse (f_example >> g_example)\n// Expected: initialList_example |> List.map (fun x -> (x+1)*2) |> List.rev = [4; 6; 8] |> List.rev = [8; 6; 4]\n\nlet rhsResult_counter =\n    let map_f_then_map_g = fun l -> l |> mapThenReverse f_example |> mapThenReverse g_example\n    initialList_example |> map_f_then_map_g\n// Expected: initialList_example |> mapThenReverse f_example gives [4;3;2]\n// Then: [4;3;2] |> mapThenReverse g_example gives ([4;3;2] |> List.map (fun x -> x*2) |> List.rev) = ([8;6;4] |> List.rev) = [4;6;8]\n\nprintfn \"Counter Example - Composition Law Check (Map then Reverse, using >>):\"\nprintfn \"LHS: initialList |> mapThenReverse (f_example >> g_example) = %A\" lhsResult_counter\nprintfn \"RHS: Composing mapThenReverse f and mapThenReverse g: %A\" rhsResult_counter\nprintfn \"Satisfied? %b\" (lhsResult_counter = rhsResult_counter) // False\n```\n\nThis F\\# code correctly demonstrates that `mapThenReverse` **does not satisfy the Functor composition law**.\n\n**1. Code Verification and Validity of the Counter-example**\nThe calculations (as commented) show `lhsResult_counter` (`[8; 6; 4]`) differs from `rhsResult_counter` (`[4; 6; 8]`). Thus, `mapThenReverse` fails to preserve the composition structure of the function Monoid.\n\n**2. Consistency with Previous Discussions (Focus on Monoid Preservation):**\n\nThis counter-example perfectly illustrates why the Functor laws (as requirements for Monoid preservation) are crucial:\n\n* **Proof That Not All `map`-like Operations Preserve Monoid Structure:** `mapThenReverse` is a `map`-like operation that clearly *fails* to preserve the function composition Monoid.\n  * **Relation to \"Theorems for free\\!\" and Parametricity:** Standard `List.map` is parametric. `mapThenReverse` adds `List.rev`, an explicit structural modification not solely dictated by the types in a parametric way. This non-parametric structural alteration breaks the Monoid preservation property.\n  * **Importance of Laws/Implementation for Monoid Preservation:** This example underscores that whether a `map` operation preserves the function composition Monoid depends entirely on its **implementation**.\n\n**3. Evaluation Summary (Monoid Perspective)**\n\nThe `mapThenReverse` counter-example excellently demonstrates that a generic type signature doesn't guarantee Monoid preservation. Preservation (i.e., satisfying Functor laws) is an implementation property, and deviations from parametric behavior can break it. This reinforces that the Functor laws are non-trivial requirements for `map` to act as a well-behaved, structure-preserving transformation that respects the natural Monoid of function composition.","src/content/docs/en/book/unit-2/section-6/2-theory-functor.md","5fdf7a9f48763628",{"html":1051,"metadata":1052},"\u003Cp>In the previous section, we established that the concept of “structure preservation” is central to understanding robust abstractions in functional programming. We saw how Category Theory itself is founded on Monoid-like principles of composition and identity. This chapter delves into \u003Cstrong>Functors\u003C/strong>, illustrating how the Functor Laws are precisely the requirements ensuring that the \u003Ccode dir=\"auto\">map\u003C/code> operation preserves the natural \u003Cstrong>Monoid structure of function composition\u003C/strong>.\u003C/p>\n\u003Cp>Our core theme here is that a Functor’s \u003Ccode dir=\"auto\">map\u003C/code> operation isn’t just any higher-order function that iterates over a container; it’s a special kind of transformation that must respect the algebraic properties (associativity of composition and the role of identity) inherent in the functions it lifts. We will explore why such preservation is crucial, how it’s formally defined by the Functor Laws, the practical challenges of verification, and the theoretical guarantees (like Parametricity) that often allow us to trust common \u003Ccode dir=\"auto\">map\u003C/code> implementations. Our journey will confirm that a Functor’s \u003Ccode dir=\"auto\">map\u003C/code> is fundamentally about maintaining the integrity of the function composition Monoid as we move between the world of regular functions and the world of functions operating on containers.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"re-contextualized-for-monoid-preservation\">Re-contextualized for Monoid Preservation\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#re-contextualized-for-monoid-preservation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Re-contextualized for Monoid Preservation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our goal is to understand what makes a \u003Ccode dir=\"auto\">map\u003C/code> higher-order function behave as a Functor, which fundamentally means it must \u003Cstrong>preserve the Monoid structure inherent in function composition\u003C/strong> (\u003Ccode dir=\"auto\">>>\u003C/code> as the operation, \u003Ccode dir=\"auto\">id\u003C/code> as the identity element).\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205891858.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cstrong>Step 1: Two Independent Computational Processes - Starting from Definitions\u003C/strong>\u003C/p>\n\u003Cp>First, let’s examine the main processes shown in Figure, using a generic \u003Ccode dir=\"auto\">map\u003C/code> for a container \u003Ccode dir=\"auto\">M\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747207345043.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cstrong>Key Point: Independence and Definition\u003C/strong>\nCrucially, \u003Ccode dir=\"auto\">map (f >> g)\u003C/code> and \u003Ccode dir=\"auto\">(map f) >> (map g)\u003C/code> are \u003Cstrong>two independent operations with distinct computational processes\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cstrong>Step 2: The Visual Suggestion vs. Logical Gap - A Premature Conclusion?\u003C/strong>\u003C/p>\n\u003Cp>Concluding these are identical operations just from diagrams or type signatures is a logical leap. The core question is whether they are \u003Cem>extensionally equivalent\u003C/em>.\u003C/p>\n\u003Cp>\u003Cstrong>Step 3: Functor \u003Ccode dir=\"auto\">map\u003C/code> and the Functor Laws - Guaranteeing Monoid Preservation\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206877586.png\" alt=\"image\">\u003C/p>\n\u003Cp>A \u003Ccode dir=\"auto\">map\u003C/code> operation is a \u003Cstrong>Functor \u003Ccode dir=\"auto\">map\u003C/code>\u003C/strong> if it ensures these two distinct processes \u003Cem>always\u003C/em> yield the same result. This is precisely the requirement for \u003Ccode dir=\"auto\">map\u003C/code> to \u003Cstrong>preserve the structure of the function composition Monoid\u003C/strong>. The Functor Laws formalize this:\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"the-functor-laws-required-for-map-to-preserve-the-function-composition-monoid\">\u003Cstrong>The Functor Laws (Required for \u003Ccode dir=\"auto\">map\u003C/code> to preserve the Function Composition Monoid):\u003C/strong>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#the-functor-laws-required-for-map-to-preserve-the-function-composition-monoid\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Functor Laws (Required for map to preserve the Function Composition Monoid):”\u003C/span>\u003C/a>\u003C/div>\n\u003Col>\n\u003Cli>\u003Cstrong>Identity Law:\u003C/strong> \u003Ccode dir=\"auto\">map id = id_M\u003C/code> (where \u003Ccode dir=\"auto\">id_M\u003C/code> is the identity transformation for container \u003Ccode dir=\"auto\">M\u003C/code>; for example, if \u003Ccode dir=\"auto\">map\u003C/code> is \u003Ccode dir=\"auto\">List.map\u003C/code>, then \u003Ccode dir=\"auto\">List.map id\u003C/code> should behave like \u003Ccode dir=\"auto\">fun list -> list\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747203975841.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cem>Monoid Interpretation:\u003C/em> The \u003Ccode dir=\"auto\">map\u003C/code> must map the \u003Cstrong>identity element (\u003Ccode dir=\"auto\">id\u003C/code>)\u003C/strong> of the function composition Monoid to the \u003Cstrong>identity operation\u003C/strong> in the world of container transformations. It preserves the identity.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cem>Conceptual Verification with Code (using \u003Ccode dir=\"auto\">map_List\u003C/code>):\u003C/em>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhs_identity_list\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialList \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List id\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhs_identity_list\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialList \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Applying id_M to initialList is initialList itself\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Identity Law (List): LHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, RHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Satisfied=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For Option:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhs_identity_option_some\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionSome \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Option id\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhs_identity_option_some\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionSome\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Identity Law (Option Some): LHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, RHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Satisfied=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhs_identity_option_none\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionNone \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Option id\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhs_identity_option_none\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionNone\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Identity Law (Option None): LHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, RHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Satisfied=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">none rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">none \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">none \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">identity\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">none\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let lhs_identity_list = initialList |> map_List idlet rhs_identity_list = initialList // Applying id_M to initialList is initialList itselfprintfn &#x22;Identity Law (List): LHS=%A, RHS=%A, Satisfied=%b&#x22; lhs_identity_list rhs_identity_list (lhs_identity_list = rhs_identity_list)// For Option:let lhs_identity_option_some = initialOptionSome |> map_Option idlet rhs_identity_option_some = initialOptionSomeprintfn &#x22;Identity Law (Option Some): LHS=%A, RHS=%A, Satisfied=%b&#x22; lhs_identity_option_some rhs_identity_option_some (lhs_identity_option_some = rhs_identity_option_some)let lhs_identity_option_none = initialOptionNone |> map_Option idlet rhs_identity_option_none = initialOptionNoneprintfn &#x22;Identity Law (Option None): LHS=%A, RHS=%A, Satisfied=%b&#x22; lhs_identity_option_none rhs_identity_option_none (lhs_identity_option_none = rhs_identity_option_none)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Composition Law:\u003C/strong> \u003Ccode dir=\"auto\">map (f >> g) = (map f) >> (map g)\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>(Note: \u003Ccode dir=\"auto\">(map f) >> (map g)\u003C/code> means\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">fun container -> container |> map f |> map g\u003C/code>)\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206525700.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cem>Monoid Interpretation:\u003C/em> The \u003Ccode dir=\"auto\">map\u003C/code> must respect the \u003Cstrong>composition operation (\u003Ccode dir=\"auto\">>>\u003C/code>)\u003C/strong> of the function composition Monoid. Mapping a pre-composed function must yield the same as mapping individually then composing the results.\u003C/li>\n\u003Cli>\u003Cem>Conceptual Verification with Code (using \u003Ccode dir=\"auto\">map_List\u003C/code>):\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">composed_fg_revised\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">intToString \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">stringToBool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">revised\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// LHS for List\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhs_composition_list\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialList \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List composed\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fg\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">revised\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// RHS for List\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhs_composition_list\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialList \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">intToString \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">stringToBool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">revised\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Composition Law (List): LHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, RHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Satisfied=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// LHS for Option Some\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhs_composition_option_some\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionSome \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Option composed\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fg\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">revised\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// RHS for Option Some\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhs_composition_option_some\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialOptionSome \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Option f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">intToString \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Option g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">stringToBool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">revised\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Composition Law (Option Some): LHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, RHS=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Satisfied=\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">composition\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">some\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let composed_fg_revised = f_intToString >> g_stringToBool_revised// LHS for Listlet lhs_composition_list = initialList |> map_List composed_fg_revised// RHS for Listlet rhs_composition_list = initialList |> map_List f_intToString |> map_List g_stringToBool_revisedprintfn &#x22;Composition Law (List): LHS=%A, RHS=%A, Satisfied=%b&#x22; lhs_composition_list rhs_composition_list (lhs_composition_list = rhs_composition_list)// LHS for Option Somelet lhs_composition_option_some = initialOptionSome |> map_Option composed_fg_revised// RHS for Option Somelet rhs_composition_option_some = initialOptionSome |> map_Option f_intToString |> map_Option g_stringToBool_revisedprintfn &#x22;Composition Law (Option Some): LHS=%A, RHS=%A, Satisfied=%b&#x22; lhs_composition_option_some rhs_composition_option_some (lhs_composition_option_some = rhs_composition_option_some)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>A \u003Ccode dir=\"auto\">map\u003C/code> is a Functor if it satisfies these laws, thereby acting as a \u003Cstrong>homomorphism\u003C/strong> preserving the function composition Monoid.\u003C/p>\n\u003Cp>\u003Cstrong>Interpreting Figure 3 (Bottom/Integrated Diagram):\u003C/strong> This diagram, showing a single path, is valid \u003Cem>only if\u003C/em> \u003Ccode dir=\"auto\">map\u003C/code> is a Functor because then the two distinct computational paths are extensionally equivalent.\u003C/p>\n\u003Cp>\u003Cstrong>Step 4: A Serious Practical Concern - The Burden of Verification?\u003C/strong>\u003C/p>\n\u003Cp>If we need to prove these laws for every \u003Ccode dir=\"auto\">map\u003C/code> (e.g., \u003Ccode dir=\"auto\">List.map\u003C/code>, \u003Ccode dir=\"auto\">Option.map\u003C/code>), the utility of the Functor abstraction diminishes.\u003C/p>\n\u003Cp>\u003Cstrong>Step 5: A Savior Appears - “Theorems for free!” (Parametricity)\u003C/strong>\u003C/p>\n\u003Cp>Philip Wadler’s “Theorems for free!” principle, derived from \u003Cstrong>Parametricity\u003C/strong>, suggests that for generic \u003Ccode dir=\"auto\">map\u003C/code> (\u003Ccode dir=\"auto\">('a -> 'b) -> M&#x3C;'a> -> M&#x3C;'b>\u003C/code>), if implemented without type-specific “cheating,” is constrained by its type signature to preserve structure. This “structure preservation” is what the Functor Laws (our Monoid preservation laws) articulate. A parametric \u003Ccode dir=\"auto\">map\u003C/code> \u003Cem>must\u003C/em> apply the function while keeping the container structure intact, which inherently forces it to respect composition and identity – thus preserving the Monoid.\u003C/p>\n\u003Cp>\u003Cstrong>Step 6: The Practical Conclusion - Trusting Generic Implementations to Preserve Monoid Structure\u003C/strong>\u003C/p>\n\u003Cp>Standard library functions like \u003Ccode dir=\"auto\">List.map\u003C/code> and \u003Ccode dir=\"auto\">Option.map\u003C/code> are designed parametrically. Therefore, in practice, we can trust them to be Functors and correctly preserve the Monoid structure of function composition.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"summary\">Summary\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The diagrams illustrate the core issue: \u003Ccode dir=\"auto\">map (f >> g)\u003C/code> and \u003Ccode dir=\"auto\">(map f) >> (map g)\u003C/code> are, by definition, distinct computational processes. A \u003Cstrong>Functor \u003Ccode dir=\"auto\">map\u003C/code> operation\u003C/strong> is specifically one where these two processes are \u003Cem>defined\u003C/em> to be extensionally equivalent. This equivalence is mandated by the \u003Cstrong>Functor Laws\u003C/strong> (Identity and Composition), which collectively ensure that \u003Ccode dir=\"auto\">map\u003C/code> \u003Cstrong>preserves the Monoid structure of function composition\u003C/strong> (\u003Ccode dir=\"auto\">id\u003C/code> as identity, \u003Ccode dir=\"auto\">>>\u003C/code> as composition). The integrated diagram (Figure 3) is valid only under this assumption of Monoid preservation. The practical concern of verifying these laws is significantly alleviated by \u003Cstrong>Parametricity (“Theorems for free!”)\u003C/strong>, which suggests that parametrically implemented generic \u003Ccode dir=\"auto\">map\u003C/code> functions will naturally satisfy these laws. Thus, typical “non-hacky” generic \u003Ccode dir=\"auto\">map\u003C/code> implementations can be reliably treated as structure-preserving Functors.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"evaluation-of-the-counter-example-code-mapthenreverse\">Evaluation of the Counter-example Code (\u003Ccode dir=\"auto\">mapThenReverse\u003C/code>)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#evaluation-of-the-counter-example-code-mapthenreverse\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Evaluation of the Counter-example Code (mapThenReverse)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function that reverses the entire list AFTER applying the normal List.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mapThenReverse\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'b\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'b list \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">list\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map f\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.rev\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Verification of Composition Law (using >>) ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This law ensures that 'map' preserves the Monoid's composition operation.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">f_example\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">g_example\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialList_example\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsResult_counter\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">initialList\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> mapThenReverse \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected: initialList_example |> List.map (fun x -> (x+1)*2) |> List.rev = [4; 6; 8] |> List.rev = [8; 6; 4]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsResult_counter\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">map_f_then_map_g\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> l \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> l \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> mapThenReverse f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> mapThenReverse g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">initialList\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">example \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">then\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">map\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">g\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected: initialList_example |> mapThenReverse f_example gives [4;3;2]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Then: [4;3;2] |> mapThenReverse g_example gives ([4;3;2] |> List.map (fun x -> x*2) |> List.rev) = ([8;6;4] |> List.rev) = [4;6;8]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Counter Example - Composition Law Check (Map then Reverse, using >>):\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">LHS: initialList |> mapThenReverse (f_example >> g_example) = \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lhsResult\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counter\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">RHS: Composing mapThenReverse f and mapThenReverse g: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhsResult\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counter\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Satisfied? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lhsResult\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counter \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> rhsResult\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counter\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// False\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Function that reverses the entire list AFTER applying the normal List.maplet mapThenReverse (f: &#x27;a -> &#x27;b) (list: &#x27;a list) : &#x27;b list =    list    |> List.map f    |> List.rev// --- Verification of Composition Law (using >>) ---// This law ensures that &#x27;map&#x27; preserves the Monoid&#x27;s composition operation.let f_example x = x + 1let g_example x = x * 2let initialList_example = [1; 2; 3]let lhsResult_counter =    initialList_example    |> mapThenReverse (f_example >> g_example)// Expected: initialList_example |> List.map (fun x -> (x+1)*2) |> List.rev = [4; 6; 8] |> List.rev = [8; 6; 4]let rhsResult_counter =    let map_f_then_map_g = fun l -> l |> mapThenReverse f_example |> mapThenReverse g_example    initialList_example |> map_f_then_map_g// Expected: initialList_example |> mapThenReverse f_example gives [4;3;2]// Then: [4;3;2] |> mapThenReverse g_example gives ([4;3;2] |> List.map (fun x -> x*2) |> List.rev) = ([8;6;4] |> List.rev) = [4;6;8]printfn &#x22;Counter Example - Composition Law Check (Map then Reverse, using >>):&#x22;printfn &#x22;LHS: initialList |> mapThenReverse (f_example >> g_example) = %A&#x22; lhsResult_counterprintfn &#x22;RHS: Composing mapThenReverse f and mapThenReverse g: %A&#x22; rhsResult_counterprintfn &#x22;Satisfied? %b&#x22; (lhsResult_counter = rhsResult_counter) // False\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This F# code correctly demonstrates that \u003Ccode dir=\"auto\">mapThenReverse\u003C/code> \u003Cstrong>does not satisfy the Functor composition law\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cstrong>1. Code Verification and Validity of the Counter-example\u003C/strong>\nThe calculations (as commented) show \u003Ccode dir=\"auto\">lhsResult_counter\u003C/code> (\u003Ccode dir=\"auto\">[8; 6; 4]\u003C/code>) differs from \u003Ccode dir=\"auto\">rhsResult_counter\u003C/code> (\u003Ccode dir=\"auto\">[4; 6; 8]\u003C/code>). Thus, \u003Ccode dir=\"auto\">mapThenReverse\u003C/code> fails to preserve the composition structure of the function Monoid.\u003C/p>\n\u003Cp>\u003Cstrong>2. Consistency with Previous Discussions (Focus on Monoid Preservation):\u003C/strong>\u003C/p>\n\u003Cp>This counter-example perfectly illustrates why the Functor laws (as requirements for Monoid preservation) are crucial:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Proof That Not All \u003Ccode dir=\"auto\">map\u003C/code>-like Operations Preserve Monoid Structure:\u003C/strong> \u003Ccode dir=\"auto\">mapThenReverse\u003C/code> is a \u003Ccode dir=\"auto\">map\u003C/code>-like operation that clearly \u003Cem>fails\u003C/em> to preserve the function composition Monoid.\n\u003Cul>\n\u003Cli>\u003Cstrong>Relation to “Theorems for free!” and Parametricity:\u003C/strong> Standard \u003Ccode dir=\"auto\">List.map\u003C/code> is parametric. \u003Ccode dir=\"auto\">mapThenReverse\u003C/code> adds \u003Ccode dir=\"auto\">List.rev\u003C/code>, an explicit structural modification not solely dictated by the types in a parametric way. This non-parametric structural alteration breaks the Monoid preservation property.\u003C/li>\n\u003Cli>\u003Cstrong>Importance of Laws/Implementation for Monoid Preservation:\u003C/strong> This example underscores that whether a \u003Ccode dir=\"auto\">map\u003C/code> operation preserves the function composition Monoid depends entirely on its \u003Cstrong>implementation\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>3. Evaluation Summary (Monoid Perspective)\u003C/strong>\u003C/p>\n\u003Cp>The \u003Ccode dir=\"auto\">mapThenReverse\u003C/code> counter-example excellently demonstrates that a generic type signature doesn’t guarantee Monoid preservation. Preservation (i.e., satisfying Functor laws) is an implementation property, and deviations from parametric behavior can break it. This reinforces that the Functor laws are non-trivial requirements for \u003Ccode dir=\"auto\">map\u003C/code> to act as a well-behaved, structure-preserving transformation that respects the natural Monoid of function composition.\u003C/p>",{"headings":1053,"localImagePaths":1064,"remoteImagePaths":1065,"frontmatter":1066,"imagePaths":1067},[1054,1057,1060,1061],{"depth":182,"slug":1055,"text":1056},"re-contextualized-for-monoid-preservation","Re-contextualized for Monoid Preservation",{"depth":523,"slug":1058,"text":1059},"the-functor-laws-required-for-map-to-preserve-the-function-composition-monoid","The Functor Laws (Required for map to preserve the Function Composition Monoid):",{"depth":523,"slug":408,"text":409},{"depth":182,"slug":1062,"text":1063},"evaluation-of-the-counter-example-code-mapthenreverse","Evaluation of the Counter-example Code (mapThenReverse)",[],[],{"title":1042,"description":1043},[],"en/book/unit-2/section-5/2-monad",{"id":1068,"data":1070,"body":1076,"filePath":1077,"digest":1078,"rendered":1079},{"title":1071,"description":1072,"editUrl":16,"head":1073,"template":18,"sidebar":1074,"pagefind":16,"draft":20},"Monad: Another Bridge","The Kleisli arrow at our disposal - a function that produces its output within a container:",[],{"hidden":20,"attrs":1075},{},"## From Kleisli Arrow to Container Mapper\n\nThe Kleisli arrow at our disposal - a function that produces its output within a container:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714186810.png)\n\nNow, let's look back at the mapper function we created using Functor:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png)\n\nThese two concepts suggest an intriguing possibility: what if we could create a function that transforms a Kleisli arrow into a container mapper function? Such a function would serve as another bridge between worlds.\n\nThis transforming function is called **bind**. It takes a Kleisli arrow and produces a container mapper function:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745716642404.png)\n\nThis transformation - from Kleisli arrow to container mapper function - is precisely what defines a  **Monad** . Where Functor's map lifts regular functions to work with containers, bind transforms Kleisli arrows into container mappers.\n\nThis provides a completely different way to bridge the world of functions and containers, and this transformative capability is the core essence of what we call a Monad.\n\n## Type of List Monad\n\n### List Functor is `list.map` in F#\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674327527.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745701569925.png)\n\n### List Monad is `list.collect` in F#\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804453086.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804937535.png)","src/content/docs/en/book/unit-2/section-5/2-monad.md","82c38bdf0f0839aa",{"html":1080,"metadata":1081},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"from-kleisli-arrow-to-container-mapper\">From Kleisli Arrow to Container Mapper\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#from-kleisli-arrow-to-container-mapper\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “From Kleisli Arrow to Container Mapper”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The Kleisli arrow at our disposal - a function that produces its output within a container:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714186810.png\" alt=\"image\">\u003C/p>\n\u003Cp>Now, let’s look back at the mapper function we created using Functor:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png\" alt=\"image\">\u003C/p>\n\u003Cp>These two concepts suggest an intriguing possibility: what if we could create a function that transforms a Kleisli arrow into a container mapper function? Such a function would serve as another bridge between worlds.\u003C/p>\n\u003Cp>This transforming function is called \u003Cstrong>bind\u003C/strong>. It takes a Kleisli arrow and produces a container mapper function:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745716642404.png\" alt=\"image\">\u003C/p>\n\u003Cp>This transformation - from Kleisli arrow to container mapper function - is precisely what defines a  \u003Cstrong>Monad\u003C/strong> . Where Functor’s map lifts regular functions to work with containers, bind transforms Kleisli arrows into container mappers.\u003C/p>\n\u003Cp>This provides a completely different way to bridge the world of functions and containers, and this transformative capability is the core essence of what we call a Monad.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"type-of-list-monad\">Type of List Monad\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#type-of-list-monad\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Type of List Monad”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"list-functor-is-listmap-in-f\">List Functor is \u003Ccode dir=\"auto\">list.map\u003C/code> in F#\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#list-functor-is-listmap-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “List Functor is list.map in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674327527.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745701569925.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"list-monad-is-listcollect-in-f\">List Monad is \u003Ccode dir=\"auto\">list.collect\u003C/code> in F#\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#list-monad-is-listcollect-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “List Monad is list.collect in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804453086.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804937535.png\" alt=\"image\">\u003C/p>",{"headings":1082,"localImagePaths":1095,"remoteImagePaths":1096,"frontmatter":1097,"imagePaths":1098},[1083,1086,1089,1092],{"depth":182,"slug":1084,"text":1085},"from-kleisli-arrow-to-container-mapper","From Kleisli Arrow to Container Mapper",{"depth":182,"slug":1087,"text":1088},"type-of-list-monad","Type of List Monad",{"depth":523,"slug":1090,"text":1091},"list-functor-is-listmap-in-f","List Functor is list.map in F#",{"depth":523,"slug":1093,"text":1094},"list-monad-is-listcollect-in-f","List Monad is list.collect in F#",[],[],{"title":1071,"description":1072},[],"en/book/unit-2/section-6/3-theory-monad",{"id":1099,"data":1101,"body":1107,"filePath":1108,"digest":1109,"rendered":1110},{"title":1102,"description":1103,"editUrl":16,"head":1104,"template":18,"sidebar":1105,"pagefind":16,"draft":20},"The Monad Laws: Verifying the Kleisli Composition Monoid","Having explored Functors and the crucial concept of structure preservation, we now turn our attention to Monads. Monads represent another fundamental structure in functional programming, often used to sequence computations that involve some form of context, such as handling potential absence of values (Option), managing multiple possible outcomes (List), dealing with asynchronous operations (Async, Task), or managing state.",[],{"hidden":20,"attrs":1106},{},"Having explored Functors and the crucial concept of structure preservation, we now turn our attention to **Monads**. Monads represent another fundamental structure in functional programming, often used to sequence computations that involve some form of context, such as handling potential absence of values (`Option`), managing multiple possible outcomes (`List`), dealing with asynchronous operations (`Async`, `Task`), or managing state.\n\nTo ensure these sequenced computations behave predictably and compose reliably, the core operations provided by a Monad must adhere to specific rules: the **Monad Laws**. This chapter aims to illuminate these laws, providing a deeper understanding of what makes a Monad work.\n\n## Recap: Kleisli Arrows\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205448469.png)\n\nFirst, let's recall **Kleisli arrows** from Unit 2, Section 5. These are the specialized functions that Monads are designed to work with. Unlike regular functions (`'a -> 'b`), Kleisli arrows take a regular value (`'a`) and return a value wrapped in the monadic context `M` (`'a -> M\u003C'b>`). They represent a computation step whose result is context-dependent.\n\n## The `bind` Operation\n\nThe primary mechanism Monads provide for sequencing Kleisli arrows is the `bind` operation. Often represented by the infix operator `>>=`, `bind` allows us to chain computations where the next step (a Kleisli arrow) depends on the result produced within the monadic context by the previous step.\n\nIts signature, using the pipeline style we favor, is:\n\n`bind : ('a -> M\u003C'b>) -> M\u003C'a> -> M\u003C'b>`\n\n### List Monad is `list.collect` in F#\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804453086.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804937535.png)\n\nOr, written infix:\n`(>>=) : M\u003C'a> -> ('a -> M\u003C'b>) -> M\u003C'b>`\n\nUsage looks like: `monadicValueA |> bind kleisliArrowF`. This takes the result(s) from `monadicValueA`, feeds them into `kleisliArrowF`, and returns the resulting `M\u003C'b>`.\n\n## Understanding the Monad Laws: The Kleisli Monoid Approach\n\nHow do we ensure that chaining operations with `bind` is well-behaved? This is where the Monad Laws come in. Typically, three laws involving `bind` and an identity operation (which we'll call `ID`) are presented.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205671216.png)\n\nHowever, there's an equivalent formulation that arguably provides deeper insight into the algebraic structure Monads impose. This approach focuses on defining **composition directly for Kleisli arrows**. Let's denote this **Kleisli composition** operator as `>>>`.\n\nA type constructor `M` forms a Monad if and only if its Kleisli arrows (`'a -> M\u003C'b>`) form a **Monoid** under this composition operator `>>>`, with the identity Kleisli arrow (`ID : 'a -> M\u003C'a>`) acting as the Monoid's identity element.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204849057.png)\n\nWhy adopt this perspective? Because it connects directly to concepts we've already established:\n\n1.  We know function composition (`>>`) forms a natural Monoid (associativity + `id`).\n2.  We established that preserving this compositional structure is key for robust abstractions like Functors.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205891858.png)\n\nThe Kleisli Monoid approach reveals that Monads achieve robustness by ensuring that the composition of *Kleisli arrows* (`>>>`) also adheres to the fundamental Monoid laws (associativity and identity laws) using `ID` as the identity. The standard Monad laws for `bind` are precisely the conditions needed to guarantee this Kleisli Monoid structure holds.\n\nTherefore, in this chapter, we will verify the Monad structure by demonstrating these Kleisli Monoid properties, highlighting the core algebraic foundation.\n\n## Definitions for General Monad `M`\n\nLet `M` represent any type constructor that forms a valid Monad.\n\n* **Kleisli Arrow (Monadic Function):** A function with the signature:\n    `'a -> M\u003C'b>`\n* **Identity Kleisli Arrow (`ID`):** The function that lifts a plain value `a` into the minimal monadic context `M`.\n    `val ID\u003C'a> : 'a -> M\u003C'a>`\n* **Kleisli Composition (`>>>`):** An operator to compose two Kleisli arrows, defined using `bind`.\n    `val inline (>>>) : ('a -> M\u003C'b>) -> ('b -> M\u003C'c>) -> ('a -> M\u003C'c>)`\n    The definition is: `let (>>>) f g = fun a -> (f a) |> bind g`\n    *(Read as: Apply Kleisli arrow `f` to `a`, yielding an `M\u003C'b>`, then pipe this result into `bind` with the next Kleisli arrow `g`.)*\n\n## Setup for Examples (Generic)\n\nLet's define some generic Kleisli arrows for illustration, assuming `M` is a valid Monad providing `M.ID` and a `bind` function.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Assume M is a valid Monad with M.ID and bind defined.\n\n// Sample Kleisli Arrows\nlet f: int -> M\u003Cstring> = fun i -> M.ID (sprintf \"f(%d)\" i)\nlet g: string -> M\u003Cfloat> = fun s -> M.ID (float s.Length)\nlet h: float -> M\u003Cbool> = fun fl -> M.ID (fl > 10.0) // Example: check if float > 10.0\n\n// Initial Monadic Value\nlet initialValue = 5\nlet initialMonadValue : M\u003Cint> = M.ID initialValue\n```\n\n## Verification of Kleisli Monoid Laws (via Standard Monad Laws)\n\nWe now demonstrate that if `M` is a valid Monad (meaning `bind` and `ID` satisfy the standard Monad laws), then the Kleisli composition `>>>` (defined via `bind`) necessarily satisfies the Monoid laws with `ID`.\n\n---\n\n### **Law 1: Associativity**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204989154.png)\n\n* **Equation:** `(f >>> g) >>> h = f >>> (g >>> h)`\n* **Goal:** Show that composing Kleisli arrows `f`, `g`, and `h` is associative. This means applying the differently grouped compositions to an initial value `a` should yield identical results in the context `M`.\n* **Illustrative Code Structure (Conceptual):**\n    ```fsharp\n    // Let's apply both sides to an initial value 'a'\n\n    // --- LHS applied to 'a' ---\n    // ( (f >>> g) >>> h ) a\n    // = ( fun intermediate_value -> ((f >>> g) intermediate_value) |> bind h ) a // Definition of >>>\n    // = ( (fun input_f -> (f input_f) |> bind g) >>> h ) a\n    // = ( (f a) |> bind g ) |> bind h                       // Applying definitions\n\n    // --- RHS applied to 'a' ---\n    // ( f >>> (g >>> h) ) a\n    // = ( fun intermediate_value -> (f intermediate_value) |> bind (g >>> h) ) a // Definition of >>>\n    // = (f a) |> bind (fun x -> (g x) |> bind h)            // Applying definitions\n\n    // We need to show:\n    // ( (f a) |> bind g ) |> bind h   IS EQUIVALENT TO   (f a) |> bind (fun x -> (g x) |> bind h)\n    // Let m = f a. We need to show:\n    // ( m |> bind g ) |> bind h       IS EQUIVALENT TO   m |> bind (fun x -> g x |> bind h)\n    ```\n* **Equivalence Explanation:** The required equivalence, `(m |> bind g) |> bind h = m |> bind (fun x -> g x |> bind h)`, is precisely the **associativity law of the `bind` operation** itself (one of the three standard Monad laws). By definition, for `M` to be a Monad, its `bind` operation *must* be associative. This associativity of `bind` directly guarantees the associativity of the Kleisli composition `>>>` derived from it.\n    **Therefore, the Associativity Law holds for `>>>` (guaranteed by `bind`'s associativity).**\n\n---\n\n### **Law 2: Left Identity**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205208301.png)\n\n* **Equation:** `ID >>> f = f`\n* **Goal:** Show that composing the identity Kleisli arrow `ID` before `f` has no effect; the result is equivalent to `f` itself.\n* **Illustrative Code Structure (Conceptual):**\n    ```fsharp\n    // Let's apply both sides to an initial value 'a'\n\n    // --- LHS applied to 'a' ---\n    // ( ID >>> f ) a\n    // = ( fun intermediate_value -> (ID intermediate_value) |> bind f ) a // Definition of >>>\n    // = ( ID a ) |> bind f                                 // Applying definitions\n\n    // --- RHS applied to 'a' ---\n    // f a\n\n    // We need to show:\n    // ( ID a ) |> bind f   IS EQUIVALENT TO   f a\n    ```\n* **Equivalence Explanation:** The required equivalence, `(ID a) |> bind f = f a`, is precisely the **left identity law for the `bind` operation** (another standard Monad law). By definition, for `M` to be a Monad, its `bind` and `ID` operations *must* satisfy this law. This directly guarantees that `ID` acts as the left identity for the derived Kleisli composition `>>>`.\n    **Therefore, the Left Identity Law holds for `>>>` (guaranteed by `bind`'s left identity).**\n\n---\n\n### **Law 3: Right Identity**\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205208301.png)\n\n* **Equation:** `f >>> ID = f`\n* **Goal:** Show that composing `f` with the identity Kleisli arrow `ID` afterwards has no effect; the result is equivalent to `f` itself.\n* **Illustrative Code Structure (Conceptual):**\n    ```fsharp\n    // Let's apply both sides to an initial value 'a'\n\n    // --- LHS applied to 'a' ---\n    // ( f >>> ID ) a\n    // = ( fun intermediate_value -> (f intermediate_value) |> bind ID ) a // Definition of >>>\n    // = ( f a ) |> bind ID                                  // Applying definitions\n\n    // --- RHS applied to 'a' ---\n    // f a\n\n    // We need to show:\n    // ( f a ) |> bind ID   IS EQUIVALENT TO   f a\n    // Let m = f a. We need to show:\n    // m |> bind ID          IS EQUIVALENT TO   m\n    ```\n* **Equivalence Explanation:** The required equivalence, `m |> bind ID = m`, is precisely the **right identity law for the `bind` operation** (the third standard Monad law). By definition, for `M` to be a Monad, its `bind` and `ID` operations *must* satisfy this law. This directly guarantees that `ID` acts as the right identity for the derived Kleisli composition `>>>`.\n    **Therefore, the Right Identity Law holds for `>>>` (guaranteed by `bind`'s right identity).**\n\n## Conclusion\n\nWe have demonstrated that the standard Monad Laws, typically expressed in terms of `bind` and `ID`, are mathematically equivalent to requiring that **Kleisli composition (`>>>`) forms a Monoid with `ID` as its identity element**.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204849057.png)\n\nIf a type constructor `M` along with its `ID` and `bind` operations satisfy the three standard Monad laws (left identity, right identity, associativity of `bind`), then its associated Kleisli composition `>>>` is guaranteed to be associative and have `ID` as its identity.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206323768.png)\n\nThis Kleisli Monoid perspective reinforces the idea that Monads are fundamentally about providing a **structured, predictable way to compose computations within a context**. The laws ensure that this composition mechanism adheres to the robust algebraic properties of a Monoid, fulfilling the \"structure preservation\" goal we discussed earlier and enabling the reliable chaining of monadic operations.","src/content/docs/en/book/unit-2/section-6/3-theory-monad.md","befc0585e2f96b8c",{"html":1111,"metadata":1112},"\u003Cp>Having explored Functors and the crucial concept of structure preservation, we now turn our attention to \u003Cstrong>Monads\u003C/strong>. Monads represent another fundamental structure in functional programming, often used to sequence computations that involve some form of context, such as handling potential absence of values (\u003Ccode dir=\"auto\">Option\u003C/code>), managing multiple possible outcomes (\u003Ccode dir=\"auto\">List\u003C/code>), dealing with asynchronous operations (\u003Ccode dir=\"auto\">Async\u003C/code>, \u003Ccode dir=\"auto\">Task\u003C/code>), or managing state.\u003C/p>\n\u003Cp>To ensure these sequenced computations behave predictably and compose reliably, the core operations provided by a Monad must adhere to specific rules: the \u003Cstrong>Monad Laws\u003C/strong>. This chapter aims to illuminate these laws, providing a deeper understanding of what makes a Monad work.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"recap-kleisli-arrows\">Recap: Kleisli Arrows\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#recap-kleisli-arrows\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Recap: Kleisli Arrows”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205448469.png\" alt=\"image\">\u003C/p>\n\u003Cp>First, let’s recall \u003Cstrong>Kleisli arrows\u003C/strong> from Unit 2, Section 5. These are the specialized functions that Monads are designed to work with. Unlike regular functions (\u003Ccode dir=\"auto\">'a -> 'b\u003C/code>), Kleisli arrows take a regular value (\u003Ccode dir=\"auto\">'a\u003C/code>) and return a value wrapped in the monadic context \u003Ccode dir=\"auto\">M\u003C/code> (\u003Ccode dir=\"auto\">'a -> M&#x3C;'b>\u003C/code>). They represent a computation step whose result is context-dependent.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-bind-operation\">The \u003Ccode dir=\"auto\">bind\u003C/code> Operation\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-bind-operation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The bind Operation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The primary mechanism Monads provide for sequencing Kleisli arrows is the \u003Ccode dir=\"auto\">bind\u003C/code> operation. Often represented by the infix operator \u003Ccode dir=\"auto\">>>=\u003C/code>, \u003Ccode dir=\"auto\">bind\u003C/code> allows us to chain computations where the next step (a Kleisli arrow) depends on the result produced within the monadic context by the previous step.\u003C/p>\n\u003Cp>Its signature, using the pipeline style we favor, is:\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">bind : ('a -> M&#x3C;'b>) -> M&#x3C;'a> -> M&#x3C;'b>\u003C/code>\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"list-monad-is-listcollect-in-f\">List Monad is \u003Ccode dir=\"auto\">list.collect\u003C/code> in F#\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#list-monad-is-listcollect-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “List Monad is list.collect in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804453086.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745804937535.png\" alt=\"image\">\u003C/p>\n\u003Cp>Or, written infix:\n\u003Ccode dir=\"auto\">(>>=) : M&#x3C;'a> -> ('a -> M&#x3C;'b>) -> M&#x3C;'b>\u003C/code>\u003C/p>\n\u003Cp>Usage looks like: \u003Ccode dir=\"auto\">monadicValueA |> bind kleisliArrowF\u003C/code>. This takes the result(s) from \u003Ccode dir=\"auto\">monadicValueA\u003C/code>, feeds them into \u003Ccode dir=\"auto\">kleisliArrowF\u003C/code>, and returns the resulting \u003Ccode dir=\"auto\">M&#x3C;'b>\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"understanding-the-monad-laws-the-kleisli-monoid-approach\">Understanding the Monad Laws: The Kleisli Monoid Approach\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#understanding-the-monad-laws-the-kleisli-monoid-approach\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Understanding the Monad Laws: The Kleisli Monoid Approach”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>How do we ensure that chaining operations with \u003Ccode dir=\"auto\">bind\u003C/code> is well-behaved? This is where the Monad Laws come in. Typically, three laws involving \u003Ccode dir=\"auto\">bind\u003C/code> and an identity operation (which we’ll call \u003Ccode dir=\"auto\">ID\u003C/code>) are presented.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205671216.png\" alt=\"image\">\u003C/p>\n\u003Cp>However, there’s an equivalent formulation that arguably provides deeper insight into the algebraic structure Monads impose. This approach focuses on defining \u003Cstrong>composition directly for Kleisli arrows\u003C/strong>. Let’s denote this \u003Cstrong>Kleisli composition\u003C/strong> operator as \u003Ccode dir=\"auto\">>>>\u003C/code>.\u003C/p>\n\u003Cp>A type constructor \u003Ccode dir=\"auto\">M\u003C/code> forms a Monad if and only if its Kleisli arrows (\u003Ccode dir=\"auto\">'a -> M&#x3C;'b>\u003C/code>) form a \u003Cstrong>Monoid\u003C/strong> under this composition operator \u003Ccode dir=\"auto\">>>>\u003C/code>, with the identity Kleisli arrow (\u003Ccode dir=\"auto\">ID : 'a -> M&#x3C;'a>\u003C/code>) acting as the Monoid’s identity element.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204849057.png\" alt=\"image\">\u003C/p>\n\u003Cp>Why adopt this perspective? Because it connects directly to concepts we’ve already established:\u003C/p>\n\u003Col>\n\u003Cli>We know function composition (\u003Ccode dir=\"auto\">>>\u003C/code>) forms a natural Monoid (associativity + \u003Ccode dir=\"auto\">id\u003C/code>).\u003C/li>\n\u003Cli>We established that preserving this compositional structure is key for robust abstractions like Functors.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205891858.png\" alt=\"image\">\u003C/p>\n\u003Cp>The Kleisli Monoid approach reveals that Monads achieve robustness by ensuring that the composition of \u003Cem>Kleisli arrows\u003C/em> (\u003Ccode dir=\"auto\">>>>\u003C/code>) also adheres to the fundamental Monoid laws (associativity and identity laws) using \u003Ccode dir=\"auto\">ID\u003C/code> as the identity. The standard Monad laws for \u003Ccode dir=\"auto\">bind\u003C/code> are precisely the conditions needed to guarantee this Kleisli Monoid structure holds.\u003C/p>\n\u003Cp>Therefore, in this chapter, we will verify the Monad structure by demonstrating these Kleisli Monoid properties, highlighting the core algebraic foundation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"definitions-for-general-monad-m\">Definitions for General Monad \u003Ccode dir=\"auto\">M\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#definitions-for-general-monad-m\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Definitions for General Monad M”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let \u003Ccode dir=\"auto\">M\u003C/code> represent any type constructor that forms a valid Monad.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Kleisli Arrow (Monadic Function):\u003C/strong> A function with the signature:\n\u003Ccode dir=\"auto\">'a -> M&#x3C;'b>\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Identity Kleisli Arrow (\u003Ccode dir=\"auto\">ID\u003C/code>):\u003C/strong> The function that lifts a plain value \u003Ccode dir=\"auto\">a\u003C/code> into the minimal monadic context \u003Ccode dir=\"auto\">M\u003C/code>.\n\u003Ccode dir=\"auto\">val ID&#x3C;'a> : 'a -> M&#x3C;'a>\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Kleisli Composition (\u003Ccode dir=\"auto\">>>>\u003C/code>):\u003C/strong> An operator to compose two Kleisli arrows, defined using \u003Ccode dir=\"auto\">bind\u003C/code>.\n\u003Ccode dir=\"auto\">val inline (>>>) : ('a -> M&#x3C;'b>) -> ('b -> M&#x3C;'c>) -> ('a -> M&#x3C;'c>)\u003C/code>\nThe definition is: \u003Ccode dir=\"auto\">let (>>>) f g = fun a -> (f a) |> bind g\u003C/code>\n\u003Cem>(Read as: Apply Kleisli arrow \u003Ccode dir=\"auto\">f\u003C/code> to \u003Ccode dir=\"auto\">a\u003C/code>, yielding an \u003Ccode dir=\"auto\">M&#x3C;'b>\u003C/code>, then pipe this result into \u003Ccode dir=\"auto\">bind\u003C/code> with the next Kleisli arrow \u003Ccode dir=\"auto\">g\u003C/code>.)\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"setup-for-examples-generic\">Setup for Examples (Generic)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#setup-for-examples-generic\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Setup for Examples (Generic)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s define some generic Kleisli arrows for illustration, assuming \u003Ccode dir=\"auto\">M\u003C/code> is a valid Monad providing \u003Ccode dir=\"auto\">M.ID\u003C/code> and a \u003Ccode dir=\"auto\">bind\u003C/code> function.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume M is a valid Monad with M.ID and bind defined.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Sample Kleisli Arrows\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> i \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">f(\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> i\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">g\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float s.Length\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">h\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> float \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> fl \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fl \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10.0\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Example: check if float > 10.0\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial Monadic Value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValue\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialMonadValue\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> M.ID initialValue\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume M is a valid Monad with M.ID and bind defined.// Sample Kleisli Arrowslet f: int -> M\u003Cstring> = fun i -> M.ID (sprintf &#x22;f(%d)&#x22; i)let g: string -> M\u003Cfloat> = fun s -> M.ID (float s.Length)let h: float -> M\u003Cbool> = fun fl -> M.ID (fl > 10.0) // Example: check if float > 10.0// Initial Monadic Valuelet initialValue = 5let initialMonadValue : M\u003Cint> = M.ID initialValue\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"verification-of-kleisli-monoid-laws-via-standard-monad-laws\">Verification of Kleisli Monoid Laws (via Standard Monad Laws)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#verification-of-kleisli-monoid-laws-via-standard-monad-laws\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Verification of Kleisli Monoid Laws (via Standard Monad Laws)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We now demonstrate that if \u003Ccode dir=\"auto\">M\u003C/code> is a valid Monad (meaning \u003Ccode dir=\"auto\">bind\u003C/code> and \u003Ccode dir=\"auto\">ID\u003C/code> satisfy the standard Monad laws), then the Kleisli composition \u003Ccode dir=\"auto\">>>>\u003C/code> (defined via \u003Ccode dir=\"auto\">bind\u003C/code>) necessarily satisfies the Monoid laws with \u003Ccode dir=\"auto\">ID\u003C/code>.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"law-1-associativity\">\u003Cstrong>Law 1: Associativity\u003C/strong>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#law-1-associativity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Law 1: Associativity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204989154.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Equation:\u003C/strong> \u003Ccode dir=\"auto\">(f >>> g) >>> h = f >>> (g >>> h)\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Goal:\u003C/strong> Show that composing Kleisli arrows \u003Ccode dir=\"auto\">f\u003C/code>, \u003Ccode dir=\"auto\">g\u003C/code>, and \u003Ccode dir=\"auto\">h\u003C/code> is associative. This means applying the differently grouped compositions to an initial value \u003Ccode dir=\"auto\">a\u003C/code> should yield identical results in the context \u003Ccode dir=\"auto\">M\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Illustrative Code Structure (Conceptual):\u003C/strong>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Let's apply both sides to an initial value 'a'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( (f >>> g) >>> h ) a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( fun intermediate_value -> ((f >>> g) intermediate_value) |> bind h ) a // Definition of >>>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( (fun input_f -> (f input_f) |> bind g) >>> h ) a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( (f a) |> bind g ) |> bind h                       // Applying definitions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( f >>> (g >>> h) ) a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( fun intermediate_value -> (f intermediate_value) |> bind (g >>> h) ) a // Definition of >>>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = (f a) |> bind (fun x -> (g x) |> bind h)            // Applying definitions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We need to show:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( (f a) |> bind g ) |> bind h   IS EQUIVALENT TO   (f a) |> bind (fun x -> (g x) |> bind h)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Let m = f a. We need to show:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( m |> bind g ) |> bind h       IS EQUIVALENT TO   m |> bind (fun x -> g x |> bind h)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Let&#x27;s apply both sides to an initial value &#x27;a&#x27;// --- LHS applied to &#x27;a&#x27; ---// ( (f >>> g) >>> h ) a// = ( fun intermediate_value -> ((f >>> g) intermediate_value) |> bind h ) a // Definition of >>>// = ( (fun input_f -> (f input_f) |> bind g) >>> h ) a// = ( (f a) |> bind g ) |> bind h                       // Applying definitions// --- RHS applied to &#x27;a&#x27; ---// ( f >>> (g >>> h) ) a// = ( fun intermediate_value -> (f intermediate_value) |> bind (g >>> h) ) a // Definition of >>>// = (f a) |> bind (fun x -> (g x) |> bind h)            // Applying definitions// We need to show:// ( (f a) |> bind g ) |> bind h   IS EQUIVALENT TO   (f a) |> bind (fun x -> (g x) |> bind h)// Let m = f a. We need to show:// ( m |> bind g ) |> bind h       IS EQUIVALENT TO   m |> bind (fun x -> g x |> bind h)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\u003Cstrong>Equivalence Explanation:\u003C/strong> The required equivalence, \u003Ccode dir=\"auto\">(m |> bind g) |> bind h = m |> bind (fun x -> g x |> bind h)\u003C/code>, is precisely the \u003Cstrong>associativity law of the \u003Ccode dir=\"auto\">bind\u003C/code> operation\u003C/strong> itself (one of the three standard Monad laws). By definition, for \u003Ccode dir=\"auto\">M\u003C/code> to be a Monad, its \u003Ccode dir=\"auto\">bind\u003C/code> operation \u003Cem>must\u003C/em> be associative. This associativity of \u003Ccode dir=\"auto\">bind\u003C/code> directly guarantees the associativity of the Kleisli composition \u003Ccode dir=\"auto\">>>>\u003C/code> derived from it.\n\u003Cstrong>Therefore, the Associativity Law holds for \u003Ccode dir=\"auto\">>>>\u003C/code> (guaranteed by \u003Ccode dir=\"auto\">bind\u003C/code>’s associativity).\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"law-2-left-identity\">\u003Cstrong>Law 2: Left Identity\u003C/strong>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#law-2-left-identity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Law 2: Left Identity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205208301.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Equation:\u003C/strong> \u003Ccode dir=\"auto\">ID >>> f = f\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Goal:\u003C/strong> Show that composing the identity Kleisli arrow \u003Ccode dir=\"auto\">ID\u003C/code> before \u003Ccode dir=\"auto\">f\u003C/code> has no effect; the result is equivalent to \u003Ccode dir=\"auto\">f\u003C/code> itself.\u003C/li>\n\u003Cli>\u003Cstrong>Illustrative Code Structure (Conceptual):\u003C/strong>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Let's apply both sides to an initial value 'a'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( ID >>> f ) a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( fun intermediate_value -> (ID intermediate_value) |> bind f ) a // Definition of >>>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( ID a ) |> bind f                                 // Applying definitions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// f a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We need to show:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( ID a ) |> bind f   IS EQUIVALENT TO   f a\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Let&#x27;s apply both sides to an initial value &#x27;a&#x27;// --- LHS applied to &#x27;a&#x27; ---// ( ID >>> f ) a// = ( fun intermediate_value -> (ID intermediate_value) |> bind f ) a // Definition of >>>// = ( ID a ) |> bind f                                 // Applying definitions// --- RHS applied to &#x27;a&#x27; ---// f a// We need to show:// ( ID a ) |> bind f   IS EQUIVALENT TO   f a\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\u003Cstrong>Equivalence Explanation:\u003C/strong> The required equivalence, \u003Ccode dir=\"auto\">(ID a) |> bind f = f a\u003C/code>, is precisely the \u003Cstrong>left identity law for the \u003Ccode dir=\"auto\">bind\u003C/code> operation\u003C/strong> (another standard Monad law). By definition, for \u003Ccode dir=\"auto\">M\u003C/code> to be a Monad, its \u003Ccode dir=\"auto\">bind\u003C/code> and \u003Ccode dir=\"auto\">ID\u003C/code> operations \u003Cem>must\u003C/em> satisfy this law. This directly guarantees that \u003Ccode dir=\"auto\">ID\u003C/code> acts as the left identity for the derived Kleisli composition \u003Ccode dir=\"auto\">>>>\u003C/code>.\n\u003Cstrong>Therefore, the Left Identity Law holds for \u003Ccode dir=\"auto\">>>>\u003C/code> (guaranteed by \u003Ccode dir=\"auto\">bind\u003C/code>’s left identity).\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"law-3-right-identity\">\u003Cstrong>Law 3: Right Identity\u003C/strong>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#law-3-right-identity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Law 3: Right Identity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747205208301.png\" alt=\"image\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Equation:\u003C/strong> \u003Ccode dir=\"auto\">f >>> ID = f\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Goal:\u003C/strong> Show that composing \u003Ccode dir=\"auto\">f\u003C/code> with the identity Kleisli arrow \u003Ccode dir=\"auto\">ID\u003C/code> afterwards has no effect; the result is equivalent to \u003Ccode dir=\"auto\">f\u003C/code> itself.\u003C/li>\n\u003Cli>\u003Cstrong>Illustrative Code Structure (Conceptual):\u003C/strong>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Let's apply both sides to an initial value 'a'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( f >>> ID ) a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( fun intermediate_value -> (f intermediate_value) |> bind ID ) a // Definition of >>>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// = ( f a ) |> bind ID                                  // Applying definitions\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS applied to 'a' ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// f a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We need to show:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ( f a ) |> bind ID   IS EQUIVALENT TO   f a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Let m = f a. We need to show:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// m |> bind ID          IS EQUIVALENT TO   m\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Let&#x27;s apply both sides to an initial value &#x27;a&#x27;// --- LHS applied to &#x27;a&#x27; ---// ( f >>> ID ) a// = ( fun intermediate_value -> (f intermediate_value) |> bind ID ) a // Definition of >>>// = ( f a ) |> bind ID                                  // Applying definitions// --- RHS applied to &#x27;a&#x27; ---// f a// We need to show:// ( f a ) |> bind ID   IS EQUIVALENT TO   f a// Let m = f a. We need to show:// m |> bind ID          IS EQUIVALENT TO   m\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\u003Cstrong>Equivalence Explanation:\u003C/strong> The required equivalence, \u003Ccode dir=\"auto\">m |> bind ID = m\u003C/code>, is precisely the \u003Cstrong>right identity law for the \u003Ccode dir=\"auto\">bind\u003C/code> operation\u003C/strong> (the third standard Monad law). By definition, for \u003Ccode dir=\"auto\">M\u003C/code> to be a Monad, its \u003Ccode dir=\"auto\">bind\u003C/code> and \u003Ccode dir=\"auto\">ID\u003C/code> operations \u003Cem>must\u003C/em> satisfy this law. This directly guarantees that \u003Ccode dir=\"auto\">ID\u003C/code> acts as the right identity for the derived Kleisli composition \u003Ccode dir=\"auto\">>>>\u003C/code>.\n\u003Cstrong>Therefore, the Right Identity Law holds for \u003Ccode dir=\"auto\">>>>\u003C/code> (guaranteed by \u003Ccode dir=\"auto\">bind\u003C/code>’s right identity).\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#conclusion\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Conclusion”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We have demonstrated that the standard Monad Laws, typically expressed in terms of \u003Ccode dir=\"auto\">bind\u003C/code> and \u003Ccode dir=\"auto\">ID\u003C/code>, are mathematically equivalent to requiring that \u003Cstrong>Kleisli composition (\u003Ccode dir=\"auto\">>>>\u003C/code>) forms a Monoid with \u003Ccode dir=\"auto\">ID\u003C/code> as its identity element\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747204849057.png\" alt=\"image\">\u003C/p>\n\u003Cp>If a type constructor \u003Ccode dir=\"auto\">M\u003C/code> along with its \u003Ccode dir=\"auto\">ID\u003C/code> and \u003Ccode dir=\"auto\">bind\u003C/code> operations satisfy the three standard Monad laws (left identity, right identity, associativity of \u003Ccode dir=\"auto\">bind\u003C/code>), then its associated Kleisli composition \u003Ccode dir=\"auto\">>>>\u003C/code> is guaranteed to be associative and have \u003Ccode dir=\"auto\">ID\u003C/code> as its identity.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1747206323768.png\" alt=\"image\">\u003C/p>\n\u003Cp>This Kleisli Monoid perspective reinforces the idea that Monads are fundamentally about providing a \u003Cstrong>structured, predictable way to compose computations within a context\u003C/strong>. The laws ensure that this composition mechanism adheres to the robust algebraic properties of a Monoid, fulfilling the “structure preservation” goal we discussed earlier and enabling the reliable chaining of monadic operations.\u003C/p>",{"headings":1113,"localImagePaths":1145,"remoteImagePaths":1146,"frontmatter":1147,"imagePaths":1148},[1114,1117,1120,1121,1124,1127,1130,1133,1136,1139,1142],{"depth":182,"slug":1115,"text":1116},"recap-kleisli-arrows","Recap: Kleisli Arrows",{"depth":182,"slug":1118,"text":1119},"the-bind-operation","The bind Operation",{"depth":523,"slug":1093,"text":1094},{"depth":182,"slug":1122,"text":1123},"understanding-the-monad-laws-the-kleisli-monoid-approach","Understanding the Monad Laws: The Kleisli Monoid Approach",{"depth":182,"slug":1125,"text":1126},"definitions-for-general-monad-m","Definitions for General Monad M",{"depth":182,"slug":1128,"text":1129},"setup-for-examples-generic","Setup for Examples (Generic)",{"depth":182,"slug":1131,"text":1132},"verification-of-kleisli-monoid-laws-via-standard-monad-laws","Verification of Kleisli Monoid Laws (via Standard Monad Laws)",{"depth":523,"slug":1134,"text":1135},"law-1-associativity","Law 1: Associativity",{"depth":523,"slug":1137,"text":1138},"law-2-left-identity","Law 2: Left Identity",{"depth":523,"slug":1140,"text":1141},"law-3-right-identity","Law 3: Right Identity",{"depth":182,"slug":1143,"text":1144},"conclusion","Conclusion",[],[],{"title":1102,"description":1103},[],"en/book/unit-2/section-4/1-container",{"id":1149,"data":1151,"body":1157,"filePath":1158,"digest":1159,"rendered":1160},{"title":1152,"description":1153,"editUrl":16,"head":1154,"template":18,"sidebar":1155,"pagefind":16,"draft":20},"Container Types: Sets in Programming","In this chapter, we will explore  container types  - a fundamental concept in functional programming that builds upon our understanding of sets.",[],{"hidden":20,"attrs":1156},{},"In this chapter, we will explore  **container types**  - a fundamental concept in functional programming that builds upon our understanding of sets.\n\n## Sets as Container Types\n\nThe sets we have been studying in mathematics are typically called **container types** in functional programming languages.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745562787732.png)\n\nFor example, a List is a container type that can hold multiple values:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// List of numbers\n[1; 2; 3; 4; 5]\n\n// List of strings\n[\"apple\"; \"banana\"; \"cherry\"]\n\n// Nested lists (lists containing lists)\n[[1; 2]; [3; 4]; [5; 6]]\n```\n\nThe type declaration shows how Lists are generic containers:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745567340502.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745570291446.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n***The above is merely a conceptual illustration of container types, so please keep that in mind.***\n\nCome to think of it, types like Int and String are themselves sets - Int is a set of numbers like 1, 2, 3..., and String is a set of text strings. So even these basic types could be considered container types.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n   // Sets are collections:\n   type Numbers = int        // The set of all integers\n   type Strings = string    // The set of all possible strings\n   type Booleans = bool     // The set {true, false}\n   ```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564518303.png)\n\nEverything is relative -  **a container type is nothing more than a \"set of something\".**\n\nSince List type is the most intuitive image of a Set, for convenience, it's good to start by understanding that List type is the representative example of container types.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">","src/content/docs/en/book/unit-2/section-4/1-container.md","71e47730ddb78c55",{"html":1161,"metadata":1162},"\u003Cp>In this chapter, we will explore  \u003Cstrong>container types\u003C/strong>  - a fundamental concept in functional programming that builds upon our understanding of sets.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"sets-as-container-types\">Sets as Container Types\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#sets-as-container-types\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Sets as Container Types”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The sets we have been studying in mathematics are typically called \u003Cstrong>container types\u003C/strong> in functional programming languages.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745562787732.png\" alt=\"image\">\u003C/p>\n\u003Cp>For example, a List is a container type that can hold multiple values:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// List of numbers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// List of strings\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">apple\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">banana\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">cherry\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Nested lists (lists containing lists)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">];\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">];\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">6\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// List of numbers[1; 2; 3; 4; 5]// List of strings[&#x22;apple&#x22;; &#x22;banana&#x22;; &#x22;cherry&#x22;]// Nested lists (lists containing lists)[[1; 2]; [3; 4]; [5; 6]]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The type declaration shows how Lists are generic containers:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745567340502.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745570291446.png\" alt=\"image\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cem>\u003Cstrong>The above is merely a conceptual illustration of container types, so please keep that in mind.\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>Come to think of it, types like Int and String are themselves sets - Int is a set of numbers like 1, 2, 3…, and String is a set of text strings. So even these basic types could be considered container types.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Sets are collections:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">   \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Numbers \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of all integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">   \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Strings \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of all possible strings\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">   \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Booleans \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set {true, false}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"   // Sets are collections:   type Numbers = int        // The set of all integers   type Strings = string    // The set of all possible strings   type Booleans = bool     // The set {true, false}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564518303.png\" alt=\"image\">\u003C/p>\n\u003Cp>Everything is relative -  \u003Cstrong>a container type is nothing more than a “set of something”.\u003C/strong>\u003C/p>\n\u003Cp>Since List type is the most intuitive image of a Set, for convenience, it’s good to start by understanding that List type is the representative example of container types.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">",{"headings":1163,"localImagePaths":1167,"remoteImagePaths":1168,"frontmatter":1169,"imagePaths":1170},[1164],{"depth":182,"slug":1165,"text":1166},"sets-as-container-types","Sets as Container Types",[],[],{"title":1152,"description":1153},[],"en/book/unit-2/section-5/1-kleisli",{"id":1171,"data":1173,"body":1179,"filePath":1180,"digest":1181,"rendered":1182},{"title":1174,"description":1175,"editUrl":16,"head":1176,"template":18,"sidebar":1177,"pagefind":16,"draft":20},"The Kleisli Arrow","Regular functions map values to values:",[],{"hidden":20,"attrs":1178},{},"## A Peculiar Kind of Function\n\nRegular functions map values to values:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714141212.png)\n\nHowever, there exists a special class of functions that have an intriguing characteristic - they produce their output wrapped in a container type:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714186810.png)\n\nThese functions, known as **Kleisli arrows** (or **monadic functions**), possess a remarkable capability: they can determine the structure of their output container internally. This distinguishes them from regular functions, as they don't just compute values - they also define how those values should be organized within a container context.\n\nWhile the universal function type `'a -> 'b` can theoretically express any function (including these container-producing ones), there are compelling reasons to treat Kleisli arrows as a distinct category. Their unique power to shape container structures from within the function itself provides a key insight into understanding Monads, which we'll explore next.","src/content/docs/en/book/unit-2/section-5/1-kleisli.md","7ba07b646d70ed61",{"html":1183,"metadata":1184},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"a-peculiar-kind-of-function\">A Peculiar Kind of Function\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#a-peculiar-kind-of-function\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “A Peculiar Kind of Function”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Regular functions map values to values:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714141212.png\" alt=\"image\">\u003C/p>\n\u003Cp>However, there exists a special class of functions that have an intriguing characteristic - they produce their output wrapped in a container type:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745714186810.png\" alt=\"image\">\u003C/p>\n\u003Cp>These functions, known as \u003Cstrong>Kleisli arrows\u003C/strong> (or \u003Cstrong>monadic functions\u003C/strong>), possess a remarkable capability: they can determine the structure of their output container internally. This distinguishes them from regular functions, as they don’t just compute values - they also define how those values should be organized within a container context.\u003C/p>\n\u003Cp>While the universal function type \u003Ccode dir=\"auto\">'a -> 'b\u003C/code> can theoretically express any function (including these container-producing ones), there are compelling reasons to treat Kleisli arrows as a distinct category. Their unique power to shape container structures from within the function itself provides a key insight into understanding Monads, which we’ll explore next.\u003C/p>",{"headings":1185,"localImagePaths":1189,"remoteImagePaths":1190,"frontmatter":1191,"imagePaths":1192},[1186],{"depth":182,"slug":1187,"text":1188},"a-peculiar-kind-of-function","A Peculiar Kind of Function",[],[],{"title":1174,"description":1175},[],"en/book/unit-2/section-4/0-set-theory",{"id":1193,"data":1195,"body":1201,"filePath":1202,"digest":1203,"rendered":1204},{"title":1196,"description":1197,"editUrl":16,"head":1198,"template":18,"sidebar":1199,"pagefind":16,"draft":20},"Set Theory and Types: A Deeper Look","Building on our introduction to types and sets from Section 1, let's explore how  set theory  provides the foundation for understanding not just types, but also the algebraic structures we've been studying.",[],{"hidden":20,"attrs":1200},{},"Building on our introduction to types and sets from Section 1, let's explore how  **set theory**  provides the foundation for understanding not just types, but also the algebraic structures we've been studying.\n\n## Set Theory and Functions: The Origins\n\nSet theory provides more than just a way to group elements - it gives us the concept of **mappings** between sets. In fact, functions in programming are direct implementations of set-theoretical mappings:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// A mapping from integers to booleans\nlet isPositive x = x > 0    // Maps ℤ → {true, false}\n\n// A mapping from one set to another\nlet toString x = x.ToString() // Maps any type → string\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png)\n\nIn this diagram,\n\n-  **Set X**  is the input  **Type: X**  \n-  **Set Y**  is the output  **Type: Y**\n\nThis connection between sets and functions is fundamental - it's the same connection we saw in Section 1 between types and functions in our pipelines.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745553771606.png)\n\nThe lambda calculus, which forms the theoretical foundation of functional programming, was originally developed as a formal system for studying these mappings in set theory:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// Mathematical λx.x becomes:\nlet id = fun x -> x\n\n// Mathematical λx.λy.x + y becomes:\nlet add = fun x -> fun y -> x + y\n```\n\n## Set Theory: Bottom-Up Understanding\n\nSet theory builds our understanding from the ground up:\n\n1. First, we have elements - the basic building blocks\n   ```fsharp\n   // Elements can be anything:\n   let x = 42        // A number\n   let s = \"hello\"   // A string\n   let b = true      // A boolean\n   ```\n\n2. These elements form sets:\n   ```fsharp\n   // Sets are collections:\n   type Numbers = int        // The set of all integers\n   type Strings = string    // The set of all possible strings\n   type Booleans = bool     // The set {true, false}\n   ```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564518303.png)\n\n3. Sets themselves can be elements of other sets:   ```fsharp   // A set containing other sets   type SetOfSets = List\u003Cint>  // e.g., [1; 2; 3]   ```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564670846.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564700292.png)\n\nThis approach mirrors how we naturally understand collections in the real world. Consider a library organization:\n\n```fsharp\ntype Book = { title: string; isbn: string }\ntype Shelf = List\u003CBook>           // A set of books\ntype Section = List\u003CShelf>        // A set of shelves\ntype Library = List\u003CSection>      // A set of sections\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745541695708.png)\n\n## The Relative Nature of Sets and Elements\n\nA crucial insight from set theory is that sets and elements are relative concepts. In our library example:\n\n1. A book is an element in a shelf\n2. That shelf is an element in a section\n3. That section is an element in the library\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThis relativity is fundamental:\n\n- Elements can be sets themselves\n- Sets can be elements of larger sets\n- There's no absolute distinction between \"elements\" and \"sets\"\n\nThis mirrors how types work in programming:\n\n- Values are elements of types\n- Types can be elements of higher types\n- The distinction is relative, not absolute\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Types of Types: A Natural Progression\n\nThis relative nature of sets leads naturally to increasingly sophisticated type systems:\n\n1. Simple Types (Basic Sets):\n   ```fsharp\n   let n: int = 42              // int is a set of integers\n   let b: bool = true           // bool is a set of two values\n   ```\n\n2. Container Types (Sets of Sets):\n   ```fsharp\n   let numbers: List\u003Cint> = [1; 2; 3]      // A set of integers\n   let pairs: List\u003Cint * int> = [(1, 2)]   // A set of integer pairs\n   ```\n\n3. Type Constructors (Functions between Sets):\n   ```fsharp\n   type List\u003C'T>    // Takes any set and makes a new set\n   type Option\u003C'T>  // Takes any set and adds a \"none\" element\n   ```\n\n## Values as Singleton Sets: Breaking Down Barriers\n\nAn interesting perspective from set theory is that individual values can be viewed as singleton sets:\n\n```fsharp\n// These three concepts are closely related:\ntype One = 1             // A type with exactly one value\nlet one = 1              // A value\ntype DiceFace = 1 | 2 | 3 | 4 | 5 | 6  // A type with exactly 6 values\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564856679.png)\n\nThis reveals something profound:\n\n- Every value can be seen as a type (a singleton set)\n- Every type is a set of values\n- The distinction between types and values is not absolute\n\n## The Limitations of Simple Type Systems\n\nNow that we understand the relative nature of types and values, let's look at some limitations of current type systems. In F#, we can't directly express certain sets that seem natural:\n\n```fsharp\n// We cannot express these directly in F#:\ntype PositiveInt     // The set of positive integers\ntype ByteRange       // The set of integers from 0 to 255\ntype EvenNumber      // The set of even numbers\n```\n\nWhy not? Because these types need to check properties of values:\n\n- Is this number positive?\n- Is this number within a range?\n- Does this number satisfy a mathematical property?\n\nCurrent type systems maintain a strict separation between compile-time types and runtime values.\n\n## Dependent Types: The Natural Evolution\n\nThis is where dependent types come in, allowing types to depend on values:\n\n```fsharp\n// Hypothetical dependent type syntax (not valid F#)\ntype PositiveInt = n: int where n > 0\ntype ByteRange = n: int where 0 \u003C= n && n \u003C= 255\ntype EvenNumber = n: int where n % 2 = 0\n```\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThis evolution follows naturally from set theory:\n\n1. Simple types (fixed sets like int, bool)\n2. Generic types (functions from sets to sets, like List\u003CT>)\n3. Dependent types (sets defined by predicates on values)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Looking Forward: Impact on Programming\n\nOur journey through set theory reveals that:\n\n1. Types and values are not fundamentally different\n2. They are relative concepts, just like sets and elements\n3. More powerful type systems embrace this reality\n\nThis understanding helps us:\n\n- Appreciate why current type systems have certain limitations\n- See how algebraic structures arise naturally from these concepts\n- Understand where programming language design is heading\n\nIn practice, this means:\n\n- Better type safety through more precise types\n- Fewer runtime checks needed as types become more expressive\n- More mathematical guarantees about our code's behavior\n\nThe key insight is that the seemingly rigid barrier between types and values is artificial - it's a simplification that makes programming easier to understand and implement, but not a fundamental truth about computation or mathematics.","src/content/docs/en/book/unit-2/section-4/0-set-theory.md","b178081bed3e4803",{"html":1205,"metadata":1206},"\u003Cp>Building on our introduction to types and sets from Section 1, let’s explore how  \u003Cstrong>set theory\u003C/strong>  provides the foundation for understanding not just types, but also the algebraic structures we’ve been studying.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"set-theory-and-functions-the-origins\">Set Theory and Functions: The Origins\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#set-theory-and-functions-the-origins\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Set Theory and Functions: The Origins”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Set theory provides more than just a way to group elements - it gives us the concept of \u003Cstrong>mappings\u003C/strong> between sets. In fact, functions in programming are direct implementations of set-theoretical mappings:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A mapping from integers to booleans\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isPositive\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Maps ℤ → {true, false}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A mapping from one set to another\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">toString\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x.ToString\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Maps any type → string\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// A mapping from integers to booleanslet isPositive x = x > 0    // Maps ℤ → {true, false}// A mapping from one set to anotherlet toString x = x.ToString() // Maps any type → string\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png\" alt=\"image\">\u003C/p>\n\u003Cp>In this diagram,\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Set X\u003C/strong>  is the input  \u003Cstrong>Type: X\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Set Y\u003C/strong>  is the output  \u003Cstrong>Type: Y\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cp>This connection between sets and functions is fundamental - it’s the same connection we saw in Section 1 between types and functions in our pipelines.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745553771606.png\" alt=\"image\">\u003C/p>\n\u003Cp>The lambda calculus, which forms the theoretical foundation of functional programming, was originally developed as a formal system for studying these mappings in set theory:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Mathematical λx.x becomes:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">id\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Mathematical λx.λy.x + y becomes:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">add\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Mathematical λx.x becomes:let id = fun x -> x// Mathematical λx.λy.x + y becomes:let add = fun x -> fun y -> x + y\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"set-theory-bottom-up-understanding\">Set Theory: Bottom-Up Understanding\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#set-theory-bottom-up-understanding\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Set Theory: Bottom-Up Understanding”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Set theory builds our understanding from the ground up:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>First, we have elements - the basic building blocks\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Elements can be anything:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">x\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">42\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">s\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">b\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">      \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A boolean\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Elements can be anything:let x = 42        // A numberlet s = &#x22;hello&#x22;   // A stringlet b = true      // A boolean\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>These elements form sets:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Sets are collections:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Numbers \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of all integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Strings \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of all possible strings\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Booleans \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set {true, false}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Sets are collections:type Numbers = int        // The set of all integerstype Strings = string    // The set of all possible stringstype Booleans = bool     // The set {true, false}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564518303.png\" alt=\"image\">\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>Sets themselves can be elements of other sets:   \u003Ccode dir=\"auto\">fsharp   // A set containing other sets   type SetOfSets = List&#x3C;int>  // e.g., [1; 2; 3]   \u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564670846.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564700292.png\" alt=\"image\">\u003C/p>\n\u003Cp>This approach mirrors how we naturally understand collections in the real world. Consider a library organization:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Book \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> title\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isbn\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Shelf \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Book\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">           \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A set of books\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Section \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Shelf\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A set of shelves\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Library \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Section\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">      \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A set of sections\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"type Book = { title: string; isbn: string }type Shelf = List\u003CBook>           // A set of bookstype Section = List\u003CShelf>        // A set of shelvestype Library = List\u003CSection>      // A set of sections\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745541695708.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-relative-nature-of-sets-and-elements\">The Relative Nature of Sets and Elements\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-relative-nature-of-sets-and-elements\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Relative Nature of Sets and Elements”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A crucial insight from set theory is that sets and elements are relative concepts. In our library example:\u003C/p>\n\u003Col>\n\u003Cli>A book is an element in a shelf\u003C/li>\n\u003Cli>That shelf is an element in a section\u003C/li>\n\u003Cli>That section is an element in the library\u003C/li>\n\u003C/ol>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>This relativity is fundamental:\u003C/p>\n\u003Cul>\n\u003Cli>Elements can be sets themselves\u003C/li>\n\u003Cli>Sets can be elements of larger sets\u003C/li>\n\u003Cli>There’s no absolute distinction between “elements” and “sets”\u003C/li>\n\u003C/ul>\n\u003Cp>This mirrors how types work in programming:\u003C/p>\n\u003Cul>\n\u003Cli>Values are elements of types\u003C/li>\n\u003Cli>Types can be elements of higher types\u003C/li>\n\u003Cli>The distinction is relative, not absolute\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"types-of-types-a-natural-progression\">Types of Types: A Natural Progression\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#types-of-types-a-natural-progression\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Types of Types: A Natural Progression”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This relative nature of sets leads naturally to increasingly sophisticated type systems:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Simple Types (Basic Sets):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">n\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">42\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// int is a set of integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">b\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">           \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// bool is a set of two values\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let n: int = 42              // int is a set of integerslet b: bool = true           // bool is a set of two values\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>Container Types (Sets of Sets):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">numbers\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">      \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A set of integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">pairs\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A set of integer pairs\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let numbers: List\u003Cint> = [1; 2; 3]      // A set of integerslet pairs: List\u003Cint * int> = [(1, 2)]   // A set of integer pairs\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>Type Constructors (Functions between Sets):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'T\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Takes any set and makes a new set\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Option\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'T\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Takes any set and adds a \"none\" element\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"type List\u003C&#x27;T>    // Takes any set and makes a new settype Option\u003C&#x27;T>  // Takes any set and adds a &#x22;none&#x22; element\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"values-as-singleton-sets-breaking-down-barriers\">Values as Singleton Sets: Breaking Down Barriers\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#values-as-singleton-sets-breaking-down-barriers\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Values as Singleton Sets: Breaking Down Barriers”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>An interesting perspective from set theory is that individual values can be viewed as singleton sets:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// These three concepts are closely related:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> One \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">             \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A type with exactly one value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">one\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> DiceFace \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">6\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A type with exactly 6 values\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// These three concepts are closely related:type One = 1             // A type with exactly one valuelet one = 1              // A valuetype DiceFace = 1 | 2 | 3 | 4 | 5 | 6  // A type with exactly 6 values\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745564856679.png\" alt=\"image\">\u003C/p>\n\u003Cp>This reveals something profound:\u003C/p>\n\u003Cul>\n\u003Cli>Every value can be seen as a type (a singleton set)\u003C/li>\n\u003Cli>Every type is a set of values\u003C/li>\n\u003Cli>The distinction between types and values is not absolute\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-limitations-of-simple-type-systems\">The Limitations of Simple Type Systems\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-limitations-of-simple-type-systems\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The Limitations of Simple Type Systems”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now that we understand the relative nature of types and values, let’s look at some limitations of current type systems. In F#, we can’t directly express certain sets that seem natural:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We cannot express these directly in F#:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> PositiveInt     \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of positive integers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ByteRange       \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of integers from 0 to 255\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> EvenNumber      \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The set of even numbers\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// We cannot express these directly in F#:type PositiveInt     // The set of positive integerstype ByteRange       // The set of integers from 0 to 255type EvenNumber      // The set of even numbers\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Why not? Because these types need to check properties of values:\u003C/p>\n\u003Cul>\n\u003Cli>Is this number positive?\u003C/li>\n\u003Cli>Is this number within a range?\u003C/li>\n\u003Cli>Does this number satisfy a mathematical property?\u003C/li>\n\u003C/ul>\n\u003Cp>Current type systems maintain a strict separation between compile-time types and runtime values.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"dependent-types-the-natural-evolution\">Dependent Types: The Natural Evolution\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#dependent-types-the-natural-evolution\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Dependent Types: The Natural Evolution”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This is where dependent types come in, allowing types to depend on values:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Hypothetical dependent type syntax (not valid F#)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> PositiveInt \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int where n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ByteRange \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int where \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">255\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> EvenNumber \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> n\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int where n \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Hypothetical dependent type syntax (not valid F#)type PositiveInt = n: int where n > 0type ByteRange = n: int where 0 \u003C= n &#x26;&#x26; n \u003C= 255type EvenNumber = n: int where n % 2 = 0\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>This evolution follows naturally from set theory:\u003C/p>\n\u003Col>\n\u003Cli>Simple types (fixed sets like int, bool)\u003C/li>\n\u003Cli>Generic types (functions from sets to sets, like List\u003Ct>)\u003C/t>\u003C/li>\n\u003Cli>Dependent types (sets defined by predicates on values)\u003C/li>\n\u003C/ol>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"looking-forward-impact-on-programming\">Looking Forward: Impact on Programming\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#looking-forward-impact-on-programming\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Looking Forward: Impact on Programming”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our journey through set theory reveals that:\u003C/p>\n\u003Col>\n\u003Cli>Types and values are not fundamentally different\u003C/li>\n\u003Cli>They are relative concepts, just like sets and elements\u003C/li>\n\u003Cli>More powerful type systems embrace this reality\u003C/li>\n\u003C/ol>\n\u003Cp>This understanding helps us:\u003C/p>\n\u003Cul>\n\u003Cli>Appreciate why current type systems have certain limitations\u003C/li>\n\u003Cli>See how algebraic structures arise naturally from these concepts\u003C/li>\n\u003Cli>Understand where programming language design is heading\u003C/li>\n\u003C/ul>\n\u003Cp>In practice, this means:\u003C/p>\n\u003Cul>\n\u003Cli>Better type safety through more precise types\u003C/li>\n\u003Cli>Fewer runtime checks needed as types become more expressive\u003C/li>\n\u003Cli>More mathematical guarantees about our code’s behavior\u003C/li>\n\u003C/ul>\n\u003Cp>The key insight is that the seemingly rigid barrier between types and values is artificial - it’s a simplification that makes programming easier to understand and implement, but not a fundamental truth about computation or mathematics.\u003C/p>",{"headings":1207,"localImagePaths":1232,"remoteImagePaths":1233,"frontmatter":1234,"imagePaths":1235},[1208,1211,1214,1217,1220,1223,1226,1229],{"depth":182,"slug":1209,"text":1210},"set-theory-and-functions-the-origins","Set Theory and Functions: The Origins",{"depth":182,"slug":1212,"text":1213},"set-theory-bottom-up-understanding","Set Theory: Bottom-Up Understanding",{"depth":182,"slug":1215,"text":1216},"the-relative-nature-of-sets-and-elements","The Relative Nature of Sets and Elements",{"depth":182,"slug":1218,"text":1219},"types-of-types-a-natural-progression","Types of Types: A Natural Progression",{"depth":182,"slug":1221,"text":1222},"values-as-singleton-sets-breaking-down-barriers","Values as Singleton Sets: Breaking Down Barriers",{"depth":182,"slug":1224,"text":1225},"the-limitations-of-simple-type-systems","The Limitations of Simple Type Systems",{"depth":182,"slug":1227,"text":1228},"dependent-types-the-natural-evolution","Dependent Types: The Natural Evolution",{"depth":182,"slug":1230,"text":1231},"looking-forward-impact-on-programming","Looking Forward: Impact on Programming",[],[],{"title":1196,"description":1197},[],"en/book/unit-5/section-0/0-about-unit",{"id":1236,"data":1238,"body":1244,"filePath":1245,"digest":1246,"rendered":1247},{"title":1239,"description":1240,"editUrl":16,"head":1241,"template":18,"sidebar":1242,"pagefind":16,"draft":20},"🔍 Overview - Unit 5","In Unit 4, we established Timeline\u003C'a> as our core abstraction for managing time-varying values. Through foundational operations like TL.map and TL.bind, we explored how Timeline enables powerful transformations, integrates I/O operations, and facilitates automatic resource management, all grounded in the Block Universe model and the internal DependencyCore. This provided a robust way to handle individual reactive data streams and their sequential dependencies.",[],{"hidden":20,"attrs":1243},{},"In Unit 4, we established `Timeline\u003C'a>` as our core abstraction for managing time-varying values. Through foundational operations like `TL.map` and `TL.bind`, we explored how `Timeline` enables powerful transformations, integrates I/O operations, and facilitates automatic resource management, all grounded in the Block Universe model and the internal `DependencyCore`. This provided a robust way to handle individual reactive data streams and their sequential dependencies.\n\nThe natural next step is to address how we can weave multiple independent `Timeline` instances together to construct more sophisticated and responsive reactive systems. This section of Unit 5, \"Building Blocks for Combining Timelines,\" is dedicated to this challenge. We will explore a range of principled and practical combinators and patterns designed specifically for merging, logically combining, and aggregating information from several timelines. A key focus will be on leveraging algebraic principles, particularly those **of** Monoids, to ensure these combinations are robust, predictable, and maintainable.","src/content/docs/en/book/unit-5/section-0/0-about-unit.md","ace57720e0004c91",{"html":1248,"metadata":1249},"\u003Cp>In Unit 4, we established \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> as our core abstraction for managing time-varying values. Through foundational operations like \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code>, we explored how \u003Ccode dir=\"auto\">Timeline\u003C/code> enables powerful transformations, integrates I/O operations, and facilitates automatic resource management, all grounded in the Block Universe model and the internal \u003Ccode dir=\"auto\">DependencyCore\u003C/code>. This provided a robust way to handle individual reactive data streams and their sequential dependencies.\u003C/p>\n\u003Cp>The natural next step is to address how we can weave multiple independent \u003Ccode dir=\"auto\">Timeline\u003C/code> instances together to construct more sophisticated and responsive reactive systems. This section of Unit 5, “Building Blocks for Combining Timelines,” is dedicated to this challenge. We will explore a range of principled and practical combinators and patterns designed specifically for merging, logically combining, and aggregating information from several timelines. A key focus will be on leveraging algebraic principles, particularly those \u003Cstrong>of\u003C/strong> Monoids, to ensure these combinations are robust, predictable, and maintainable.\u003C/p>",{"headings":1250,"localImagePaths":1251,"remoteImagePaths":1252,"frontmatter":1253,"imagePaths":1254},[],[],[],{"title":1239,"description":1240},[],"en/book/unit-2/section-4/2-functor",{"id":1255,"data":1257,"body":1263,"filePath":1264,"digest":1265,"rendered":1266},{"title":1258,"description":1259,"editUrl":16,"head":1260,"template":18,"sidebar":1261,"pagefind":16,"draft":20},"Functor: Mapping between Functions","After exploring  Monoids  as our first algebraic structure, we now turn to another fundamental concept in functional programming: the  Functor .",[],{"hidden":20,"attrs":1262},{},"After exploring  **Monoids**  as our first algebraic structure, we now turn to another fundamental concept in functional programming: the  **Functor** .\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nThe term  **\"Functor\"**  originates from  **category theory** , a fascinating branch of mathematics that deals with abstract structures and their relationships. While a complete treatment of category theory would be beyond the scope of this introductory book, we will cover it in detail in a companion volume dedicated to the mathematical foundations of functional programming.\n\nCategory theory is indeed a rich and profound field that deserves its own focused treatment. However, mixing its full theoretical depth with our practical introduction to functional programming could potentially overwhelm learners regarding both topics. For now, we'll focus on just the aspects of Functors that are directly relevant to everyday functional programming.\n\nWithin the scope of functional programming, we've been dealing exclusively with functions and their theoretical foundation in  **set theory** . Category theory's notion of categories is highly abstract, but when we restrict ourselves to set theory (working in what mathematicians call the  **\"category of sets\"** ), things become much more concrete and straightforward.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Functor in Functional Programming\n\nNote that this title does not imply that the meaning or concept of Functor differs between functional programming and category theory. Rather, as mentioned in the opening note, we are simply focusing on Functors within the scope of set theory, which forms the foundation of functional programming, rather than dealing with the full breadth of category theory.\n\nLet's recall our discussion from \"Set Theory and Types: A Deeper Look\". We saw this fundamental diagram of mapping:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png)\n\nThis represents a general mapping where Set X (Domain) is mapped to Set Y (Codomain) by a function f.\n\nMost importantly, we're already very familiar with the idea that functions themselves are values in functional programming.\n\n**In this context, a Functor is essentially this same kind of mapping, but where both Set X and Set Y are sets of functions.**\n\nFor clarity, let's call these sets of functions Set F and Set G:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png)\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\n**Here**, we introduced the concept of a Functor using an analogy based on familiar ideas of mapping as shown in the diagram. We extended the idea of mapping values between sets to mapping functions between sets of functions to build an initial intuition.\n\nIt's important to understand that this initial explanation was designed primarily to help grasp the **core intuitive idea** behind Functors – the concept of transforming content while preserving structure.\n\nHowever, as our more detailed discussions will reveal later, this analogy alone is insufficient for a **rigorous definition** of a Functor. To define Functors precisely, we need to introduce the **Functor Laws** (Identity and Composition), which are specific rules that these operations must satisfy.\n\nPlease rest assured, we will delve into the **strict definition** of a Functor, detailing the **Functor Laws** and their significance, in a **later chapter**. Consider this initial introduction as a stepping stone towards that deeper and more formal understanding.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Basic Higher-Order Function (HOF) Pattern 3\n\nThis concept precisely corresponds to Basic Higher-Order Function (HOF) Pattern 3.\n\n3.  **`Function |> Function = Function`**\n\nTakes and Returns a Function as input and also returns a function as output.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695992437.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696911713.png)\n\n## Mapper function of Container Type\n\nType expression `'a -> 'b` using generic type parameters represents any possible function - it's the most general form of function type that maps from any type `'a` to any type `'b`.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569083188.png)\n\nFor visual clarity, we can represent these generic type parameters using shapes - a circle for any input type and a square for any output type:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662322608.png)\n\nIn this context, a typical scenario is when we already have a well-understood function and want to maintain its exact relationship when working with container types. For example, consider the simple `double` function that we know very well:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet double = fun a -> a * 2  // Takes a number, returns twice that number\n```\n\nWhen working with a list container like `[1; 2; 3]`, we often want to preserve this same doubling relationship. If `double` maps 1 to 2, we want a **mapper function** (= g) that can transform the entire list `[1; 2; 3]` to `[2; 4; 6]`, maintaining the same doubling relationship for each element in the container.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png)\n\nWith List as a container type, we can express `List\u003C'a> -> List\u003C'b>`.\n\n## The map Function: A Bridge Between Worlds\n\nTo obtain this mapper function g, what we need is a special function called `map` that can transform our well-known function f into g:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png)\n\nAnd here's where things get fascinating - this `map` function is exactly what we saw earlier as a mapping between sets of functions:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png)\n\nIt's the same HOF Pattern 3 we discussed, where a function transforms another function while preserving its fundamental relationships:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696911713.png)\n\nAs we confirmed in the first half of this chapter, this is precisely what a Functor is - a mapping between sets of functions that preserves their relationships. In other words, this `map` function that transforms our familiar function f into a container mapper function g is itself a Functor.\n\nThis `map` function is the key that bridges the world of simple functions with the world of container types, while maintaining the essential relationships we care about. And this is precisely what makes a Functor so powerful.\n\n## List.map: A Practical Example of Functor\n\nLet's look at a concrete example using List.map, one of the most common implementations of Functor in functional programming:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// A simple function operating on a single value\nlet double = fun a -> a * 2  // Takes a number, returns twice that number\n\n// obtain the list mapper function from double using List.map\nlet listMapper = List.map double\n\n// Use listMapper function to a list: [1; 2; 3]\nlet doubles = [1; 2; 3] |> listMapper // [2; 4; 6]\n```\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745672195263.png)\n\nHere, the IDE's type annotations reveal exactly how List.map as a Functor transforms our function types:\n\n1. `double` has type `int -> int` - a function that maps an integer to another integer\n2. When we apply `List.map` to `double`, we get `listMapper` of type `list\u003Cint> -> list\u003Cint>` - a function that maps a list of integers to another list of integers\n3. The type transformation preserves the structure: what was `int` becomes `list\u003Cint>`, but the fundamental mapping relationship is maintained\n\nHere, `List.map` is actually transforming our `double` function into `listMapper` function:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674924332.png)\n\nThis is exactly what our abstract definition was describing -  `List.map`  as a Functor lifts our simple `double` function into the world of containers while preserving its essential behavior of doubling each value.\n\n## Type of List Functor\n\nLet's see how our concrete example fits into the HOF pipeline pattern:\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745697186870.png)\n\nThis is exactly our pipeline pattern - a function goes in, and a new function comes out. In this case, our `double` function of type `int -> int` goes into `List.map` and comes out as `listMapper` of type `list\u003Cint> -> list\u003Cint>`.\n\nAnd here's the beauty of F#'s type system - while we've been working with a simple `int -> int` function, the IDE reveals that List.map's actual implementation is much more general:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674327527.png)\n\nThis type signature shows that List.map can work with any function from `'a` to `'b`, not just our specific `int -> int` example. It will always produce a function that operates on `list\u003C'a>` and returns `list\u003C'b>`, preserving the relationship between types.\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745701569925.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745700885120.png)\n\nWe've seen how Functors, while originating from category theory, can be understood quite practically in functional programming as a way to transform functions while preserving their composability. Through the example of List.map, we've seen how this abstract concept translates into useful programming patterns.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\nComparing the implementation of List Functor in F# and JavaScript/TypeScript highlights the differences in programming paradigms and type systems.\n\nThe implementation of List.map Functor is originally a two-step process:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\n// 1. Pass double to List.map to generate listMapper function\nlet listMapper = List.map double\n\n// 2. Apply the generated listMapper function to [1; 2; 3]\nlet doubles = [1; 2; 3] |> listMapper // [2; 4; 6]\n```\n\nIn F#, this process can be written directly in one line using the pipeline operator:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n```fsharp\nlet doubles = [1; 2; 3] |> List.map double // [2; 4; 6]\n```\n\nInterestingly, this pipeline syntax leads to a visual structure that looks remarkably similar to what JavaScript programmers are familiar with. Let's look at the JavaScript code:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\n```js\nconst double = a => a * 2;\nconst doubles = [1, 2, 3].map(double); // [2, 4, 6]\n```\n\nNotice how similar these two lines appear? Both flow from left to right, both transform a list using a function named 'map'. However, this superficial similarity actually highlights a fundamental difference between functional programming and object-oriented programming approaches.\n\nIn our functional approach with F#, as we've seen throughout this chapter, we use List.map as a Functor to create a listMapper function - this aligns perfectly with our pipeline principle of building transformations using functions as building blocks. The data and the functions that process it are kept separate, allowing for clear composition of transformations.\n\nIn contrast, the JavaScript OOP approach embeds the map method directly into Array objects. From a pipeline perspective, this means the transformation function (map) is embedded within the very data it's supposed to transform. This breaks our straightforward pipeline model where data flows through independent transformation functions.\n\n![Pipeline image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png)\n\nConsider our basic pipeline principle:\n\n1. Data flows through the pipeline\n2. Functions transform the data at each step\n3. Functions and data are separate entities\n\nThe OOP approach violates this clean separation by putting methods inside the data structures themselves. It's as if we're trying to build a pipeline, but the pipes come pre-built with certain transformations embedded in them. This makes it harder to think about and compose transformations independently of the data they operate on.\n\nThis fundamental difference in design philosophy - keeping functions and data separate (FP) versus embedding methods in objects (OOP) - becomes particularly apparent when we consider how these approaches scale to more complex transformations.\n\nMoving to a different but related topic - the representation of types - we can see another significant difference between these languages when we look at TypeScript code:\n\nFurthermore, the difference in type systems becomes more pronounced in TypeScript code:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg\">\n\n```ts\nconst double = (a: number): number => a * 2;\n// Directly apply the map method to the array literal [1, 2, 3]\n// TypeScript infers the type of [1, 2, 3] as number[]\n// and the type of 'doubles' as number[] based on the return type of 'double'.\n// We add an explicit type annotation for clarity.\nconst doubles: number[] = [1, 2, 3].map(double); // [2, 4, 6]\n```\n\nTypeScript, a language that adds types to JavaScript, indeed has type inference capabilities, but often programmers need to explicitly write type annotations in the code (or with the help of AI). This enhances code readability but also increases code verbosity.\n\nOn the other hand, F#'s type system is more sophisticated:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745703328307.png)\n\nAs shown in this image, in F#, there is no need to explicitly write type annotations. The compiler accurately infers the types and displays that information to the developer through the IDE. The type information that needs to be explicitly written in TypeScript is automatically provided in F#, while keeping the code clean. This is the benefit of the powerful type inference system characteristic of the ML family of languages.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\n## Summary\n\nThe key insights are:\n\n- A Functor is a way to lift functions to work with containerized values\n- It preserves the structure and composition of the original functions\n- List is one of the most common and practical examples\n\nThis understanding of Functors sets us up for our next topic: Monads, which build upon these ideas to handle more complex computational contexts.","src/content/docs/en/book/unit-2/section-4/2-functor.md","ab881817788e5889",{"html":1267,"metadata":1268},"\u003Cp>After exploring  \u003Cstrong>Monoids\u003C/strong>  as our first algebraic structure, we now turn to another fundamental concept in functional programming: the  \u003Cstrong>Functor\u003C/strong> .\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>The term  \u003Cstrong>“Functor”\u003C/strong>  originates from  \u003Cstrong>category theory\u003C/strong> , a fascinating branch of mathematics that deals with abstract structures and their relationships. While a complete treatment of category theory would be beyond the scope of this introductory book, we will cover it in detail in a companion volume dedicated to the mathematical foundations of functional programming.\u003C/p>\n\u003Cp>Category theory is indeed a rich and profound field that deserves its own focused treatment. However, mixing its full theoretical depth with our practical introduction to functional programming could potentially overwhelm learners regarding both topics. For now, we’ll focus on just the aspects of Functors that are directly relevant to everyday functional programming.\u003C/p>\n\u003Cp>Within the scope of functional programming, we’ve been dealing exclusively with functions and their theoretical foundation in  \u003Cstrong>set theory\u003C/strong> . Category theory’s notion of categories is highly abstract, but when we restrict ourselves to set theory (working in what mathematicians call the  \u003Cstrong>“category of sets”\u003C/strong> ), things become much more concrete and straightforward.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"functor-in-functional-programming\">Functor in Functional Programming\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#functor-in-functional-programming\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Functor in Functional Programming”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Note that this title does not imply that the meaning or concept of Functor differs between functional programming and category theory. Rather, as mentioned in the opening note, we are simply focusing on Functors within the scope of set theory, which forms the foundation of functional programming, rather than dealing with the full breadth of category theory.\u003C/p>\n\u003Cp>Let’s recall our discussion from “Set Theory and Types: A Deeper Look”. We saw this fundamental diagram of mapping:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577833678.png\" alt=\"image\">\u003C/p>\n\u003Cp>This represents a general mapping where Set X (Domain) is mapped to Set Y (Codomain) by a function f.\u003C/p>\n\u003Cp>Most importantly, we’re already very familiar with the idea that functions themselves are values in functional programming.\u003C/p>\n\u003Cp>\u003Cstrong>In this context, a Functor is essentially this same kind of mapping, but where both Set X and Set Y are sets of functions.\u003C/strong>\u003C/p>\n\u003Cp>For clarity, let’s call these sets of functions Set F and Set G:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png\" alt=\"image\">\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>\u003Cstrong>Here\u003C/strong>, we introduced the concept of a Functor using an analogy based on familiar ideas of mapping as shown in the diagram. We extended the idea of mapping values between sets to mapping functions between sets of functions to build an initial intuition.\u003C/p>\n\u003Cp>It’s important to understand that this initial explanation was designed primarily to help grasp the \u003Cstrong>core intuitive idea\u003C/strong> behind Functors – the concept of transforming content while preserving structure.\u003C/p>\n\u003Cp>However, as our more detailed discussions will reveal later, this analogy alone is insufficient for a \u003Cstrong>rigorous definition\u003C/strong> of a Functor. To define Functors precisely, we need to introduce the \u003Cstrong>Functor Laws\u003C/strong> (Identity and Composition), which are specific rules that these operations must satisfy.\u003C/p>\n\u003Cp>Please rest assured, we will delve into the \u003Cstrong>strict definition\u003C/strong> of a Functor, detailing the \u003Cstrong>Functor Laws\u003C/strong> and their significance, in a \u003Cstrong>later chapter\u003C/strong>. Consider this initial introduction as a stepping stone towards that deeper and more formal understanding.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"basic-higher-order-function-hof-pattern-3\">Basic Higher-Order Function (HOF) Pattern 3\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#basic-higher-order-function-hof-pattern-3\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Basic Higher-Order Function (HOF) Pattern 3”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This concept precisely corresponds to Basic Higher-Order Function (HOF) Pattern 3.\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Function |> Function = Function\u003C/code>\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>Takes and Returns a Function as input and also returns a function as output.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745695992437.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696911713.png\" alt=\"image\">\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"mapper-function-of-container-type\">Mapper function of Container Type\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#mapper-function-of-container-type\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Mapper function of Container Type”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Type expression \u003Ccode dir=\"auto\">'a -> 'b\u003C/code> using generic type parameters represents any possible function - it’s the most general form of function type that maps from any type \u003Ccode dir=\"auto\">'a\u003C/code> to any type \u003Ccode dir=\"auto\">'b\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745569083188.png\" alt=\"image\">\u003C/p>\n\u003Cp>For visual clarity, we can represent these generic type parameters using shapes - a circle for any input type and a square for any output type:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662322608.png\" alt=\"image\">\u003C/p>\n\u003Cp>In this context, a typical scenario is when we already have a well-understood function and want to maintain its exact relationship when working with container types. For example, consider the simple \u003Ccode dir=\"auto\">double\u003C/code> function that we know very well:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Takes a number, returns twice that number\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let double = fun a -> a * 2  // Takes a number, returns twice that number\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>When working with a list container like \u003Ccode dir=\"auto\">[1; 2; 3]\u003C/code>, we often want to preserve this same doubling relationship. If \u003Ccode dir=\"auto\">double\u003C/code> maps 1 to 2, we want a \u003Cstrong>mapper function\u003C/strong> (= g) that can transform the entire list \u003Ccode dir=\"auto\">[1; 2; 3]\u003C/code> to \u003Ccode dir=\"auto\">[2; 4; 6]\u003C/code>, maintaining the same doubling relationship for each element in the container.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662130518.png\" alt=\"image\">\u003C/p>\n\u003Cp>With List as a container type, we can express \u003Ccode dir=\"auto\">List&#x3C;'a> -> List&#x3C;'b>\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"the-map-function-a-bridge-between-worlds\">The map Function: A Bridge Between Worlds\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#the-map-function-a-bridge-between-worlds\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “The map Function: A Bridge Between Worlds”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To obtain this mapper function g, what we need is a special function called \u003Ccode dir=\"auto\">map\u003C/code> that can transform our well-known function f into g:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745662189198.png\" alt=\"image\">\u003C/p>\n\u003Cp>And here’s where things get fascinating - this \u003Ccode dir=\"auto\">map\u003C/code> function is exactly what we saw earlier as a mapping between sets of functions:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745577612988.png\" alt=\"image\">\u003C/p>\n\u003Cp>It’s the same HOF Pattern 3 we discussed, where a function transforms another function while preserving its fundamental relationships:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745696911713.png\" alt=\"image\">\u003C/p>\n\u003Cp>As we confirmed in the first half of this chapter, this is precisely what a Functor is - a mapping between sets of functions that preserves their relationships. In other words, this \u003Ccode dir=\"auto\">map\u003C/code> function that transforms our familiar function f into a container mapper function g is itself a Functor.\u003C/p>\n\u003Cp>This \u003Ccode dir=\"auto\">map\u003C/code> function is the key that bridges the world of simple functions with the world of container types, while maintaining the essential relationships we care about. And this is precisely what makes a Functor so powerful.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"listmap-a-practical-example-of-functor\">List.map: A Practical Example of Functor\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#listmap-a-practical-example-of-functor\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “List.map: A Practical Example of Functor”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s look at a concrete example using List.map, one of the most common implementations of Functor in functional programming:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// A simple function operating on a single value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">  \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Takes a number, returns twice that number\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// obtain the list mapper function from double using List.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">listMapper\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use listMapper function to a list: [1; 2; 3]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubles\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> listMapper \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [2; 4; 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// A simple function operating on a single valuelet double = fun a -> a * 2  // Takes a number, returns twice that number// obtain the list mapper function from double using List.maplet listMapper = List.map double// Use listMapper function to a list: [1; 2; 3]let doubles = [1; 2; 3] |> listMapper // [2; 4; 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745672195263.png\" alt=\"image\">\u003C/p>\n\u003Cp>Here, the IDE’s type annotations reveal exactly how List.map as a Functor transforms our function types:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode dir=\"auto\">double\u003C/code> has type \u003Ccode dir=\"auto\">int -> int\u003C/code> - a function that maps an integer to another integer\u003C/li>\n\u003Cli>When we apply \u003Ccode dir=\"auto\">List.map\u003C/code> to \u003Ccode dir=\"auto\">double\u003C/code>, we get \u003Ccode dir=\"auto\">listMapper\u003C/code> of type \u003Ccode dir=\"auto\">list&#x3C;int> -> list&#x3C;int>\u003C/code> - a function that maps a list of integers to another list of integers\u003C/li>\n\u003Cli>The type transformation preserves the structure: what was \u003Ccode dir=\"auto\">int\u003C/code> becomes \u003Ccode dir=\"auto\">list&#x3C;int>\u003C/code>, but the fundamental mapping relationship is maintained\u003C/li>\n\u003C/ol>\n\u003Cp>Here, \u003Ccode dir=\"auto\">List.map\u003C/code> is actually transforming our \u003Ccode dir=\"auto\">double\u003C/code> function into \u003Ccode dir=\"auto\">listMapper\u003C/code> function:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674924332.png\" alt=\"image\">\u003C/p>\n\u003Cp>This is exactly what our abstract definition was describing -  \u003Ccode dir=\"auto\">List.map\u003C/code>  as a Functor lifts our simple \u003Ccode dir=\"auto\">double\u003C/code> function into the world of containers while preserving its essential behavior of doubling each value.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"type-of-list-functor\">Type of List Functor\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#type-of-list-functor\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Type of List Functor”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s see how our concrete example fits into the HOF pipeline pattern:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745697186870.png\" alt=\"image\">\u003C/p>\n\u003Cp>This is exactly our pipeline pattern - a function goes in, and a new function comes out. In this case, our \u003Ccode dir=\"auto\">double\u003C/code> function of type \u003Ccode dir=\"auto\">int -> int\u003C/code> goes into \u003Ccode dir=\"auto\">List.map\u003C/code> and comes out as \u003Ccode dir=\"auto\">listMapper\u003C/code> of type \u003Ccode dir=\"auto\">list&#x3C;int> -> list&#x3C;int>\u003C/code>.\u003C/p>\n\u003Cp>And here’s the beauty of F#‘s type system - while we’ve been working with a simple \u003Ccode dir=\"auto\">int -> int\u003C/code> function, the IDE reveals that List.map’s actual implementation is much more general:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745674327527.png\" alt=\"image\">\u003C/p>\n\u003Cp>This type signature shows that List.map can work with any function from \u003Ccode dir=\"auto\">'a\u003C/code> to \u003Ccode dir=\"auto\">'b\u003C/code>, not just our specific \u003Ccode dir=\"auto\">int -> int\u003C/code> example. It will always produce a function that operates on \u003Ccode dir=\"auto\">list&#x3C;'a>\u003C/code> and returns \u003Ccode dir=\"auto\">list&#x3C;'b>\u003C/code>, preserving the relationship between types.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745701569925.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745700885120.png\" alt=\"image\">\u003C/p>\n\u003Cp>We’ve seen how Functors, while originating from category theory, can be understood quite practically in functional programming as a way to transform functions while preserving their composability. Through the example of List.map, we’ve seen how this abstract concept translates into useful programming patterns.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\">\n\u003Cp>Comparing the implementation of List Functor in F# and JavaScript/TypeScript highlights the differences in programming paradigms and type systems.\u003C/p>\n\u003Cp>The implementation of List.map Functor is originally a two-step process:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Pass double to List.map to generate listMapper function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">listMapper\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map double\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Apply the generated listMapper function to [1; 2; 3]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubles\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> listMapper \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [2; 4; 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// 1. Pass double to List.map to generate listMapper functionlet listMapper = List.map double// 2. Apply the generated listMapper function to [1; 2; 3]let doubles = [1; 2; 3] |> listMapper // [2; 4; 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In F#, this process can be written directly in one line using the pipeline operator:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubles\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map double \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [2; 4; 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let doubles = [1; 2; 3] |> List.map double // [2; 4; 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Interestingly, this pipeline syntax leads to a visual structure that looks remarkably similar to what JavaScript programmers are familiar with. Let’s look at the JavaScript code:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"js\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> => \u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> * \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">doubles\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> =\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> [\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">, \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">, \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">]\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">map\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D6DEEB\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0\">double\u003C/span>\u003Cspan style=\"--0:#D6DEEB\">); \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [2, 4, 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const double = a => a * 2;const doubles = [1, 2, 3].map(double); // [2, 4, 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Notice how similar these two lines appear? Both flow from left to right, both transform a list using a function named ‘map’. However, this superficial similarity actually highlights a fundamental difference between functional programming and object-oriented programming approaches.\u003C/p>\n\u003Cp>In our functional approach with F#, as we’ve seen throughout this chapter, we use List.map as a Functor to create a listMapper function - this aligns perfectly with our pipeline principle of building transformations using functions as building blocks. The data and the functions that process it are kept separate, allowing for clear composition of transformations.\u003C/p>\n\u003Cp>In contrast, the JavaScript OOP approach embeds the map method directly into Array objects. From a pipeline perspective, this means the transformation function (map) is embedded within the very data it’s supposed to transform. This breaks our straightforward pipeline model where data flows through independent transformation functions.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png\" alt=\"Pipeline image\">\u003C/p>\n\u003Cp>Consider our basic pipeline principle:\u003C/p>\n\u003Col>\n\u003Cli>Data flows through the pipeline\u003C/li>\n\u003Cli>Functions transform the data at each step\u003C/li>\n\u003Cli>Functions and data are separate entities\u003C/li>\n\u003C/ol>\n\u003Cp>The OOP approach violates this clean separation by putting methods inside the data structures themselves. It’s as if we’re trying to build a pipeline, but the pipes come pre-built with certain transformations embedded in them. This makes it harder to think about and compose transformations independently of the data they operate on.\u003C/p>\n\u003Cp>This fundamental difference in design philosophy - keeping functions and data separate (FP) versus embedding methods in objects (OOP) - becomes particularly apparent when we consider how these approaches scale to more complex transformations.\u003C/p>\n\u003Cp>Moving to a different but related topic - the representation of types - we can see another significant difference between these languages when we look at TypeScript code:\u003C/p>\n\u003Cp>Furthermore, the difference in type systems becomes more pronounced in TypeScript code:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"ts\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">double\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> = \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> => \u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> * \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Directly apply the map method to the array literal [1, 2, 3]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TypeScript infers the type of [1, 2, 3] as number[]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// and the type of 'doubles' as number[] based on the return type of 'double'.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We add an explicit type annotation for clarity.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">const \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">doubles\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">number\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">[]\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\"> =\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> [\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">, \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">, \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">]\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">map\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(double); \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [2, 4, 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const double = (a: number): number => a * 2;// Directly apply the map method to the array literal [1, 2, 3]// TypeScript infers the type of [1, 2, 3] as number[]// and the type of &#x27;doubles&#x27; as number[] based on the return type of &#x27;double&#x27;.// We add an explicit type annotation for clarity.const doubles: number[] = [1, 2, 3].map(double); // [2, 4, 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>TypeScript, a language that adds types to JavaScript, indeed has type inference capabilities, but often programmers need to explicitly write type annotations in the code (or with the help of AI). This enhances code readability but also increases code verbosity.\u003C/p>\n\u003Cp>On the other hand, F#‘s type system is more sophisticated:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\">\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745703328307.png\" alt=\"image\">\u003C/p>\n\u003Cp>As shown in this image, in F#, there is no need to explicitly write type annotations. The compiler accurately infers the types and displays that information to the developer through the IDE. The type information that needs to be explicitly written in TypeScript is automatically provided in F#, while keeping the code clean. This is the benefit of the powerful type inference system characteristic of the ML family of languages.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The key insights are:\u003C/p>\n\u003Cul>\n\u003Cli>A Functor is a way to lift functions to work with containerized values\u003C/li>\n\u003Cli>It preserves the structure and composition of the original functions\u003C/li>\n\u003Cli>List is one of the most common and practical examples\u003C/li>\n\u003C/ul>\n\u003Cp>This understanding of Functors sets us up for our next topic: Monads, which build upon these ideas to handle more complex computational contexts.\u003C/p>",{"headings":1269,"localImagePaths":1289,"remoteImagePaths":1290,"frontmatter":1291,"imagePaths":1292},[1270,1273,1276,1279,1282,1285,1288],{"depth":182,"slug":1271,"text":1272},"functor-in-functional-programming","Functor in Functional Programming",{"depth":182,"slug":1274,"text":1275},"basic-higher-order-function-hof-pattern-3","Basic Higher-Order Function (HOF) Pattern 3",{"depth":182,"slug":1277,"text":1278},"mapper-function-of-container-type","Mapper function of Container Type",{"depth":182,"slug":1280,"text":1281},"the-map-function-a-bridge-between-worlds","The map Function: A Bridge Between Worlds",{"depth":182,"slug":1283,"text":1284},"listmap-a-practical-example-of-functor","List.map: A Practical Example of Functor",{"depth":182,"slug":1286,"text":1287},"type-of-list-functor","Type of List Functor",{"depth":182,"slug":408,"text":409},[],[],{"title":1258,"description":1259},[],"en/book/unit-3/section-0/0-about-unit",{"id":1293,"data":1295,"body":1301,"filePath":1302,"digest":1303,"rendered":1304},{"title":1296,"description":1297,"editUrl":16,"head":1298,"template":18,"sidebar":1299,"pagefind":16,"draft":20},"🔍 Overview - Unit 3","In Unit 2, we discovered two powerful bridges between regular functions and container types: Functor and Monad. Through the concrete example of List, we learned how these structures enable us to work with containerized values while preserving the essential behavior of our functions.",[],{"hidden":20,"attrs":1300},{},"In Unit 2, we discovered two powerful bridges between regular functions and container types: Functor and Monad. Through the concrete example of List, we learned how these structures enable us to work with containerized values while preserving the essential behavior of our functions.\n\nNow, in Unit 3, we'll explore how these concepts extend beyond List to other important container types. Starting from our familiar List Functor and List Monad, we'll discover a family of well-known Functors and Monads that form the backbone of functional programming's approach to handling common computational scenarios.","src/content/docs/en/book/unit-3/section-0/0-about-unit.md","c45f8d552137d488",{"html":1305,"metadata":1306},"\u003Cp>In Unit 2, we discovered two powerful bridges between regular functions and container types: Functor and Monad. Through the concrete example of List, we learned how these structures enable us to work with containerized values while preserving the essential behavior of our functions.\u003C/p>\n\u003Cp>Now, in Unit 3, we’ll explore how these concepts extend beyond List to other important container types. Starting from our familiar List Functor and List Monad, we’ll discover a family of well-known Functors and Monads that form the backbone of functional programming’s approach to handling common computational scenarios.\u003C/p>",{"headings":1307,"localImagePaths":1308,"remoteImagePaths":1309,"frontmatter":1310,"imagePaths":1311},[],[],[],{"title":1296,"description":1297},[],"en/book/unit-3/section-1/0-id",{"id":1312,"data":1314,"body":1320,"filePath":1321,"digest":1322,"rendered":1323},{"title":1315,"description":1316,"editUrl":16,"head":1317,"template":18,"sidebar":1318,"pagefind":16,"draft":20},"Section 1: List Functor and Monad","List is one of the most fundamental Functors and Monads. It is a container for handling multiple values, enabling function application and chained computations via map and flatMap (also called bind).",[],{"hidden":20,"attrs":1319},{},"List is one of the most fundamental Functors and Monads. It is a container for handling multiple values, enabling function application and chained computations via `map` and `flatMap` (also called `bind`).\n\n- Functor: You can apply a function to each element of a List (`map`).\n- Monad: You can chain computations by flattening multiple Lists (`flatMap`).\n\nA List can be seen as an ordered version of a Set, reflecting the concept of a collection with order.","src/content/docs/en/book/unit-3/section-1/0-id.md","2bacda5b884419af",{"html":1324,"metadata":1325},"\u003Cp>List is one of the most fundamental Functors and Monads. It is a container for handling multiple values, enabling function application and chained computations via \u003Ccode dir=\"auto\">map\u003C/code> and \u003Ccode dir=\"auto\">flatMap\u003C/code> (also called \u003Ccode dir=\"auto\">bind\u003C/code>).\u003C/p>\n\u003Cul>\n\u003Cli>Functor: You can apply a function to each element of a List (\u003Ccode dir=\"auto\">map\u003C/code>).\u003C/li>\n\u003Cli>Monad: You can chain computations by flattening multiple Lists (\u003Ccode dir=\"auto\">flatMap\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>A List can be seen as an ordered version of a Set, reflecting the concept of a collection with order.\u003C/p>",{"headings":1326,"localImagePaths":1327,"remoteImagePaths":1328,"frontmatter":1329,"imagePaths":1330},[],[],[],{"title":1315,"description":1316},[],"en/book/unit-3/section-2/0-list",{"id":1331,"data":1333,"body":1320,"filePath":1337,"digest":1322,"rendered":1338},{"title":1315,"description":1316,"editUrl":16,"head":1334,"template":18,"sidebar":1335,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1336},{},"src/content/docs/en/book/unit-3/section-2/0-list.md",{"html":1324,"metadata":1339},{"headings":1340,"localImagePaths":1341,"remoteImagePaths":1342,"frontmatter":1343,"imagePaths":1344},[],[],[],{"title":1315,"description":1316},[],"en/book/unit-3/section-2/1-list-functor",{"id":1345,"data":1347,"body":1353,"filePath":1354,"digest":1355,"rendered":1356},{"title":1348,"description":1349,"editUrl":16,"head":1350,"template":18,"sidebar":1351,"pagefind":16,"draft":20},"List Functor","List, as a Functor, provides map to apply a function to each element.",[],{"hidden":20,"attrs":1352},{},"List, as a Functor, provides `map` to apply a function to each element.\n\n## Example in F#\n\n```fsharp\nlet numbers = [1; 2; 3]\nlet doubled = numbers |> List.map (fun x -> x * 2)\n// doubled = [2; 4; 6]\n```\n\nList.map applies the function to each element and returns a new list.","src/content/docs/en/book/unit-3/section-2/1-list-functor.md","62e8f3c9bbb1ae23",{"html":1357,"metadata":1358},"\u003Cp>List, as a Functor, provides \u003Ccode dir=\"auto\">map\u003C/code> to apply a function to each element.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">numbers\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubled\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> numbers \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// doubled = [2; 4; 6]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let numbers = [1; 2; 3]let doubled = numbers |> List.map (fun x -> x * 2)// doubled = [2; 4; 6]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>List.map applies the function to each element and returns a new list.\u003C/p>",{"headings":1359,"localImagePaths":1363,"remoteImagePaths":1364,"frontmatter":1365,"imagePaths":1366},[1360],{"depth":182,"slug":1361,"text":1362},"example-in-f","Example in F#",[],[],{"title":1348,"description":1349},[],"en/book/unit-3/section-2/2-list-monad",{"id":1367,"data":1369,"body":1375,"filePath":1376,"digest":1377,"rendered":1378},{"title":1370,"description":1371,"editUrl":16,"head":1372,"template":18,"sidebar":1373,"pagefind":16,"draft":20},"List Monad","List, as a Monad, provides bind (List.collect in F#).",[],{"hidden":20,"attrs":1374},{},"List, as a Monad, provides `bind` (List.collect in F#).\n\n## Example in F#\n\n```fsharp\nlet numbers = [1; 2; 3]\nlet withNeighbors = numbers |> List.collect (fun x -> [x - 1; x; x + 1])\n// withNeighbors = [0; 1; 2; 1; 2; 3; 2; 3; 4]\n```\n\nList.collect applies a function that returns a list to each element and flattens the result. This is the monadic behavior of List.\n\n---\n\nUnlike Functor's `map`, which always produces a fixed number of elements (one output per input), the Monad's `bind` (collect) allows the monadic function (Kleisli arrow) to determine the structure of the container itself. This means:\n\n- The function can return multiple elements for each input, increasing the total number of elements (as in the example above).\n- The function can return an empty list for some inputs, effectively removing elements from the result (filtering behavior).\n- The function can return a single-element or multi-element list, or even an empty list, for each input, giving full control over the resulting structure.\n\nFor example, you can use `collect` to filter elements, similar to how `flatMap` is used in JavaScript:\n\n```fsharp\nlet getEvenNumbers = List.collect (fun x -> if x % 2 = 0 then [x] else [])\nlet evenNumbers = [1; 2; 3; 4; 5] |> getEvenNumbers\n// evenNumbers = [2; 4]\n```\n\nThis flexibility is a key feature of the Monad interface: the monadic function can both add and remove elements, and even change the shape of the container, not just transform values. This is more powerful than Functor's map, which only transforms values but preserves the container's structure.","src/content/docs/en/book/unit-3/section-2/2-list-monad.md","47d195500c083e76",{"html":1379,"metadata":1380},"\u003Cp>List, as a Monad, provides \u003Ccode dir=\"auto\">bind\u003C/code> (List.collect in F#).\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">numbers\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">withNeighbors\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> numbers \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.collect \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">])\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// withNeighbors = [0; 1; 2; 1; 2; 3; 2; 3; 4]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let numbers = [1; 2; 3]let withNeighbors = numbers |> List.collect (fun x -> [x - 1; x; x + 1])// withNeighbors = [0; 1; 2; 1; 2; 3; 2; 3; 4]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>List.collect applies a function that returns a list to each element and flattens the result. This is the monadic behavior of List.\u003C/p>\n\u003Chr>\n\u003Cp>Unlike Functor’s \u003Ccode dir=\"auto\">map\u003C/code>, which always produces a fixed number of elements (one output per input), the Monad’s \u003Ccode dir=\"auto\">bind\u003C/code> (collect) allows the monadic function (Kleisli arrow) to determine the structure of the container itself. This means:\u003C/p>\n\u003Cul>\n\u003Cli>The function can return multiple elements for each input, increasing the total number of elements (as in the example above).\u003C/li>\n\u003Cli>The function can return an empty list for some inputs, effectively removing elements from the result (filtering behavior).\u003C/li>\n\u003Cli>The function can return a single-element or multi-element list, or even an empty list, for each input, giving full control over the resulting structure.\u003C/li>\n\u003C/ul>\n\u003Cp>For example, you can use \u003Ccode dir=\"auto\">collect\u003C/code> to filter elements, similar to how \u003Ccode dir=\"auto\">flatMap\u003C/code> is used in JavaScript:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">getEvenNumbers\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.collect \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[])\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">evenNumbers\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> getEvenNumbers\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// evenNumbers = [2; 4]\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let getEvenNumbers = List.collect (fun x -> if x % 2 = 0 then [x] else [])let evenNumbers = [1; 2; 3; 4; 5] |> getEvenNumbers// evenNumbers = [2; 4]\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This flexibility is a key feature of the Monad interface: the monadic function can both add and remove elements, and even change the shape of the container, not just transform values. This is more powerful than Functor’s map, which only transforms values but preserves the container’s structure.\u003C/p>",{"headings":1381,"localImagePaths":1383,"remoteImagePaths":1384,"frontmatter":1385,"imagePaths":1386},[1382],{"depth":182,"slug":1361,"text":1362},[],[],{"title":1370,"description":1371},[],"en/book/unit-5/section-1/0-null",{"id":1387,"data":1389,"body":1395,"filePath":1396,"digest":1397,"rendered":1398},{"title":1390,"description":1391,"editUrl":16,"head":1392,"template":18,"sidebar":1393,"pagefind":16,"draft":20},"Chapter 0: Handling Absence: A Foundational Choice (null vs. Option)","Programming is fundamentally about modeling aspects of the world or abstract systems. In virtually any system we model, we encounter situations where a value might be missing, a state might be considered \"empty,\" or an operation might not yield a result. The need to represent this concept of absence is a ubiquitous and crucial requirement for building correct and robust software.",[],{"hidden":20,"attrs":1394},{},"## 0.1 Introduction: The Fundamental Concept of Absence\n\nProgramming is fundamentally about modeling aspects of the world or abstract systems. In virtually any system we model, we encounter situations where a value might be missing, a state might be considered \"empty,\" or an operation might not yield a result. The need to represent this concept of **absence** is a ubiquitous and crucial requirement for building correct and robust software.\n\nConsider these concrete, everyday examples:\n\n-   **The Empty Spreadsheet Cell:** A cell in a spreadsheet grid naturally represents this. It can hold a definite value (a number, text, a formula), or it can be simply empty, signifying the absence of data in that location. This empty state is not an error; it's a fundamental part of the spreadsheet model.\n-   **No Active Text Editor:** In a modern Integrated Development Environment (IDE) like Visual Studio Code, the user might have several files open in editor tabs, or they might have closed all tabs. The state where _no_ text editor is currently active or has focus is a perfectly valid and expected state within the application's lifecycle.\n\nThese examples illustrate that \"absence,\" \"emptiness,\" or \"nullity\" is not merely an exceptional circumstance or an error. It is often a **real, necessary, and legitimate state** within the domain we are modeling. Therefore, how our programming languages and type systems allow us to represent and interact with this state is of foundational importance.\n\n## 0.2 The Mathematical Foundation: `Null` as the Empty Set\n\nThis concept of absence or emptiness is not just a practical quirk of software; it has deep roots in mathematics. The notion often represented by `null` in programming finds a direct and powerful correspondence in fundamental mathematical structures, specifically within **Set Theory**, which forms the basis of how we often conceptualize types in programming.\n\n-   **The Empty Set:** In standard axiomatic set theory (like ZFC), the **empty set** (denoted ∅ or {}) is uniquely defined as the set containing no elements. It is a cornerstone of the theory, allowing for the construction of other sets and mathematical objects. The concept of `Null` can be seen as directly analogous to this empty set – representing the absence of any value within a given type (where a type is viewed as a set of its possible values).\n\nThis connection is profound. It suggests that `Null`, far from being merely a problematic value invented for programming convenience, actually corresponds to a **well-defined, indispensable concept in mathematics** that represents emptiness or non-existence. A type system aiming for mathematical soundness and expressiveness, particularly one grounded in set theory, should, in principle, be able to accommodate this fundamental notion in a natural and consistent way. Our perspective in this book is that types _are_ sets, and we operate within the **Category of Sets (Set)**, where objects are sets and morphisms are functions.\n\n## 0.3 The Historical Complication: `NullPointerException` and the \"Billion-Dollar Mistake\" Narrative\n\nDespite its potentially sound conceptual and mathematical basis, the `null` reference, particularly as implemented in many early object-oriented and imperative languages, gained notoriety for causing frequent and often hard-to-debug runtime errors – the dreaded `NullPointerException` (in Java), `NullReferenceException` (in C#), segmentation faults (in C/C++), etc. These errors typically occurred when the program attempted to access a member (field or method) of a reference variable that held `null` instead of pointing to a valid object.\n\nSir Tony Hoare, a pioneer in programming language design, famously lamented his introduction of the null reference in ALGOL W around 1965, calling it his \"billion-dollar mistake\":\n\n> I call it my billion-dollar mistake. It was the invention of the null reference in 1965... This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\n\nThis powerful narrative took hold, leading to a widespread conviction in many parts of the programming world that the very concept of `null` itself was inherently flawed and dangerous – an evil to be eradicated from programming languages if possible.\n\nHowever, a critical re-evaluation is necessary. Was the fundamental **concept** of representing absence (`Null`, analogous to the Empty Set) the actual mistake? Or was the mistake the **utter lack of adequate language mechanisms – robust type systems capable of distinguishing nullable from non-nullable references, and safe operators for handling potentially null values – to manage this fundamental concept without catastrophic runtime failures?**\n\nThis chapter argues strongly for the latter. The \"billion-dollar mistake\" was perhaps not the existence of `Null`, but the failure of early language designs to provide the **necessary safeguards and tools** to work with it safely. This narrative, we argue, became a potentially misleading \"myth\" that obscured the real problem and discouraged the search for sound ways to integrate the concept of emptiness.\n\n## 0.4 The Hindley-Milner Response: `Option` Types and Their Consequences\n\nIn the face of the dangers posed by unchecked `null` references, the functional programming community, particularly languages rooted in the **Hindley-Milner (HM) type system** (such as ML, Haskell, and influencing early F#), championed a different solution: **eliminating pervasive `null` references** from the language core and representing optionality explicitly within the type system using **`Option` types** (often called `Maybe` in Haskell).\n\nThe `Option\u003CT>` type (or `Maybe T`) is typically defined as an algebraic data type (ADT) – a sum type – with two cases:\n\n-   `Some T` (or `Just T`): Indicates the presence of a value of type `T`.\n-   `None` (or `Nothing`): Indicates the absence of a value.\n\nThe primary advantage of this approach is **compile-time safety enforced by the type system**. Because `Option\u003CT>` is a distinct type from `T`, a programmer cannot accidentally use an `Option\u003CT>` value as if it were definitely a `T`. The type system mandates explicitly handling both the `Some` and `None` cases, usually through pattern matching, thereby preventing null reference errors at compile time. This aligns perfectly with the core goals of HM systems, which prioritize type soundness and leveraging ADTs.\n\nHowever, while solving the immediate problem of null pointer errors within the HM framework, the `Option` type approach introduces its own set of consequences and potential critiques:\n\n-   **Critique 1 (Structural Complexity):** While `Option T` elegantly handles a single level of optionality, nesting them (`Option\u003COption\u003CT>>`, `Option\u003CList\u003COption\u003CT>>>`, etc.) can lead to structures that feel more complex than the simple presence/absence they often represent. Does `Some(Some 0)` or `Some None` truly offer a clearer representation of a spreadsheet cell containing `0` or being empty, compared to a more direct representation of `0` and a distinct `null` state?\n    \n-   **Critique 2 (Philosophical/Historical Validity):** Was the complete elimination of a `Null`-like concept truly the most theoretically sound path, or was it, in part, an overreaction based on the \"Null is evil\" myth? By focusing solely on eliminating `null`, did this approach inadvertently reject or sideline the fundamental mathematical validity of the \"empty\" concept itself (as discussed in Section 0.2)? Its widespread adoption might be viewed critically as a historical trajectory influenced by specific circumstances (HM's constraints, reaction to `null` issues) rather than necessarily representing the universally optimal or most theoretically grounded solution. Its dominance could be compared to the earlier OOP boom – popular and useful, but not without its own complexities and potential drawbacks when viewed from alternative theoretical standpoints.\n    \n-   **Critique 3 (HM Design Philosophy and Constraints):** The prevalence of `Option` in HM-based languages is also deeply intertwined with the technical characteristics and limitations of the HM type system itself, as explored in the following technical note.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"[Annotation Header Image]\">\n\n**Note: Technical & Historical Deep Dive – HM Systems, Null, Option, Union Types, and Beyond**\n\n*(This note delves into the technical and historical reasons behind the preference for `Option`/`Maybe` types in Hindley-Milner (HM) based functional languages. While not essential for understanding the main arguments of this chapter, it provides deeper context for readers interested in type system theory and language design history.)*\n\nThe historical trajectory of Hindley-Milner (HM) based languages strongly favoring Option/Maybe types over implicit null was deeply rooted in HM's core design goals (soundness, inference) and algorithmic machinery (unification, ADT affinity). Standard HM presents significant theoretical and practical hurdles to integrating T | Null style union types and subtyping natively. While research explores complex extensions and alternative systems (including dependent types) demonstrating theoretical possibilities beyond classic HM, the path chosen by F# (`type | null` for interop) highlights the pragmatic difficulties. This confirms that the choice between the Option philosophy and a Null + safe handling philosophy involves navigating fundamental trade-offs in type system design, and that HM's specific constraints heavily influenced the historical prevalence of the former in many functional languages.\n\n*(Detailed elaboration based on previous search findings covering:\n\n1.  HM Core Goals - Soundness and Inference.\n2.  The `null` Problem for Soundness.\n3.  Algebraic Data Types (ADTs) - A Natural Fit for HM.\n4.  `Option`/`Maybe` as a Consequence of HM principles.\n5.  HM's Difficulty with Untagged Union Types (`T | U`).\n6.  HM's Difficulty with Subtyping (`T \u003C: U`).\n7.  Research on Extensions (Possibility vs. Simplicity, e.g., HM(X), MLsub, Boolean-algebraic subtyping, Relational Nullable Types).\n8.  F#'s `type | null` as a pragmatic interop layer.\n9.  Haskell's Strictness with `Maybe`.\n10. Contrast with Dependent Types' alternative approaches to absence.\n**Note Conclusion:** The evidence confirms that `Option`/`Maybe` was the natural path for _classic_ HM systems due to their design goals and algorithmic constraints. Integrating `T | Null` unions/subtyping directly poses significant theoretical and practical challenges _for HM_. However, this difficulty is specific to HM's formulation, and research into extensions and alternative systems shows that handling absence without `Option` in a sound type system is not theoretically impossible, just challenging for the specific HM approach.)*\n\n*(The key takeaway from this deep dive is that the dominance of `Option`/`Maybe` in many functional languages was significantly influenced by the specific design choices and limitations of the Hindley-Milner type system. This doesn't necessarily mean `Option`/`Maybe` is the only or universally superior way to handle absence in all type systems, but rather that it was a very fitting solution within the HM paradigm.)*\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"[Annotation Footer Image]\">\n\n-   **Implication:** The constraints inherent in the standard HM framework strongly favored the `Option` approach. This may have inadvertently reinforced the \"Null is evil\" narrative and discouraged exploration of alternative sound approaches that retain a `Null`-like concept, despite the theoretical possibility for such systems (albeit complex ones) to exist.\n\n## 0.5 `Null` Safety Reconsidered: TypeScript's Practical Success and Future Horizons\n\nWhile Hindley-Milner (HM) based languages predominantly adopted `Option` types to ensure safety around absent values, a different path has been successfully demonstrated by languages like TypeScript. This prompts us to reconsider the narrative that `Null` itself is an unmanageable \"billion-dollar mistake.\"\n\nTypeScript, by integrating `null` and `undefined` as part of its type system through **Nullable Union Types** (e.g., `string | null`) and providing mechanisms like **type guards** (e.g., `if (value !== null)`) and **optional chaining (`?.`)**, has achieved a high degree of practical null safety. Programmers can work with potentially absent values, and the compiler, through sophisticated **control flow analysis**, helps prevent many common `null` or `undefined` reference errors at compile time.\n\n```typescript\nfunction processText(text: string | null): void {\n    if (text !== null) {\n        // Within this block, TypeScript knows 'text' is a 'string'\n        console.log(`Length: ${text.length}`);\n    } else {\n        console.log(\"No text provided.\");\n    }\n}\n\ninterface UserProfile {\n    name?: string; // 'name' might be undefined\n}\n\nfunction getUserName(profile?: UserProfile): string | undefined {\n    return profile?.name?.toUpperCase(); // Safely access nested properties\n}\n```\n\nThis practical success of TypeScript raises an important question: if nullability can be managed this effectively with appropriate type system features and tooling, why did the HM tradition so strongly favor the `Option` type, which, as we've seen, can sometimes introduce its own complexities (like nesting)? Was the problem truly `Null` itself, or was it the specific limitations of classic HM type inference when faced with more direct representations of nullability?\n\nThe Note above explored the technical reasons why classic HM struggled with `T | Null` unions. However, this does not mean that all avenues for creating sound, inferential type systems that treat `Null` more directly (as the Empty Set concept, rather than a tagged `None`) are closed.\n\nThe author of this book believes that exploring new directions, perhaps ones that combine foundational principles with advanced verification techniques and even AI assistance, could yield type systems that offer both the rigorous guarantees associated with formal systems and the ergonomic benefits of more direct null handling. While much of this is at the research and conceptual stage, some **potential avenues, representing the author's ideas, include:**\n\n-   **Leveraging Formal Systems with Enhanced Usability:** Imagine a type system grounded in a sound logical framework (like that of a theorem prover, capable of understanding concepts like the Empty Set, Set Union, etc., as discussed in the context of Bicartesian Closed Categories earlier). The challenge here is usually the burden of proof on the programmer.\n-   **AI-Augmented Interactive Verification:** This is where the \"hyper-evolution of AI-driven interactive approaches\" comes into play. Instead of requiring programmers to write complex formal proofs, an advanced AI could:\n    1.  **Understand Intent:** Grasp the programmer's high-level intent regarding nullability and safety from code, type hints, natural language comments, or examples.\n    2.  **Automate Proof/Verification for Common Cases:** For many standard scenarios involving `Null | T` or Union types, the AI could automatically generate the necessary checks or internal \"proofs\" of safety, guided by the system's formal rules. This might involve synthesizing appropriate type guards or ensuring all paths in a Union are handled.\n    3.  **Engage in Clarifying Dialogues:** For more complex or ambiguous situations where automatic verification is difficult, the AI could engage in a dialogue with the programmer, presenting specific points of uncertainty, suggesting alternative typings or refactorings, or asking for assertions, rather than just failing with an opaque type error.\n    4.  **Collect and Integrate \"Proof Fragments\":** The AI could gather evidence of safety from various sources (e.g., `isNull` checks, assertions, even unit tests or natural language requirements) and attempt to synthesize a coherent argument for the type safety of a given piece of code.\n\nThis vision moves beyond the limitations of past systems. The \"impossibility\" for older compilers to safely handle `Null` directly with full inference might transform into a \"manageable complexity\" through human-AI collaboration within a sound foundational framework (like one based on the Category of Sets, capable of naturally representing `Null` as an initial object/empty set and Unions as coproducts/set unions).\n\nWhile these are forward-looking ideas, they suggest that the story of handling absence in type systems is far from over. The choice is not simply between unsafe `null` and `Option` types. New paradigms, especially those augmented by AI, may offer more direct, simpler, and yet still rigorously safe ways to model the fundamental concept of absence. TypeScript's approach, while not as formally stringent as a full theorem proving system, provides a valuable glimpse into the practical benefits of such directness.\n\n## 0.6 The `Timeline` Library's Philosophy: Theoretical Validity and Practical Simplicity\n\nBased on the foregoing analysis – the fundamental nature of `Null` (Empty Set), the historical context and potential drawbacks of the `Option` approach, the theoretical _possibility_ of sound systems handling `Null | T` directly (as explored in Section 0.5), and the practical success demonstrated by systems like TypeScript – this `Timeline` library adopts a specific, deliberate philosophy for handling absence:\n\n**We embrace `null` as the primary representation for the absence of a value (for applicable types, primarily reference types in the .NET context where `null` is idiomatic), combined with a strict discipline for safe handling.**\n\nThis choice is justified by:\n\n-   **Theoretical Validity:** It aligns with the fundamental mathematical concept of the Empty Set (Section 0.2). Furthermore, it acknowledges the theoretical explorations (Section 0.5) suggesting that sound type systems _could_ integrate `Null | T` structures directly. Our approach rejects the premise that `Null` itself is inherently unsound or mathematically invalid, and instead posits that safety arises from how it is handled.\n-   **Simplicity and Directness:** It avoids the potential structural complexity of nested `Option` types (Section 0.4, Critique 1). A value is either present or it is `null`, directly mirroring states like an empty spreadsheet cell or inactive editor (Section 0.1). This often leads to simpler data structures and potentially more straightforward logic when nesting is avoided.\n-   **Proven Safety (with Discipline):** It follows the successful model demonstrated by TypeScript and other modern languages: `null` is permissible, but its usage _must_ be guarded by mechanisms that ensure safety.\n\nThe \"safe handling mechanism\" within _this_ library is not (currently) a compiler-enforced check for all `null` usage (as F#'s core HM doesn't provide that for `null` in its standard mode without the newer Nullable Reference Type features). Instead, it is the **strict requirement and convention imposed upon the user (and rigorously followed by the library's internal implementation) to always check for `null` using the `isNull` helper function before attempting to use a value obtained from a `Timeline` that might be absent**:\n\n```fsharp\n// The Required Safety Pattern:\n\n// Assuming 'isNull' is a globally available helper:\n// let isNull value = obj.ReferenceEquals(value, null)\n\n// let processValue (value: 'a) : unit =\n//     if isNull value then\n//         // Handle absence case (e.g., do nothing, return default)\n//         printfn \"Value is absent.\"\n//     else\n//         // Handle presence case: 'value' is safe to use here\n//         printfn \"Value is present: %A\" value\n\n// Example usage with a Timeline\n// let myStringTimeline : Timeline\u003Cstring> = Timeline null // Can be null\n// let currentValue = myStringTimeline |> TL.at Now\n// processValue currentValue // Will print \"Value is absent.\"\n```\n\nThis disciplined pattern serves as the necessary \"safe operator\" or \"guard rail\" within our framework. Adhering to this convention ensures that the dangers historically associated with `null` are effectively mitigated within the context of using this library.\n\n**Positioning:** We view this approach as a **theoretically valid** path. It prioritizes conceptual clarity (alignment with Empty Set) and representational simplicity, achieving safety through a defined usage discipline, much like how safe operators provide safety in other language contexts. It consciously diverges from the mainstream HM/`Option` tradition, choosing a path considered more direct and fundamental, and one that resonates with the theoretical possibility of alternative sound type systems.\n\n## 0.7 Conclusion: Setting the Stage for Unit 5\n\nThis chapter has established the foundational philosophy for handling the absence of values within the `Timeline` library and this book. We recognize `Null` (representing the Empty Set) as a fundamental and mathematically sound concept. We argue that historical issues with `null` stemmed from inadequate language-level handling mechanisms, not the concept itself. While acknowledging the safety guarantees `Option` types brought to classic HM systems, we critique their potential complexity and the philosophical underpinnings of `Null` elimination, informed by an understanding of HM's specific constraints and the theoretical possibility of alternatives.\n\nInspired by these theoretical possibilities and the practical success of systems that safely integrate nullability, we adopt `null` combined with the strict `isNull` checking discipline as our core approach. We value its theoretical validity, its representational simplicity, and the safety achieved through disciplined usage.\n\nThe design and explanation of the various **timeline combinators** in the subsequent chapters of this unit – such as those for naive Monoidal combinations (`TL.naiveOr`, `TL.naiveAnd`), general-purpose tools like `TL.distinctUntilChanged` and `TL.zipWith`, and the refined combinators built upon them – will all be directly based on this foundational principle. We will see how this choice influences the implementation and usage of functions that combine multiple timelines, which may or may not hold a value (i.e., might be `null`) at any given point.","src/content/docs/en/book/unit-5/section-1/0-null.md","74b7a23339dbeecd",{"html":1399,"metadata":1400},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"01-introduction-the-fundamental-concept-of-absence\">0.1 Introduction: The Fundamental Concept of Absence\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#01-introduction-the-fundamental-concept-of-absence\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.1 Introduction: The Fundamental Concept of Absence”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Programming is fundamentally about modeling aspects of the world or abstract systems. In virtually any system we model, we encounter situations where a value might be missing, a state might be considered “empty,” or an operation might not yield a result. The need to represent this concept of \u003Cstrong>absence\u003C/strong> is a ubiquitous and crucial requirement for building correct and robust software.\u003C/p>\n\u003Cp>Consider these concrete, everyday examples:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>The Empty Spreadsheet Cell:\u003C/strong> A cell in a spreadsheet grid naturally represents this. It can hold a definite value (a number, text, a formula), or it can be simply empty, signifying the absence of data in that location. This empty state is not an error; it’s a fundamental part of the spreadsheet model.\u003C/li>\n\u003Cli>\u003Cstrong>No Active Text Editor:\u003C/strong> In a modern Integrated Development Environment (IDE) like Visual Studio Code, the user might have several files open in editor tabs, or they might have closed all tabs. The state where \u003Cem>no\u003C/em> text editor is currently active or has focus is a perfectly valid and expected state within the application’s lifecycle.\u003C/li>\n\u003C/ul>\n\u003Cp>These examples illustrate that “absence,” “emptiness,” or “nullity” is not merely an exceptional circumstance or an error. It is often a \u003Cstrong>real, necessary, and legitimate state\u003C/strong> within the domain we are modeling. Therefore, how our programming languages and type systems allow us to represent and interact with this state is of foundational importance.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"02-the-mathematical-foundation-null-as-the-empty-set\">0.2 The Mathematical Foundation: \u003Ccode dir=\"auto\">Null\u003C/code> as the Empty Set\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#02-the-mathematical-foundation-null-as-the-empty-set\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.2 The Mathematical Foundation: Null as the Empty Set”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This concept of absence or emptiness is not just a practical quirk of software; it has deep roots in mathematics. The notion often represented by \u003Ccode dir=\"auto\">null\u003C/code> in programming finds a direct and powerful correspondence in fundamental mathematical structures, specifically within \u003Cstrong>Set Theory\u003C/strong>, which forms the basis of how we often conceptualize types in programming.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>The Empty Set:\u003C/strong> In standard axiomatic set theory (like ZFC), the \u003Cstrong>empty set\u003C/strong> (denoted ∅ or {}) is uniquely defined as the set containing no elements. It is a cornerstone of the theory, allowing for the construction of other sets and mathematical objects. The concept of \u003Ccode dir=\"auto\">Null\u003C/code> can be seen as directly analogous to this empty set – representing the absence of any value within a given type (where a type is viewed as a set of its possible values).\u003C/li>\n\u003C/ul>\n\u003Cp>This connection is profound. It suggests that \u003Ccode dir=\"auto\">Null\u003C/code>, far from being merely a problematic value invented for programming convenience, actually corresponds to a \u003Cstrong>well-defined, indispensable concept in mathematics\u003C/strong> that represents emptiness or non-existence. A type system aiming for mathematical soundness and expressiveness, particularly one grounded in set theory, should, in principle, be able to accommodate this fundamental notion in a natural and consistent way. Our perspective in this book is that types \u003Cem>are\u003C/em> sets, and we operate within the \u003Cstrong>Category of Sets (Set)\u003C/strong>, where objects are sets and morphisms are functions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"03-the-historical-complication-nullpointerexception-and-the-billion-dollar-mistake-narrative\">0.3 The Historical Complication: \u003Ccode dir=\"auto\">NullPointerException\u003C/code> and the “Billion-Dollar Mistake” Narrative\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#03-the-historical-complication-nullpointerexception-and-the-billion-dollar-mistake-narrative\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.3 The Historical Complication: NullPointerException and the “Billion-Dollar Mistake” Narrative”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Despite its potentially sound conceptual and mathematical basis, the \u003Ccode dir=\"auto\">null\u003C/code> reference, particularly as implemented in many early object-oriented and imperative languages, gained notoriety for causing frequent and often hard-to-debug runtime errors – the dreaded \u003Ccode dir=\"auto\">NullPointerException\u003C/code> (in Java), \u003Ccode dir=\"auto\">NullReferenceException\u003C/code> (in C#), segmentation faults (in C/C++), etc. These errors typically occurred when the program attempted to access a member (field or method) of a reference variable that held \u003Ccode dir=\"auto\">null\u003C/code> instead of pointing to a valid object.\u003C/p>\n\u003Cp>Sir Tony Hoare, a pioneer in programming language design, famously lamented his introduction of the null reference in ALGOL W around 1965, calling it his “billion-dollar mistake”:\u003C/p>\n\u003Cblockquote>\n\u003Cp>I call it my billion-dollar mistake. It was the invention of the null reference in 1965… This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\u003C/p>\n\u003C/blockquote>\n\u003Cp>This powerful narrative took hold, leading to a widespread conviction in many parts of the programming world that the very concept of \u003Ccode dir=\"auto\">null\u003C/code> itself was inherently flawed and dangerous – an evil to be eradicated from programming languages if possible.\u003C/p>\n\u003Cp>However, a critical re-evaluation is necessary. Was the fundamental \u003Cstrong>concept\u003C/strong> of representing absence (\u003Ccode dir=\"auto\">Null\u003C/code>, analogous to the Empty Set) the actual mistake? Or was the mistake the \u003Cstrong>utter lack of adequate language mechanisms – robust type systems capable of distinguishing nullable from non-nullable references, and safe operators for handling potentially null values – to manage this fundamental concept without catastrophic runtime failures?\u003C/strong>\u003C/p>\n\u003Cp>This chapter argues strongly for the latter. The “billion-dollar mistake” was perhaps not the existence of \u003Ccode dir=\"auto\">Null\u003C/code>, but the failure of early language designs to provide the \u003Cstrong>necessary safeguards and tools\u003C/strong> to work with it safely. This narrative, we argue, became a potentially misleading “myth” that obscured the real problem and discouraged the search for sound ways to integrate the concept of emptiness.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"04-the-hindley-milner-response-option-types-and-their-consequences\">0.4 The Hindley-Milner Response: \u003Ccode dir=\"auto\">Option\u003C/code> Types and Their Consequences\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#04-the-hindley-milner-response-option-types-and-their-consequences\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.4 The Hindley-Milner Response: Option Types and Their Consequences”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In the face of the dangers posed by unchecked \u003Ccode dir=\"auto\">null\u003C/code> references, the functional programming community, particularly languages rooted in the \u003Cstrong>Hindley-Milner (HM) type system\u003C/strong> (such as ML, Haskell, and influencing early F#), championed a different solution: \u003Cstrong>eliminating pervasive \u003Ccode dir=\"auto\">null\u003C/code> references\u003C/strong> from the language core and representing optionality explicitly within the type system using \u003Cstrong>\u003Ccode dir=\"auto\">Option\u003C/code> types\u003C/strong> (often called \u003Ccode dir=\"auto\">Maybe\u003C/code> in Haskell).\u003C/p>\n\u003Cp>The \u003Ccode dir=\"auto\">Option&#x3C;T>\u003C/code> type (or \u003Ccode dir=\"auto\">Maybe T\u003C/code>) is typically defined as an algebraic data type (ADT) – a sum type – with two cases:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">Some T\u003C/code> (or \u003Ccode dir=\"auto\">Just T\u003C/code>): Indicates the presence of a value of type \u003Ccode dir=\"auto\">T\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">None\u003C/code> (or \u003Ccode dir=\"auto\">Nothing\u003C/code>): Indicates the absence of a value.\u003C/li>\n\u003C/ul>\n\u003Cp>The primary advantage of this approach is \u003Cstrong>compile-time safety enforced by the type system\u003C/strong>. Because \u003Ccode dir=\"auto\">Option&#x3C;T>\u003C/code> is a distinct type from \u003Ccode dir=\"auto\">T\u003C/code>, a programmer cannot accidentally use an \u003Ccode dir=\"auto\">Option&#x3C;T>\u003C/code> value as if it were definitely a \u003Ccode dir=\"auto\">T\u003C/code>. The type system mandates explicitly handling both the \u003Ccode dir=\"auto\">Some\u003C/code> and \u003Ccode dir=\"auto\">None\u003C/code> cases, usually through pattern matching, thereby preventing null reference errors at compile time. This aligns perfectly with the core goals of HM systems, which prioritize type soundness and leveraging ADTs.\u003C/p>\n\u003Cp>However, while solving the immediate problem of null pointer errors within the HM framework, the \u003Ccode dir=\"auto\">Option\u003C/code> type approach introduces its own set of consequences and potential critiques:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Critique 1 (Structural Complexity):\u003C/strong> While \u003Ccode dir=\"auto\">Option T\u003C/code> elegantly handles a single level of optionality, nesting them (\u003Ccode dir=\"auto\">Option&#x3C;Option&#x3C;T>>\u003C/code>, \u003Ccode dir=\"auto\">Option&#x3C;List&#x3C;Option&#x3C;T>>>\u003C/code>, etc.) can lead to structures that feel more complex than the simple presence/absence they often represent. Does \u003Ccode dir=\"auto\">Some(Some 0)\u003C/code> or \u003Ccode dir=\"auto\">Some None\u003C/code> truly offer a clearer representation of a spreadsheet cell containing \u003Ccode dir=\"auto\">0\u003C/code> or being empty, compared to a more direct representation of \u003Ccode dir=\"auto\">0\u003C/code> and a distinct \u003Ccode dir=\"auto\">null\u003C/code> state?\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Critique 2 (Philosophical/Historical Validity):\u003C/strong> Was the complete elimination of a \u003Ccode dir=\"auto\">Null\u003C/code>-like concept truly the most theoretically sound path, or was it, in part, an overreaction based on the “Null is evil” myth? By focusing solely on eliminating \u003Ccode dir=\"auto\">null\u003C/code>, did this approach inadvertently reject or sideline the fundamental mathematical validity of the “empty” concept itself (as discussed in Section 0.2)? Its widespread adoption might be viewed critically as a historical trajectory influenced by specific circumstances (HM’s constraints, reaction to \u003Ccode dir=\"auto\">null\u003C/code> issues) rather than necessarily representing the universally optimal or most theoretically grounded solution. Its dominance could be compared to the earlier OOP boom – popular and useful, but not without its own complexities and potential drawbacks when viewed from alternative theoretical standpoints.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Critique 3 (HM Design Philosophy and Constraints):\u003C/strong> The prevalence of \u003Ccode dir=\"auto\">Option\u003C/code> in HM-based languages is also deeply intertwined with the technical characteristics and limitations of the HM type system itself, as explored in the following technical note.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"[Annotation Header Image]\">\n\u003Cp>\u003Cstrong>Note: Technical &#x26; Historical Deep Dive – HM Systems, Null, Option, Union Types, and Beyond\u003C/strong>\u003C/p>\n\u003Cp>\u003Cem>(This note delves into the technical and historical reasons behind the preference for \u003Ccode dir=\"auto\">Option\u003C/code>/\u003Ccode dir=\"auto\">Maybe\u003C/code> types in Hindley-Milner (HM) based functional languages. While not essential for understanding the main arguments of this chapter, it provides deeper context for readers interested in type system theory and language design history.)\u003C/em>\u003C/p>\n\u003Cp>The historical trajectory of Hindley-Milner (HM) based languages strongly favoring Option/Maybe types over implicit null was deeply rooted in HM’s core design goals (soundness, inference) and algorithmic machinery (unification, ADT affinity). Standard HM presents significant theoretical and practical hurdles to integrating T | Null style union types and subtyping natively. While research explores complex extensions and alternative systems (including dependent types) demonstrating theoretical possibilities beyond classic HM, the path chosen by F# (\u003Ccode dir=\"auto\">type | null\u003C/code> for interop) highlights the pragmatic difficulties. This confirms that the choice between the Option philosophy and a Null + safe handling philosophy involves navigating fundamental trade-offs in type system design, and that HM’s specific constraints heavily influenced the historical prevalence of the former in many functional languages.\u003C/p>\n\u003Cp>*(Detailed elaboration based on previous search findings covering:\u003C/p>\n\u003Col>\n\u003Cli>HM Core Goals - Soundness and Inference.\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">null\u003C/code> Problem for Soundness.\u003C/li>\n\u003Cli>Algebraic Data Types (ADTs) - A Natural Fit for HM.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">Option\u003C/code>/\u003Ccode dir=\"auto\">Maybe\u003C/code> as a Consequence of HM principles.\u003C/li>\n\u003Cli>HM’s Difficulty with Untagged Union Types (\u003Ccode dir=\"auto\">T | U\u003C/code>).\u003C/li>\n\u003Cli>HM’s Difficulty with Subtyping (\u003Ccode dir=\"auto\">T &#x3C;: U\u003C/code>).\u003C/li>\n\u003Cli>Research on Extensions (Possibility vs. Simplicity, e.g., HM(X), MLsub, Boolean-algebraic subtyping, Relational Nullable Types).\u003C/li>\n\u003Cli>F#‘s \u003Ccode dir=\"auto\">type | null\u003C/code> as a pragmatic interop layer.\u003C/li>\n\u003Cli>Haskell’s Strictness with \u003Ccode dir=\"auto\">Maybe\u003C/code>.\u003C/li>\n\u003Cli>Contrast with Dependent Types’ alternative approaches to absence.\n\u003Cstrong>Note Conclusion:\u003C/strong> The evidence confirms that \u003Ccode dir=\"auto\">Option\u003C/code>/\u003Ccode dir=\"auto\">Maybe\u003C/code> was the natural path for \u003Cem>classic\u003C/em> HM systems due to their design goals and algorithmic constraints. Integrating \u003Ccode dir=\"auto\">T | Null\u003C/code> unions/subtyping directly poses significant theoretical and practical challenges \u003Cem>for HM\u003C/em>. However, this difficulty is specific to HM’s formulation, and research into extensions and alternative systems shows that handling absence without \u003Ccode dir=\"auto\">Option\u003C/code> in a sound type system is not theoretically impossible, just challenging for the specific HM approach.)*\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cem>(The key takeaway from this deep dive is that the dominance of \u003Ccode dir=\"auto\">Option\u003C/code>/\u003Ccode dir=\"auto\">Maybe\u003C/code> in many functional languages was significantly influenced by the specific design choices and limitations of the Hindley-Milner type system. This doesn’t necessarily mean \u003Ccode dir=\"auto\">Option\u003C/code>/\u003Ccode dir=\"auto\">Maybe\u003C/code> is the only or universally superior way to handle absence in all type systems, but rather that it was a very fitting solution within the HM paradigm.)\u003C/em>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"[Annotation Footer Image]\">\n\u003Cul>\n\u003Cli>\u003Cstrong>Implication:\u003C/strong> The constraints inherent in the standard HM framework strongly favored the \u003Ccode dir=\"auto\">Option\u003C/code> approach. This may have inadvertently reinforced the “Null is evil” narrative and discouraged exploration of alternative sound approaches that retain a \u003Ccode dir=\"auto\">Null\u003C/code>-like concept, despite the theoretical possibility for such systems (albeit complex ones) to exist.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"05-null-safety-reconsidered-typescripts-practical-success-and-future-horizons\">0.5 \u003Ccode dir=\"auto\">Null\u003C/code> Safety Reconsidered: TypeScript’s Practical Success and Future Horizons\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#05-null-safety-reconsidered-typescripts-practical-success-and-future-horizons\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.5 Null Safety Reconsidered: TypeScript’s Practical Success and Future Horizons”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While Hindley-Milner (HM) based languages predominantly adopted \u003Ccode dir=\"auto\">Option\u003C/code> types to ensure safety around absent values, a different path has been successfully demonstrated by languages like TypeScript. This prompts us to reconsider the narrative that \u003Ccode dir=\"auto\">Null\u003C/code> itself is an unmanageable “billion-dollar mistake.”\u003C/p>\n\u003Cp>TypeScript, by integrating \u003Ccode dir=\"auto\">null\u003C/code> and \u003Ccode dir=\"auto\">undefined\u003C/code> as part of its type system through \u003Cstrong>Nullable Union Types\u003C/strong> (e.g., \u003Ccode dir=\"auto\">string | null\u003C/code>) and providing mechanisms like \u003Cstrong>type guards\u003C/strong> (e.g., \u003Ccode dir=\"auto\">if (value !== null)\u003C/code>) and \u003Cstrong>optional chaining (\u003Ccode dir=\"auto\">?.\u003C/code>)\u003C/strong>, has achieved a high degree of practical null safety. Programmers can work with potentially absent values, and the compiler, through sophisticated \u003Cstrong>control flow analysis\u003C/strong>, helps prevent many common \u003Ccode dir=\"auto\">null\u003C/code> or \u003Ccode dir=\"auto\">undefined\u003C/code> reference errors at compile time.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"typescript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">processText\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">text\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">string\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">)\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">void\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> (text \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">!==\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">) {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Within this block, TypeScript knows 'text' is a 'string'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#3B61B0\">Length: \u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">${\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">text\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">length\u003C/span>\u003Cspan style=\"--0:#E2817F;--1:#B23834\">}\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">`\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">} \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">console\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">No text provided.\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">interface\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> UserProfile {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">name\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">?:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">string\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">; \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'name' might be undefined\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">function\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">getUserName\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">profile\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">?:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--1:#111111\">\u003Cspan style=\"--0:#FFCB8B\">UserProfile\u003C/span>\u003Cspan style=\"--0:#D9F5DD\">)\u003C/span>\u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">string\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#7FDBCA;--1:#096E72\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">undefined\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">return\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> profile\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">?.\u003C/span>\u003Cspan style=\"--0:#FAF39F;--1:#111111\">name\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">?.\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">toUpperCase\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">(); \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Safely access nested properties\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"function processText(text: string | null): void {    if (text !== null) {        // Within this block, TypeScript knows &#x27;text&#x27; is a &#x27;string&#x27;        console.log(&#x60;Length: ${text.length}&#x60;);    } else {        console.log(&#x22;No text provided.&#x22;);    }}interface UserProfile {    name?: string; // &#x27;name&#x27; might be undefined}function getUserName(profile?: UserProfile): string | undefined {    return profile?.name?.toUpperCase(); // Safely access nested properties}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This practical success of TypeScript raises an important question: if nullability can be managed this effectively with appropriate type system features and tooling, why did the HM tradition so strongly favor the \u003Ccode dir=\"auto\">Option\u003C/code> type, which, as we’ve seen, can sometimes introduce its own complexities (like nesting)? Was the problem truly \u003Ccode dir=\"auto\">Null\u003C/code> itself, or was it the specific limitations of classic HM type inference when faced with more direct representations of nullability?\u003C/p>\n\u003Cp>The Note above explored the technical reasons why classic HM struggled with \u003Ccode dir=\"auto\">T | Null\u003C/code> unions. However, this does not mean that all avenues for creating sound, inferential type systems that treat \u003Ccode dir=\"auto\">Null\u003C/code> more directly (as the Empty Set concept, rather than a tagged \u003Ccode dir=\"auto\">None\u003C/code>) are closed.\u003C/p>\n\u003Cp>The author of this book believes that exploring new directions, perhaps ones that combine foundational principles with advanced verification techniques and even AI assistance, could yield type systems that offer both the rigorous guarantees associated with formal systems and the ergonomic benefits of more direct null handling. While much of this is at the research and conceptual stage, some \u003Cstrong>potential avenues, representing the author’s ideas, include:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Leveraging Formal Systems with Enhanced Usability:\u003C/strong> Imagine a type system grounded in a sound logical framework (like that of a theorem prover, capable of understanding concepts like the Empty Set, Set Union, etc., as discussed in the context of Bicartesian Closed Categories earlier). The challenge here is usually the burden of proof on the programmer.\u003C/li>\n\u003Cli>\u003Cstrong>AI-Augmented Interactive Verification:\u003C/strong> This is where the “hyper-evolution of AI-driven interactive approaches” comes into play. Instead of requiring programmers to write complex formal proofs, an advanced AI could:\n\u003Col>\n\u003Cli>\u003Cstrong>Understand Intent:\u003C/strong> Grasp the programmer’s high-level intent regarding nullability and safety from code, type hints, natural language comments, or examples.\u003C/li>\n\u003Cli>\u003Cstrong>Automate Proof/Verification for Common Cases:\u003C/strong> For many standard scenarios involving \u003Ccode dir=\"auto\">Null | T\u003C/code> or Union types, the AI could automatically generate the necessary checks or internal “proofs” of safety, guided by the system’s formal rules. This might involve synthesizing appropriate type guards or ensuring all paths in a Union are handled.\u003C/li>\n\u003Cli>\u003Cstrong>Engage in Clarifying Dialogues:\u003C/strong> For more complex or ambiguous situations where automatic verification is difficult, the AI could engage in a dialogue with the programmer, presenting specific points of uncertainty, suggesting alternative typings or refactorings, or asking for assertions, rather than just failing with an opaque type error.\u003C/li>\n\u003Cli>\u003Cstrong>Collect and Integrate “Proof Fragments”:\u003C/strong> The AI could gather evidence of safety from various sources (e.g., \u003Ccode dir=\"auto\">isNull\u003C/code> checks, assertions, even unit tests or natural language requirements) and attempt to synthesize a coherent argument for the type safety of a given piece of code.\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Cp>This vision moves beyond the limitations of past systems. The “impossibility” for older compilers to safely handle \u003Ccode dir=\"auto\">Null\u003C/code> directly with full inference might transform into a “manageable complexity” through human-AI collaboration within a sound foundational framework (like one based on the Category of Sets, capable of naturally representing \u003Ccode dir=\"auto\">Null\u003C/code> as an initial object/empty set and Unions as coproducts/set unions).\u003C/p>\n\u003Cp>While these are forward-looking ideas, they suggest that the story of handling absence in type systems is far from over. The choice is not simply between unsafe \u003Ccode dir=\"auto\">null\u003C/code> and \u003Ccode dir=\"auto\">Option\u003C/code> types. New paradigms, especially those augmented by AI, may offer more direct, simpler, and yet still rigorously safe ways to model the fundamental concept of absence. TypeScript’s approach, while not as formally stringent as a full theorem proving system, provides a valuable glimpse into the practical benefits of such directness.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"06-the-timeline-librarys-philosophy-theoretical-validity-and-practical-simplicity\">0.6 The \u003Ccode dir=\"auto\">Timeline\u003C/code> Library’s Philosophy: Theoretical Validity and Practical Simplicity\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#06-the-timeline-librarys-philosophy-theoretical-validity-and-practical-simplicity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.6 The Timeline Library’s Philosophy: Theoretical Validity and Practical Simplicity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Based on the foregoing analysis – the fundamental nature of \u003Ccode dir=\"auto\">Null\u003C/code> (Empty Set), the historical context and potential drawbacks of the \u003Ccode dir=\"auto\">Option\u003C/code> approach, the theoretical \u003Cem>possibility\u003C/em> of sound systems handling \u003Ccode dir=\"auto\">Null | T\u003C/code> directly (as explored in Section 0.5), and the practical success demonstrated by systems like TypeScript – this \u003Ccode dir=\"auto\">Timeline\u003C/code> library adopts a specific, deliberate philosophy for handling absence:\u003C/p>\n\u003Cp>\u003Cstrong>We embrace \u003Ccode dir=\"auto\">null\u003C/code> as the primary representation for the absence of a value (for applicable types, primarily reference types in the .NET context where \u003Ccode dir=\"auto\">null\u003C/code> is idiomatic), combined with a strict discipline for safe handling.\u003C/strong>\u003C/p>\n\u003Cp>This choice is justified by:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Theoretical Validity:\u003C/strong> It aligns with the fundamental mathematical concept of the Empty Set (Section 0.2). Furthermore, it acknowledges the theoretical explorations (Section 0.5) suggesting that sound type systems \u003Cem>could\u003C/em> integrate \u003Ccode dir=\"auto\">Null | T\u003C/code> structures directly. Our approach rejects the premise that \u003Ccode dir=\"auto\">Null\u003C/code> itself is inherently unsound or mathematically invalid, and instead posits that safety arises from how it is handled.\u003C/li>\n\u003Cli>\u003Cstrong>Simplicity and Directness:\u003C/strong> It avoids the potential structural complexity of nested \u003Ccode dir=\"auto\">Option\u003C/code> types (Section 0.4, Critique 1). A value is either present or it is \u003Ccode dir=\"auto\">null\u003C/code>, directly mirroring states like an empty spreadsheet cell or inactive editor (Section 0.1). This often leads to simpler data structures and potentially more straightforward logic when nesting is avoided.\u003C/li>\n\u003Cli>\u003Cstrong>Proven Safety (with Discipline):\u003C/strong> It follows the successful model demonstrated by TypeScript and other modern languages: \u003Ccode dir=\"auto\">null\u003C/code> is permissible, but its usage \u003Cem>must\u003C/em> be guarded by mechanisms that ensure safety.\u003C/li>\n\u003C/ul>\n\u003Cp>The “safe handling mechanism” within \u003Cem>this\u003C/em> library is not (currently) a compiler-enforced check for all \u003Ccode dir=\"auto\">null\u003C/code> usage (as F#‘s core HM doesn’t provide that for \u003Ccode dir=\"auto\">null\u003C/code> in its standard mode without the newer Nullable Reference Type features). Instead, it is the \u003Cstrong>strict requirement and convention imposed upon the user (and rigorously followed by the library’s internal implementation) to always check for \u003Ccode dir=\"auto\">null\u003C/code> using the \u003Ccode dir=\"auto\">isNull\u003C/code> helper function before attempting to use a value obtained from a \u003Ccode dir=\"auto\">Timeline\u003C/code> that might be absent\u003C/strong>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The Required Safety Pattern:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming 'isNull' is a globally available helper:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let isNull value = obj.ReferenceEquals(value, null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let processValue (value: 'a) : unit =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     if isNull value then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         // Handle absence case (e.g., do nothing, return default)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         printfn \"Value is absent.\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         // Handle presence case: 'value' is safe to use here\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         printfn \"Value is present: %A\" value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Example usage with a Timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let myStringTimeline : Timeline&#x3C;string> = Timeline null // Can be null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let currentValue = myStringTimeline |> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// processValue currentValue // Will print \"Value is absent.\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The Required Safety Pattern:// Assuming &#x27;isNull&#x27; is a globally available helper:// let isNull value = obj.ReferenceEquals(value, null)// let processValue (value: &#x27;a) : unit =//     if isNull value then//         // Handle absence case (e.g., do nothing, return default)//         printfn &#x22;Value is absent.&#x22;//     else//         // Handle presence case: &#x27;value&#x27; is safe to use here//         printfn &#x22;Value is present: %A&#x22; value// Example usage with a Timeline// let myStringTimeline : Timeline\u003Cstring> = Timeline null // Can be null// let currentValue = myStringTimeline |> TL.at Now// processValue currentValue // Will print &#x22;Value is absent.&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This disciplined pattern serves as the necessary “safe operator” or “guard rail” within our framework. Adhering to this convention ensures that the dangers historically associated with \u003Ccode dir=\"auto\">null\u003C/code> are effectively mitigated within the context of using this library.\u003C/p>\n\u003Cp>\u003Cstrong>Positioning:\u003C/strong> We view this approach as a \u003Cstrong>theoretically valid\u003C/strong> path. It prioritizes conceptual clarity (alignment with Empty Set) and representational simplicity, achieving safety through a defined usage discipline, much like how safe operators provide safety in other language contexts. It consciously diverges from the mainstream HM/\u003Ccode dir=\"auto\">Option\u003C/code> tradition, choosing a path considered more direct and fundamental, and one that resonates with the theoretical possibility of alternative sound type systems.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"07-conclusion-setting-the-stage-for-unit-5\">0.7 Conclusion: Setting the Stage for Unit 5\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#07-conclusion-setting-the-stage-for-unit-5\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.7 Conclusion: Setting the Stage for Unit 5”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This chapter has established the foundational philosophy for handling the absence of values within the \u003Ccode dir=\"auto\">Timeline\u003C/code> library and this book. We recognize \u003Ccode dir=\"auto\">Null\u003C/code> (representing the Empty Set) as a fundamental and mathematically sound concept. We argue that historical issues with \u003Ccode dir=\"auto\">null\u003C/code> stemmed from inadequate language-level handling mechanisms, not the concept itself. While acknowledging the safety guarantees \u003Ccode dir=\"auto\">Option\u003C/code> types brought to classic HM systems, we critique their potential complexity and the philosophical underpinnings of \u003Ccode dir=\"auto\">Null\u003C/code> elimination, informed by an understanding of HM’s specific constraints and the theoretical possibility of alternatives.\u003C/p>\n\u003Cp>Inspired by these theoretical possibilities and the practical success of systems that safely integrate nullability, we adopt \u003Ccode dir=\"auto\">null\u003C/code> combined with the strict \u003Ccode dir=\"auto\">isNull\u003C/code> checking discipline as our core approach. We value its theoretical validity, its representational simplicity, and the safety achieved through disciplined usage.\u003C/p>\n\u003Cp>The design and explanation of the various \u003Cstrong>timeline combinators\u003C/strong> in the subsequent chapters of this unit – such as those for naive Monoidal combinations (\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>, \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>), general-purpose tools like \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> and \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, and the refined combinators built upon them – will all be directly based on this foundational principle. We will see how this choice influences the implementation and usage of functions that combine multiple timelines, which may or may not hold a value (i.e., might be \u003Ccode dir=\"auto\">null\u003C/code>) at any given point.\u003C/p>",{"headings":1401,"localImagePaths":1423,"remoteImagePaths":1424,"frontmatter":1425,"imagePaths":1426},[1402,1405,1408,1411,1414,1417,1420],{"depth":182,"slug":1403,"text":1404},"01-introduction-the-fundamental-concept-of-absence","0.1 Introduction: The Fundamental Concept of Absence",{"depth":182,"slug":1406,"text":1407},"02-the-mathematical-foundation-null-as-the-empty-set","0.2 The Mathematical Foundation: Null as the Empty Set",{"depth":182,"slug":1409,"text":1410},"03-the-historical-complication-nullpointerexception-and-the-billion-dollar-mistake-narrative","0.3 The Historical Complication: NullPointerException and the “Billion-Dollar Mistake” Narrative",{"depth":182,"slug":1412,"text":1413},"04-the-hindley-milner-response-option-types-and-their-consequences","0.4 The Hindley-Milner Response: Option Types and Their Consequences",{"depth":182,"slug":1415,"text":1416},"05-null-safety-reconsidered-typescripts-practical-success-and-future-horizons","0.5 Null Safety Reconsidered: TypeScript’s Practical Success and Future Horizons",{"depth":182,"slug":1418,"text":1419},"06-the-timeline-librarys-philosophy-theoretical-validity-and-practical-simplicity","0.6 The Timeline Library’s Philosophy: Theoretical Validity and Practical Simplicity",{"depth":182,"slug":1421,"text":1422},"07-conclusion-setting-the-stage-for-unit-5","0.7 Conclusion: Setting the Stage for Unit 5",[],[],{"title":1390,"description":1391},[],"en/book/unit-5/section-1/1-bind-chain",{"id":1427,"data":1429,"body":1435,"filePath":1436,"digest":1437,"rendered":1438},{"title":1430,"description":1431,"editUrl":16,"head":1432,"template":18,"sidebar":1433,"pagefind":16,"draft":20},"Chapter 1: Asynchronous Event Chaining with bind","Before diving into specialized functions for combining multiple timelines, which will be covered later, let's first explore how the core Timeline feature, specifically TL.bind, can itself be used to orchestrate sequential operations. This is particularly relevant for asynchronous event chains. This approach demonstrates an effect similar to Promise.then chaining in JavaScript but is achieved using only the fundamental Timeline mechanisms without requiring additional combinator functions. Understanding this foundational capability of bind provides valuable insight into the power and flexibility of the core Timeline system.",[],{"hidden":20,"attrs":1434},{},"Before diving into specialized functions for combining multiple timelines, which will be covered later, let's first explore how the core `Timeline` feature, specifically `TL.bind`, can itself be used to orchestrate sequential operations. This is particularly relevant for **asynchronous event chains**. This approach demonstrates an effect similar to `Promise.then` chaining in JavaScript but is achieved using only the fundamental `Timeline` mechanisms without requiring additional combinator functions. Understanding this foundational capability of `bind` provides valuable insight into the power and flexibility of the core `Timeline` system.\n\n## 1.1 Mechanism of Chaining\n\nThe key to understanding this asynchronous chaining pattern lies in **pre-defining `Timeline` instances outside the `bind` chain to act as receivers for the results of each asynchronous step and triggers for the subsequent step**. These `Timeline`s serve as \"mailboxes\" where the outcome of an asynchronous operation is `define`d upon completion.\n\nA concrete example of such timelines can be found in Unit 4, where we used `httpResponseTimeline` to asynchronously receive the result of an HTTP request. That `Timeline` waited for an asynchronous I/O result to be `define`d and then triggered subsequent actions (like logging via `link`). The `Timeline`s we pre-define in this asynchronous chain (named `step1`, `step2`, `step3` in the code example) fulfill exactly this role. Thus, **each `stepX` timeline corresponds to a specific \"I/O wrapper timeline\" or \"step completion notification timeline,\" designated to receive the result of its corresponding asynchronous operation** (the work done inside `setTimeout` in our example).\n\nWith this structure in mind, the asynchronous chain operates as follows:\n\n1.  **Trigger**: Defining a value onto the initial `Timeline` (`step0`) activates the first `bind` in the chain.\n2.  **Start Async Work**: The function within the `bind` initiates the asynchronous operation for the first step.\n3.  **Return Next Receiver Timeline**: The function within `bind` must **synchronously** return the **pre-defined `Timeline` designated as the receiver for the *next* step's result** (`step1`). This satisfies the type signature of `bind` (`'a -> Timeline\u003C'b>`).\n4.  **Async Completion and `define` on Receiver**: When the first asynchronous operation completes, its callback function calls `TL.define` on the receiver `Timeline` (`step1`), storing the result.\n5.  **Chain Reaction**: The update (`define`) to `step1` triggers the next `bind` connected to it, repeating the process for subsequent steps (`step2`, `step3`...).\n\n## 1.2 Code Example: Asynchronous Sequence with `setTimeout`\n\nThe following example uses a simple `setTimeout` helper (using `System.Timers`) combined with `TL.bind` to implement an asynchronous sequence that processes messages with delays of 2 seconds, then 3 seconds, then 1 second, logging the progress using elapsed time. Note that this example uses `null` to represent the absence of a value in the `stepX` timelines, consistent with earlier discussions.\n\n```fsharp\nopen System // For DateTime, TimeSpan, Thread\nopen System.Timers // For Timer\nopen System.Diagnostics // Required for Stopwatch\n\n// Assuming Timeline factory, Now value, and TL module are accessible\n// No 'open Timeline.TL' as per style guide\n\n// Globally accessible isNull helper (as defined or assumed from Chapter 0)\n// let isNull value = obj.ReferenceEquals(value, null)\n\n// --- Stopwatch for Elapsed Time ---\nlet stopwatch : Stopwatch = Stopwatch() // Explicit type\n\n// Helper: Executes function f after 'delay' ms (simple version)\n// Adhering to F# style guide for function definition\nlet setTimeout : (unit -> unit) -> int -> unit =\n    fun f delay ->\n        let timer = new Timer(float delay)\n        timer.AutoReset \u003C- false\n        timer.Elapsed.Add(fun _ -> f()) // Execute the callback directly\n        timer.Start()\n        // Error handling and Dispose are omitted for simplicity in this example.\n        // In a real application, timer disposal would be important.\n\n// --- Logging Timeline Setup ---\n// Timeline dedicated to receiving log messages\nlet logTimeline : Timeline\u003Cstring> = Timeline null // Initialize with null\n\n// Reaction: Print any message defined on logTimeline with elapsed time\n// Adhering to F# style guide for function application and definition\nlet logReaction : string -> unit =\n    fun message -> // Function passed to TL.map\n        // Only print if the message is not null\n        if isNull message then // Adhering to if/then/else style and using global isNull\n            () // Do nothing if message is null\n        else\n            // Get current elapsed time and format it\n            let elapsedMs : float = stopwatch.Elapsed.TotalMilliseconds // Explicit type\n            printfn \"[+%7.1fms] %s\" elapsedMs message // Format: [+  123.4ms] Log Message\n\nlogTimeline\n|> TL.map logReaction // Using TL.map\n|> ignore // Setup the side effect, ignore the resulting Timeline\u003Cunit>\n\n// --- Step Timelines Definition ---\n// Timelines to hold results (string) or indicate absence (null)\n// These act as receivers for each asynchronous step's completion.\nlet step0 : Timeline\u003Cstring> = Timeline null // Initial trigger (using null)\nlet step1 : Timeline\u003Cstring> = Timeline null // Receiver for step 1 result\nlet step2 : Timeline\u003Cstring> = Timeline null // Receiver for step 2 result\nlet step3 : Timeline\u003Cstring> = Timeline null // Receiver for step 3 (final) result\n\n// --- Asynchronous Chain Construction ---\n// Build the chain starting from step0, linking binds sequentially\nlet asyncChainResultTimeline : Timeline\u003Cstring> = // This variable will ultimately point to the same timeline as step3\n    step0\n    |> TL.bind (fun value -> // Reacts to step0 updates. 'value' is string\n        // Check if the trigger value is valid (not null)\n        if isNull value then\n            () // If value is null, do nothing further in this step\n        else\n            logTimeline |> TL.define Now (sprintf \"Step 0 Triggered with: '%s'\" value) // Using sprintf for F#\n            // Define the async work for step 1\n            let work1 : unit -> unit = // Explicit type for callback\n                fun () -> \n                    let result1 : string = value + \" -> The\" // Perform some work, explicit type\n                    logTimeline |> TL.define Now (sprintf \"Step 1 Produced Result: '%s'\" result1) // Log the result\n                    // Define the result onto the *next* step's timeline to trigger downstream bind\n                    step1 |> TL.define Now result1 // Define the string result directly\n            // Schedule the async work\n            logTimeline |> TL.define Now \"Scheduling Step 1 (2000ms delay)...\"\n            setTimeout work1 2000 // 2000ms delay\n        // IMPORTANT: bind must synchronously return the timeline for the next step\n        step1 // Return step1 timeline as the result of this bind operation\n    )\n    |> TL.bind (fun value -> // Reacts to step1 updates. 'value' is string\n        if isNull value then\n            ()\n        else\n            logTimeline |> TL.define Now (sprintf \"Step 2 Received the Result from Step 1: '%s'\" value)\n            // Define the async work for step 2\n            let work2 : unit -> unit =\n                fun () ->\n                    let result2 : string = value + \" -> Sequence\" // Perform some work\n                    logTimeline |> TL.define Now (sprintf \"Step 2 Produced Result: '%s'\" result2)\n                    step2 |> TL.define Now result2 // Define the string result directly\n            logTimeline |> TL.define Now \"Scheduling Step 2 (3000ms delay)...\"\n            setTimeout work2 3000 // 3000ms delay\n        step2\n    )\n    |> TL.bind (fun value -> // Reacts to step2 updates. 'value' is string\n        if isNull value then\n            ()\n        else\n            logTimeline |> TL.define Now (sprintf \"Step 3 Received the Result from Step 2: '%s'\" value)\n            // Define the async work for step 3\n            let work3 : unit -> unit =\n                fun () ->\n                    let result3 : string = value + \" -> Done!!\"\n                    logTimeline |> TL.define Now (sprintf \"Step 3 Produced Result: '%s'\" result3)\n                    step3 |> TL.define Now result3 // Define the string result directly\n            logTimeline |> TL.define Now \"Scheduling Step 3 (1000ms delay)...\"\n            setTimeout work3 1000 // 1000ms delay\n        step3\n    )\n\n// --- Sequence Start ---\nlogTimeline |> TL.define Now \"Starting sequence...\"\nstopwatch.Start() // Start measuring elapsed time\nstep0 |> TL.define Now \"Hello!\" // Define the initial string value directly\n\n// --- Wait for Completion (Simple Demo Method) ---\n// Wait long enough for all async operations (2s + 3s + 1s = 6s) to complete.\n// NOTE: Thread.Sleep blocks the current thread and is generally not suitable\n// for production applications (especially UI apps), but serves for this simple console demo.\nSystem.Threading.Thread.Sleep(7000) // Wait 7 seconds\n\nstopwatch.Stop() // Stop measuring time\nlogTimeline |> TL.define Now (sprintf \"Sequence finished. Total elapsed: %A\" stopwatch.Elapsed) // Using %A for TimeSpan\n```\n\n## 1.3 Execution Flow Explanation\n\nWhen the above code is executed, the console log will demonstrate the sequential nature of the operations, interleaved with the specified delays. The output, with elapsed time in milliseconds from the start of the sequence, will look similar to this (exact timings may vary slightly):\n\n```\n[+    0.0ms] Starting sequence...\n[+    0.9ms] Step 0 Triggered with: 'Hello!'\n[+    2.6ms] Scheduling Step 1 (2000ms delay)...\n[+ 2025.8ms] Step 1 Produced Result: 'Hello! -> The'\n[+ 2028.5ms] Step 2 Received the Result from Step 1: 'Hello! -> The'\n[+ 2028.6ms] Scheduling Step 2 (3000ms delay)...\n[+ 5030.0ms] Step 2 Produced Result: 'Hello! -> The -> Sequence'\n[+ 5030.1ms] Step 3 Received the Result from Step 2: 'Hello! -> The -> Sequence'\n[+ 5030.3ms] Scheduling Step 3 (1000ms delay)...\n[+ 6031.4ms] Step 3 Produced Result: 'Hello! -> The -> Sequence -> Done!!'\n[+ 7004.8ms] Sequence finished. Total elapsed: 00:00:07.0047507\n```\n\n*(The original log output had `Step 2 Logic: Processing result...` and `Step 3 Logic: Processing result...`. I've updated the F# code example's logging to match the `sprintf` formatting which is more idiomatic F# and also what's used for other log lines, ensuring the \"Received the Result from Step X\" message accurately reflects what the code would output.)*\n\nThis log clearly shows:\n\n1.  The initial `define` on `step0` triggers the first `bind`.\n2.  The first `bind` schedules `work1` after a 2000ms delay.\n3.  After approximately 2000ms, `work1` completes, producing `result1` and defining it onto `step1`.\n4.  The update to `step1` triggers the second `bind`.\n5.  The second `bind` schedules `work2` after a 3000ms delay.\n6.  After approximately 3000ms (cumulative ~5000ms), `work2` completes, producing `result2` and defining it onto `step2`.\n7.  The update to `step2` triggers the third `bind`.\n8.  The third `bind` schedules `work3` after a 1000ms delay.\n9.  After approximately 1000ms (cumulative ~6000ms), `work3` completes, producing `result3` and defining it onto `step3`.\n10. The `Thread.Sleep(7000)` allows all these asynchronous operations to complete before the program logs the final \"Sequence finished\" message.\n\nEach `define` call on a `stepX` timeline effectively triggers the next `bind` in the chain, but only after its corresponding asynchronous `workX` function has completed and called `define`.\n\n## 1.4 Comparison with `Promise.then` (Revisited)\n\nThis pattern achieves an outcome similar to `Promise.then` chaining—sequencing asynchronous operations. However, the underlying mechanisms differ:\n\n* `Timeline` operates as a reactive system where changes to values (events) trigger subsequent processing via dependencies established by `bind`.\n* A `Promise` encapsulates the state (pending, fulfilled, rejected) and eventual result of a single asynchronous operation. `then` reacts to these state transitions.\n\nIn this `Timeline`-based approach, we explicitly manage intermediate `Timeline` instances (`step1`, `step2`, `step3`) to serve as the \"links\" in the chain, receiving results and triggering the next asynchronous step.\n\n## 1.5 Summary and Next Steps\n\nThe `TL.bind` operation, a core part of the Monad structure of `Timeline` (as we explored in Unit 4), is exceptionally flexible. As this chapter's `setTimeout` example demonstrated, `bind` can be used directly, without any additional specialized combinator functions, to construct relatively complex patterns like asynchronous event chains. This pattern of pre-defining \"receiver\" timelines and returning them from within the `bind` function allows us to sequence asynchronous operations in a manner reminiscent of `Promise.then` chaining, but using only the fundamental `Timeline` mechanisms. This ability to build sophisticated control flows from core components underscores the power inherent in the `Timeline` library's design.\n\nWhile `TL.bind` alone _can_ achieve such asynchronous sequencing, setting up these chains manually, especially with the need for explicit intermediate \"receiver\" timelines for each step, can become verbose and somewhat imperative in style for more complex scenarios. Furthermore, this manual `bind` chaining doesn't directly address other common needs when working with multiple timelines, such as:\n\n* Filtering out redundant consecutive values from a timeline to optimize updates (which we will cover in detail in **Chapter 6: Filtering Timelines – `TL.distinctUntilChanged`**).\n* Combining the latest values from two different timelines point-wise using a specified function (the topic of **Chapter 5: General Point-wise Combination: `TL.zipWith`** – *Self-correction: Reflecting the new agreed chapter order where `zipWith` (Ch5) comes before `distinctUntilChanged` (Ch6)*).\n* Establishing more declarative, high-level patterns for logical combinations like \"OR\" and \"AND\". The development of such robust logical combinators, grounded in algebraic principles like Monoids, will be a key focus starting from **Chapter 2: Towards Monoidal Timelines**, leading to both \"naive\" Monoidal implementations (covered in **Chapter 3**) and then \"refined\" `zipWith`-based approaches (detailed in **Chapter 7**).\n\nThe manual verbosity and the need for these other common patterns of combination naturally lead us to the utility of specialized, higher-order functions – **combinators** – designed to simplify these tasks and allow for more declarative and robust construction of reactive logic. The subsequent chapters in this section will systematically build up this toolkit.","src/content/docs/en/book/unit-5/section-1/1-bind-chain.md","eae8fe0c0003bf3d",{"html":1439,"metadata":1440},"\u003Cp>Before diving into specialized functions for combining multiple timelines, which will be covered later, let’s first explore how the core \u003Ccode dir=\"auto\">Timeline\u003C/code> feature, specifically \u003Ccode dir=\"auto\">TL.bind\u003C/code>, can itself be used to orchestrate sequential operations. This is particularly relevant for \u003Cstrong>asynchronous event chains\u003C/strong>. This approach demonstrates an effect similar to \u003Ccode dir=\"auto\">Promise.then\u003C/code> chaining in JavaScript but is achieved using only the fundamental \u003Ccode dir=\"auto\">Timeline\u003C/code> mechanisms without requiring additional combinator functions. Understanding this foundational capability of \u003Ccode dir=\"auto\">bind\u003C/code> provides valuable insight into the power and flexibility of the core \u003Ccode dir=\"auto\">Timeline\u003C/code> system.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"11-mechanism-of-chaining\">1.1 Mechanism of Chaining\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#11-mechanism-of-chaining\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “1.1 Mechanism of Chaining”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The key to understanding this asynchronous chaining pattern lies in \u003Cstrong>pre-defining \u003Ccode dir=\"auto\">Timeline\u003C/code> instances outside the \u003Ccode dir=\"auto\">bind\u003C/code> chain to act as receivers for the results of each asynchronous step and triggers for the subsequent step\u003C/strong>. These \u003Ccode dir=\"auto\">Timeline\u003C/code>s serve as “mailboxes” where the outcome of an asynchronous operation is \u003Ccode dir=\"auto\">define\u003C/code>d upon completion.\u003C/p>\n\u003Cp>A concrete example of such timelines can be found in Unit 4, where we used \u003Ccode dir=\"auto\">httpResponseTimeline\u003C/code> to asynchronously receive the result of an HTTP request. That \u003Ccode dir=\"auto\">Timeline\u003C/code> waited for an asynchronous I/O result to be \u003Ccode dir=\"auto\">define\u003C/code>d and then triggered subsequent actions (like logging via \u003Ccode dir=\"auto\">link\u003C/code>). The \u003Ccode dir=\"auto\">Timeline\u003C/code>s we pre-define in this asynchronous chain (named \u003Ccode dir=\"auto\">step1\u003C/code>, \u003Ccode dir=\"auto\">step2\u003C/code>, \u003Ccode dir=\"auto\">step3\u003C/code> in the code example) fulfill exactly this role. Thus, \u003Cstrong>each \u003Ccode dir=\"auto\">stepX\u003C/code> timeline corresponds to a specific “I/O wrapper timeline” or “step completion notification timeline,” designated to receive the result of its corresponding asynchronous operation\u003C/strong> (the work done inside \u003Ccode dir=\"auto\">setTimeout\u003C/code> in our example).\u003C/p>\n\u003Cp>With this structure in mind, the asynchronous chain operates as follows:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Trigger\u003C/strong>: Defining a value onto the initial \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">step0\u003C/code>) activates the first \u003Ccode dir=\"auto\">bind\u003C/code> in the chain.\u003C/li>\n\u003Cli>\u003Cstrong>Start Async Work\u003C/strong>: The function within the \u003Ccode dir=\"auto\">bind\u003C/code> initiates the asynchronous operation for the first step.\u003C/li>\n\u003Cli>\u003Cstrong>Return Next Receiver Timeline\u003C/strong>: The function within \u003Ccode dir=\"auto\">bind\u003C/code> must \u003Cstrong>synchronously\u003C/strong> return the \u003Cstrong>pre-defined \u003Ccode dir=\"auto\">Timeline\u003C/code> designated as the receiver for the \u003Cem>next\u003C/em> step’s result\u003C/strong> (\u003Ccode dir=\"auto\">step1\u003C/code>). This satisfies the type signature of \u003Ccode dir=\"auto\">bind\u003C/code> (\u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Async Completion and \u003Ccode dir=\"auto\">define\u003C/code> on Receiver\u003C/strong>: When the first asynchronous operation completes, its callback function calls \u003Ccode dir=\"auto\">TL.define\u003C/code> on the receiver \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">step1\u003C/code>), storing the result.\u003C/li>\n\u003Cli>\u003Cstrong>Chain Reaction\u003C/strong>: The update (\u003Ccode dir=\"auto\">define\u003C/code>) to \u003Ccode dir=\"auto\">step1\u003C/code> triggers the next \u003Ccode dir=\"auto\">bind\u003C/code> connected to it, repeating the process for subsequent steps (\u003Ccode dir=\"auto\">step2\u003C/code>, \u003Ccode dir=\"auto\">step3\u003C/code>…).\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"12-code-example-asynchronous-sequence-with-settimeout\">1.2 Code Example: Asynchronous Sequence with \u003Ccode dir=\"auto\">setTimeout\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#12-code-example-asynchronous-sequence-with-settimeout\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “1.2 Code Example: Asynchronous Sequence with setTimeout”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The following example uses a simple \u003Ccode dir=\"auto\">setTimeout\u003C/code> helper (using \u003Ccode dir=\"auto\">System.Timers\u003C/code>) combined with \u003Ccode dir=\"auto\">TL.bind\u003C/code> to implement an asynchronous sequence that processes messages with delays of 2 seconds, then 3 seconds, then 1 second, logging the progress using elapsed time. Note that this example uses \u003Ccode dir=\"auto\">null\u003C/code> to represent the absence of a value in the \u003Ccode dir=\"auto\">stepX\u003C/code> timelines, consistent with earlier discussions.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For DateTime, TimeSpan, Thread\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System.Timers \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For Timer\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System.Diagnostics \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Required for Stopwatch\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming Timeline factory, Now value, and TL module are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No 'open Timeline.TL' as per style guide\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Globally accessible isNull helper (as defined or assumed from Chapter 0)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let isNull value = obj.ReferenceEquals(value, null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Stopwatch for Elapsed Time ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">stopwatch\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Stopwatch \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Stopwatch\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Helper: Executes function f after 'delay' ms (simple version)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to F# style guide for function definition\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">setTimeout\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">) ->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f delay \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timer\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">new\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timer\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float delay\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timer.AutoReset \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timer.Elapsed.Add\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> _ \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">())\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Execute the callback directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timer.Start\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Error handling and Dispose are omitted for simplicity in this example.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// In a real application, timer disposal would be important.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Logging Timeline Setup ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline dedicated to receiving log messages\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initialize with null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reaction: Print any message defined on logTimeline with elapsed time\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to F# style guide for function application and definition\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logReaction\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> message \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function passed to TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Only print if the message is not null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isNull message \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to if/then/else style and using global isNull\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Do nothing if message is null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Get current elapsed time and format it\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">elapsedMs\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> float \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> stopwatch.Elapsed.TotalMilliseconds \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[+\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%7.1f\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">ms] \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> elapsedMs message \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Format: [+  123.4ms] Log Message\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map logReaction \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Setup the side effect, ignore the resulting Timeline&#x3C;unit>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Step Timelines Definition ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timelines to hold results (string) or indicate absence (null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// These act as receivers for each asynchronous step's completion.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">step0\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial trigger (using null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">step1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Receiver for step 1 result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">step2\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Receiver for step 2 result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">step3\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Receiver for step 3 (final) result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Asynchronous Chain Construction ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Build the chain starting from step0, linking binds sequentially\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">asyncChainResultTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This variable will ultimately point to the same timeline as step3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step0\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reacts to step0 updates. 'value' is string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Check if the trigger value is valid (not null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isNull value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// If value is null, do nothing further in this step\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 0 Triggered with: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using sprintf for F#\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the async work for step 1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">work1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type for callback\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> -> The\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Perform some work, explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 1 Produced Result: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Log the result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the result onto the *next* step's timeline to trigger downstream bind\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now result1 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the string result directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Schedule the async work\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Scheduling Step 1 (2000ms delay)...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">setTimeout work1 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2000\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2000ms delay\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// IMPORTANT: bind must synchronously return the timeline for the next step\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step1 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Return step1 timeline as the result of this bind operation\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reacts to step1 updates. 'value' is string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isNull value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 2 Received the Result from Step 1: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the async work for step 2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">work2\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result2\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> -> Sequence\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Perform some work\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 2 Produced Result: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step2 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now result2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the string result directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Scheduling Step 2 (3000ms delay)...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">setTimeout work2 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">3000\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3000ms delay\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reacts to step2 updates. 'value' is string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isNull value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 3 Received the Result from Step 2: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the async work for step 3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">work3\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result3\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> -> Done!!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Step 3 Produced Result: '\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">'\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> result3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step3 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now result3 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the string result directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Scheduling Step 3 (1000ms delay)...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">setTimeout work3 \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1000\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1000ms delay\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step3\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Sequence Start ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Starting sequence...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">stopwatch.Start\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start measuring elapsed time\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">step0 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the initial string value directly\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Wait for Completion (Simple Demo Method) ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Wait long enough for all async operations (2s + 3s + 1s = 6s) to complete.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// NOTE: Thread.Sleep blocks the current thread and is generally not suitable\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// for production applications (especially UI apps), but serves for this simple console demo.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">System.Threading.Thread.Sleep\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">7000\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Wait 7 seconds\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">stopwatch.Stop\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Stop measuring time\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Sequence finished. Total elapsed: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> stopwatch.Elapsed\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using %A for TimeSpan\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open System // For DateTime, TimeSpan, Threadopen System.Timers // For Timeropen System.Diagnostics // Required for Stopwatch// Assuming Timeline factory, Now value, and TL module are accessible// No &#x27;open Timeline.TL&#x27; as per style guide// Globally accessible isNull helper (as defined or assumed from Chapter 0)// let isNull value = obj.ReferenceEquals(value, null)// --- Stopwatch for Elapsed Time ---let stopwatch : Stopwatch = Stopwatch() // Explicit type// Helper: Executes function f after &#x27;delay&#x27; ms (simple version)// Adhering to F# style guide for function definitionlet setTimeout : (unit -> unit) -> int -> unit =    fun f delay ->        let timer = new Timer(float delay)        timer.AutoReset \u003C- false        timer.Elapsed.Add(fun _ -> f()) // Execute the callback directly        timer.Start()        // Error handling and Dispose are omitted for simplicity in this example.        // In a real application, timer disposal would be important.// --- Logging Timeline Setup ---// Timeline dedicated to receiving log messageslet logTimeline : Timeline\u003Cstring> = Timeline null // Initialize with null// Reaction: Print any message defined on logTimeline with elapsed time// Adhering to F# style guide for function application and definitionlet logReaction : string -> unit =    fun message -> // Function passed to TL.map        // Only print if the message is not null        if isNull message then // Adhering to if/then/else style and using global isNull            () // Do nothing if message is null        else            // Get current elapsed time and format it            let elapsedMs : float = stopwatch.Elapsed.TotalMilliseconds // Explicit type            printfn &#x22;[+%7.1fms] %s&#x22; elapsedMs message // Format: [+  123.4ms] Log MessagelogTimeline|> TL.map logReaction // Using TL.map|> ignore // Setup the side effect, ignore the resulting Timeline\u003Cunit>// --- Step Timelines Definition ---// Timelines to hold results (string) or indicate absence (null)// These act as receivers for each asynchronous step&#x27;s completion.let step0 : Timeline\u003Cstring> = Timeline null // Initial trigger (using null)let step1 : Timeline\u003Cstring> = Timeline null // Receiver for step 1 resultlet step2 : Timeline\u003Cstring> = Timeline null // Receiver for step 2 resultlet step3 : Timeline\u003Cstring> = Timeline null // Receiver for step 3 (final) result// --- Asynchronous Chain Construction ---// Build the chain starting from step0, linking binds sequentiallylet asyncChainResultTimeline : Timeline\u003Cstring> = // This variable will ultimately point to the same timeline as step3    step0    |> TL.bind (fun value -> // Reacts to step0 updates. &#x27;value&#x27; is string        // Check if the trigger value is valid (not null)        if isNull value then            () // If value is null, do nothing further in this step        else            logTimeline |> TL.define Now (sprintf &#x22;Step 0 Triggered with: &#x27;%s&#x27;&#x22; value) // Using sprintf for F#            // Define the async work for step 1            let work1 : unit -> unit = // Explicit type for callback                fun () ->                    let result1 : string = value + &#x22; -> The&#x22; // Perform some work, explicit type                    logTimeline |> TL.define Now (sprintf &#x22;Step 1 Produced Result: &#x27;%s&#x27;&#x22; result1) // Log the result                    // Define the result onto the *next* step&#x27;s timeline to trigger downstream bind                    step1 |> TL.define Now result1 // Define the string result directly            // Schedule the async work            logTimeline |> TL.define Now &#x22;Scheduling Step 1 (2000ms delay)...&#x22;            setTimeout work1 2000 // 2000ms delay        // IMPORTANT: bind must synchronously return the timeline for the next step        step1 // Return step1 timeline as the result of this bind operation    )    |> TL.bind (fun value -> // Reacts to step1 updates. &#x27;value&#x27; is string        if isNull value then            ()        else            logTimeline |> TL.define Now (sprintf &#x22;Step 2 Received the Result from Step 1: &#x27;%s&#x27;&#x22; value)            // Define the async work for step 2            let work2 : unit -> unit =                fun () ->                    let result2 : string = value + &#x22; -> Sequence&#x22; // Perform some work                    logTimeline |> TL.define Now (sprintf &#x22;Step 2 Produced Result: &#x27;%s&#x27;&#x22; result2)                    step2 |> TL.define Now result2 // Define the string result directly            logTimeline |> TL.define Now &#x22;Scheduling Step 2 (3000ms delay)...&#x22;            setTimeout work2 3000 // 3000ms delay        step2    )    |> TL.bind (fun value -> // Reacts to step2 updates. &#x27;value&#x27; is string        if isNull value then            ()        else            logTimeline |> TL.define Now (sprintf &#x22;Step 3 Received the Result from Step 2: &#x27;%s&#x27;&#x22; value)            // Define the async work for step 3            let work3 : unit -> unit =                fun () ->                    let result3 : string = value + &#x22; -> Done!!&#x22;                    logTimeline |> TL.define Now (sprintf &#x22;Step 3 Produced Result: &#x27;%s&#x27;&#x22; result3)                    step3 |> TL.define Now result3 // Define the string result directly            logTimeline |> TL.define Now &#x22;Scheduling Step 3 (1000ms delay)...&#x22;            setTimeout work3 1000 // 1000ms delay        step3    )// --- Sequence Start ---logTimeline |> TL.define Now &#x22;Starting sequence...&#x22;stopwatch.Start() // Start measuring elapsed timestep0 |> TL.define Now &#x22;Hello!&#x22; // Define the initial string value directly// --- Wait for Completion (Simple Demo Method) ---// Wait long enough for all async operations (2s + 3s + 1s = 6s) to complete.// NOTE: Thread.Sleep blocks the current thread and is generally not suitable// for production applications (especially UI apps), but serves for this simple console demo.System.Threading.Thread.Sleep(7000) // Wait 7 secondsstopwatch.Stop() // Stop measuring timelogTimeline |> TL.define Now (sprintf &#x22;Sequence finished. Total elapsed: %A&#x22; stopwatch.Elapsed) // Using %A for TimeSpan\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"13-execution-flow-explanation\">1.3 Execution Flow Explanation\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#13-execution-flow-explanation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “1.3 Execution Flow Explanation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>When the above code is executed, the console log will demonstrate the sequential nature of the operations, interleaved with the specified delays. The output, with elapsed time in milliseconds from the start of the sequence, will look similar to this (exact timings may vary slightly):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+    0.0ms] Starting sequence...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+    0.9ms] Step 0 Triggered with: 'Hello!'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+    2.6ms] Scheduling Step 1 (2000ms delay)...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 2025.8ms] Step 1 Produced Result: 'Hello! -> The'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 2028.5ms] Step 2 Received the Result from Step 1: 'Hello! -> The'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 2028.6ms] Scheduling Step 2 (3000ms delay)...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 5030.0ms] Step 2 Produced Result: 'Hello! -> The -> Sequence'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 5030.1ms] Step 3 Received the Result from Step 2: 'Hello! -> The -> Sequence'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 5030.3ms] Scheduling Step 3 (1000ms delay)...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 6031.4ms] Step 3 Produced Result: 'Hello! -> The -> Sequence -> Done!!'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">[+ 7004.8ms] Sequence finished. Total elapsed: 00:00:07.0047507\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"[+    0.0ms] Starting sequence...[+    0.9ms] Step 0 Triggered with: &#x27;Hello!&#x27;[+    2.6ms] Scheduling Step 1 (2000ms delay)...[+ 2025.8ms] Step 1 Produced Result: &#x27;Hello! -> The&#x27;[+ 2028.5ms] Step 2 Received the Result from Step 1: &#x27;Hello! -> The&#x27;[+ 2028.6ms] Scheduling Step 2 (3000ms delay)...[+ 5030.0ms] Step 2 Produced Result: &#x27;Hello! -> The -> Sequence&#x27;[+ 5030.1ms] Step 3 Received the Result from Step 2: &#x27;Hello! -> The -> Sequence&#x27;[+ 5030.3ms] Scheduling Step 3 (1000ms delay)...[+ 6031.4ms] Step 3 Produced Result: &#x27;Hello! -> The -> Sequence -> Done!!&#x27;[+ 7004.8ms] Sequence finished. Total elapsed: 00:00:07.0047507\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(The original log output had \u003Ccode dir=\"auto\">Step 2 Logic: Processing result...\u003C/code> and \u003Ccode dir=\"auto\">Step 3 Logic: Processing result...\u003C/code>. I’ve updated the F# code example’s logging to match the \u003Ccode dir=\"auto\">sprintf\u003C/code> formatting which is more idiomatic F# and also what’s used for other log lines, ensuring the “Received the Result from Step X” message accurately reflects what the code would output.)\u003C/em>\u003C/p>\n\u003Cp>This log clearly shows:\u003C/p>\n\u003Col>\n\u003Cli>The initial \u003Ccode dir=\"auto\">define\u003C/code> on \u003Ccode dir=\"auto\">step0\u003C/code> triggers the first \u003Ccode dir=\"auto\">bind\u003C/code>.\u003C/li>\n\u003Cli>The first \u003Ccode dir=\"auto\">bind\u003C/code> schedules \u003Ccode dir=\"auto\">work1\u003C/code> after a 2000ms delay.\u003C/li>\n\u003Cli>After approximately 2000ms, \u003Ccode dir=\"auto\">work1\u003C/code> completes, producing \u003Ccode dir=\"auto\">result1\u003C/code> and defining it onto \u003Ccode dir=\"auto\">step1\u003C/code>.\u003C/li>\n\u003Cli>The update to \u003Ccode dir=\"auto\">step1\u003C/code> triggers the second \u003Ccode dir=\"auto\">bind\u003C/code>.\u003C/li>\n\u003Cli>The second \u003Ccode dir=\"auto\">bind\u003C/code> schedules \u003Ccode dir=\"auto\">work2\u003C/code> after a 3000ms delay.\u003C/li>\n\u003Cli>After approximately 3000ms (cumulative ~5000ms), \u003Ccode dir=\"auto\">work2\u003C/code> completes, producing \u003Ccode dir=\"auto\">result2\u003C/code> and defining it onto \u003Ccode dir=\"auto\">step2\u003C/code>.\u003C/li>\n\u003Cli>The update to \u003Ccode dir=\"auto\">step2\u003C/code> triggers the third \u003Ccode dir=\"auto\">bind\u003C/code>.\u003C/li>\n\u003Cli>The third \u003Ccode dir=\"auto\">bind\u003C/code> schedules \u003Ccode dir=\"auto\">work3\u003C/code> after a 1000ms delay.\u003C/li>\n\u003Cli>After approximately 1000ms (cumulative ~6000ms), \u003Ccode dir=\"auto\">work3\u003C/code> completes, producing \u003Ccode dir=\"auto\">result3\u003C/code> and defining it onto \u003Ccode dir=\"auto\">step3\u003C/code>.\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">Thread.Sleep(7000)\u003C/code> allows all these asynchronous operations to complete before the program logs the final “Sequence finished” message.\u003C/li>\n\u003C/ol>\n\u003Cp>Each \u003Ccode dir=\"auto\">define\u003C/code> call on a \u003Ccode dir=\"auto\">stepX\u003C/code> timeline effectively triggers the next \u003Ccode dir=\"auto\">bind\u003C/code> in the chain, but only after its corresponding asynchronous \u003Ccode dir=\"auto\">workX\u003C/code> function has completed and called \u003Ccode dir=\"auto\">define\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"14-comparison-with-promisethen-revisited\">1.4 Comparison with \u003Ccode dir=\"auto\">Promise.then\u003C/code> (Revisited)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#14-comparison-with-promisethen-revisited\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “1.4 Comparison with Promise.then (Revisited)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This pattern achieves an outcome similar to \u003Ccode dir=\"auto\">Promise.then\u003C/code> chaining—sequencing asynchronous operations. However, the underlying mechanisms differ:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">Timeline\u003C/code> operates as a reactive system where changes to values (events) trigger subsequent processing via dependencies established by \u003Ccode dir=\"auto\">bind\u003C/code>.\u003C/li>\n\u003Cli>A \u003Ccode dir=\"auto\">Promise\u003C/code> encapsulates the state (pending, fulfilled, rejected) and eventual result of a single asynchronous operation. \u003Ccode dir=\"auto\">then\u003C/code> reacts to these state transitions.\u003C/li>\n\u003C/ul>\n\u003Cp>In this \u003Ccode dir=\"auto\">Timeline\u003C/code>-based approach, we explicitly manage intermediate \u003Ccode dir=\"auto\">Timeline\u003C/code> instances (\u003Ccode dir=\"auto\">step1\u003C/code>, \u003Ccode dir=\"auto\">step2\u003C/code>, \u003Ccode dir=\"auto\">step3\u003C/code>) to serve as the “links” in the chain, receiving results and triggering the next asynchronous step.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"15-summary-and-next-steps\">1.5 Summary and Next Steps\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#15-summary-and-next-steps\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “1.5 Summary and Next Steps”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation, a core part of the Monad structure of \u003Ccode dir=\"auto\">Timeline\u003C/code> (as we explored in Unit 4), is exceptionally flexible. As this chapter’s \u003Ccode dir=\"auto\">setTimeout\u003C/code> example demonstrated, \u003Ccode dir=\"auto\">bind\u003C/code> can be used directly, without any additional specialized combinator functions, to construct relatively complex patterns like asynchronous event chains. This pattern of pre-defining “receiver” timelines and returning them from within the \u003Ccode dir=\"auto\">bind\u003C/code> function allows us to sequence asynchronous operations in a manner reminiscent of \u003Ccode dir=\"auto\">Promise.then\u003C/code> chaining, but using only the fundamental \u003Ccode dir=\"auto\">Timeline\u003C/code> mechanisms. This ability to build sophisticated control flows from core components underscores the power inherent in the \u003Ccode dir=\"auto\">Timeline\u003C/code> library’s design.\u003C/p>\n\u003Cp>While \u003Ccode dir=\"auto\">TL.bind\u003C/code> alone \u003Cem>can\u003C/em> achieve such asynchronous sequencing, setting up these chains manually, especially with the need for explicit intermediate “receiver” timelines for each step, can become verbose and somewhat imperative in style for more complex scenarios. Furthermore, this manual \u003Ccode dir=\"auto\">bind\u003C/code> chaining doesn’t directly address other common needs when working with multiple timelines, such as:\u003C/p>\n\u003Cul>\n\u003Cli>Filtering out redundant consecutive values from a timeline to optimize updates (which we will cover in detail in \u003Cstrong>Chapter 6: Filtering Timelines – \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/strong>).\u003C/li>\n\u003Cli>Combining the latest values from two different timelines point-wise using a specified function (the topic of \u003Cstrong>Chapter 5: General Point-wise Combination: \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>\u003C/strong> – \u003Cem>Self-correction: Reflecting the new agreed chapter order where \u003Ccode dir=\"auto\">zipWith\u003C/code> (Ch5) comes before \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> (Ch6)\u003C/em>).\u003C/li>\n\u003Cli>Establishing more declarative, high-level patterns for logical combinations like “OR” and “AND”. The development of such robust logical combinators, grounded in algebraic principles like Monoids, will be a key focus starting from \u003Cstrong>Chapter 2: Towards Monoidal Timelines\u003C/strong>, leading to both “naive” Monoidal implementations (covered in \u003Cstrong>Chapter 3\u003C/strong>) and then “refined” \u003Ccode dir=\"auto\">zipWith\u003C/code>-based approaches (detailed in \u003Cstrong>Chapter 7\u003C/strong>).\u003C/li>\n\u003C/ul>\n\u003Cp>The manual verbosity and the need for these other common patterns of combination naturally lead us to the utility of specialized, higher-order functions – \u003Cstrong>combinators\u003C/strong> – designed to simplify these tasks and allow for more declarative and robust construction of reactive logic. The subsequent chapters in this section will systematically build up this toolkit.\u003C/p>",{"headings":1441,"localImagePaths":1457,"remoteImagePaths":1458,"frontmatter":1459,"imagePaths":1460},[1442,1445,1448,1451,1454],{"depth":182,"slug":1443,"text":1444},"11-mechanism-of-chaining","1.1 Mechanism of Chaining",{"depth":182,"slug":1446,"text":1447},"12-code-example-asynchronous-sequence-with-settimeout","1.2 Code Example: Asynchronous Sequence with setTimeout",{"depth":182,"slug":1449,"text":1450},"13-execution-flow-explanation","1.3 Execution Flow Explanation",{"depth":182,"slug":1452,"text":1453},"14-comparison-with-promisethen-revisited","1.4 Comparison with Promise.then (Revisited)",{"depth":182,"slug":1455,"text":1456},"15-summary-and-next-steps","1.5 Summary and Next Steps",[],[],{"title":1430,"description":1431},[],"en/book/unit-5/section-1/2-timeline-monoid",{"id":1461,"data":1463,"body":1469,"filePath":1470,"digest":1471,"rendered":1472},{"title":1464,"description":1465,"editUrl":16,"head":1466,"template":18,"sidebar":1467,"pagefind":16,"draft":20},"Chapter 2: Towards Monoidal Timelines","Chapter Goal: This chapter introduces the theoretical groundwork for combining Timeline\u003Cbool> instances in a way that adheres to Monoid laws. We aim to show how this algebraic structure contributes to building robust and predictable reactive systems, especially for logical boolean conditions. We will explore the \"what\" and \"why\" at a conceptual level, paving the way for the \"how\" – the concrete \"naive\" Monoidal implementations in the subsequent chapter – without presupposing knowledge of general-purpose combinators like TL.zipWith at this stage.",[],{"hidden":20,"attrs":1468},{},"**Chapter Goal:** This chapter introduces the theoretical groundwork for combining `Timeline\u003Cbool>` instances in a way that adheres to Monoid laws. We aim to show how this algebraic structure contributes to building robust and predictable reactive systems, especially for logical boolean conditions. We will explore the \"what\" and \"why\" at a conceptual level, paving the way for the \"how\" – the concrete \"naive\" Monoidal implementations in the subsequent chapter – without presupposing knowledge of general-purpose combinators like `TL.zipWith` at this stage.\n\n## 2.1 Brief Recap: What is a Monoid and Why is it Important?\n\nIn Unit 2 (not part of this specific document set, but assumed background), we explored several fundamental algebraic structures, with the **Monoid** being a cornerstone. Let's briefly revisit its definition:\n\nA Monoid consists of three key components:\n\n1.  A **set of values**: In our current context, we will be considering the set of all possible `Timeline\u003Cbool>` instances.\n2.  An **associative binary operation**: This is a function that takes two values from the set and combines them to produce a new value *within the same set*. For timelines, this would look like `combineOp: Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>`. \"Associative\" means that when combining three or more values, the order in which pairs are combined doesn't affect the final result: `(a combineOp b) combineOp c` is equivalent to `a combineOp (b combineOp c)`.\n3.  An **identity element** (or \"unit\"): This is a special value from the set that, when combined with any other value using the binary operation, leaves the other value unchanged. For timelines, this would be an `identityTimeline: Timeline\u003Cbool>`.\n\nThe power of a Monoid lies in the guarantees provided by its laws (associativity and identity). These properties ensure that combining multiple elements is **predictable and robust**. Think of LEGO blocks or USB devices: you can connect them in various sequences, and the final assembly or connected system behaves consistently. This \"just connect and it works\" characteristic is what we aim to bring to the world of combining reactive, time-varying boolean values. If we can define Monoidal operations for `Timeline\u003Cbool>`, we can compose complex reactive logic with greater confidence and clarity.\n\n## 2.2 The Quest: Can Timelines Themselves Form a Monoid?\n\nThis brings us to a central question: Can `Timeline` instances, particularly `Timeline\u003Cbool>` which we use for logical conditions, be combined in such a way that they form a Monoid? Can we define a binary operation (let's call them `TL.naiveOr` or `TL.naiveAnd` conceptually for now, aligning with our refined terminology) and identify corresponding identity timelines (`TL.FalseTimeline` or `TL.TrueTimeline`) that satisfy the Monoid laws?\n\nThe motivation for this quest is significant. Imagine building a UI where a \"Submit\" button should only be enabled if multiple conditions, each represented by a `Timeline\u003Cbool>`, are met (e.g., `userIsAuthenticated && formIsValid && termsAccepted`). If the way we combine these `Timeline\u003Cbool>` instances forms a Monoid:\n\n*   We can group and combine these conditions in any order without changing the final outcome (`(cond1 && cond2) && cond3` is the same as `cond1 && (cond2 && cond3)`).\n*   We have a clear understanding of neutral or \"identity\" conditions.\nThis leads to reactive systems that are inherently more robust, easier to reason about, and simpler to refactor, especially as the number of combined conditions grows.\n\n## 2.3 Focusing on `Timeline\u003Cbool>`: Logical Combinations\n\nWhile a general `Timeline\u003C'a>` might form different kinds of Monoids depending on the type `'a` and the chosen combining logic, this chapter (and the immediately following one) will focus specifically on `Timeline\u003Cbool>` and its logical combinations – OR and AND semantics.\n\nThis focus is natural because the `bool` type itself already forms well-known Monoids (as assumed to be discussed in Unit 2):\n\n*   **`(bool, ||, false)` is a Monoid:**\n    *   Set: `{true, false}`\n    *   Binary Operation: Logical OR (`||`)\n    *   Identity Element: `false`\n*   **`(bool, &&, true)` is a Monoid:**\n    *   Set: `{true, false}`\n    *   Binary Operation: Logical AND (`&&`)\n    *   Identity Element: `true`\n\nOur objective, then, is to see if we can \"lift\" these Monoidal structures from the simple `bool` type into the world of `Timeline\u003Cbool>`. We are looking to establish:\n\n*   A **`TimelineOrMonoid`**: Conceptually, `(Set of all Timeline\u003Cbool> instances, a TL.naiveOr operation, a TL.FalseTimeline identity element)`\n*   A **`TimelineAndMonoid`**: Conceptually, `(Set of all Timeline\u003Cbool> instances, a TL.naiveAnd operation, a TL.TrueTimeline identity element)`\n    *(Self-correction: Using \"naiveOr\" and \"naiveAnd\" here to align with the terminology for the direct implementations that will follow in Chapter 3, distinguishing them from later `TL.or` and `TL.and` which might be `zipWith`-based).*\n\nIf we can successfully define these operations and identity timelines such that they satisfy the Monoid laws, we will have a powerful and principled way to combine reactive boolean conditions.\n\n## 2.4 Defining the \"Combine\" Operation for `Timeline\u003Cbool>` - Conceptually\n\nLet's consider what operations like `TL.naiveOr: Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>` and `TL.naiveAnd: Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>` should *mean* at a conceptual level, without diving into their exact implementation details yet.\n\n**For `TL.naiveOr`:**\n\n*   **Inputs:** Two timelines, `timelineA: Timeline\u003Cbool>` and `timelineB: Timeline\u003Cbool>`.\n*   **Output:** A new `resultTimeline: Timeline\u003Cbool>`.\n*   **Expected Semantics:** The `resultTimeline` should reflect the logical OR of its inputs over time.\n    *   If `timelineA`'s value becomes `true` at some point, `resultTimeline` should also become `true`.\n    *   If `timelineB`'s value becomes `true` at some point, `resultTimeline` should also become `true`.\n    *   If both `timelineA` and `timelineB` have the value `false`, `resultTimeline` should have the value `false`.\n\n**For `TL.naiveAnd`:**\n\n*   **Inputs:** Two timelines, `timelineA: Timeline\u003Cbool>` and `timelineB: Timeline\u003Cbool>`.\n*   **Output:** A new `resultTimeline: Timeline\u003Cbool>`.\n*   **Expected Semantics:** The `resultTimeline` should reflect the logical AND of its inputs over time.\n    *   If `timelineA`'s value becomes `false` at some point, `resultTimeline` should also become `false`.\n    *   If `timelineB`'s value becomes `false` at some point, `resultTimeline` should also become `false`.\n    *   Only if both `timelineA` and `timelineB` have the value `true`, should `resultTimeline` have the value `true`.\n\nIt's important to distinguish the Monoid's identity element from what might be called a \"dominant\" or \"annihilating\" element in some contexts.\n\n*   For logical OR (`||`), `false` is the identity (`x || false == x`). `true` is dominant/annihilating (`x || true == true`).\n*   For logical AND (`&&`), `true` is the identity (`x && true == x`). `false` is dominant/annihilating (`x && false == false`).\n\nOur goal is to build our `Timeline` Monoids directly from the underlying `bool` Monoids: `(bool, ||, false)` and `(bool, &&, true)`. The conceptual operations `TL.naiveOr` and `TL.naiveAnd` should, over time, mirror the behavior of `||` and `&&` applied to the values held by the input timelines.\n\n## 2.5 Defining the Identity Elements for `Timeline\u003Cbool>` Combinations\n\nFor `Timeline\u003Cbool>` to form a Monoid with operations like `TL.naiveOr` and `TL.naiveAnd`, we need corresponding identity timelines.\n\n**For `TL.naiveOr` - The `TL.FalseTimeline`:**\nThe identity element for our conceptual `TL.naiveOr` operation must be a `Timeline\u003Cbool>` that, when combined with any other `t: Timeline\u003Cbool>` using `TL.naiveOr`, results in a timeline that behaves identically to `t`.\n\n*   This identity timeline, let's call it `TL.FalseTimeline`, should effectively represent a constant `false` value over time.\n*   It would typically be created as `Timeline false` and never subsequently change (as defined in the Timeline library code).\n*   We expect:\n    *   `t |> TL.naiveOr TL.FalseTimeline` should behave identically to `t`.\n    *   `TL.FalseTimeline |> TL.naiveOr t` should behave identically to `t`.\n\n**For `TL.naiveAnd` - The `TL.TrueTimeline`:**\nSimilarly, the identity element for `TL.naiveAnd` must be a `Timeline\u003Cbool>` that, when combined with any `t: Timeline\u003Cbool>` using `TL.naiveAnd`, results in a timeline behaving identically to `t`.\n\n*   This identity timeline, `TL.TrueTimeline`, should represent a constant `true` value over time.\n*   It would be created as `Timeline true` and never change (as defined in the Timeline library code).\n*   We expect:\n    *   `t |> TL.naiveAnd TL.TrueTimeline` should behave identically to `t`.\n    *   `TL.TrueTimeline |> TL.naiveAnd t` should behave identically to `t`.\n\nThese identity timelines are crucial. They provide the neutral starting point for combinations, ensuring that combining with them doesn't alter the behavior of other timelines in the operation.\n\n## 2.6 The Importance of Monoid Laws for Timeline Combinations\n\nSimply defining conceptual operations and identity elements isn't enough. For `(Timeline\u003Cbool>, TL.naiveOr, TL.FalseTimeline)` and `(Timeline\u003Cbool>, TL.naiveAnd, TL.TrueTimeline)` to be true Monoids, they *must* satisfy the Monoid laws: associativity and identity.\n\n**Associativity Law:**\nThis law dictates that the grouping of operations does not affect the outcome.\n\n*   For `TL.naiveOr`: `(timelineA |> TL.naiveOr timelineB) |> TL.naiveOr timelineC` must behave identically to `timelineA |> TL.naiveOr (timelineB |> TL.naiveOr timelineC)`.\n*   For `TL.naiveAnd`: `(timelineA |> TL.naiveAnd timelineB) |> TL.naiveAnd timelineC` must behave identically to `timelineA |> TL.naiveAnd (timelineB |> TL.naiveAnd timelineC)`.\n\n*Why is associativity crucial?* When you need to combine multiple reactive conditions (e.g., `permissionGranted = isAdmin || isEditor || isAuthor` or `allChecksPassed = check1 && check2 && check3 && check4`), associativity guarantees that you can combine them sequentially or in any nested grouping, and the final reactive behavior will be the same. This greatly simplifies reasoning about complex chains of conditions.\n\n**Identity Law:**\nThis law states that combining any timeline with the identity timeline (for that operation) leaves the original timeline's behavior unchanged.\n\n*   For `TL.naiveOr`: `t |> TL.naiveOr TL.FalseTimeline` is equivalent to `t`, and `TL.FalseTimeline |> TL.naiveOr t` is equivalent to `t`.\n*   For `TL.naiveAnd`: `t |> TL.naiveAnd TL.TrueTimeline` is equivalent to `t`, and `TL.TrueTimeline |> TL.naiveAnd t` is equivalent to `t`.\n\n*Why is the identity law crucial?* It provides a well-defined \"neutral\" or \"do-nothing\" element in combinations. This is useful for building up combinations incrementally or for defining default behaviors.\n\nIf these laws hold, we achieve the same \"LEGO-like\" or \"USB-like\" composability and robustness for our time-varying boolean conditions that Monoids offer in other domains. We can confidently build complex reactive logic by combining simpler pieces, knowing the overall behavior will be predictable and sound.\n\n## 2.7 Preview: Towards Naive Monoidal Implementations\n\nThis chapter has laid the conceptual foundation. We've explored *why* we want Monoidal operations for `Timeline\u003Cbool>` and *what properties* these operations (`TL.naiveOr`, `TL.naiveAnd`) and their identity elements (`TL.FalseTimeline`, `TL.TrueTimeline`) must satisfy.\n\nThe next crucial step, which will be the focus of **Chapter 3: Naive Monoidal Implementations for Booleans** (our newly consolidated chapter), is to delve into *how* we can actually implement these operations in a way that **strictly adheres to the Monoid laws**. We will investigate the internal mechanisms needed to ensure associativity and identity hold true for these reactive, time-varying values, using the direct, \"naive\" construction approach from `Timeline` fundamentals.\nThe `TL` module (previously referred to as `Combinators` module in some original drafts, now standardized as `TL`) will be where this fundamental algebraic structure for timelines comes to life. The goal is to move beyond conceptual desire to concrete, law-abiding implementations.","src/content/docs/en/book/unit-5/section-1/2-timeline-monoid.md","aa935791048aca1a",{"html":1473,"metadata":1474},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter introduces the theoretical groundwork for combining \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances in a way that adheres to Monoid laws. We aim to show how this algebraic structure contributes to building robust and predictable reactive systems, especially for logical boolean conditions. We will explore the “what” and “why” at a conceptual level, paving the way for the “how” – the concrete “naive” Monoidal implementations in the subsequent chapter – without presupposing knowledge of general-purpose combinators like \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> at this stage.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"21-brief-recap-what-is-a-monoid-and-why-is-it-important\">2.1 Brief Recap: What is a Monoid and Why is it Important?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#21-brief-recap-what-is-a-monoid-and-why-is-it-important\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.1 Brief Recap: What is a Monoid and Why is it Important?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Unit 2 (not part of this specific document set, but assumed background), we explored several fundamental algebraic structures, with the \u003Cstrong>Monoid\u003C/strong> being a cornerstone. Let’s briefly revisit its definition:\u003C/p>\n\u003Cp>A Monoid consists of three key components:\u003C/p>\n\u003Col>\n\u003Cli>A \u003Cstrong>set of values\u003C/strong>: In our current context, we will be considering the set of all possible \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances.\u003C/li>\n\u003Cli>An \u003Cstrong>associative binary operation\u003C/strong>: This is a function that takes two values from the set and combines them to produce a new value \u003Cem>within the same set\u003C/em>. For timelines, this would look like \u003Ccode dir=\"auto\">combineOp: Timeline&#x3C;bool> -> Timeline&#x3C;bool> -> Timeline&#x3C;bool>\u003C/code>. “Associative” means that when combining three or more values, the order in which pairs are combined doesn’t affect the final result: \u003Ccode dir=\"auto\">(a combineOp b) combineOp c\u003C/code> is equivalent to \u003Ccode dir=\"auto\">a combineOp (b combineOp c)\u003C/code>.\u003C/li>\n\u003Cli>An \u003Cstrong>identity element\u003C/strong> (or “unit”): This is a special value from the set that, when combined with any other value using the binary operation, leaves the other value unchanged. For timelines, this would be an \u003Ccode dir=\"auto\">identityTimeline: Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>The power of a Monoid lies in the guarantees provided by its laws (associativity and identity). These properties ensure that combining multiple elements is \u003Cstrong>predictable and robust\u003C/strong>. Think of LEGO blocks or USB devices: you can connect them in various sequences, and the final assembly or connected system behaves consistently. This “just connect and it works” characteristic is what we aim to bring to the world of combining reactive, time-varying boolean values. If we can define Monoidal operations for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>, we can compose complex reactive logic with greater confidence and clarity.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"22-the-quest-can-timelines-themselves-form-a-monoid\">2.2 The Quest: Can Timelines Themselves Form a Monoid?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#22-the-quest-can-timelines-themselves-form-a-monoid\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.2 The Quest: Can Timelines Themselves Form a Monoid?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This brings us to a central question: Can \u003Ccode dir=\"auto\">Timeline\u003C/code> instances, particularly \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> which we use for logical conditions, be combined in such a way that they form a Monoid? Can we define a binary operation (let’s call them \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> or \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> conceptually for now, aligning with our refined terminology) and identify corresponding identity timelines (\u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code> or \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>) that satisfy the Monoid laws?\u003C/p>\n\u003Cp>The motivation for this quest is significant. Imagine building a UI where a “Submit” button should only be enabled if multiple conditions, each represented by a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>, are met (e.g., \u003Ccode dir=\"auto\">userIsAuthenticated &#x26;&#x26; formIsValid &#x26;&#x26; termsAccepted\u003C/code>). If the way we combine these \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances forms a Monoid:\u003C/p>\n\u003Cul>\n\u003Cli>We can group and combine these conditions in any order without changing the final outcome (\u003Ccode dir=\"auto\">(cond1 &#x26;&#x26; cond2) &#x26;&#x26; cond3\u003C/code> is the same as \u003Ccode dir=\"auto\">cond1 &#x26;&#x26; (cond2 &#x26;&#x26; cond3)\u003C/code>).\u003C/li>\n\u003Cli>We have a clear understanding of neutral or “identity” conditions.\nThis leads to reactive systems that are inherently more robust, easier to reason about, and simpler to refactor, especially as the number of combined conditions grows.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"23-focusing-on-timelinebool-logical-combinations\">2.3 Focusing on \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>: Logical Combinations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#23-focusing-on-timelinebool-logical-combinations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.3 Focusing on Timeline&#x3C;bool>: Logical Combinations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While a general \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> might form different kinds of Monoids depending on the type \u003Ccode dir=\"auto\">'a\u003C/code> and the chosen combining logic, this chapter (and the immediately following one) will focus specifically on \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> and its logical combinations – OR and AND semantics.\u003C/p>\n\u003Cp>This focus is natural because the \u003Ccode dir=\"auto\">bool\u003C/code> type itself already forms well-known Monoids (as assumed to be discussed in Unit 2):\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">(bool, ||, false)\u003C/code> is a Monoid:\u003C/strong>\n\u003Cul>\n\u003Cli>Set: \u003Ccode dir=\"auto\">{true, false}\u003C/code>\u003C/li>\n\u003Cli>Binary Operation: Logical OR (\u003Ccode dir=\"auto\">||\u003C/code>)\u003C/li>\n\u003Cli>Identity Element: \u003Ccode dir=\"auto\">false\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">(bool, &#x26;&#x26;, true)\u003C/code> is a Monoid:\u003C/strong>\n\u003Cul>\n\u003Cli>Set: \u003Ccode dir=\"auto\">{true, false}\u003C/code>\u003C/li>\n\u003Cli>Binary Operation: Logical AND (\u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code>)\u003C/li>\n\u003Cli>Identity Element: \u003Ccode dir=\"auto\">true\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Our objective, then, is to see if we can “lift” these Monoidal structures from the simple \u003Ccode dir=\"auto\">bool\u003C/code> type into the world of \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>. We are looking to establish:\u003C/p>\n\u003Cul>\n\u003Cli>A \u003Cstrong>\u003Ccode dir=\"auto\">TimelineOrMonoid\u003C/code>\u003C/strong>: Conceptually, \u003Ccode dir=\"auto\">(Set of all Timeline&#x3C;bool> instances, a TL.naiveOr operation, a TL.FalseTimeline identity element)\u003C/code>\u003C/li>\n\u003Cli>A \u003Cstrong>\u003Ccode dir=\"auto\">TimelineAndMonoid\u003C/code>\u003C/strong>: Conceptually, \u003Ccode dir=\"auto\">(Set of all Timeline&#x3C;bool> instances, a TL.naiveAnd operation, a TL.TrueTimeline identity element)\u003C/code>\n\u003Cem>(Self-correction: Using “naiveOr” and “naiveAnd” here to align with the terminology for the direct implementations that will follow in Chapter 3, distinguishing them from later \u003Ccode dir=\"auto\">TL.or\u003C/code> and \u003Ccode dir=\"auto\">TL.and\u003C/code> which might be \u003Ccode dir=\"auto\">zipWith\u003C/code>-based).\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>If we can successfully define these operations and identity timelines such that they satisfy the Monoid laws, we will have a powerful and principled way to combine reactive boolean conditions.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"24-defining-the-combine-operation-for-timelinebool---conceptually\">2.4 Defining the “Combine” Operation for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> - Conceptually\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#24-defining-the-combine-operation-for-timelinebool---conceptually\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.4 Defining the “Combine” Operation for Timeline&#x3C;bool> - Conceptually”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s consider what operations like \u003Ccode dir=\"auto\">TL.naiveOr: Timeline&#x3C;bool> -> Timeline&#x3C;bool> -> Timeline&#x3C;bool>\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd: Timeline&#x3C;bool> -> Timeline&#x3C;bool> -> Timeline&#x3C;bool>\u003C/code> should \u003Cem>mean\u003C/em> at a conceptual level, without diving into their exact implementation details yet.\u003C/p>\n\u003Cp>\u003Cstrong>For \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Inputs:\u003C/strong> Two timelines, \u003Ccode dir=\"auto\">timelineA: Timeline&#x3C;bool>\u003C/code> and \u003Ccode dir=\"auto\">timelineB: Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> A new \u003Ccode dir=\"auto\">resultTimeline: Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Expected Semantics:\u003C/strong> The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should reflect the logical OR of its inputs over time.\n\u003Cul>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineA\u003C/code>’s value becomes \u003Ccode dir=\"auto\">true\u003C/code> at some point, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should also become \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineB\u003C/code>’s value becomes \u003Ccode dir=\"auto\">true\u003C/code> at some point, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should also become \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/li>\n\u003Cli>If both \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> have the value \u003Ccode dir=\"auto\">false\u003C/code>, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should have the value \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>For \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Inputs:\u003C/strong> Two timelines, \u003Ccode dir=\"auto\">timelineA: Timeline&#x3C;bool>\u003C/code> and \u003Ccode dir=\"auto\">timelineB: Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> A new \u003Ccode dir=\"auto\">resultTimeline: Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Expected Semantics:\u003C/strong> The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should reflect the logical AND of its inputs over time.\n\u003Cul>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineA\u003C/code>’s value becomes \u003Ccode dir=\"auto\">false\u003C/code> at some point, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should also become \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineB\u003C/code>’s value becomes \u003Ccode dir=\"auto\">false\u003C/code> at some point, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> should also become \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003Cli>Only if both \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> have the value \u003Ccode dir=\"auto\">true\u003C/code>, should \u003Ccode dir=\"auto\">resultTimeline\u003C/code> have the value \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>It’s important to distinguish the Monoid’s identity element from what might be called a “dominant” or “annihilating” element in some contexts.\u003C/p>\n\u003Cul>\n\u003Cli>For logical OR (\u003Ccode dir=\"auto\">||\u003C/code>), \u003Ccode dir=\"auto\">false\u003C/code> is the identity (\u003Ccode dir=\"auto\">x || false == x\u003C/code>). \u003Ccode dir=\"auto\">true\u003C/code> is dominant/annihilating (\u003Ccode dir=\"auto\">x || true == true\u003C/code>).\u003C/li>\n\u003Cli>For logical AND (\u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code>), \u003Ccode dir=\"auto\">true\u003C/code> is the identity (\u003Ccode dir=\"auto\">x &#x26;&#x26; true == x\u003C/code>). \u003Ccode dir=\"auto\">false\u003C/code> is dominant/annihilating (\u003Ccode dir=\"auto\">x &#x26;&#x26; false == false\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>Our goal is to build our \u003Ccode dir=\"auto\">Timeline\u003C/code> Monoids directly from the underlying \u003Ccode dir=\"auto\">bool\u003C/code> Monoids: \u003Ccode dir=\"auto\">(bool, ||, false)\u003C/code> and \u003Ccode dir=\"auto\">(bool, &#x26;&#x26;, true)\u003C/code>. The conceptual operations \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> should, over time, mirror the behavior of \u003Ccode dir=\"auto\">||\u003C/code> and \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code> applied to the values held by the input timelines.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"25-defining-the-identity-elements-for-timelinebool-combinations\">2.5 Defining the Identity Elements for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> Combinations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#25-defining-the-identity-elements-for-timelinebool-combinations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.5 Defining the Identity Elements for Timeline&#x3C;bool> Combinations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> to form a Monoid with operations like \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>, we need corresponding identity timelines.\u003C/p>\n\u003Cp>\u003Cstrong>For \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> - The \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>:\u003C/strong>\nThe identity element for our conceptual \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> operation must be a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that, when combined with any other \u003Ccode dir=\"auto\">t: Timeline&#x3C;bool>\u003C/code> using \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>, results in a timeline that behaves identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/p>\n\u003Cul>\n\u003Cli>This identity timeline, let’s call it \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>, should effectively represent a constant \u003Ccode dir=\"auto\">false\u003C/code> value over time.\u003C/li>\n\u003Cli>It would typically be created as \u003Ccode dir=\"auto\">Timeline false\u003C/code> and never subsequently change (as defined in the Timeline library code).\u003C/li>\n\u003Cli>We expect:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">t |> TL.naiveOr TL.FalseTimeline\u003C/code> should behave identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.FalseTimeline |> TL.naiveOr t\u003C/code> should behave identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>For \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> - The \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>:\u003C/strong>\nSimilarly, the identity element for \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> must be a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that, when combined with any \u003Ccode dir=\"auto\">t: Timeline&#x3C;bool>\u003C/code> using \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>, results in a timeline behaving identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/p>\n\u003Cul>\n\u003Cli>This identity timeline, \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>, should represent a constant \u003Ccode dir=\"auto\">true\u003C/code> value over time.\u003C/li>\n\u003Cli>It would be created as \u003Ccode dir=\"auto\">Timeline true\u003C/code> and never change (as defined in the Timeline library code).\u003C/li>\n\u003Cli>We expect:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">t |> TL.naiveAnd TL.TrueTimeline\u003C/code> should behave identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.TrueTimeline |> TL.naiveAnd t\u003C/code> should behave identically to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>These identity timelines are crucial. They provide the neutral starting point for combinations, ensuring that combining with them doesn’t alter the behavior of other timelines in the operation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"26-the-importance-of-monoid-laws-for-timeline-combinations\">2.6 The Importance of Monoid Laws for Timeline Combinations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#26-the-importance-of-monoid-laws-for-timeline-combinations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.6 The Importance of Monoid Laws for Timeline Combinations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Simply defining conceptual operations and identity elements isn’t enough. For \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveOr, TL.FalseTimeline)\u003C/code> and \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveAnd, TL.TrueTimeline)\u003C/code> to be true Monoids, they \u003Cem>must\u003C/em> satisfy the Monoid laws: associativity and identity.\u003C/p>\n\u003Cp>\u003Cstrong>Associativity Law:\u003C/strong>\nThis law dictates that the grouping of operations does not affect the outcome.\u003C/p>\n\u003Cul>\n\u003Cli>For \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>: \u003Ccode dir=\"auto\">(timelineA |> TL.naiveOr timelineB) |> TL.naiveOr timelineC\u003C/code> must behave identically to \u003Ccode dir=\"auto\">timelineA |> TL.naiveOr (timelineB |> TL.naiveOr timelineC)\u003C/code>.\u003C/li>\n\u003Cli>For \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>: \u003Ccode dir=\"auto\">(timelineA |> TL.naiveAnd timelineB) |> TL.naiveAnd timelineC\u003C/code> must behave identically to \u003Ccode dir=\"auto\">timelineA |> TL.naiveAnd (timelineB |> TL.naiveAnd timelineC)\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cem>Why is associativity crucial?\u003C/em> When you need to combine multiple reactive conditions (e.g., \u003Ccode dir=\"auto\">permissionGranted = isAdmin || isEditor || isAuthor\u003C/code> or \u003Ccode dir=\"auto\">allChecksPassed = check1 &#x26;&#x26; check2 &#x26;&#x26; check3 &#x26;&#x26; check4\u003C/code>), associativity guarantees that you can combine them sequentially or in any nested grouping, and the final reactive behavior will be the same. This greatly simplifies reasoning about complex chains of conditions.\u003C/p>\n\u003Cp>\u003Cstrong>Identity Law:\u003C/strong>\nThis law states that combining any timeline with the identity timeline (for that operation) leaves the original timeline’s behavior unchanged.\u003C/p>\n\u003Cul>\n\u003Cli>For \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>: \u003Ccode dir=\"auto\">t |> TL.naiveOr TL.FalseTimeline\u003C/code> is equivalent to \u003Ccode dir=\"auto\">t\u003C/code>, and \u003Ccode dir=\"auto\">TL.FalseTimeline |> TL.naiveOr t\u003C/code> is equivalent to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003Cli>For \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>: \u003Ccode dir=\"auto\">t |> TL.naiveAnd TL.TrueTimeline\u003C/code> is equivalent to \u003Ccode dir=\"auto\">t\u003C/code>, and \u003Ccode dir=\"auto\">TL.TrueTimeline |> TL.naiveAnd t\u003C/code> is equivalent to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cem>Why is the identity law crucial?\u003C/em> It provides a well-defined “neutral” or “do-nothing” element in combinations. This is useful for building up combinations incrementally or for defining default behaviors.\u003C/p>\n\u003Cp>If these laws hold, we achieve the same “LEGO-like” or “USB-like” composability and robustness for our time-varying boolean conditions that Monoids offer in other domains. We can confidently build complex reactive logic by combining simpler pieces, knowing the overall behavior will be predictable and sound.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"27-preview-towards-naive-monoidal-implementations\">2.7 Preview: Towards Naive Monoidal Implementations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#27-preview-towards-naive-monoidal-implementations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7 Preview: Towards Naive Monoidal Implementations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This chapter has laid the conceptual foundation. We’ve explored \u003Cem>why\u003C/em> we want Monoidal operations for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> and \u003Cem>what properties\u003C/em> these operations (\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>, \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>) and their identity elements (\u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>, \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>) must satisfy.\u003C/p>\n\u003Cp>The next crucial step, which will be the focus of \u003Cstrong>Chapter 3: Naive Monoidal Implementations for Booleans\u003C/strong> (our newly consolidated chapter), is to delve into \u003Cem>how\u003C/em> we can actually implement these operations in a way that \u003Cstrong>strictly adheres to the Monoid laws\u003C/strong>. We will investigate the internal mechanisms needed to ensure associativity and identity hold true for these reactive, time-varying values, using the direct, “naive” construction approach from \u003Ccode dir=\"auto\">Timeline\u003C/code> fundamentals.\nThe \u003Ccode dir=\"auto\">TL\u003C/code> module (previously referred to as \u003Ccode dir=\"auto\">Combinators\u003C/code> module in some original drafts, now standardized as \u003Ccode dir=\"auto\">TL\u003C/code>) will be where this fundamental algebraic structure for timelines comes to life. The goal is to move beyond conceptual desire to concrete, law-abiding implementations.\u003C/p>",{"headings":1475,"localImagePaths":1497,"remoteImagePaths":1498,"frontmatter":1499,"imagePaths":1500},[1476,1479,1482,1485,1488,1491,1494],{"depth":182,"slug":1477,"text":1478},"21-brief-recap-what-is-a-monoid-and-why-is-it-important","2.1 Brief Recap: What is a Monoid and Why is it Important?",{"depth":182,"slug":1480,"text":1481},"22-the-quest-can-timelines-themselves-form-a-monoid","2.2 The Quest: Can Timelines Themselves Form a Monoid?",{"depth":182,"slug":1483,"text":1484},"23-focusing-on-timelinebool-logical-combinations","2.3 Focusing on Timeline\u003Cbool>: Logical Combinations",{"depth":182,"slug":1486,"text":1487},"24-defining-the-combine-operation-for-timelinebool---conceptually","2.4 Defining the “Combine” Operation for Timeline\u003Cbool> - Conceptually",{"depth":182,"slug":1489,"text":1490},"25-defining-the-identity-elements-for-timelinebool-combinations","2.5 Defining the Identity Elements for Timeline\u003Cbool> Combinations",{"depth":182,"slug":1492,"text":1493},"26-the-importance-of-monoid-laws-for-timeline-combinations","2.6 The Importance of Monoid Laws for Timeline Combinations",{"depth":182,"slug":1495,"text":1496},"27-preview-towards-naive-monoidal-implementations","2.7 Preview: Towards Naive Monoidal Implementations",[],[],{"title":1464,"description":1465},[],"en/book/unit-5/section-1/10-http-case-study",{"id":1501,"data":1503,"body":1509,"filePath":1510,"digest":1511,"rendered":1512},{"title":1504,"description":1505,"editUrl":16,"head":1506,"template":18,"sidebar":1507,"pagefind":16,"draft":20},"Chapter 10: Case Study - Aggregating Asynchronous HTTP Request Outcomes","Chapter Goal: This chapter provides a comprehensive, practical case study applying the \"Map to Boolean, then Aggregate\" pattern (discussed in Chapter 9) to a common real-world scenario: managing and evaluating the collective success of multiple asynchronous HTTP requests. We will walk through a complete F# code example, step-by-step, to illustrate how Timelines, asynchronous operations, and the combinators developed in previous chapters (TL.map, TL.all, TL.distinctUntilChanged) work together to create a reactive system that monitors and responds to the outcomes of these requests.",[],{"hidden":20,"attrs":1508},{},"**Chapter Goal:**\nThis chapter provides a comprehensive, practical case study applying the \"Map to Boolean, then Aggregate\" pattern (discussed in Chapter 9) to a common real-world scenario: managing and evaluating the collective success of multiple asynchronous HTTP requests. We will walk through a complete F# code example, step-by-step, to illustrate how `Timeline`s, asynchronous operations, and the combinators developed in previous chapters (`TL.map`, `TL.all`, `TL.distinctUntilChanged`) work together to create a reactive system that monitors and responds to the outcomes of these requests.\n\n## 10.1 Introduction: Bringing Theory to Practice\n\nIn Chapter 9, we established the \"Map to Boolean, then Aggregate\" pattern as a powerful and versatile strategy for applying logical aggregation (like \"all true\" or \"any true\") to collections of timelines that don't initially hold boolean values. This pattern involves transforming each non-boolean timeline into a `Timeline\u003Cbool>` representing a specific condition, and then using n-ary combinators like `TL.all` or `TL.any` (from Chapter 8) to derive an overall reactive boolean state.\n\nThis chapter moves from the general pattern to a concrete application. We will analyze a detailed F# example that:\n\n1.  Initiates multiple asynchronous HTTP GET requests to different URLs.\n2.  Represents the outcome of each request as a `Timeline\u003CHttpResponseInfo>`.\n3.  Uses the \"Map to Boolean\" step to convert these into `Timeline\u003Cbool>` indicating individual request success.\n4.  Uses the \"Aggregate\" step (`TL.all`) to create a final `Timeline\u003Cbool>` that becomes `true` only when all requests have completed successfully.\n5.  Reacts to this final signal to log detailed results.\n\nThis case study will solidify your understanding of how these `Timeline` concepts and combinators can be orchestrated to build robust, reactive solutions for asynchronous operations.\n\n## 10.2 Recap: The \"Map to Boolean, then Aggregate\" Pattern\n\nBefore diving into the code, let's briefly revisit the two core steps of the pattern detailed in Chapter 9:\n\n1.  **Step 1: Map to Boolean (`Timeline\u003C'a> -> Timeline\u003Cbool>`)**: For each source `Timeline\u003C'a>`, use `TL.map` (Unit 4) with a predicate function (`'a -> bool`) to derive a `Timeline\u003Cbool>`.\n2.  **Step 2: Aggregate Booleans (`list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool>`)**: Collect the `Timeline\u003Cbool>` instances into a list. Then, apply an n-ary aggregation combinator like `TL.all` or `TL.any` (Chapter 8).\n\nThis pattern promotes modularity and clarity.\n\n## 10.3 The Example Scenario: Monitoring Multiple Web Requests\n\nOur case study will simulate fetching data from several web URLs simultaneously. We want our system to:\n\n*   Track individual request outcomes.\n*   Determine if *all* requests completed successfully.\n*   Log details upon collective success.\n\n## 10.4 Detailed Code Walkthrough\n\nHere is the F# code we will analyze.\n\n```fsharp\nopen System\nopen System.Net.Http // Standard library for HttpClient\n// Assume Timeline factory, Now value, TL module functions, and isNull helper are globally accessible\n// No 'open Timeline' or 'open Timeline.TL'\n\n// --- Dedicated Log Timeline Setup ---\nlet logTimeline : Timeline\u003Cstring> = Timeline null \n\nlet logReactionForApp : string -> unit = \n    fun message ->\n        if not (isNull message) then \n            printfn \"[App Log ] %s\" message\n        // No else branch needed for implicit unit return\n\nlogTimeline |> TL.map logReactionForApp |> ignore \n\nlogTimeline |> TL.define Now \"--- Case Study: Aggregating HTTP Request Success ---\"\n\n// --- Helper Types and Functions ---\n\ntype HttpResponseInfo = {\n    Url: string\n    StatusCode: int option \n    IsSuccess: bool      \n    ContentSummary: string option \n}\n\nlet private httpClient : HttpClient = new HttpClient()\n\nlet makeAsyncHttpRequest : string -> Timeline\u003CHttpResponseInfo> = \n    fun url ->\n        let resultTimeline : Timeline\u003CHttpResponseInfo> = \n            Timeline { Url = url; StatusCode = None; IsSuccess = false; ContentSummary = Some \"Request pending...\" }\n\n        async {\n            try\n                logTimeline |> TL.define Now (sprintf \"[HTTP Log] Starting request to: %s\" url)\n                let! response = httpClient.GetAsync(url) |> Async.AwaitTask \n\n                let statusCode : int = int response.StatusCode \n                let success : bool = response.IsSuccessStatusCode \n                let! content = response.Content.ReadAsStringAsync() |> Async.AwaitTask\n                let summary : string option = \n                    if success then Some (sprintf \"OK (Content Length: %d)\" content.Length)\n                    else Some (sprintf \"Failed (Status: %d)\" statusCode)\n\n                let responseInfo : HttpResponseInfo = { \n                    Url = url\n                    StatusCode = Some statusCode\n                    IsSuccess = success\n                    ContentSummary = summary\n                }\n                logTimeline |> TL.define Now (sprintf \"[HTTP Log] Request to %s completed. Status: %d, Success: %b\" url statusCode success)\n                resultTimeline |> TL.define Now responseInfo\n            with\n            | ex ->\n                logTimeline |> TL.define Now (sprintf \"[HTTP Log] Request to %s FAILED. Error: %s\" url ex.Message)\n                let errorInfo : HttpResponseInfo = { \n                    Url = url\n                    StatusCode = None\n                    IsSuccess = false\n                    ContentSummary = Some (sprintf \"Exception: %s\" ex.Message)\n                }\n                resultTimeline |> TL.define Now errorInfo\n        }\n        |> Async.StartImmediate \n        resultTimeline\n\n// 1. Define URLs\nlet urlsToFetch : list\u003Cstring> = [ \n    \"https://www.google.com\";    \n    \"https://www.google.co.uk\"; \n    \"https://www.google.ca\"; \n    // \"https://nonexistent-domain123456.com\"; // For failure testing\n]\n\n// 2. Create a list of Timelines, each representing an HTTP request result\nlet httpResultTimelines: list\u003CTimeline\u003CHttpResponseInfo>> =\n    urlsToFetch |> List.map makeAsyncHttpRequest\n\n// 3. Step 1 of \"Map to Boolean\" pattern:\nlet wasRequestSuccessfulPredicate : HttpResponseInfo -> bool = \n    fun responseInfo -> responseInfo.IsSuccess\n\nlet successStatusTimelines: list\u003CTimeline\u003Cbool>> =\n    httpResultTimelines\n    |> List.map (fun tlOfResponseInfo -> tlOfResponseInfo |> TL.map wasRequestSuccessfulPredicate)\n\n// 4. Step 2 of \"Map to Boolean\" pattern: Aggregate with TL.all\nlet allRequestsInitiallySucceededSignal: Timeline\u003Cbool> =\n    successStatusTimelines |> TL.all // Using new TL.all (from Chapter 8)\n\n// 5. Optimize the final aggregated signal\nlet finalAllSuccessSignal: Timeline\u003Cbool> =\n    allRequestsInitiallySucceededSignal |> TL.distinctUntilChanged // Using TL.distinctUntilChanged (from Chapter 6)\n\n// 6. React to the final_all_success_signal.\nlet finalReactionOnSuccess : bool -> unit = \n    fun allSucceeded ->\n        if allSucceeded then\n            let headerMsg : string = \"EVENT: All HTTP requests reported success! Details:\"\n            logTimeline |> TL.define Now headerMsg \n\n            httpResultTimelines\n            |> List.iteri (fun i individualResultTimeline ->\n                let resultData : HttpResponseInfo = individualResultTimeline |> TL.at Now \n                let detailMsg : string = \n                    sprintf \"  %d. URL: %-25s Status: %-3s Success: %-5b Summary: %A\"\n                        (i + 1)\n                        resultData.Url\n                        (match resultData.StatusCode with Some s -> string s | None -> \"N/A\")\n                        resultData.IsSuccess\n                        resultData.ContentSummary\n                logTimeline |> TL.define Now detailMsg \n            )\n            logTimeline |> TL.define Now \"-----------------------------------------------------\"\n        else\n            // Optional: Log waiting or partial failure status\n            // logTimeline |> TL.define Now \"STATUS: Not all requests have succeeded, or some are still pending/failed.\"\n            () \n\nfinalAllSuccessSignal |> TL.map finalReactionOnSuccess |> ignore \n\n// --- Keep the program alive ---\nlogTimeline |> TL.define Now \"Program initiated. HTTP requests dispatched...\"\nlogTimeline |> TL.define Now \"(Network dependent. Final aggregated log will appear if all succeed.)\"\n\nSystem.Threading.Thread.Sleep(20000) // Wait 20 seconds for demo.\n\nlogTimeline |> TL.define Now \"Demo finished. Check [App Log] entries above.\"\n```\n\n(The sub-section breakdown below explains the F# code parts from the original document, now aligned with our style guide and terminology.)\n\n### 10.4.1 Helper Types and Functions\n\n*   **`HttpResponseInfo` Record:** Encapsulates URL, optional `StatusCode`, `IsSuccess` flag, and an optional `ContentSummary`. The `option` types for `StatusCode` and `ContentSummary` handle cases like pre-response pending states or low-level failures. `IsSuccess` is `false` for pending states.\n*   **Shared `HttpClient`:** A single instance for efficiency.\n*   **`makeAsyncHttpRequest` Function:**\n    1.  **Initialization:** Returns a `Timeline\u003CHttpResponseInfo>` immediately, initialized to a \"pending\" state (`IsSuccess = false`).\n    2.  **Asynchronous Block:** Uses F# `async` to perform the HTTP GET. On success, populates `HttpResponseInfo` and `TL.define`s it onto `resultTimeline`. On exception, defines an error `HttpResponseInfo` onto `resultTimeline`. `Async.StartImmediate` initiates the operation.\n    3.  **Return Value:** Synchronously returns the `resultTimeline`.\n\n### 10.4.2 Dedicated Log Timeline Setup\n\nA `logTimeline` for application-level logging, printing non-`null` messages.\n\n### 10.4.3 Main Logic: Applying the Pattern\n\n*   **1. Define URLs:** A list of target URLs.\n*   **2. Create `httpResultTimelines`:** `List.map makeAsyncHttpRequest` initiates all requests concurrently, yielding a `list\u003CTimeline\u003CHttpResponseInfo>>`.\n*   **3. Step 1: Map to `successStatusTimelines`**:\n    *   `wasRequestSuccessfulPredicate`: `HttpResponseInfo -> bool` extracts `responseInfo.IsSuccess`.\n    *   Each `Timeline\u003CHttpResponseInfo>` is transformed into a `Timeline\u003Cbool>` using `tlOfResponseInfo |> TL.map wasRequestSuccessfulPredicate`. These initially hold `false`.\n*   **4. Step 2: Aggregate with `allRequestsInitiallySucceededSignal`**:\n    *   `successStatusTimelines |> TL.all` (using `TL.all` from Chapter 8) creates a `Timeline\u003Cbool>` that's `true` iff all individual success timelines are `true`. It's initially `false`.\n*   **5. Optimize with `finalAllSuccessSignal`**:\n    *   `allRequestsInitiallySucceededSignal |> TL.distinctUntilChanged` (from Chapter 6) ensures propagation only on actual state changes of overall success.\n*   **6. React to `finalAllSuccessSignal`**:\n    *   `TL.map finalReactionOnSuccess` triggers logging when `finalAllSuccessSignal` becomes `true`. It then iterates `httpResultTimelines`, gets current data using `TL.at Now`, and logs details.\n\n### 10.4.4 Program Execution and Asynchronous Nature\n\n`Thread.Sleep` keeps the console app alive. Output shows interleaved HTTP and app logs, with the detailed report appearing only after all requests succeed.\n\n## 10.5 Discussion of Reactivity\n\nThis example illustrates:\n\n*   **Declarative Dependencies:** How timelines relate is declared (`TL.map`, `TL.all`).\n*   **Automatic Updates:** Changes flow from async completion -> `TL.define` on individual result timeline -> mapped `Timeline\u003Cbool>` -> `TL.all` output -> `TL.distinctUntilChanged` output -> final logging reaction.\n*   **Handling Asynchronicity:** Callback complexity is abstracted.\n*   **Initial States Matter:** \"Pending\" state (`IsSuccess = false`) correctly initializes aggregation.\n\n## 10.6 Benefits Illustrated by the Example\n\n1.  **Clarity:** Logic is separated and easy to follow.\n2.  **Modularity:** Reusable components (`makeAsyncHttpRequest`, `wasRequestSuccessfulPredicate`, `TL.all`).\n3.  **Composability:** Complex logic from simpler reactive parts.\n4.  **Robustness:** Automatic state change handling.\n5.  **Testability (Implied):** Individual functions and predicates are testable.\n\n## 10.7 Further Considerations\n\nProduction systems might add:\n\n*   More granular error/pending state reporting.\n*   Handling dynamic URL lists (likely using `TL.bind`).\n*   Retry logic, timeouts, cancellation.\n\n## 10.8 Conclusion: Orchestrating Asynchronous Logic Reactively\n\nThis case study demonstrated the \"Map to Boolean, then Aggregate\" pattern with `Timeline`s for managing asynchronous operations. By transforming async results into boolean condition timelines and aggregating them, we build clear, robust solutions. `TL.map`, `TL.all` (or `TL.any`), and `TL.distinctUntilChanged` work declaratively for complex, event-driven behavior. This concludes our exploration of boolean aggregation and foundational combinators in Unit 5, Section 1.","src/content/docs/en/book/unit-5/section-1/10-http-case-study.md","0c47b2e6dfe860c2",{"html":1513,"metadata":1514},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong>\nThis chapter provides a comprehensive, practical case study applying the “Map to Boolean, then Aggregate” pattern (discussed in Chapter 9) to a common real-world scenario: managing and evaluating the collective success of multiple asynchronous HTTP requests. We will walk through a complete F# code example, step-by-step, to illustrate how \u003Ccode dir=\"auto\">Timeline\u003C/code>s, asynchronous operations, and the combinators developed in previous chapters (\u003Ccode dir=\"auto\">TL.map\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code>, \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>) work together to create a reactive system that monitors and responds to the outcomes of these requests.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"101-introduction-bringing-theory-to-practice\">10.1 Introduction: Bringing Theory to Practice\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#101-introduction-bringing-theory-to-practice\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.1 Introduction: Bringing Theory to Practice”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 9, we established the “Map to Boolean, then Aggregate” pattern as a powerful and versatile strategy for applying logical aggregation (like “all true” or “any true”) to collections of timelines that don’t initially hold boolean values. This pattern involves transforming each non-boolean timeline into a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> representing a specific condition, and then using n-ary combinators like \u003Ccode dir=\"auto\">TL.all\u003C/code> or \u003Ccode dir=\"auto\">TL.any\u003C/code> (from Chapter 8) to derive an overall reactive boolean state.\u003C/p>\n\u003Cp>This chapter moves from the general pattern to a concrete application. We will analyze a detailed F# example that:\u003C/p>\n\u003Col>\n\u003Cli>Initiates multiple asynchronous HTTP GET requests to different URLs.\u003C/li>\n\u003Cli>Represents the outcome of each request as a \u003Ccode dir=\"auto\">Timeline&#x3C;HttpResponseInfo>\u003C/code>.\u003C/li>\n\u003Cli>Uses the “Map to Boolean” step to convert these into \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> indicating individual request success.\u003C/li>\n\u003Cli>Uses the “Aggregate” step (\u003Ccode dir=\"auto\">TL.all\u003C/code>) to create a final \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that becomes \u003Ccode dir=\"auto\">true\u003C/code> only when all requests have completed successfully.\u003C/li>\n\u003Cli>Reacts to this final signal to log detailed results.\u003C/li>\n\u003C/ol>\n\u003Cp>This case study will solidify your understanding of how these \u003Ccode dir=\"auto\">Timeline\u003C/code> concepts and combinators can be orchestrated to build robust, reactive solutions for asynchronous operations.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"102-recap-the-map-to-boolean-then-aggregate-pattern\">10.2 Recap: The “Map to Boolean, then Aggregate” Pattern\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#102-recap-the-map-to-boolean-then-aggregate-pattern\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.2 Recap: The “Map to Boolean, then Aggregate” Pattern”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Before diving into the code, let’s briefly revisit the two core steps of the pattern detailed in Chapter 9:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Step 1: Map to Boolean (\u003Ccode dir=\"auto\">Timeline&#x3C;'a> -> Timeline&#x3C;bool>\u003C/code>)\u003C/strong>: For each source \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>, use \u003Ccode dir=\"auto\">TL.map\u003C/code> (Unit 4) with a predicate function (\u003Ccode dir=\"auto\">'a -> bool\u003C/code>) to derive a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Step 2: Aggregate Booleans (\u003Ccode dir=\"auto\">list&#x3C;Timeline&#x3C;bool>> -> Timeline&#x3C;bool>\u003C/code>)\u003C/strong>: Collect the \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances into a list. Then, apply an n-ary aggregation combinator like \u003Ccode dir=\"auto\">TL.all\u003C/code> or \u003Ccode dir=\"auto\">TL.any\u003C/code> (Chapter 8).\u003C/li>\n\u003C/ol>\n\u003Cp>This pattern promotes modularity and clarity.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"103-the-example-scenario-monitoring-multiple-web-requests\">10.3 The Example Scenario: Monitoring Multiple Web Requests\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#103-the-example-scenario-monitoring-multiple-web-requests\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.3 The Example Scenario: Monitoring Multiple Web Requests”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Our case study will simulate fetching data from several web URLs simultaneously. We want our system to:\u003C/p>\n\u003Cul>\n\u003Cli>Track individual request outcomes.\u003C/li>\n\u003Cli>Determine if \u003Cem>all\u003C/em> requests completed successfully.\u003C/li>\n\u003Cli>Log details upon collective success.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"104-detailed-code-walkthrough\">10.4 Detailed Code Walkthrough\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#104-detailed-code-walkthrough\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.4 Detailed Code Walkthrough”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Here is the F# code we will analyze.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System.Net.Http \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Standard library for HttpClient\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now value, TL module functions, and isNull helper are globally accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No 'open Timeline' or 'open Timeline.TL'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Dedicated Log Timeline Setup ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logReactionForApp\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> message \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">not\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isNull message\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[App Log ] \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> message\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No else branch needed for implicit unit return\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map logReactionForApp \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">--- Case Study: Aggregating HTTP Request Success ---\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Helper Types and Functions ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">StatusCode\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int option\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">IsSuccess\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ContentSummary\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string option\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">private\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpClient\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpClient \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">new\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpClient\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">makeAsyncHttpRequest\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> StatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IsSuccess \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ContentSummary \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Request pending...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">async\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">try\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[HTTP Log] Starting request to: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let!\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">response\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> httpClient.GetAsync\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.AwaitTask\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">statusCode\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int response.StatusCode\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">success\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> response.IsSuccessStatusCode\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let!\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">content\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> response.Content.ReadAsStringAsync\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.AwaitTask\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">summary\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string option \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> success \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">OK (Content Length: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> content.Length\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Failed (Status: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> statusCode\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">responseInfo\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">StatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some statusCode\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">IsSuccess \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> success\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ContentSummary \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> summary\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[HTTP Log] Request to \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> completed. Status: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Success: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url statusCode success\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now responseInfo\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ex \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[HTTP Log] Request to \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> FAILED. Error: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url ex.Message\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">errorInfo\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">StatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">IsSuccess \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ContentSummary \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Exception: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ex.Message\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now errorInfo\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.StartImmediate\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Define URLs\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">urlsToFetch\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">https://www.google.com\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">https://www.google.co.uk\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">https://www.google.ca\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// \"https://nonexistent-domain123456.com\"; // For failure testing\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Create a list of Timelines, each representing an HTTP request result\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpResultTimelines\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">urlsToFetch \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map makeAsyncHttpRequest\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3. Step 1 of \"Map to Boolean\" pattern:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">wasRequestSuccessfulPredicate\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> responseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> responseInfo.IsSuccess\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">successStatusTimelines\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpResultTimelines\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> tlOfResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> tlOfResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map wasRequestSuccessfulPredicate\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 4. Step 2 of \"Map to Boolean\" pattern: Aggregate with TL.all\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">allRequestsInitiallySucceededSignal\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">successStatusTimelines \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.all \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using new TL.all (from Chapter 8)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 5. Optimize the final aggregated signal\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">finalAllSuccessSignal\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allRequestsInitiallySucceededSignal \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.distinctUntilChanged \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using TL.distinctUntilChanged (from Chapter 6)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 6. React to the final_all_success_signal.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">finalReactionOnSuccess\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> allSucceeded \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> allSucceeded \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">headerMsg\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">EVENT: All HTTP requests reported success! Details:\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now headerMsg\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpResultTimelines\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> List.iteri \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> i individualResultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultData\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> individualResultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">detailMsg\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">  \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">. URL: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%-25s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> Status: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%-3s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> Success: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%-5b\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> Summary: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">i \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultData.Url\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(match\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> resultData.StatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">N/A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultData.IsSuccess\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultData.ContentSummary\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now detailMsg\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">-----------------------------------------------------\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Optional: Log waiting or partial failure status\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// logTimeline |> TL.define Now \"STATUS: Not all requests have succeeded, or some are still pending/failed.\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">finalAllSuccessSignal \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map finalReactionOnSuccess \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Keep the program alive ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Program initiated. HTTP requests dispatched...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">(Network dependent. Final aggregated log will appear if all succeed.)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">System.Threading.Thread.Sleep\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">20000\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Wait 20 seconds for demo.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Demo finished. Check [App Log] entries above.\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open Systemopen System.Net.Http // Standard library for HttpClient// Assume Timeline factory, Now value, TL module functions, and isNull helper are globally accessible// No &#x27;open Timeline&#x27; or &#x27;open Timeline.TL&#x27;// --- Dedicated Log Timeline Setup ---let logTimeline : Timeline\u003Cstring> = Timeline nulllet logReactionForApp : string -> unit =    fun message ->        if not (isNull message) then            printfn &#x22;[App Log ] %s&#x22; message        // No else branch needed for implicit unit returnlogTimeline |> TL.map logReactionForApp |> ignorelogTimeline |> TL.define Now &#x22;--- Case Study: Aggregating HTTP Request Success ---&#x22;// --- Helper Types and Functions ---type HttpResponseInfo = {    Url: string    StatusCode: int option    IsSuccess: bool    ContentSummary: string option}let private httpClient : HttpClient = new HttpClient()let makeAsyncHttpRequest : string -> Timeline\u003CHttpResponseInfo> =    fun url ->        let resultTimeline : Timeline\u003CHttpResponseInfo> =            Timeline { Url = url; StatusCode = None; IsSuccess = false; ContentSummary = Some &#x22;Request pending...&#x22; }        async {            try                logTimeline |> TL.define Now (sprintf &#x22;[HTTP Log] Starting request to: %s&#x22; url)                let! response = httpClient.GetAsync(url) |> Async.AwaitTask                let statusCode : int = int response.StatusCode                let success : bool = response.IsSuccessStatusCode                let! content = response.Content.ReadAsStringAsync() |> Async.AwaitTask                let summary : string option =                    if success then Some (sprintf &#x22;OK (Content Length: %d)&#x22; content.Length)                    else Some (sprintf &#x22;Failed (Status: %d)&#x22; statusCode)                let responseInfo : HttpResponseInfo = {                    Url = url                    StatusCode = Some statusCode                    IsSuccess = success                    ContentSummary = summary                }                logTimeline |> TL.define Now (sprintf &#x22;[HTTP Log] Request to %s completed. Status: %d, Success: %b&#x22; url statusCode success)                resultTimeline |> TL.define Now responseInfo            with            | ex ->                logTimeline |> TL.define Now (sprintf &#x22;[HTTP Log] Request to %s FAILED. Error: %s&#x22; url ex.Message)                let errorInfo : HttpResponseInfo = {                    Url = url                    StatusCode = None                    IsSuccess = false                    ContentSummary = Some (sprintf &#x22;Exception: %s&#x22; ex.Message)                }                resultTimeline |> TL.define Now errorInfo        }        |> Async.StartImmediate        resultTimeline// 1. Define URLslet urlsToFetch : list\u003Cstring> = [    &#x22;https://www.google.com&#x22;;    &#x22;https://www.google.co.uk&#x22;;    &#x22;https://www.google.ca&#x22;;    // &#x22;https://nonexistent-domain123456.com&#x22;; // For failure testing]// 2. Create a list of Timelines, each representing an HTTP request resultlet httpResultTimelines: list\u003CTimeline\u003CHttpResponseInfo>> =    urlsToFetch |> List.map makeAsyncHttpRequest// 3. Step 1 of &#x22;Map to Boolean&#x22; pattern:let wasRequestSuccessfulPredicate : HttpResponseInfo -> bool =    fun responseInfo -> responseInfo.IsSuccesslet successStatusTimelines: list\u003CTimeline\u003Cbool>> =    httpResultTimelines    |> List.map (fun tlOfResponseInfo -> tlOfResponseInfo |> TL.map wasRequestSuccessfulPredicate)// 4. Step 2 of &#x22;Map to Boolean&#x22; pattern: Aggregate with TL.alllet allRequestsInitiallySucceededSignal: Timeline\u003Cbool> =    successStatusTimelines |> TL.all // Using new TL.all (from Chapter 8)// 5. Optimize the final aggregated signallet finalAllSuccessSignal: Timeline\u003Cbool> =    allRequestsInitiallySucceededSignal |> TL.distinctUntilChanged // Using TL.distinctUntilChanged (from Chapter 6)// 6. React to the final_all_success_signal.let finalReactionOnSuccess : bool -> unit =    fun allSucceeded ->        if allSucceeded then            let headerMsg : string = &#x22;EVENT: All HTTP requests reported success! Details:&#x22;            logTimeline |> TL.define Now headerMsg            httpResultTimelines            |> List.iteri (fun i individualResultTimeline ->                let resultData : HttpResponseInfo = individualResultTimeline |> TL.at Now                let detailMsg : string =                    sprintf &#x22;  %d. URL: %-25s Status: %-3s Success: %-5b Summary: %A&#x22;                        (i + 1)                        resultData.Url                        (match resultData.StatusCode with Some s -> string s | None -> &#x22;N/A&#x22;)                        resultData.IsSuccess                        resultData.ContentSummary                logTimeline |> TL.define Now detailMsg            )            logTimeline |> TL.define Now &#x22;-----------------------------------------------------&#x22;        else            // Optional: Log waiting or partial failure status            // logTimeline |> TL.define Now &#x22;STATUS: Not all requests have succeeded, or some are still pending/failed.&#x22;            ()finalAllSuccessSignal |> TL.map finalReactionOnSuccess |> ignore// --- Keep the program alive ---logTimeline |> TL.define Now &#x22;Program initiated. HTTP requests dispatched...&#x22;logTimeline |> TL.define Now &#x22;(Network dependent. Final aggregated log will appear if all succeed.)&#x22;System.Threading.Thread.Sleep(20000) // Wait 20 seconds for demo.logTimeline |> TL.define Now &#x22;Demo finished. Check [App Log] entries above.&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>(The sub-section breakdown below explains the F# code parts from the original document, now aligned with our style guide and terminology.)\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"1041-helper-types-and-functions\">10.4.1 Helper Types and Functions\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#1041-helper-types-and-functions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.4.1 Helper Types and Functions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">HttpResponseInfo\u003C/code> Record:\u003C/strong> Encapsulates URL, optional \u003Ccode dir=\"auto\">StatusCode\u003C/code>, \u003Ccode dir=\"auto\">IsSuccess\u003C/code> flag, and an optional \u003Ccode dir=\"auto\">ContentSummary\u003C/code>. The \u003Ccode dir=\"auto\">option\u003C/code> types for \u003Ccode dir=\"auto\">StatusCode\u003C/code> and \u003Ccode dir=\"auto\">ContentSummary\u003C/code> handle cases like pre-response pending states or low-level failures. \u003Ccode dir=\"auto\">IsSuccess\u003C/code> is \u003Ccode dir=\"auto\">false\u003C/code> for pending states.\u003C/li>\n\u003Cli>\u003Cstrong>Shared \u003Ccode dir=\"auto\">HttpClient\u003C/code>:\u003C/strong> A single instance for efficiency.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">makeAsyncHttpRequest\u003C/code> Function:\u003C/strong>\n\u003Col>\n\u003Cli>\u003Cstrong>Initialization:\u003C/strong> Returns a \u003Ccode dir=\"auto\">Timeline&#x3C;HttpResponseInfo>\u003C/code> immediately, initialized to a “pending” state (\u003Ccode dir=\"auto\">IsSuccess = false\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Asynchronous Block:\u003C/strong> Uses F# \u003Ccode dir=\"auto\">async\u003C/code> to perform the HTTP GET. On success, populates \u003Ccode dir=\"auto\">HttpResponseInfo\u003C/code> and \u003Ccode dir=\"auto\">TL.define\u003C/code>s it onto \u003Ccode dir=\"auto\">resultTimeline\u003C/code>. On exception, defines an error \u003Ccode dir=\"auto\">HttpResponseInfo\u003C/code> onto \u003Ccode dir=\"auto\">resultTimeline\u003C/code>. \u003Ccode dir=\"auto\">Async.StartImmediate\u003C/code> initiates the operation.\u003C/li>\n\u003Cli>\u003Cstrong>Return Value:\u003C/strong> Synchronously returns the \u003Ccode dir=\"auto\">resultTimeline\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"1042-dedicated-log-timeline-setup\">10.4.2 Dedicated Log Timeline Setup\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#1042-dedicated-log-timeline-setup\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.4.2 Dedicated Log Timeline Setup”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A \u003Ccode dir=\"auto\">logTimeline\u003C/code> for application-level logging, printing non-\u003Ccode dir=\"auto\">null\u003C/code> messages.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"1043-main-logic-applying-the-pattern\">10.4.3 Main Logic: Applying the Pattern\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#1043-main-logic-applying-the-pattern\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.4.3 Main Logic: Applying the Pattern”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>1. Define URLs:\u003C/strong> A list of target URLs.\u003C/li>\n\u003Cli>\u003Cstrong>2. Create \u003Ccode dir=\"auto\">httpResultTimelines\u003C/code>:\u003C/strong> \u003Ccode dir=\"auto\">List.map makeAsyncHttpRequest\u003C/code> initiates all requests concurrently, yielding a \u003Ccode dir=\"auto\">list&#x3C;Timeline&#x3C;HttpResponseInfo>>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>3. Step 1: Map to \u003Ccode dir=\"auto\">successStatusTimelines\u003C/code>\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">wasRequestSuccessfulPredicate\u003C/code>: \u003Ccode dir=\"auto\">HttpResponseInfo -> bool\u003C/code> extracts \u003Ccode dir=\"auto\">responseInfo.IsSuccess\u003C/code>.\u003C/li>\n\u003Cli>Each \u003Ccode dir=\"auto\">Timeline&#x3C;HttpResponseInfo>\u003C/code> is transformed into a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> using \u003Ccode dir=\"auto\">tlOfResponseInfo |> TL.map wasRequestSuccessfulPredicate\u003C/code>. These initially hold \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>4. Step 2: Aggregate with \u003Ccode dir=\"auto\">allRequestsInitiallySucceededSignal\u003C/code>\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">successStatusTimelines |> TL.all\u003C/code> (using \u003Ccode dir=\"auto\">TL.all\u003C/code> from Chapter 8) creates a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that’s \u003Ccode dir=\"auto\">true\u003C/code> iff all individual success timelines are \u003Ccode dir=\"auto\">true\u003C/code>. It’s initially \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>5. Optimize with \u003Ccode dir=\"auto\">finalAllSuccessSignal\u003C/code>\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">allRequestsInitiallySucceededSignal |> TL.distinctUntilChanged\u003C/code> (from Chapter 6) ensures propagation only on actual state changes of overall success.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>6. React to \u003Ccode dir=\"auto\">finalAllSuccessSignal\u003C/code>\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TL.map finalReactionOnSuccess\u003C/code> triggers logging when \u003Ccode dir=\"auto\">finalAllSuccessSignal\u003C/code> becomes \u003Ccode dir=\"auto\">true\u003C/code>. It then iterates \u003Ccode dir=\"auto\">httpResultTimelines\u003C/code>, gets current data using \u003Ccode dir=\"auto\">TL.at Now\u003C/code>, and logs details.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"1044-program-execution-and-asynchronous-nature\">10.4.4 Program Execution and Asynchronous Nature\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#1044-program-execution-and-asynchronous-nature\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.4.4 Program Execution and Asynchronous Nature”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Ccode dir=\"auto\">Thread.Sleep\u003C/code> keeps the console app alive. Output shows interleaved HTTP and app logs, with the detailed report appearing only after all requests succeed.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"105-discussion-of-reactivity\">10.5 Discussion of Reactivity\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#105-discussion-of-reactivity\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.5 Discussion of Reactivity”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This example illustrates:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Declarative Dependencies:\u003C/strong> How timelines relate is declared (\u003Ccode dir=\"auto\">TL.map\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Automatic Updates:\u003C/strong> Changes flow from async completion -> \u003Ccode dir=\"auto\">TL.define\u003C/code> on individual result timeline -> mapped \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> -> \u003Ccode dir=\"auto\">TL.all\u003C/code> output -> \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> output -> final logging reaction.\u003C/li>\n\u003Cli>\u003Cstrong>Handling Asynchronicity:\u003C/strong> Callback complexity is abstracted.\u003C/li>\n\u003Cli>\u003Cstrong>Initial States Matter:\u003C/strong> “Pending” state (\u003Ccode dir=\"auto\">IsSuccess = false\u003C/code>) correctly initializes aggregation.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"106-benefits-illustrated-by-the-example\">10.6 Benefits Illustrated by the Example\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#106-benefits-illustrated-by-the-example\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.6 Benefits Illustrated by the Example”\u003C/span>\u003C/a>\u003C/div>\n\u003Col>\n\u003Cli>\u003Cstrong>Clarity:\u003C/strong> Logic is separated and easy to follow.\u003C/li>\n\u003Cli>\u003Cstrong>Modularity:\u003C/strong> Reusable components (\u003Ccode dir=\"auto\">makeAsyncHttpRequest\u003C/code>, \u003Ccode dir=\"auto\">wasRequestSuccessfulPredicate\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Composability:\u003C/strong> Complex logic from simpler reactive parts.\u003C/li>\n\u003Cli>\u003Cstrong>Robustness:\u003C/strong> Automatic state change handling.\u003C/li>\n\u003Cli>\u003Cstrong>Testability (Implied):\u003C/strong> Individual functions and predicates are testable.\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"107-further-considerations\">10.7 Further Considerations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#107-further-considerations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.7 Further Considerations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Production systems might add:\u003C/p>\n\u003Cul>\n\u003Cli>More granular error/pending state reporting.\u003C/li>\n\u003Cli>Handling dynamic URL lists (likely using \u003Ccode dir=\"auto\">TL.bind\u003C/code>).\u003C/li>\n\u003Cli>Retry logic, timeouts, cancellation.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"108-conclusion-orchestrating-asynchronous-logic-reactively\">10.8 Conclusion: Orchestrating Asynchronous Logic Reactively\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#108-conclusion-orchestrating-asynchronous-logic-reactively\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “10.8 Conclusion: Orchestrating Asynchronous Logic Reactively”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This case study demonstrated the “Map to Boolean, then Aggregate” pattern with \u003Ccode dir=\"auto\">Timeline\u003C/code>s for managing asynchronous operations. By transforming async results into boolean condition timelines and aggregating them, we build clear, robust solutions. \u003Ccode dir=\"auto\">TL.map\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code> (or \u003Ccode dir=\"auto\">TL.any\u003C/code>), and \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> work declaratively for complex, event-driven behavior. This concludes our exploration of boolean aggregation and foundational combinators in Unit 5, Section 1.\u003C/p>",{"headings":1515,"localImagePaths":1552,"remoteImagePaths":1553,"frontmatter":1554,"imagePaths":1555},[1516,1519,1522,1525,1528,1531,1534,1537,1540,1543,1546,1549],{"depth":182,"slug":1517,"text":1518},"101-introduction-bringing-theory-to-practice","10.1 Introduction: Bringing Theory to Practice",{"depth":182,"slug":1520,"text":1521},"102-recap-the-map-to-boolean-then-aggregate-pattern","10.2 Recap: The “Map to Boolean, then Aggregate” Pattern",{"depth":182,"slug":1523,"text":1524},"103-the-example-scenario-monitoring-multiple-web-requests","10.3 The Example Scenario: Monitoring Multiple Web Requests",{"depth":182,"slug":1526,"text":1527},"104-detailed-code-walkthrough","10.4 Detailed Code Walkthrough",{"depth":523,"slug":1529,"text":1530},"1041-helper-types-and-functions","10.4.1 Helper Types and Functions",{"depth":523,"slug":1532,"text":1533},"1042-dedicated-log-timeline-setup","10.4.2 Dedicated Log Timeline Setup",{"depth":523,"slug":1535,"text":1536},"1043-main-logic-applying-the-pattern","10.4.3 Main Logic: Applying the Pattern",{"depth":523,"slug":1538,"text":1539},"1044-program-execution-and-asynchronous-nature","10.4.4 Program Execution and Asynchronous Nature",{"depth":182,"slug":1541,"text":1542},"105-discussion-of-reactivity","10.5 Discussion of Reactivity",{"depth":182,"slug":1544,"text":1545},"106-benefits-illustrated-by-the-example","10.6 Benefits Illustrated by the Example",{"depth":182,"slug":1547,"text":1548},"107-further-considerations","10.7 Further Considerations",{"depth":182,"slug":1550,"text":1551},"108-conclusion-orchestrating-asynchronous-logic-reactively","10.8 Conclusion: Orchestrating Asynchronous Logic Reactively",[],[],{"title":1504,"description":1505},[],"en/book/unit-5/section-1/3-naive-boolean-monois",{"id":1556,"data":1558,"body":1564,"filePath":1565,"digest":1566,"rendered":1567},{"title":1559,"description":1560,"editUrl":16,"head":1561,"template":18,"sidebar":1562,"pagefind":16,"draft":20},"Chapter 3: Naive Monoidal Implementations for Booleans","In Chapter 2: Towards Monoidal Timelines, we established the conceptual goal of forming Monoids with Timeline instances. Specifically, we aimed to realize:",[],{"hidden":20,"attrs":1563},{},"*   **Chapter Goal:** This chapter defines and conceptually implements TL.naiveOr and TL.naiveAnd along with their respective identity elements (TL.FalseTimeline and TL.TrueTimeline) for Timeline. We will demonstrate how they form Monoids by satisfying the Monoid laws, showcasing a direct, \"naive\" construction from Timeline fundamentals without relying on higher-level combinators like TL.zipWith. This serves an educational purpose in understanding the core principles of how Timeline can embody algebraic structures.\n\n## Introduction: Realizing Monoids Directly\n\nIn Chapter 2: Towards Monoidal Timelines, we established the conceptual goal of forming Monoids with Timeline instances. Specifically, we aimed to realize:\n\n*   `TimelineOrMonoid = (Set of all Timeline\u003Cbool> instances, a TL.naiveOr operation, a TL.FalseTimeline identity element)`\n*   `TimelineAndMonoid = (Set of all Timeline\u003Cbool> instances, a TL.naiveAnd operation, a TL.TrueTimeline identity element)`\n\nTo achieve this, we need to:\n\n1.  Define suitable identity elements: TL.FalseTimeline for OR, and TL.TrueTimeline for AND.\n2.  Define binary operations, TL.naiveOr and TL.naiveAnd, that combine two Timeline instances to produce a new Timeline.\n3.  Verify that these operations and identity elements satisfy the Monoid laws: the identity law and the associative law.\n\nThis chapter focuses on constructing these elements in a \"naive\" or direct manner. This means we will build them conceptually using only the fundamental building blocks of the Timeline system (like the Timeline constructor, `TL.at Now`, `TL.define Now`, and the implicit underlying DependencyCore for managing reactions) without relying on more abstract, general-purpose combinators like TL.zipWith (which will be introduced later). This approach helps to illustrate the first principles of how Monoidal structures can be implemented in a reactive context.\n\n## 3.1 Identity Elements for Boolean Logic\n\nThe identity element is the neutral cornerstone of any Monoid. For boolean operations on Timeline, these identities must be Timeline instances that perpetually represent the neutral value for OR and AND respectively.\n\n### 3.1.1 TL.FalseTimeline: The Identity for OR\n\nFor an OR operation, the identity element is false, because `x || false == x`. Thus, for Timeline, the identity must be a timeline that is always false.\n\n*   **Definition:** TL.FalseTimeline is a Timeline that is initialized with the value false and never changes its value over time.\n*   **F# Conceptual Definition:**\n\n    ```fsharp\n    // Assuming Timeline type and Now value are accessible as per style guide\n    // Assuming 'isNull' helper is globally available or defined in a common module\n    // For the purpose of this document, Timeline constructor is assumed to be:\n    // let Timeline\u003C'a> (initialValue: 'a) : Timeline\u003C'a> = ...\n\n    module TL = // TL module encapsulates Timeline-specific operations\n\n        // ... other TL definitions ...\n\n        /// \u003Csummary>\n        /// A Timeline\u003Cbool> that is perpetually false.\n        /// It serves as the identity element for the TL.naiveOr monoidal operation.\n        /// \u003C/summary>\n        let FalseTimeline : Timeline\u003Cbool> = Timeline false // Using the Timeline factory function\n        // Note: For TL.FalseTimeline to truly act as an unchanging identity,\n        // its value isn't modified after creation. This might be a special static instance\n        // or ensured by library conventions.\n    ```\n*   **Behavior:** Querying `TL.FalseTimeline |> TL.at Now` will always yield false.\n\n### 3.1.2 TL.TrueTimeline: The Identity for AND\n\nFor an AND operation, הפ identity element is true, because `x && true == x`. Thus, for Timeline, הפ identity must be a timeline that is always true.\n\n*   **Definition:** TL.TrueTimeline is a Timeline that is initialized with the value true and never changes its value over time.\n*   **F# Conceptual Definition:**\n\n    ```fsharp\n    module TL = // TL module encapsulates Timeline-specific operations\n\n        // ... other TL definitions including TL.FalseTimeline ...\n\n        /// \u003Csummary>\n        /// A Timeline\u003Cbool> that is perpetually true.\n        /// It serves as the identity element for the TL.naiveAnd monoidal operation.\n        /// \u003C/summary>\n        let TrueTimeline : Timeline\u003Cbool> = Timeline true // Using the Timeline factory function\n        // Note: Similar to TL.FalseTimeline, its 'true' state must be preserved.\n    ```\n*   **Behavior:** Querying `TL.TrueTimeline |> TL.at Now` will always yield true.\n\nThese constant timelines are fundamental to establishing the Monoid structure.\n\n## 3.2 Naive Binary Operations: TL.naiveOr and TL.naiveAnd\n\nThese operations are designed to take two Timeline instances and produce a new Timeline that represents their logical combination over time, reacting to changes in either input.\n\n### 3.2.1 TL.naiveOr: Naive Logical OR\n\n*   **F# Signature and Definition:**\n\n    ```fsharp\n    module TL = // TL module encapsulates Timeline-specific operations\n\n        // Assuming Timeline type, 'at', 'define' operations are part of this TL module\n        // and follow the specified style guide.\n        // For example:\n        // val at\u003C'a> : Now -> Timeline\u003C'a> -> 'a\n        // let at\u003C'a> : Now -> Timeline\u003C'a> -> 'a = fun now timeline -> ...\n        //\n        // val define\u003C'a> : Now -> 'a -> Timeline\u003C'a> -> unit\n        // let define\u003C'a> : Now -> 'a -> Timeline\u003C'a> -> unit = fun now value timeline -> ...\n\n        let naiveOr : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> =\n            fun timelineB timelineA -> // Parameters follow 'fun', types are from signature\n                // Read initial values using TL.at and pipe operator\n                let initialValA : bool = timelineA |> TL.at Now\n                let initialValB : bool = timelineB |> TL.at Now\n                // Create the resultTimeline with the initial OR'd value\n                let resultTimeline : Timeline\u003Cbool> = Timeline (initialValA || initialValB)\n\n                // Reaction to updates from timelineA\n                // This function will be registered as a callback\n                let reactionToA : bool -> unit =\n                    fun newValA ->\n                        let currentValB : bool = timelineB |> TL.at Now // Get B's most recent value\n                        // Define the new OR'd value on the resultTimeline\n                        resultTimeline |> TL.define Now (newValA || currentValB)\n\n                // Reaction to updates from timelineB\n                // This function will be registered as a callback\n                let reactionToB : bool -> unit =\n                    fun newValB ->\n                        let currentValA : bool = timelineA |> TL.at Now // Get A's most recent value\n                        // Define the new OR'd value on the resultTimeline\n                        resultTimeline |> TL.define Now (currentValA || newValB)\n\n                // Conceptually, DependencyCore is used here by the Timeline system\n                // to register that 'reactionToA' should run when 'timelineA' is defined,\n                // and 'reactionToB' should run when 'timelineB' is defined.\n                // This is an internal mechanism of the Timeline library, not explicitly coded here.\n                // For example, when 'timelineA |> TL.define Now someValue' is called,\n                // the system would ensure 'reactionToA someValue' is invoked if registered.\n\n                resultTimeline\n    ```\n*   **Core Semantics:** The resultTimeline from `timelineA |> TL.naiveOr timelineB` should, at any point, reflect the logical OR (||) of the current values of timelineA and timelineB.\n*   **Update Behavior:** resultTimeline must update reactively whenever either timelineA or timelineB changes its value, re-calculating the OR based on the latest known values of both inputs.\n*   **Initialization:** The initial value of resultTimeline is the logical OR of the initial values of timelineA and timelineB.\n\n### 3.2.2 TL.naiveAnd: Naive Logical AND\n\n*   **F# Signature and Definition:**\n\n    ```fsharp\n    module TL = // TL module encapsulates Timeline-specific operations\n        // ... other TL definitions ...\n\n        let naiveAnd : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> =\n            fun timelineB timelineA ->\n                let initialValA : bool = timelineA |> TL.at Now\n                let initialValB : bool = timelineB |> TL.at Now\n                let resultTimeline : Timeline\u003Cbool> = Timeline (initialValA && initialValB) // Initial AND'd value\n\n                // Reaction to updates from timelineA\n                let reactionToA : bool -> unit =\n                    fun newValA ->\n                        let currentValB : bool = timelineB |> TL.at Now\n                        resultTimeline |> TL.define Now (newValA && currentValB)\n\n                // Reaction to updates from timelineB\n                let reactionToB : bool -> unit =\n                    fun newValB ->\n                        let currentValA : bool = timelineA |> TL.at Now\n                        resultTimeline |> TL.define Now (currentValA && newValB)\n\n                // Again, DependencyCore would manage these reactions internally.\n                resultTimeline\n    ```\n*   **Core Semantics:** The resultTimeline from `timelineA |> TL.naiveAnd timelineB` should reflect the logical AND (&&) of the current values of timelineA and timelineB.\n*   **Update Behavior:** resultTimeline must update reactively whenever either timelineA or timelineB changes.\n*   **Initialization:** The initial value is the logical AND of the initial values of timelineA and timelineB.\n\n## 3.3 Verifying Monoid Laws\n\nFor `(Timeline\u003Cbool>, TL.naiveOr, TL.FalseTimeline)` and `(Timeline\u003Cbool>, TL.naiveAnd, TL.TrueTimeline)` to be true Monoids, they must satisfy the Monoid laws: identity and associativity. The verification process is similar for both OR and AND, relying on the properties of the underlying boolean || and && operators.\n\n### 3.3.1 Identity Law\n\n*   **For TL.naiveOr and TL.FalseTimeline:**\n    *   **Left Identity:** TL.FalseTimeline |> TL.naiveOr timelineA must behave identically to timelineA.\n        *   Initial Value: `(TL.FalseTimeline |> TL.at Now) || (timelineA |> TL.at Now)` which is `false || valA = valA`. (where valA is the initial value of timelineA).\n        *   Updates: If timelineA is updated to newA (via `timelineA |> TL.define Now newA`), the reactionToA of the composed timeline (if we consider TL.FalseTimeline as the first argument to naiveOr) would effectively compute `false || newA`, which is newA. Since TL.FalseTimeline is constant false, the behavior of the combined timeline mirrors timelineA.\n    *   **Right Identity:** `timelineA |> TL.naiveOr TL.FalseTimeline` must behave identically to timelineA.\n        *   Verified similarly: `valA || false = valA`. The reactionToB (if TL.FalseTimeline is the second argument) would use false as newValB, so changes on timelineA (to newA) would result in `newA || false = newA`.\n    *   *The identity law holds for TL.naiveOr.*\n*   **For TL.naiveAnd and TL.TrueTimeline:**\n    *   **Left Identity:** `TL.TrueTimeline |> TL.naiveAnd timelineA` must behave identically to timelineA.\n        *   Initial Value: `(TL.TrueTimeline |> TL.at Now) && (timelineA |> TL.at Now)` which is `true && valA = valA`.\n        *   Updates: Similar logic, behavior mirrors timelineA.\n    *   **Right Identity:** `timelineA |> TL.naiveAnd TL.TrueTimeline` must behave identically to timelineA.\n        *   Verified similarly: `valA && true = valA`.\n    *   *The identity law holds for TL.naiveAnd.*\n\n### 3.3.2 Associativity Law\n\n*   **For TL.naiveOr:** `(tA |> TL.naiveOr tB) |> TL.naiveOr tC` must behave identically to `tA |> TL.naiveOr (tB |> TL.naiveOr tC)`.\n    *   Let valA, valB, valC be the current values of tA, tB, tC respectively, obtained via `TL.at Now`.\n    *   The current value of the LHS timeline will be `(valA || valB) || valC`.\n    *   The current value of the RHS timeline will be `valA || (valB || valC)`.\n    *   Since the standard boolean OR operator (||) is associative, `(valA || valB) || valC` is always equal to `valA || (valB || valC)`.\n    *   This equality holds for initial values and for any subsequent updates because TL.naiveOr is defined to compute the logical OR of the current values of its inputs whenever any input (or intermediate composed timeline) updates. The reaction mechanism ensures this propagation.\n    *   *The associativity law holds for TL.naiveOr.*\n*   **For TL.naiveAnd:** `(tA |> TL.naiveAnd tB) |> TL.naiveAnd tC` must behave identically to `tA |> TL.naiveAnd (tB |> TL.naiveAnd tC)`.\n    *   Similarly, the current value of the LHS timeline will be `(valA && valB) && valC`.\n    *   The current value of the RHS timeline will be `valA && (valB && valC)`.\n    *   Since boolean && is associative, these are equal.\n    *   *The associativity law holds for TL.naiveAnd.*\n\n## 3.4 Significance of Naive Monoidal Implementations\n\nEstablishing that `(Timeline\u003Cbool>, TL.naiveOr, TL.FalseTimeline)` and `(Timeline\u003Cbool>, TL.naiveAnd, TL.TrueTimeline)` form Monoids, even through these \"naive\" or direct implementations, is significant for several reasons:\n\n1.  **Foundational Understanding:** It demonstrates from first principles how the algebraic structure of a Monoid can be realized within a reactive Timeline system. This understanding is crucial before moving to more abstract or optimized combinators.\n2.  **Robustness & Predictability Guaranteed by Laws:** The Monoid laws ensure that combining multiple Timeline instances yields consistent and predictable results, regardless of grouping.\n3.  **Composability:** Complex logical conditions can be built reliably from simpler parts, with assurances about their combined behavior.\n\nWhile these naive implementations prioritize directness and adherence to algebraic principles, they might not always be the most concise or performant way to achieve these combinations in practice, especially if more general tools are available. The next chapter will explore why we might seek such general tools, paving the way for more \"refined\" implementations of these boolean combinators.","src/content/docs/en/book/unit-5/section-1/3-naive-boolean-monois.md","39c3559744ce50bc",{"html":1568,"metadata":1569},"\u003Cul>\n\u003Cli>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter defines and conceptually implements TL.naiveOr and TL.naiveAnd along with their respective identity elements (TL.FalseTimeline and TL.TrueTimeline) for Timeline. We will demonstrate how they form Monoids by satisfying the Monoid laws, showcasing a direct, “naive” construction from Timeline fundamentals without relying on higher-level combinators like TL.zipWith. This serves an educational purpose in understanding the core principles of how Timeline can embody algebraic structures.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"introduction-realizing-monoids-directly\">Introduction: Realizing Monoids Directly\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#introduction-realizing-monoids-directly\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Introduction: Realizing Monoids Directly”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 2: Towards Monoidal Timelines, we established the conceptual goal of forming Monoids with Timeline instances. Specifically, we aimed to realize:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TimelineOrMonoid = (Set of all Timeline&#x3C;bool> instances, a TL.naiveOr operation, a TL.FalseTimeline identity element)\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TimelineAndMonoid = (Set of all Timeline&#x3C;bool> instances, a TL.naiveAnd operation, a TL.TrueTimeline identity element)\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>To achieve this, we need to:\u003C/p>\n\u003Col>\n\u003Cli>Define suitable identity elements: TL.FalseTimeline for OR, and TL.TrueTimeline for AND.\u003C/li>\n\u003Cli>Define binary operations, TL.naiveOr and TL.naiveAnd, that combine two Timeline instances to produce a new Timeline.\u003C/li>\n\u003Cli>Verify that these operations and identity elements satisfy the Monoid laws: the identity law and the associative law.\u003C/li>\n\u003C/ol>\n\u003Cp>This chapter focuses on constructing these elements in a “naive” or direct manner. This means we will build them conceptually using only the fundamental building blocks of the Timeline system (like the Timeline constructor, \u003Ccode dir=\"auto\">TL.at Now\u003C/code>, \u003Ccode dir=\"auto\">TL.define Now\u003C/code>, and the implicit underlying DependencyCore for managing reactions) without relying on more abstract, general-purpose combinators like TL.zipWith (which will be introduced later). This approach helps to illustrate the first principles of how Monoidal structures can be implemented in a reactive context.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"31-identity-elements-for-boolean-logic\">3.1 Identity Elements for Boolean Logic\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#31-identity-elements-for-boolean-logic\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.1 Identity Elements for Boolean Logic”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The identity element is the neutral cornerstone of any Monoid. For boolean operations on Timeline, these identities must be Timeline instances that perpetually represent the neutral value for OR and AND respectively.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"311-tlfalsetimeline-the-identity-for-or\">3.1.1 TL.FalseTimeline: The Identity for OR\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#311-tlfalsetimeline-the-identity-for-or\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.1.1 TL.FalseTimeline: The Identity for OR”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For an OR operation, the identity element is false, because \u003Ccode dir=\"auto\">x || false == x\u003C/code>. Thus, for Timeline, the identity must be a timeline that is always false.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Definition:\u003C/strong> TL.FalseTimeline is a Timeline that is initialized with the value false and never changes its value over time.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>F# Conceptual Definition:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming Timeline type and Now value are accessible as per style guide\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming 'isNull' helper is globally available or defined in a common module\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For the purpose of this document, Timeline constructor is assumed to be:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let Timeline&#x3C;'a> (initialValue: 'a) : Timeline&#x3C;'a> = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL module encapsulates Timeline-specific operations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// A Timeline\u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">bool\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\"> that is perpetually false.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// It serves as the identity element for the TL.naiveOr monoidal operation.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">FalseTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the Timeline factory function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Note: For TL.FalseTimeline to truly act as an unchanging identity,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// its value isn't modified after creation. This might be a special static instance\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// or ensured by library conventions.\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assuming Timeline type and Now value are accessible as per style guide// Assuming &#x27;isNull&#x27; helper is globally available or defined in a common module// For the purpose of this document, Timeline constructor is assumed to be:// let Timeline\u003C&#x27;a> (initialValue: &#x27;a) : Timeline\u003C&#x27;a> = ...module TL = // TL module encapsulates Timeline-specific operations    // ... other TL definitions ...    /// \u003Csummary>    /// A Timeline\u003Cbool> that is perpetually false.    /// It serves as the identity element for the TL.naiveOr monoidal operation.    /// \u003C/summary>    let FalseTimeline : Timeline\u003Cbool> = Timeline false // Using the Timeline factory function    // Note: For TL.FalseTimeline to truly act as an unchanging identity,    // its value isn&#x27;t modified after creation. This might be a special static instance    // or ensured by library conventions.\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Behavior:\u003C/strong> Querying \u003Ccode dir=\"auto\">TL.FalseTimeline |> TL.at Now\u003C/code> will always yield false.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"312-tltruetimeline-the-identity-for-and\">3.1.2 TL.TrueTimeline: The Identity for AND\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#312-tltruetimeline-the-identity-for-and\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.1.2 TL.TrueTimeline: The Identity for AND”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For an AND operation, הפ identity element is true, because \u003Ccode dir=\"auto\">x &#x26;&#x26; true == x\u003C/code>. Thus, for Timeline, הפ identity must be a timeline that is always true.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Definition:\u003C/strong> TL.TrueTimeline is a Timeline that is initialized with the value true and never changes its value over time.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>F# Conceptual Definition:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL module encapsulates Timeline-specific operations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions including TL.FalseTimeline ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// A Timeline\u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">bool\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\"> that is perpetually true.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// It serves as the identity element for the TL.naiveAnd monoidal operation.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">TrueTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the Timeline factory function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Note: Similar to TL.FalseTimeline, its 'true' state must be preserved.\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL = // TL module encapsulates Timeline-specific operations    // ... other TL definitions including TL.FalseTimeline ...    /// \u003Csummary>    /// A Timeline\u003Cbool> that is perpetually true.    /// It serves as the identity element for the TL.naiveAnd monoidal operation.    /// \u003C/summary>    let TrueTimeline : Timeline\u003Cbool> = Timeline true // Using the Timeline factory function    // Note: Similar to TL.FalseTimeline, its &#x27;true&#x27; state must be preserved.\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Behavior:\u003C/strong> Querying \u003Ccode dir=\"auto\">TL.TrueTimeline |> TL.at Now\u003C/code> will always yield true.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>These constant timelines are fundamental to establishing the Monoid structure.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"32-naive-binary-operations-tlnaiveor-and-tlnaiveand\">3.2 Naive Binary Operations: TL.naiveOr and TL.naiveAnd\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#32-naive-binary-operations-tlnaiveor-and-tlnaiveand\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.2 Naive Binary Operations: TL.naiveOr and TL.naiveAnd”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>These operations are designed to take two Timeline instances and produce a new Timeline that represents their logical combination over time, reacting to changes in either input.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"321-tlnaiveor-naive-logical-or\">3.2.1 TL.naiveOr: Naive Logical OR\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#321-tlnaiveor-naive-logical-or\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.2.1 TL.naiveOr: Naive Logical OR”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>F# Signature and Definition:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL module encapsulates Timeline-specific operations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming Timeline type, 'at', 'define' operations are part of this TL module\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// and follow the specified style guide.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For example:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val at&#x3C;'a> : Now -> Timeline&#x3C;'a> -> 'a\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let at&#x3C;'a> : Now -> Timeline&#x3C;'a> -> 'a = fun now timeline -> ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val define&#x3C;'a> : Now -> 'a -> Timeline&#x3C;'a> -> unit\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let define&#x3C;'a> : Now -> 'a -> Timeline&#x3C;'a> -> unit = fun now value timeline -> ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">naiveOr\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> timelineB timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Parameters follow 'fun', types are from signature\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Read initial values using TL.at and pipe operator\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create the resultTimeline with the initial OR'd value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">initialValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">||\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reaction to updates from timelineA\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This function will be registered as a callback\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reactionToA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> newValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">currentValB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Get B's most recent value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the new OR'd value on the resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">newValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">||\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> currentValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reaction to updates from timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This function will be registered as a callback\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reactionToB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> newValB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">currentValA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Get A's most recent value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the new OR'd value on the resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">currentValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">||\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> newValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Conceptually, DependencyCore is used here by the Timeline system\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// to register that 'reactionToA' should run when 'timelineA' is defined,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// and 'reactionToB' should run when 'timelineB' is defined.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This is an internal mechanism of the Timeline library, not explicitly coded here.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For example, when 'timelineA |> TL.define Now someValue' is called,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// the system would ensure 'reactionToA someValue' is invoked if registered.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL = // TL module encapsulates Timeline-specific operations    // Assuming Timeline type, &#x27;at&#x27;, &#x27;define&#x27; operations are part of this TL module    // and follow the specified style guide.    // For example:    // val at\u003C&#x27;a> : Now -> Timeline\u003C&#x27;a> -> &#x27;a    // let at\u003C&#x27;a> : Now -> Timeline\u003C&#x27;a> -> &#x27;a = fun now timeline -> ...    //    // val define\u003C&#x27;a> : Now -> &#x27;a -> Timeline\u003C&#x27;a> -> unit    // let define\u003C&#x27;a> : Now -> &#x27;a -> Timeline\u003C&#x27;a> -> unit = fun now value timeline -> ...    let naiveOr : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> =        fun timelineB timelineA -> // Parameters follow &#x27;fun&#x27;, types are from signature            // Read initial values using TL.at and pipe operator            let initialValA : bool = timelineA |> TL.at Now            let initialValB : bool = timelineB |> TL.at Now            // Create the resultTimeline with the initial OR&#x27;d value            let resultTimeline : Timeline\u003Cbool> = Timeline (initialValA || initialValB)            // Reaction to updates from timelineA            // This function will be registered as a callback            let reactionToA : bool -> unit =                fun newValA ->                    let currentValB : bool = timelineB |> TL.at Now // Get B&#x27;s most recent value                    // Define the new OR&#x27;d value on the resultTimeline                    resultTimeline |> TL.define Now (newValA || currentValB)            // Reaction to updates from timelineB            // This function will be registered as a callback            let reactionToB : bool -> unit =                fun newValB ->                    let currentValA : bool = timelineA |> TL.at Now // Get A&#x27;s most recent value                    // Define the new OR&#x27;d value on the resultTimeline                    resultTimeline |> TL.define Now (currentValA || newValB)            // Conceptually, DependencyCore is used here by the Timeline system            // to register that &#x27;reactionToA&#x27; should run when &#x27;timelineA&#x27; is defined,            // and &#x27;reactionToB&#x27; should run when &#x27;timelineB&#x27; is defined.            // This is an internal mechanism of the Timeline library, not explicitly coded here.            // For example, when &#x27;timelineA |> TL.define Now someValue&#x27; is called,            // the system would ensure &#x27;reactionToA someValue&#x27; is invoked if registered.            resultTimeline\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Core Semantics:\u003C/strong> The resultTimeline from \u003Ccode dir=\"auto\">timelineA |> TL.naiveOr timelineB\u003C/code> should, at any point, reflect the logical OR (||) of the current values of timelineA and timelineB.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Update Behavior:\u003C/strong> resultTimeline must update reactively whenever either timelineA or timelineB changes its value, re-calculating the OR based on the latest known values of both inputs.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Initialization:\u003C/strong> The initial value of resultTimeline is the logical OR of the initial values of timelineA and timelineB.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"322-tlnaiveand-naive-logical-and\">3.2.2 TL.naiveAnd: Naive Logical AND\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#322-tlnaiveand-naive-logical-and\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.2.2 TL.naiveAnd: Naive Logical AND”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>F# Signature and Definition:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL module encapsulates Timeline-specific operations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">naiveAnd\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> timelineB timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">initialValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial AND'd value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reaction to updates from timelineA\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reactionToA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> newValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">currentValB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">newValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> currentValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reaction to updates from timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reactionToB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> newValB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">currentValA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">currentValA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> newValB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Again, DependencyCore would manage these reactions internally.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL = // TL module encapsulates Timeline-specific operations    // ... other TL definitions ...    let naiveAnd : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> =        fun timelineB timelineA ->            let initialValA : bool = timelineA |> TL.at Now            let initialValB : bool = timelineB |> TL.at Now            let resultTimeline : Timeline\u003Cbool> = Timeline (initialValA &#x26;&#x26; initialValB) // Initial AND&#x27;d value            // Reaction to updates from timelineA            let reactionToA : bool -> unit =                fun newValA ->                    let currentValB : bool = timelineB |> TL.at Now                    resultTimeline |> TL.define Now (newValA &#x26;&#x26; currentValB)            // Reaction to updates from timelineB            let reactionToB : bool -> unit =                fun newValB ->                    let currentValA : bool = timelineA |> TL.at Now                    resultTimeline |> TL.define Now (currentValA &#x26;&#x26; newValB)            // Again, DependencyCore would manage these reactions internally.            resultTimeline\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Core Semantics:\u003C/strong> The resultTimeline from \u003Ccode dir=\"auto\">timelineA |> TL.naiveAnd timelineB\u003C/code> should reflect the logical AND (&#x26;&#x26;) of the current values of timelineA and timelineB.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Update Behavior:\u003C/strong> resultTimeline must update reactively whenever either timelineA or timelineB changes.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Initialization:\u003C/strong> The initial value is the logical AND of the initial values of timelineA and timelineB.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"33-verifying-monoid-laws\">3.3 Verifying Monoid Laws\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#33-verifying-monoid-laws\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.3 Verifying Monoid Laws”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>For \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveOr, TL.FalseTimeline)\u003C/code> and \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveAnd, TL.TrueTimeline)\u003C/code> to be true Monoids, they must satisfy the Monoid laws: identity and associativity. The verification process is similar for both OR and AND, relying on the properties of the underlying boolean || and &#x26;&#x26; operators.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"331-identity-law\">3.3.1 Identity Law\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#331-identity-law\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.3.1 Identity Law”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>For TL.naiveOr and TL.FalseTimeline:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Cstrong>Left Identity:\u003C/strong> TL.FalseTimeline |> TL.naiveOr timelineA must behave identically to timelineA.\n\u003Cul>\n\u003Cli>Initial Value: \u003Ccode dir=\"auto\">(TL.FalseTimeline |> TL.at Now) || (timelineA |> TL.at Now)\u003C/code> which is \u003Ccode dir=\"auto\">false || valA = valA\u003C/code>. (where valA is the initial value of timelineA).\u003C/li>\n\u003Cli>Updates: If timelineA is updated to newA (via \u003Ccode dir=\"auto\">timelineA |> TL.define Now newA\u003C/code>), the reactionToA of the composed timeline (if we consider TL.FalseTimeline as the first argument to naiveOr) would effectively compute \u003Ccode dir=\"auto\">false || newA\u003C/code>, which is newA. Since TL.FalseTimeline is constant false, the behavior of the combined timeline mirrors timelineA.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Right Identity:\u003C/strong> \u003Ccode dir=\"auto\">timelineA |> TL.naiveOr TL.FalseTimeline\u003C/code> must behave identically to timelineA.\n\u003Cul>\n\u003Cli>Verified similarly: \u003Ccode dir=\"auto\">valA || false = valA\u003C/code>. The reactionToB (if TL.FalseTimeline is the second argument) would use false as newValB, so changes on timelineA (to newA) would result in \u003Ccode dir=\"auto\">newA || false = newA\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cem>The identity law holds for TL.naiveOr.\u003C/em>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>For TL.naiveAnd and TL.TrueTimeline:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Cstrong>Left Identity:\u003C/strong> \u003Ccode dir=\"auto\">TL.TrueTimeline |> TL.naiveAnd timelineA\u003C/code> must behave identically to timelineA.\n\u003Cul>\n\u003Cli>Initial Value: \u003Ccode dir=\"auto\">(TL.TrueTimeline |> TL.at Now) &#x26;&#x26; (timelineA |> TL.at Now)\u003C/code> which is \u003Ccode dir=\"auto\">true &#x26;&#x26; valA = valA\u003C/code>.\u003C/li>\n\u003Cli>Updates: Similar logic, behavior mirrors timelineA.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Right Identity:\u003C/strong> \u003Ccode dir=\"auto\">timelineA |> TL.naiveAnd TL.TrueTimeline\u003C/code> must behave identically to timelineA.\n\u003Cul>\n\u003Cli>Verified similarly: \u003Ccode dir=\"auto\">valA &#x26;&#x26; true = valA\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cem>The identity law holds for TL.naiveAnd.\u003C/em>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"332-associativity-law\">3.3.2 Associativity Law\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#332-associativity-law\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.3.2 Associativity Law”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>For TL.naiveOr:\u003C/strong> \u003Ccode dir=\"auto\">(tA |> TL.naiveOr tB) |> TL.naiveOr tC\u003C/code> must behave identically to \u003Ccode dir=\"auto\">tA |> TL.naiveOr (tB |> TL.naiveOr tC)\u003C/code>.\n\u003Cul>\n\u003Cli>Let valA, valB, valC be the current values of tA, tB, tC respectively, obtained via \u003Ccode dir=\"auto\">TL.at Now\u003C/code>.\u003C/li>\n\u003Cli>The current value of the LHS timeline will be \u003Ccode dir=\"auto\">(valA || valB) || valC\u003C/code>.\u003C/li>\n\u003Cli>The current value of the RHS timeline will be \u003Ccode dir=\"auto\">valA || (valB || valC)\u003C/code>.\u003C/li>\n\u003Cli>Since the standard boolean OR operator (||) is associative, \u003Ccode dir=\"auto\">(valA || valB) || valC\u003C/code> is always equal to \u003Ccode dir=\"auto\">valA || (valB || valC)\u003C/code>.\u003C/li>\n\u003Cli>This equality holds for initial values and for any subsequent updates because TL.naiveOr is defined to compute the logical OR of the current values of its inputs whenever any input (or intermediate composed timeline) updates. The reaction mechanism ensures this propagation.\u003C/li>\n\u003Cli>\u003Cem>The associativity law holds for TL.naiveOr.\u003C/em>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>For TL.naiveAnd:\u003C/strong> \u003Ccode dir=\"auto\">(tA |> TL.naiveAnd tB) |> TL.naiveAnd tC\u003C/code> must behave identically to \u003Ccode dir=\"auto\">tA |> TL.naiveAnd (tB |> TL.naiveAnd tC)\u003C/code>.\n\u003Cul>\n\u003Cli>Similarly, the current value of the LHS timeline will be \u003Ccode dir=\"auto\">(valA &#x26;&#x26; valB) &#x26;&#x26; valC\u003C/code>.\u003C/li>\n\u003Cli>The current value of the RHS timeline will be \u003Ccode dir=\"auto\">valA &#x26;&#x26; (valB &#x26;&#x26; valC)\u003C/code>.\u003C/li>\n\u003Cli>Since boolean &#x26;&#x26; is associative, these are equal.\u003C/li>\n\u003Cli>\u003Cem>The associativity law holds for TL.naiveAnd.\u003C/em>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"34-significance-of-naive-monoidal-implementations\">3.4 Significance of Naive Monoidal Implementations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#34-significance-of-naive-monoidal-implementations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.4 Significance of Naive Monoidal Implementations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Establishing that \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveOr, TL.FalseTimeline)\u003C/code> and \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.naiveAnd, TL.TrueTimeline)\u003C/code> form Monoids, even through these “naive” or direct implementations, is significant for several reasons:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Foundational Understanding:\u003C/strong> It demonstrates from first principles how the algebraic structure of a Monoid can be realized within a reactive Timeline system. This understanding is crucial before moving to more abstract or optimized combinators.\u003C/li>\n\u003Cli>\u003Cstrong>Robustness &#x26; Predictability Guaranteed by Laws:\u003C/strong> The Monoid laws ensure that combining multiple Timeline instances yields consistent and predictable results, regardless of grouping.\u003C/li>\n\u003Cli>\u003Cstrong>Composability:\u003C/strong> Complex logical conditions can be built reliably from simpler parts, with assurances about their combined behavior.\u003C/li>\n\u003C/ol>\n\u003Cp>While these naive implementations prioritize directness and adherence to algebraic principles, they might not always be the most concise or performant way to achieve these combinations in practice, especially if more general tools are available. The next chapter will explore why we might seek such general tools, paving the way for more “refined” implementations of these boolean combinators.\u003C/p>",{"headings":1570,"localImagePaths":1604,"remoteImagePaths":1605,"frontmatter":1606,"imagePaths":1607},[1571,1574,1577,1580,1583,1586,1589,1592,1595,1598,1601],{"depth":182,"slug":1572,"text":1573},"introduction-realizing-monoids-directly","Introduction: Realizing Monoids Directly",{"depth":182,"slug":1575,"text":1576},"31-identity-elements-for-boolean-logic","3.1 Identity Elements for Boolean Logic",{"depth":523,"slug":1578,"text":1579},"311-tlfalsetimeline-the-identity-for-or","3.1.1 TL.FalseTimeline: The Identity for OR",{"depth":523,"slug":1581,"text":1582},"312-tltruetimeline-the-identity-for-and","3.1.2 TL.TrueTimeline: The Identity for AND",{"depth":182,"slug":1584,"text":1585},"32-naive-binary-operations-tlnaiveor-and-tlnaiveand","3.2 Naive Binary Operations: TL.naiveOr and TL.naiveAnd",{"depth":523,"slug":1587,"text":1588},"321-tlnaiveor-naive-logical-or","3.2.1 TL.naiveOr: Naive Logical OR",{"depth":523,"slug":1590,"text":1591},"322-tlnaiveand-naive-logical-and","3.2.2 TL.naiveAnd: Naive Logical AND",{"depth":182,"slug":1593,"text":1594},"33-verifying-monoid-laws","3.3 Verifying Monoid Laws",{"depth":523,"slug":1596,"text":1597},"331-identity-law","3.3.1 Identity Law",{"depth":523,"slug":1599,"text":1600},"332-associativity-law","3.3.2 Associativity Law",{"depth":182,"slug":1602,"text":1603},"34-significance-of-naive-monoidal-implementations","3.4 Significance of Naive Monoidal Implementations",[],[],{"title":1559,"description":1560},[],"en/book/unit-5/section-1/4-motivaion-general",{"id":1608,"data":1610,"body":1616,"filePath":1617,"digest":1618,"rendered":1619},{"title":1611,"description":1612,"editUrl":16,"head":1613,"template":18,"sidebar":1614,"pagefind":16,"draft":20},"Chapter 4: Need for General Combinators and Efficiency","Chapter Goal: This chapter acknowledges the foundational understanding and algebraic correctness provided by the \"naive\" Monoidal implementations (TL.naiveOr, TL.naiveAnd) discussed in Chapter 3. It then explores practical considerations such as combining timelines of different types, managing update propagation efficiently, and achieving more expressive and concise code. These considerations motivate the introduction of more general-purpose utility combinators in the subsequent chapters, highlighting why a rich toolkit beyond the fundamental Monoids is beneficial for building robust and practical reactive applications.",[],{"hidden":20,"attrs":1615},{},"**Chapter Goal:** This chapter acknowledges the foundational understanding and algebraic correctness provided by the \"naive\" Monoidal implementations (`TL.naiveOr`, `TL.naiveAnd`) discussed in Chapter 3. It then explores practical considerations such as combining timelines of different types, managing update propagation efficiently, and achieving more expressive and concise code. These considerations motivate the introduction of more general-purpose utility combinators in the subsequent chapters, highlighting why a rich toolkit beyond the fundamental Monoids is beneficial for building robust and practical reactive applications.\n\n## 4.1 The Value of Naive Monoidal Foundations\n\nIn Chapter 3, we meticulously constructed `TL.naiveOr` and `TL.naiveAnd`, along with their respective identity elements `TL.FalseTimeline` and `TL.TrueTimeline`. We demonstrated that these form valid Monoids for `Timeline\u003Cbool>`, adhering strictly to the Monoid laws of identity and associativity.\n\nThis \"naive\" approach, built directly from `Timeline` fundamentals without relying on higher-level abstractions like `TL.zipWith`, offers significant benefits:\n\n1.  **Foundational Understanding:** It clearly illustrates from first principles how algebraic structures like Monoids can be realized within a reactive `Timeline` system. This is invaluable for grasping the core mechanics.\n2.  **Algebraic Correctness:** By proving adherence to Monoid laws, we gain strong guarantees about the predictability, robustness, and composability of these specific boolean logical operations.\n3.  **Educational Insight:** It provides a concrete example of how the properties of underlying operations on simple types (like `||` and `&&` on `bool`) can be \"lifted\" into a more complex, reactive context (`Timeline\u003Cbool>`).\n\nThese naive Monoidal implementations serve as an excellent theoretical and educational bedrock. They confirm that our `Timeline` system is capable of embodying sound algebraic principles.\n\n## 4.2 Moving Beyond Naive Implementations: Practical Motivations\n\nWhile the algebraic purity and foundational insight offered by `TL.naiveOr` and `TL.naiveAnd` are crucial, relying solely on such direct, bespoke implementations for all timeline combination needs in a larger application can present practical challenges. As we build more complex reactive systems, several considerations emerge that motivate the need for more versatile and potentially optimized tools:\n\n1.  **Combining Timelines of Different Types:**\n    Our `TL.naiveOr` and `TL.naiveAnd` are specifically designed for `Timeline\u003Cbool>`. What if we need to combine a `Timeline\u003Cint>` with another `Timeline\u003Cint>` to produce a `Timeline\u003Cint>` representing their sum? Or a `Timeline\u003Cstring>` with a `Timeline\u003Cstring>` for concatenation? The naive Monoidal approach for booleans doesn't directly provide a general mechanism for these heterogeneous or non-boolean combinations. We need a way to perform **general point-wise combinations** for arbitrary types using custom logic.\n\n2.  **Managing Update Propagation and Efficiency:**\n    As discussed conceptually for the naive implementations, `TL.naiveOr` and `TL.naiveAnd` are designed to update their result timeline whenever *either* of their input timelines changes. The new result is calculated based on the current values of both inputs.\n    Consider `resultTimeline = timelineA |> TL.naiveOr timelineB`:\n    *   If `timelineA` is `true` and `timelineB` is `false`, `resultTimeline` is `true`.\n    *   If `timelineB` then updates from `false` to `true` (while `timelineA` remains `true`), the re-calculated state `true || true` is still `true`.\n    In this scenario, `resultTimeline` would be re-defined with the value `true` by `TL.naiveOr`. While this is algebraically correct based on the point-wise lifting of the `||` operation, it means an event is propagated downstream even though the *effective logical state* of `resultTimeline` did not change.\n    In systems with many interconnected timelines or expensive downstream computations (including UI re-renders), such **redundant update propagations** can lead to inefficiencies. This highlights a need for mechanisms to filter or suppress updates if the new value is identical to the previously propagated one.\n\n3.  **Desire for Simplicity, Reusability, and Expressiveness:**\n    *   **Conciseness:** While the conceptual sketches for `TL.naiveOr` and `TL.naiveAnd` are illustrative, implementing numerous similar binary operations (e.g., for arithmetic, string manipulation, custom logic) by hand, each requiring direct management of reactions and dependencies, could lead to repetitive boilerplate code.\n    *   **Reusability:** A general-purpose tool for combining two timelines could be reused for many different types and combining functions, rather than having separate \"naive\" implementations for each specific case.\n    *   **Expressiveness:** Developers often benefit from a rich vocabulary of combinators that allow them to express their reactive intent more directly and clearly. While complex patterns can often be built from `TL.map` and `TL.bind` (as shown in Unit 4), higher-level combinators can make the code more readable and less error-prone.\n\nThese practical considerations do not invalidate the correctness or importance of the naive Monoidal implementations. Instead, they signal that for a comprehensive and practical `Timeline` library, we should also seek general-purpose tools that address these concerns more directly.\n\n## 4.3 The Path Forward: Introducing Versatile Combinators\n\nThe practical needs identified above – general type combination, efficient update management, and greater expressiveness – motivate the introduction of two key types of combinators in the upcoming chapters:\n\n1.  **Utility Combinators for Efficiency:**\n    To address the issue of redundant update propagation, we need a way to filter a timeline so that it only emits values when the new value is actually different from the previous one.\n    *   **This leads to `TL.distinctUntilChanged` (to be detailed in Chapter 6).**\n\n2.  **General-Purpose Point-wise Combination Tools:**\n    To combine timelines of arbitrary types using custom logic in a reusable way, we need a versatile binary combinator. This tool would take two input timelines and a function that specifies how to combine their current values.\n    *   **This leads to `TL.zipWith` (to be detailed in Chapter 5).** \n        *(Self-correction: As per our agreed new chapter order, `TL.zipWith` is introduced in Chapter 5, followed by `TL.distinctUntilChanged` in Chapter 6. The previous text accidentally swapped these. This version reflects the correct order.)*\n\n**Revisiting Boolean Logic with General Tools:**\n\nOnce we have these general tools, especially `TL.zipWith`, we can then revisit the task of combining `Timeline\u003Cbool>` for logical OR and AND. We will find that `TL.zipWith` allows us to define `TL.or` and `TL.and` (the \"refined\" or \"practical\" versions) in a very concise and elegant way, for example:\n\n*   `TL.or` can be implemented as `fun timelineB timelineA -> timelineA |> TL.zipWith (||) timelineB`\n*   `TL.and` can be implemented as `fun timelineB timelineA -> timelineA |> TL.zipWith (&&) timelineB`\n\nThese `zipWith`-based implementations will still effectively satisfy the Monoid laws (as we will verify in Chapter 7) because `TL.zipWith` \"lifts\" the Monoidal properties of the underlying boolean `||` and `&&` operators. They offer a more practical and often more efficient approach for everyday use, built upon a general-purpose foundation.\n\n## 4.4 Summary: Balancing Foundational Understanding with Practical Power\n\nThis chapter has served as a bridge. We started by reaffirming the value of the \"naive\" Monoidal implementations (`TL.naiveOr`, `TL.naiveAnd`) from Chapter 3 for their clarity in demonstrating first principles and their inherent algebraic correctness.\n\nHowever, we then explored practical scenarios and requirements – handling diverse types, optimizing update flow, and seeking greater conciseness and reusability – that motivate the need for more powerful and general tools. This is not to say the naive implementations are \"wrong\" or \"insufficient\" in their algebraic correctness, but rather that a mature library offers a richer set of combinators to address a wider spectrum of development needs.\n\nThe upcoming chapters will introduce these key enabling tools:\n\n*   **Chapter 5: `TL.zipWith`** – For general point-wise combination of two timelines.\n*   **Chapter 6: `TL.distinctUntilChanged`** – For filtering redundant updates.\n\nWith these in hand, we will then be equipped to construct more refined and practical versions of our boolean logical combinators (Chapter 7) and explore further patterns of timeline aggregation. This layered approach, from foundational algebraic principles to versatile tools and then to practical applications, allows us to build robust and expressive reactive systems with confidence.","src/content/docs/en/book/unit-5/section-1/4-motivaion-general.md","2041ed4f48bfcc0b",{"html":1620,"metadata":1621},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter acknowledges the foundational understanding and algebraic correctness provided by the “naive” Monoidal implementations (\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>, \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>) discussed in Chapter 3. It then explores practical considerations such as combining timelines of different types, managing update propagation efficiently, and achieving more expressive and concise code. These considerations motivate the introduction of more general-purpose utility combinators in the subsequent chapters, highlighting why a rich toolkit beyond the fundamental Monoids is beneficial for building robust and practical reactive applications.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"41-the-value-of-naive-monoidal-foundations\">4.1 The Value of Naive Monoidal Foundations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#41-the-value-of-naive-monoidal-foundations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.1 The Value of Naive Monoidal Foundations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 3, we meticulously constructed \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>, along with their respective identity elements \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code> and \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>. We demonstrated that these form valid Monoids for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>, adhering strictly to the Monoid laws of identity and associativity.\u003C/p>\n\u003Cp>This “naive” approach, built directly from \u003Ccode dir=\"auto\">Timeline\u003C/code> fundamentals without relying on higher-level abstractions like \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, offers significant benefits:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Foundational Understanding:\u003C/strong> It clearly illustrates from first principles how algebraic structures like Monoids can be realized within a reactive \u003Ccode dir=\"auto\">Timeline\u003C/code> system. This is invaluable for grasping the core mechanics.\u003C/li>\n\u003Cli>\u003Cstrong>Algebraic Correctness:\u003C/strong> By proving adherence to Monoid laws, we gain strong guarantees about the predictability, robustness, and composability of these specific boolean logical operations.\u003C/li>\n\u003Cli>\u003Cstrong>Educational Insight:\u003C/strong> It provides a concrete example of how the properties of underlying operations on simple types (like \u003Ccode dir=\"auto\">||\u003C/code> and \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code> on \u003Ccode dir=\"auto\">bool\u003C/code>) can be “lifted” into a more complex, reactive context (\u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003Cp>These naive Monoidal implementations serve as an excellent theoretical and educational bedrock. They confirm that our \u003Ccode dir=\"auto\">Timeline\u003C/code> system is capable of embodying sound algebraic principles.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"42-moving-beyond-naive-implementations-practical-motivations\">4.2 Moving Beyond Naive Implementations: Practical Motivations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#42-moving-beyond-naive-implementations-practical-motivations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.2 Moving Beyond Naive Implementations: Practical Motivations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While the algebraic purity and foundational insight offered by \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> are crucial, relying solely on such direct, bespoke implementations for all timeline combination needs in a larger application can present practical challenges. As we build more complex reactive systems, several considerations emerge that motivate the need for more versatile and potentially optimized tools:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Combining Timelines of Different Types:\u003C/strong>\nOur \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> are specifically designed for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>. What if we need to combine a \u003Ccode dir=\"auto\">Timeline&#x3C;int>\u003C/code> with another \u003Ccode dir=\"auto\">Timeline&#x3C;int>\u003C/code> to produce a \u003Ccode dir=\"auto\">Timeline&#x3C;int>\u003C/code> representing their sum? Or a \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> with a \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> for concatenation? The naive Monoidal approach for booleans doesn’t directly provide a general mechanism for these heterogeneous or non-boolean combinations. We need a way to perform \u003Cstrong>general point-wise combinations\u003C/strong> for arbitrary types using custom logic.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Managing Update Propagation and Efficiency:\u003C/strong>\nAs discussed conceptually for the naive implementations, \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> are designed to update their result timeline whenever \u003Cem>either\u003C/em> of their input timelines changes. The new result is calculated based on the current values of both inputs.\nConsider \u003Ccode dir=\"auto\">resultTimeline = timelineA |> TL.naiveOr timelineB\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineA\u003C/code> is \u003Ccode dir=\"auto\">true\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> is \u003Ccode dir=\"auto\">false\u003C/code>, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineB\u003C/code> then updates from \u003Ccode dir=\"auto\">false\u003C/code> to \u003Ccode dir=\"auto\">true\u003C/code> (while \u003Ccode dir=\"auto\">timelineA\u003C/code> remains \u003Ccode dir=\"auto\">true\u003C/code>), the re-calculated state \u003Ccode dir=\"auto\">true || true\u003C/code> is still \u003Ccode dir=\"auto\">true\u003C/code>.\nIn this scenario, \u003Ccode dir=\"auto\">resultTimeline\u003C/code> would be re-defined with the value \u003Ccode dir=\"auto\">true\u003C/code> by \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>. While this is algebraically correct based on the point-wise lifting of the \u003Ccode dir=\"auto\">||\u003C/code> operation, it means an event is propagated downstream even though the \u003Cem>effective logical state\u003C/em> of \u003Ccode dir=\"auto\">resultTimeline\u003C/code> did not change.\nIn systems with many interconnected timelines or expensive downstream computations (including UI re-renders), such \u003Cstrong>redundant update propagations\u003C/strong> can lead to inefficiencies. This highlights a need for mechanisms to filter or suppress updates if the new value is identical to the previously propagated one.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Desire for Simplicity, Reusability, and Expressiveness:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Conciseness:\u003C/strong> While the conceptual sketches for \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> are illustrative, implementing numerous similar binary operations (e.g., for arithmetic, string manipulation, custom logic) by hand, each requiring direct management of reactions and dependencies, could lead to repetitive boilerplate code.\u003C/li>\n\u003Cli>\u003Cstrong>Reusability:\u003C/strong> A general-purpose tool for combining two timelines could be reused for many different types and combining functions, rather than having separate “naive” implementations for each specific case.\u003C/li>\n\u003Cli>\u003Cstrong>Expressiveness:\u003C/strong> Developers often benefit from a rich vocabulary of combinators that allow them to express their reactive intent more directly and clearly. While complex patterns can often be built from \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> (as shown in Unit 4), higher-level combinators can make the code more readable and less error-prone.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>These practical considerations do not invalidate the correctness or importance of the naive Monoidal implementations. Instead, they signal that for a comprehensive and practical \u003Ccode dir=\"auto\">Timeline\u003C/code> library, we should also seek general-purpose tools that address these concerns more directly.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"43-the-path-forward-introducing-versatile-combinators\">4.3 The Path Forward: Introducing Versatile Combinators\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#43-the-path-forward-introducing-versatile-combinators\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.3 The Path Forward: Introducing Versatile Combinators”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The practical needs identified above – general type combination, efficient update management, and greater expressiveness – motivate the introduction of two key types of combinators in the upcoming chapters:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Utility Combinators for Efficiency:\u003C/strong>\nTo address the issue of redundant update propagation, we need a way to filter a timeline so that it only emits values when the new value is actually different from the previous one.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>This leads to \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (to be detailed in Chapter 6).\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>General-Purpose Point-wise Combination Tools:\u003C/strong>\nTo combine timelines of arbitrary types using custom logic in a reusable way, we need a versatile binary combinator. This tool would take two input timelines and a function that specifies how to combine their current values.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>This leads to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (to be detailed in Chapter 5).\u003C/strong>\n\u003Cem>(Self-correction: As per our agreed new chapter order, \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is introduced in Chapter 5, followed by \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> in Chapter 6. The previous text accidentally swapped these. This version reflects the correct order.)\u003C/em>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Revisiting Boolean Logic with General Tools:\u003C/strong>\u003C/p>\n\u003Cp>Once we have these general tools, especially \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, we can then revisit the task of combining \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> for logical OR and AND. We will find that \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> allows us to define \u003Ccode dir=\"auto\">TL.or\u003C/code> and \u003Ccode dir=\"auto\">TL.and\u003C/code> (the “refined” or “practical” versions) in a very concise and elegant way, for example:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TL.or\u003C/code> can be implemented as \u003Ccode dir=\"auto\">fun timelineB timelineA -> timelineA |> TL.zipWith (||) timelineB\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.and\u003C/code> can be implemented as \u003Ccode dir=\"auto\">fun timelineB timelineA -> timelineA |> TL.zipWith (&#x26;&#x26;) timelineB\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>These \u003Ccode dir=\"auto\">zipWith\u003C/code>-based implementations will still effectively satisfy the Monoid laws (as we will verify in Chapter 7) because \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> “lifts” the Monoidal properties of the underlying boolean \u003Ccode dir=\"auto\">||\u003C/code> and \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code> operators. They offer a more practical and often more efficient approach for everyday use, built upon a general-purpose foundation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"44-summary-balancing-foundational-understanding-with-practical-power\">4.4 Summary: Balancing Foundational Understanding with Practical Power\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#44-summary-balancing-foundational-understanding-with-practical-power\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.4 Summary: Balancing Foundational Understanding with Practical Power”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This chapter has served as a bridge. We started by reaffirming the value of the “naive” Monoidal implementations (\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code>, \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>) from Chapter 3 for their clarity in demonstrating first principles and their inherent algebraic correctness.\u003C/p>\n\u003Cp>However, we then explored practical scenarios and requirements – handling diverse types, optimizing update flow, and seeking greater conciseness and reusability – that motivate the need for more powerful and general tools. This is not to say the naive implementations are “wrong” or “insufficient” in their algebraic correctness, but rather that a mature library offers a richer set of combinators to address a wider spectrum of development needs.\u003C/p>\n\u003Cp>The upcoming chapters will introduce these key enabling tools:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Chapter 5: \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>\u003C/strong> – For general point-wise combination of two timelines.\u003C/li>\n\u003Cli>\u003Cstrong>Chapter 6: \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/strong> – For filtering redundant updates.\u003C/li>\n\u003C/ul>\n\u003Cp>With these in hand, we will then be equipped to construct more refined and practical versions of our boolean logical combinators (Chapter 7) and explore further patterns of timeline aggregation. This layered approach, from foundational algebraic principles to versatile tools and then to practical applications, allows us to build robust and expressive reactive systems with confidence.\u003C/p>",{"headings":1622,"localImagePaths":1635,"remoteImagePaths":1636,"frontmatter":1637,"imagePaths":1638},[1623,1626,1629,1632],{"depth":182,"slug":1624,"text":1625},"41-the-value-of-naive-monoidal-foundations","4.1 The Value of Naive Monoidal Foundations",{"depth":182,"slug":1627,"text":1628},"42-moving-beyond-naive-implementations-practical-motivations","4.2 Moving Beyond Naive Implementations: Practical Motivations",{"depth":182,"slug":1630,"text":1631},"43-the-path-forward-introducing-versatile-combinators","4.3 The Path Forward: Introducing Versatile Combinators",{"depth":182,"slug":1633,"text":1634},"44-summary-balancing-foundational-understanding-with-practical-power","4.4 Summary: Balancing Foundational Understanding with Practical Power",[],[],{"title":1611,"description":1612},[],"en/book/unit-5/section-1/6-distinct",{"id":1639,"data":1641,"body":1647,"filePath":1648,"digest":1649,"rendered":1650},{"title":1642,"description":1643,"editUrl":16,"head":1644,"template":18,"sidebar":1645,"pagefind":16,"draft":20},"Chapter 6: Filtering Timelines – TL.distinctUntilChanged","Chapter Goal: This chapter formally introduces the TL.distinctUntilChanged combinator. We will explain its purpose, functionality, and use cases, highlighting its role as a crucial tool for addressing the efficiency concerns related to redundant updates, which were identified as a practical consideration in Chapter 4: Need for General Combinators and Efficiency.",[],{"hidden":20,"attrs":1646},{},"**Chapter Goal:**\nThis chapter formally introduces the `TL.distinctUntilChanged` combinator. We will explain its purpose, functionality, and use cases, highlighting its role as a crucial tool for addressing the efficiency concerns related to redundant updates, which were identified as a practical consideration in **Chapter 4: Need for General Combinators and Efficiency**.\n\n## 6.1 The Problem of Redundant Updates (Connecting to Chapter 4)\n\nIn **Chapter 4: Need for General Combinators and Efficiency**, we discussed how various timeline operations, including the naive Monoidal combinators (`TL.naiveOr` and `TL.naiveAnd` from Chapter 3), or even simple `TL.map` transformations (Unit 4), might propagate new events downstream even if the actual logical value they represent hasn't changed. For instance, if a `Timeline\u003Cbool>` representing `isReady` is already `true`, and an input causes it to re-evaluate to `true` again, an event carrying `true` is still propagated.\n\nWhile correct from a \"value at this instant\" perspective, this can lead to inefficiencies:\n\n*   **Unnecessary downstream computations:** Other timelines or reactions depending on `isReady` might be triggered, performing work that yields the same result as before.\n*   **Redundant UI updates:** If `isReady` drives a UI element, the element might be instructed to re-render itself with the same state.\n\nThis motivates the need for a mechanism to filter out such consecutive, identical updates, ensuring that only genuine changes in value trigger further reactive processing.\n\n## 6.2 Revisiting `TL.define`: Why Events Always Propagate by Default\n\nTo understand why `TL.distinctUntilChanged` is necessary, let's revisit the fundamental behavior of `TL.define`, the core operation for introducing a new value into a `Timeline`.\n\nAs established in Unit 4 (Chapter 2: \"Understanding `Timeline\u003C'a>` and FRP Implementation\" and Chapter 3: \"Transforming Timelines and Introducing the Dependency Graph\"), and also touched upon in Unit 5 (Chapter 0: \"Handling Absence\"), the `TL.define` operation in this library has a key characteristic: **it always executes the registered callbacks (reactions) whenever it is called**, regardless of whether the new `value` being defined is different from the `timeline._last` value already stored.\n\nThis \"always propagate\" behavior is a deliberate design choice with several justifications:\n\n*   **`Timeline` as an \"Event Stream\":** Beyond representing a value that changes over time (a \"Behavior\" or \"Signal\"), a `Timeline` can also be viewed as an \"Event Stream.\" From this perspective, each call to `TL.define` signifies the occurrence of an event, and the `value` is the data associated with that event. Even if two consecutive events carry the same data, they are distinct occurrences.\n*   **`define` as a \"Command\":** `TL.define` can be interpreted as a command: \"Set the current value of this timeline to `value` and notify dependents.\" The act of issuing the command implies that the associated actions (callbacks) should be performed.\n*   **Trigger for Re-evaluation:** An event on a timeline, even if it redefines the same value, can serve as a trigger for downstream computations that might depend on *other* timelines whose values *have* changed.\n*   **Simplicity and Predictability:** The rule \"a `define` call always triggers callbacks\" is simple and predictable.\n*   **Separation of Concerns:** The responsibility of generating an event (`define`) is kept separate from the responsibility of filtering or transforming that event stream (which can be handled by other combinators like `TL.distinctUntilChanged`).\n\nHowever, as noted in Chapter 4, this \"always propagate\" behavior has potential drawbacks related to performance and sometimes intuitive expectations, which leads us directly to the solution.\n\n## 6.3 Introducing `TL.distinctUntilChanged`: Filtering Based on Value Changes\n\nTo address the potential for redundant updates and to give programmers explicit control over event propagation based on value changes, the `Timeline` library provides the `TL.distinctUntilChanged` combinator.\n\n**Purpose:**\n`TL.distinctUntilChanged` creates a new timeline that only propagates updates from its source timeline if the new value is **different** from the previously propagated value from this specific `distinctUntilChanged` operation.\n\n**Signature:**\n\n```fsharp\n// Contained within the TL module\n// val distinctUntilChanged\u003C'a when 'a : equality> : Timeline\u003C'a> -> Timeline\u003C'a>\n```\n\nThe F# code for this function (from the provided `Timeline.fs`):\n\n```fsharp\nmodule TL =\n    // ... other TL definitions ...\n\n    let distinctUntilChanged\u003C'a when 'a : equality> : Timeline\u003C'a> -> Timeline\u003C'a> =\n        fun sourceTimeline ->\n            let initialValue : 'a = sourceTimeline |> TL.at Now // Explicit TL.at\n            let resultTimeline : Timeline\u003C'a> = Timeline initialValue // Using Timeline factory\n\n            // Store the last value that resultTimeline itself propagated\n            let mutable lastPropagatedValueByResult : 'a = initialValue\n\n            let reactionFn : 'a -> unit = // Explicit type for callback\n                fun newValueFromSource ->\n                    if newValueFromSource \u003C> lastPropagatedValueByResult then\n                        lastPropagatedValueByResult \u003C- newValueFromSource\n                        // Pass 'Now' explicitly as per TL.define signature\n                        resultTimeline |> TL.define Now newValueFromSource // Explicit TL.define\n                    // No else branch needed, as we do nothing if value is the same\n            \n            // Pass scopeIdOpt as None explicitly for registerDependency\n            // The exact mechanism of registering reactionFn to sourceTimeline's updates\n            // is handled by DependencyCore, conceptually:\n            ignore (DependencyCore.registerDependency sourceTimeline.id resultTimeline.id (reactionFn :> obj) None)\n            \n            resultTimeline\n```\n\n*   It takes a source `sourceTimeline: Timeline\u003C'a>` as input.\n*   It returns a new `resultTimeline: Timeline\u003C'a>` as output.\n\n**Functionality:**\nThe `resultTimeline` will only be updated (and thus propagate its own events) when the value from `sourceTimeline` changes to something *different* from the last value that `resultTimeline` itself last propagated. If `sourceTimeline` is updated with the same value multiple times consecutively, `distinctUntilChanged` will ensure `resultTimeline` only propagates the first occurrence of that value, filtering out subsequent identical values.\n\n**Type Constraint (`'a : equality`):**\nThe type constraint `'a : equality` is crucial. To determine if a new value is \"distinct\" from the previous one, the values must be comparable for equality. This means `TL.distinctUntilChanged` can be used with timelines holding types that support equality comparison (e.g., primitive types like `int`, `string`, `bool`, records and unions where all fields/cases are comparable, etc.).\n\n## 6.4 `TL.distinctUntilChanged` in Action: Practical Examples\n\nLet's illustrate the behavior of `TL.distinctUntilChanged`.\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.distinctUntilChanged are accessible\n// And isNull helper is globally available.\n\n// Example logging setup (can be simplified if not focusing on logTimeline itself)\nlet setupLogReaction (timelineName: string) (timelineToLog: Timeline\u003Cstring>) : unit =\n    timelineToLog\n    |> TL.map (fun msg ->\n        if not (isNull msg) then // Using global isNull\n            printfn \"[%s Log]: %s\" timelineName msg\n    )\n    |> ignore\n\n// Create a source timeline\nlet sourceEvents : Timeline\u003Cstring> = Timeline \"initial\"\n\n// --- Scenario 1: Without distinctUntilChanged ---\nprintfn \"--- Scenario 1: Direct Logging ---\"\nlet directLogOutput : Timeline\u003Cstring> = sourceEvents |> TL.map id // Effectively a pass-through\ndirectLogOutput |> setupLogReaction \"Direct\" // Log changes from directLogOutput\n\nsourceEvents |> TL.define Now \"event1\"\n// Output:\n// [Direct Log]: initial (from map's initial execution after sourceEvents was created)\n// [Direct Log]: event1\n\nsourceEvents |> TL.define Now \"event1\" // Define same value again\n// Output:\n// [Direct Log]: event1 (logged again because TL.map reacts to every define on sourceEvents)\n\nsourceEvents |> TL.define Now \"event2\"\n// Output:\n// [Direct Log]: event2\n\n// --- Scenario 2: With distinctUntilChanged ---\nprintfn \"\\n--- Scenario 2: Logging with distinctUntilChanged ---\"\n// Reset sourceEvents or use a new one for true isolation, here we just redefine\nsourceEvents |> TL.define Now \"initial_distinct\" // Resetting initial value for this scenario\n\nlet distinctSourceEvents : Timeline\u003Cstring> = sourceEvents |> TL.distinctUntilChanged\ndistinctSourceEvents |> setupLogReaction \"Distinct\" // Log changes from distinctSourceEvents\n\n// The 'initial_distinct' value is set on sourceEvents.\n// distinctSourceEvents is created. Its initial TL.at Now is 'initial_distinct'.\n// The map for logging distinctSourceEvents runs once with 'initial_distinct'.\n// Output: [Distinct Log]: initial_distinct\n\nsourceEvents |> TL.define Now \"eventA\"\n// sourceEvents becomes \"eventA\".\n// distinctSourceEvents compares \"eventA\" with its last propagated \"initial_distinct\". They are different.\n// distinctSourceEvents updates to \"eventA\" and propagates.\n// Output: [Distinct Log]: eventA\n\nsourceEvents |> TL.define Now \"eventA\" // Define same value again on sourceEvents\n// distinctSourceEvents compares \"eventA\" with its last propagated \"eventA\". They are the same.\n// distinctSourceEvents does NOT update or propagate.\n// Output: (nothing new logged from Distinct Log)\n\nsourceEvents |> TL.define Now \"eventB\"\n// distinctSourceEvents compares \"eventB\" with its last propagated \"eventA\". They are different.\n// distinctSourceEvents updates to \"eventB\" and propagates.\n// Output: [Distinct Log]: eventB\n\nsourceEvents |> TL.define Now \"eventA\" // Define \"eventA\" again on sourceEvents\n// distinctSourceEvents compares \"eventA\" with its last propagated \"eventB\". They are different.\n// distinctSourceEvents updates to \"eventA\" and propagates.\n// Output: [Distinct Log]: eventA\n```\n\nIn the first scenario, defining `sourceEvents` with \"event1\" twice results in it being logged twice by the reaction on `directLogOutput`.\nIn the second scenario, using `distinctSourceEvents`, the second definition of \"eventA\" on `sourceEvents` (which is the same as the previous value propagated by `distinctSourceEvents`) is filtered out, and \"eventA\" is not logged again by the reaction on `distinctSourceEvents` until the value actually changes (e.g., to \"eventB\" and then back to \"eventA\").\n\n## 6.5 How It Works: The Internal Mechanism\n\nConceptually, and as shown in the F# code snippet for `TL.distinctUntilChanged` in Section 6.3:\n\n1.  When `sourceTimeline |> TL.distinctUntilChanged` is called, it creates a new `resultTimeline`.\n2.  The `resultTimeline` is initialized with the current value of `sourceTimeline` (e.g., `sourceTimeline |> TL.at Now`).\n3.  An internal mutable variable, `lastPropagatedValueByResult`, is created within the scope of the `distinctUntilChanged` operation. This variable is crucial for remembering the last value that `resultTimeline` actually emitted. It's initialized with `resultTimeline`'s own initial value.\n4.  A reaction function (`reactionFn`) is registered as a dependency on `sourceTimeline`. This function will be invoked whenever `sourceTimeline` is updated (via `TL.define`).\n5.  When this `reactionFn` is called with a `newValueFromSource`:\n    *   `newValueFromSource` is compared (using F#'s structural equality `\u003C>`) with the internally stored `lastPropagatedValueByResult`.\n    *   If `newValueFromSource \u003C> lastPropagatedValueByResult` (i.e., the new value is different from the last one propagated *by `resultTimeline`*):\n        *   `lastPropagatedValueByResult` is updated to `newValueFromSource`.\n        *   `resultTimeline` is updated with `newValueFromSource` using `resultTimeline |> TL.define Now newValueFromSource`. This causes `resultTimeline` to propagate the new, distinct value.\n    *   If `newValueFromSource` is the **same** as `lastPropagatedValueByResult`:\n        *   The `reactionFn` does nothing further; `resultTimeline` is *not* updated, and the event is effectively suppressed.\n\nThis internal state (`lastPropagatedValueByResult`) is encapsulated within the `distinctUntilChanged` combinator's implementation. From an external perspective, `TL.distinctUntilChanged` still appears as a pure function that maps a `Timeline\u003C'a>` to another `Timeline\u003C'a>`, but its behavior is achieved through this carefully managed internal state.\n\n## 6.6 Use Cases and Benefits of Filtering\n\nThe `TL.distinctUntilChanged` combinator is highly valuable in numerous practical scenarios:\n\n*   **UI Update Optimization:** This is a primary use case. If a `Timeline` drives a UI element's property (e.g., text, visibility, color), applying `distinctUntilChanged` ensures the UI only re-renders or updates when the underlying data has *meaningfully changed*, preventing flicker or unnecessary rendering cycles.\n*   **Skipping Expensive Computations:** If a `Timeline`'s updates trigger a computationally intensive process (e.g., via `TL.map` or `TL.bind`), applying `TL.distinctUntilChanged` to the source `Timeline` ensures the expensive computation only runs when its input has truly changed, saving resources.\n*   **Reducing Network Requests:** If a `Timeline`'s value is used as a parameter for a network request, `distinctUntilChanged` can prevent identical, consecutive requests if the parameters haven't actually changed.\n*   **Creating More Semantic Event Streams:** It can transform a \"raw\" event stream that might contain duplicates into a more semantically meaningful stream representing only actual state transitions.\n*   **Debouncing/Throttling Complements:** While `distinctUntilChanged` itself isn't for debouncing (waiting for a pause in events) or throttling (limiting event rate), it addresses a related concern of managing event stream \"density\" by eliminating redundancy. It can be used in conjunction with such mechanisms.\n\nBy filtering out redundant updates, `TL.distinctUntilChanged` helps create more efficient, responsive, and less \"noisy\" reactive systems, allowing developers to focus on reactions to genuine state changes.\n\n## 6.7 `distinctUntilChanged` in the Broader `Timeline` Ecosystem\n\n`TL.distinctUntilChanged` builds upon and relates to several core `Timeline` concepts:\n\n*   **`Timeline` as a sequence of values/events:** It operates on this sequence, making decisions about which events (value updates) to allow through to its output timeline.\n*   **Stateful Transformation:** Unlike a purely stateless function like `(fun x -> x * 2)` used with `TL.map` (where the output *only* depends on the current input value), `TL.distinctUntilChanged` is inherently **stateful**. It needs to remember the \"last propagated value\" to make its decision. This state is, however, encapsulated within the combinator's implementation and managed by the `Timeline` system.\n*   **Dependency Graph:** In the reactive dependency graph, `distinctUntilChanged` acts as a **conditional gate**. It's a node that takes an input timeline and produces an output timeline, but the propagation along the edge from its output only occurs if the value-change condition is met.\n\n## 6.8 Summary and Looking Ahead: Preparing for General Combinations\n\nIn this chapter, we've formally introduced `TL.distinctUntilChanged`, a vital utility combinator for managing the flow of events in a `Timeline`. By filtering out consecutive duplicate values, it helps to:\n\n*   Improve performance by avoiding unnecessary downstream computations.\n*   Reduce \"noise\" in reactive systems.\n*   Enable more semantically meaningful event streams.\n\nIt directly addresses the efficiency concerns raised in **Chapter 4** when discussing the behavior of naive Monoidal combinators or frequent updates from `TL.define`.\n\nWhile this chapter focused on filtering a single timeline, `TL.distinctUntilChanged` is a general-purpose tool. Its utility becomes even more apparent when applied to the *outputs* of more complex timeline combinations, which we are about to explore. For instance, when we combine two timelines, the resulting combined timeline might produce duplicate values even if the inputs are changing, and `distinctUntilChanged` can refine this output.\n\nWith this tool for managing update frequency in hand, we are now better prepared to introduce a general mechanism for combining two timelines: `TL.zipWith`. This will be the topic of **Chapter 5** (as per our revised chapter order, `zipWith` is introduced before `distinctUntilChanged`, but for logical flow in *this specific original chapter*, reference to upcoming `zipWith` is natural). We'll see how the results of `zipWith` can often benefit from the application of `TL.distinctUntilChanged`. \n*(Self-correction: The original text's forward reference to \"New Chapter 7\" for `zipWith` was based on its old numbering. In our revised structure `zipWith` is Chapter 5. The sentence has been rephrased slightly to reflect that `zipWith` conceptually *could* come next in a general discussion, even if our book's chapter order presents it earlier for foundational reasons. The main point is the synergy between `zipWith` and `distinctUntilChanged`.)*","src/content/docs/en/book/unit-5/section-1/6-distinct.md","104c4612a63c4f85",{"html":1651,"metadata":1652},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong>\nThis chapter formally introduces the \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> combinator. We will explain its purpose, functionality, and use cases, highlighting its role as a crucial tool for addressing the efficiency concerns related to redundant updates, which were identified as a practical consideration in \u003Cstrong>Chapter 4: Need for General Combinators and Efficiency\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"61-the-problem-of-redundant-updates-connecting-to-chapter-4\">6.1 The Problem of Redundant Updates (Connecting to Chapter 4)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#61-the-problem-of-redundant-updates-connecting-to-chapter-4\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.1 The Problem of Redundant Updates (Connecting to Chapter 4)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In \u003Cstrong>Chapter 4: Need for General Combinators and Efficiency\u003C/strong>, we discussed how various timeline operations, including the naive Monoidal combinators (\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> from Chapter 3), or even simple \u003Ccode dir=\"auto\">TL.map\u003C/code> transformations (Unit 4), might propagate new events downstream even if the actual logical value they represent hasn’t changed. For instance, if a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> representing \u003Ccode dir=\"auto\">isReady\u003C/code> is already \u003Ccode dir=\"auto\">true\u003C/code>, and an input causes it to re-evaluate to \u003Ccode dir=\"auto\">true\u003C/code> again, an event carrying \u003Ccode dir=\"auto\">true\u003C/code> is still propagated.\u003C/p>\n\u003Cp>While correct from a “value at this instant” perspective, this can lead to inefficiencies:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Unnecessary downstream computations:\u003C/strong> Other timelines or reactions depending on \u003Ccode dir=\"auto\">isReady\u003C/code> might be triggered, performing work that yields the same result as before.\u003C/li>\n\u003Cli>\u003Cstrong>Redundant UI updates:\u003C/strong> If \u003Ccode dir=\"auto\">isReady\u003C/code> drives a UI element, the element might be instructed to re-render itself with the same state.\u003C/li>\n\u003C/ul>\n\u003Cp>This motivates the need for a mechanism to filter out such consecutive, identical updates, ensuring that only genuine changes in value trigger further reactive processing.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"62-revisiting-tldefine-why-events-always-propagate-by-default\">6.2 Revisiting \u003Ccode dir=\"auto\">TL.define\u003C/code>: Why Events Always Propagate by Default\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#62-revisiting-tldefine-why-events-always-propagate-by-default\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.2 Revisiting TL.define: Why Events Always Propagate by Default”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To understand why \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> is necessary, let’s revisit the fundamental behavior of \u003Ccode dir=\"auto\">TL.define\u003C/code>, the core operation for introducing a new value into a \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/p>\n\u003Cp>As established in Unit 4 (Chapter 2: “Understanding \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> and FRP Implementation” and Chapter 3: “Transforming Timelines and Introducing the Dependency Graph”), and also touched upon in Unit 5 (Chapter 0: “Handling Absence”), the \u003Ccode dir=\"auto\">TL.define\u003C/code> operation in this library has a key characteristic: \u003Cstrong>it always executes the registered callbacks (reactions) whenever it is called\u003C/strong>, regardless of whether the new \u003Ccode dir=\"auto\">value\u003C/code> being defined is different from the \u003Ccode dir=\"auto\">timeline._last\u003C/code> value already stored.\u003C/p>\n\u003Cp>This “always propagate” behavior is a deliberate design choice with several justifications:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline\u003C/code> as an “Event Stream”:\u003C/strong> Beyond representing a value that changes over time (a “Behavior” or “Signal”), a \u003Ccode dir=\"auto\">Timeline\u003C/code> can also be viewed as an “Event Stream.” From this perspective, each call to \u003Ccode dir=\"auto\">TL.define\u003C/code> signifies the occurrence of an event, and the \u003Ccode dir=\"auto\">value\u003C/code> is the data associated with that event. Even if two consecutive events carry the same data, they are distinct occurrences.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">define\u003C/code> as a “Command”:\u003C/strong> \u003Ccode dir=\"auto\">TL.define\u003C/code> can be interpreted as a command: “Set the current value of this timeline to \u003Ccode dir=\"auto\">value\u003C/code> and notify dependents.” The act of issuing the command implies that the associated actions (callbacks) should be performed.\u003C/li>\n\u003Cli>\u003Cstrong>Trigger for Re-evaluation:\u003C/strong> An event on a timeline, even if it redefines the same value, can serve as a trigger for downstream computations that might depend on \u003Cem>other\u003C/em> timelines whose values \u003Cem>have\u003C/em> changed.\u003C/li>\n\u003Cli>\u003Cstrong>Simplicity and Predictability:\u003C/strong> The rule “a \u003Ccode dir=\"auto\">define\u003C/code> call always triggers callbacks” is simple and predictable.\u003C/li>\n\u003Cli>\u003Cstrong>Separation of Concerns:\u003C/strong> The responsibility of generating an event (\u003Ccode dir=\"auto\">define\u003C/code>) is kept separate from the responsibility of filtering or transforming that event stream (which can be handled by other combinators like \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>However, as noted in Chapter 4, this “always propagate” behavior has potential drawbacks related to performance and sometimes intuitive expectations, which leads us directly to the solution.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"63-introducing-tldistinctuntilchanged-filtering-based-on-value-changes\">6.3 Introducing \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>: Filtering Based on Value Changes\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#63-introducing-tldistinctuntilchanged-filtering-based-on-value-changes\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.3 Introducing TL.distinctUntilChanged: Filtering Based on Value Changes”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To address the potential for redundant updates and to give programmers explicit control over event propagation based on value changes, the \u003Ccode dir=\"auto\">Timeline\u003C/code> library provides the \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> combinator.\u003C/p>\n\u003Cp>\u003Cstrong>Purpose:\u003C/strong>\n\u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> creates a new timeline that only propagates updates from its source timeline if the new value is \u003Cstrong>different\u003C/strong> from the previously propagated value from this specific \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> operation.\u003C/p>\n\u003Cp>\u003Cstrong>Signature:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Contained within the TL module\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val distinctUntilChanged&#x3C;'a when 'a : equality> : Timeline&#x3C;'a> -> Timeline&#x3C;'a>\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Contained within the TL module// val distinctUntilChanged\u003C&#x27;a when &#x27;a : equality> : Timeline\u003C&#x27;a> -> Timeline\u003C&#x27;a>\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The F# code for this function (from the provided \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">distinctUntilChanged\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">when\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> equality\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> sourceTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValue\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sourceTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.at\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">resultTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline initialValue \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using Timeline factory\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Store the last value that resultTimeline itself propagated\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let mutable\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lastPropagatedValueByResult\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialValue\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">reactionFn\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type for callback\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> newValueFromSource \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> newValueFromSource \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> lastPropagatedValueByResult \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">lastPropagatedValueByResult \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;-\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> newValueFromSource\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Pass 'Now' explicitly as per TL.define signature\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now newValueFromSource \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.define\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No else branch needed, as we do nothing if value is the same\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Pass scopeIdOpt as None explicitly for registerDependency\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The exact mechanism of registering reactionFn to sourceTimeline's updates\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// is handled by DependencyCore, conceptually:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ignore \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">DependencyCore.registerDependency sourceTimeline.id resultTimeline.id \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">reactionFn \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> obj\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">resultTimeline\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL =    // ... other TL definitions ...    let distinctUntilChanged\u003C&#x27;a when &#x27;a : equality> : Timeline\u003C&#x27;a> -> Timeline\u003C&#x27;a> =        fun sourceTimeline ->            let initialValue : &#x27;a = sourceTimeline |> TL.at Now // Explicit TL.at            let resultTimeline : Timeline\u003C&#x27;a> = Timeline initialValue // Using Timeline factory            // Store the last value that resultTimeline itself propagated            let mutable lastPropagatedValueByResult : &#x27;a = initialValue            let reactionFn : &#x27;a -> unit = // Explicit type for callback                fun newValueFromSource ->                    if newValueFromSource \u003C> lastPropagatedValueByResult then                        lastPropagatedValueByResult \u003C- newValueFromSource                        // Pass &#x27;Now&#x27; explicitly as per TL.define signature                        resultTimeline |> TL.define Now newValueFromSource // Explicit TL.define                    // No else branch needed, as we do nothing if value is the same            // Pass scopeIdOpt as None explicitly for registerDependency            // The exact mechanism of registering reactionFn to sourceTimeline&#x27;s updates            // is handled by DependencyCore, conceptually:            ignore (DependencyCore.registerDependency sourceTimeline.id resultTimeline.id (reactionFn :> obj) None)            resultTimeline\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>It takes a source \u003Ccode dir=\"auto\">sourceTimeline: Timeline&#x3C;'a>\u003C/code> as input.\u003C/li>\n\u003Cli>It returns a new \u003Ccode dir=\"auto\">resultTimeline: Timeline&#x3C;'a>\u003C/code> as output.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Functionality:\u003C/strong>\nThe \u003Ccode dir=\"auto\">resultTimeline\u003C/code> will only be updated (and thus propagate its own events) when the value from \u003Ccode dir=\"auto\">sourceTimeline\u003C/code> changes to something \u003Cem>different\u003C/em> from the last value that \u003Ccode dir=\"auto\">resultTimeline\u003C/code> itself last propagated. If \u003Ccode dir=\"auto\">sourceTimeline\u003C/code> is updated with the same value multiple times consecutively, \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> will ensure \u003Ccode dir=\"auto\">resultTimeline\u003C/code> only propagates the first occurrence of that value, filtering out subsequent identical values.\u003C/p>\n\u003Cp>\u003Cstrong>Type Constraint (\u003Ccode dir=\"auto\">'a : equality\u003C/code>):\u003C/strong>\nThe type constraint \u003Ccode dir=\"auto\">'a : equality\u003C/code> is crucial. To determine if a new value is “distinct” from the previous one, the values must be comparable for equality. This means \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> can be used with timelines holding types that support equality comparison (e.g., primitive types like \u003Ccode dir=\"auto\">int\u003C/code>, \u003Ccode dir=\"auto\">string\u003C/code>, \u003Ccode dir=\"auto\">bool\u003C/code>, records and unions where all fields/cases are comparable, etc.).\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"64-tldistinctuntilchanged-in-action-practical-examples\">6.4 \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> in Action: Practical Examples\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#64-tldistinctuntilchanged-in-action-practical-examples\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.4 TL.distinctUntilChanged in Action: Practical Examples”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s illustrate the behavior of \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.distinctUntilChanged are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// And isNull helper is globally available.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Example logging setup (can be simplified if not focusing on logTimeline itself)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">setupLogReaction\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">timelineName\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">timelineToLog\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineToLog\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> msg \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">not\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isNull msg\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using global isNull\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> Log]: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineName msg\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a source timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sourceEvents\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">initial\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Scenario 1: Without distinctUntilChanged ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">--- Scenario 1: Direct Logging ---\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">directLogOutput\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map id \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Effectively a pass-through\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">directLogOutput \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> setupLogReaction \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Direct\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Log changes from directLogOutput\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">event1\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [Direct Log]: initial (from map's initial execution after sourceEvents was created)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [Direct Log]: event1\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">event1\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define same value again\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [Direct Log]: event1 (logged again because TL.map reacts to every define on sourceEvents)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">event2\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [Direct Log]: event2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Scenario 2: With distinctUntilChanged ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">--- Scenario 2: Logging with distinctUntilChanged ---\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Reset sourceEvents or use a new one for true isolation, here we just redefine\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">initial_distinct\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Resetting initial value for this scenario\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">distinctSourceEvents\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">distinctSourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> setupLogReaction \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Distinct\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Log changes from distinctSourceEvents\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The 'initial_distinct' value is set on sourceEvents.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents is created. Its initial TL.at Now is 'initial_distinct'.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The map for logging distinctSourceEvents runs once with 'initial_distinct'.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: [Distinct Log]: initial_distinct\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">eventA\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// sourceEvents becomes \"eventA\".\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents compares \"eventA\" with its last propagated \"initial_distinct\". They are different.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents updates to \"eventA\" and propagates.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: [Distinct Log]: eventA\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">eventA\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define same value again on sourceEvents\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents compares \"eventA\" with its last propagated \"eventA\". They are the same.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents does NOT update or propagate.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: (nothing new logged from Distinct Log)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">eventB\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents compares \"eventB\" with its last propagated \"eventA\". They are different.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents updates to \"eventB\" and propagates.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: [Distinct Log]: eventB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sourceEvents \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">eventA\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define \"eventA\" again on sourceEvents\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents compares \"eventA\" with its last propagated \"eventB\". They are different.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// distinctSourceEvents updates to \"eventA\" and propagates.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: [Distinct Log]: eventA\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.distinctUntilChanged are accessible// And isNull helper is globally available.// Example logging setup (can be simplified if not focusing on logTimeline itself)let setupLogReaction (timelineName: string) (timelineToLog: Timeline\u003Cstring>) : unit =    timelineToLog    |> TL.map (fun msg ->        if not (isNull msg) then // Using global isNull            printfn &#x22;[%s Log]: %s&#x22; timelineName msg    )    |> ignore// Create a source timelinelet sourceEvents : Timeline\u003Cstring> = Timeline &#x22;initial&#x22;// --- Scenario 1: Without distinctUntilChanged ---printfn &#x22;--- Scenario 1: Direct Logging ---&#x22;let directLogOutput : Timeline\u003Cstring> = sourceEvents |> TL.map id // Effectively a pass-throughdirectLogOutput |> setupLogReaction &#x22;Direct&#x22; // Log changes from directLogOutputsourceEvents |> TL.define Now &#x22;event1&#x22;// Output:// [Direct Log]: initial (from map&#x27;s initial execution after sourceEvents was created)// [Direct Log]: event1sourceEvents |> TL.define Now &#x22;event1&#x22; // Define same value again// Output:// [Direct Log]: event1 (logged again because TL.map reacts to every define on sourceEvents)sourceEvents |> TL.define Now &#x22;event2&#x22;// Output:// [Direct Log]: event2// --- Scenario 2: With distinctUntilChanged ---printfn &#x22;\\n--- Scenario 2: Logging with distinctUntilChanged ---&#x22;// Reset sourceEvents or use a new one for true isolation, here we just redefinesourceEvents |> TL.define Now &#x22;initial_distinct&#x22; // Resetting initial value for this scenariolet distinctSourceEvents : Timeline\u003Cstring> = sourceEvents |> TL.distinctUntilChangeddistinctSourceEvents |> setupLogReaction &#x22;Distinct&#x22; // Log changes from distinctSourceEvents// The &#x27;initial_distinct&#x27; value is set on sourceEvents.// distinctSourceEvents is created. Its initial TL.at Now is &#x27;initial_distinct&#x27;.// The map for logging distinctSourceEvents runs once with &#x27;initial_distinct&#x27;.// Output: [Distinct Log]: initial_distinctsourceEvents |> TL.define Now &#x22;eventA&#x22;// sourceEvents becomes &#x22;eventA&#x22;.// distinctSourceEvents compares &#x22;eventA&#x22; with its last propagated &#x22;initial_distinct&#x22;. They are different.// distinctSourceEvents updates to &#x22;eventA&#x22; and propagates.// Output: [Distinct Log]: eventAsourceEvents |> TL.define Now &#x22;eventA&#x22; // Define same value again on sourceEvents// distinctSourceEvents compares &#x22;eventA&#x22; with its last propagated &#x22;eventA&#x22;. They are the same.// distinctSourceEvents does NOT update or propagate.// Output: (nothing new logged from Distinct Log)sourceEvents |> TL.define Now &#x22;eventB&#x22;// distinctSourceEvents compares &#x22;eventB&#x22; with its last propagated &#x22;eventA&#x22;. They are different.// distinctSourceEvents updates to &#x22;eventB&#x22; and propagates.// Output: [Distinct Log]: eventBsourceEvents |> TL.define Now &#x22;eventA&#x22; // Define &#x22;eventA&#x22; again on sourceEvents// distinctSourceEvents compares &#x22;eventA&#x22; with its last propagated &#x22;eventB&#x22;. They are different.// distinctSourceEvents updates to &#x22;eventA&#x22; and propagates.// Output: [Distinct Log]: eventA\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In the first scenario, defining \u003Ccode dir=\"auto\">sourceEvents\u003C/code> with “event1” twice results in it being logged twice by the reaction on \u003Ccode dir=\"auto\">directLogOutput\u003C/code>.\nIn the second scenario, using \u003Ccode dir=\"auto\">distinctSourceEvents\u003C/code>, the second definition of “eventA” on \u003Ccode dir=\"auto\">sourceEvents\u003C/code> (which is the same as the previous value propagated by \u003Ccode dir=\"auto\">distinctSourceEvents\u003C/code>) is filtered out, and “eventA” is not logged again by the reaction on \u003Ccode dir=\"auto\">distinctSourceEvents\u003C/code> until the value actually changes (e.g., to “eventB” and then back to “eventA”).\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"65-how-it-works-the-internal-mechanism\">6.5 How It Works: The Internal Mechanism\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#65-how-it-works-the-internal-mechanism\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.5 How It Works: The Internal Mechanism”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Conceptually, and as shown in the F# code snippet for \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> in Section 6.3:\u003C/p>\n\u003Col>\n\u003Cli>When \u003Ccode dir=\"auto\">sourceTimeline |> TL.distinctUntilChanged\u003C/code> is called, it creates a new \u003Ccode dir=\"auto\">resultTimeline\u003C/code>.\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is initialized with the current value of \u003Ccode dir=\"auto\">sourceTimeline\u003C/code> (e.g., \u003Ccode dir=\"auto\">sourceTimeline |> TL.at Now\u003C/code>).\u003C/li>\n\u003Cli>An internal mutable variable, \u003Ccode dir=\"auto\">lastPropagatedValueByResult\u003C/code>, is created within the scope of the \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> operation. This variable is crucial for remembering the last value that \u003Ccode dir=\"auto\">resultTimeline\u003C/code> actually emitted. It’s initialized with \u003Ccode dir=\"auto\">resultTimeline\u003C/code>’s own initial value.\u003C/li>\n\u003Cli>A reaction function (\u003Ccode dir=\"auto\">reactionFn\u003C/code>) is registered as a dependency on \u003Ccode dir=\"auto\">sourceTimeline\u003C/code>. This function will be invoked whenever \u003Ccode dir=\"auto\">sourceTimeline\u003C/code> is updated (via \u003Ccode dir=\"auto\">TL.define\u003C/code>).\u003C/li>\n\u003Cli>When this \u003Ccode dir=\"auto\">reactionFn\u003C/code> is called with a \u003Ccode dir=\"auto\">newValueFromSource\u003C/code>:\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">newValueFromSource\u003C/code> is compared (using F#‘s structural equality \u003Ccode dir=\"auto\">&#x3C;>\u003C/code>) with the internally stored \u003Ccode dir=\"auto\">lastPropagatedValueByResult\u003C/code>.\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">newValueFromSource &#x3C;> lastPropagatedValueByResult\u003C/code> (i.e., the new value is different from the last one propagated \u003Cem>by \u003Ccode dir=\"auto\">resultTimeline\u003C/code>\u003C/em>):\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">lastPropagatedValueByResult\u003C/code> is updated to \u003Ccode dir=\"auto\">newValueFromSource\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">resultTimeline\u003C/code> is updated with \u003Ccode dir=\"auto\">newValueFromSource\u003C/code> using \u003Ccode dir=\"auto\">resultTimeline |> TL.define Now newValueFromSource\u003C/code>. This causes \u003Ccode dir=\"auto\">resultTimeline\u003C/code> to propagate the new, distinct value.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">newValueFromSource\u003C/code> is the \u003Cstrong>same\u003C/strong> as \u003Ccode dir=\"auto\">lastPropagatedValueByResult\u003C/code>:\n\u003Cul>\n\u003Cli>The \u003Ccode dir=\"auto\">reactionFn\u003C/code> does nothing further; \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is \u003Cem>not\u003C/em> updated, and the event is effectively suppressed.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This internal state (\u003Ccode dir=\"auto\">lastPropagatedValueByResult\u003C/code>) is encapsulated within the \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> combinator’s implementation. From an external perspective, \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> still appears as a pure function that maps a \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> to another \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>, but its behavior is achieved through this carefully managed internal state.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"66-use-cases-and-benefits-of-filtering\">6.6 Use Cases and Benefits of Filtering\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#66-use-cases-and-benefits-of-filtering\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.6 Use Cases and Benefits of Filtering”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> combinator is highly valuable in numerous practical scenarios:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>UI Update Optimization:\u003C/strong> This is a primary use case. If a \u003Ccode dir=\"auto\">Timeline\u003C/code> drives a UI element’s property (e.g., text, visibility, color), applying \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> ensures the UI only re-renders or updates when the underlying data has \u003Cem>meaningfully changed\u003C/em>, preventing flicker or unnecessary rendering cycles.\u003C/li>\n\u003Cli>\u003Cstrong>Skipping Expensive Computations:\u003C/strong> If a \u003Ccode dir=\"auto\">Timeline\u003C/code>’s updates trigger a computationally intensive process (e.g., via \u003Ccode dir=\"auto\">TL.map\u003C/code> or \u003Ccode dir=\"auto\">TL.bind\u003C/code>), applying \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> to the source \u003Ccode dir=\"auto\">Timeline\u003C/code> ensures the expensive computation only runs when its input has truly changed, saving resources.\u003C/li>\n\u003Cli>\u003Cstrong>Reducing Network Requests:\u003C/strong> If a \u003Ccode dir=\"auto\">Timeline\u003C/code>’s value is used as a parameter for a network request, \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> can prevent identical, consecutive requests if the parameters haven’t actually changed.\u003C/li>\n\u003Cli>\u003Cstrong>Creating More Semantic Event Streams:\u003C/strong> It can transform a “raw” event stream that might contain duplicates into a more semantically meaningful stream representing only actual state transitions.\u003C/li>\n\u003Cli>\u003Cstrong>Debouncing/Throttling Complements:\u003C/strong> While \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> itself isn’t for debouncing (waiting for a pause in events) or throttling (limiting event rate), it addresses a related concern of managing event stream “density” by eliminating redundancy. It can be used in conjunction with such mechanisms.\u003C/li>\n\u003C/ul>\n\u003Cp>By filtering out redundant updates, \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> helps create more efficient, responsive, and less “noisy” reactive systems, allowing developers to focus on reactions to genuine state changes.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"67-distinctuntilchanged-in-the-broader-timeline-ecosystem\">6.7 \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> in the Broader \u003Ccode dir=\"auto\">Timeline\u003C/code> Ecosystem\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#67-distinctuntilchanged-in-the-broader-timeline-ecosystem\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.7 distinctUntilChanged in the Broader Timeline Ecosystem”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> builds upon and relates to several core \u003Ccode dir=\"auto\">Timeline\u003C/code> concepts:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline\u003C/code> as a sequence of values/events:\u003C/strong> It operates on this sequence, making decisions about which events (value updates) to allow through to its output timeline.\u003C/li>\n\u003Cli>\u003Cstrong>Stateful Transformation:\u003C/strong> Unlike a purely stateless function like \u003Ccode dir=\"auto\">(fun x -> x * 2)\u003C/code> used with \u003Ccode dir=\"auto\">TL.map\u003C/code> (where the output \u003Cem>only\u003C/em> depends on the current input value), \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> is inherently \u003Cstrong>stateful\u003C/strong>. It needs to remember the “last propagated value” to make its decision. This state is, however, encapsulated within the combinator’s implementation and managed by the \u003Ccode dir=\"auto\">Timeline\u003C/code> system.\u003C/li>\n\u003Cli>\u003Cstrong>Dependency Graph:\u003C/strong> In the reactive dependency graph, \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> acts as a \u003Cstrong>conditional gate\u003C/strong>. It’s a node that takes an input timeline and produces an output timeline, but the propagation along the edge from its output only occurs if the value-change condition is met.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"68-summary-and-looking-ahead-preparing-for-general-combinations\">6.8 Summary and Looking Ahead: Preparing for General Combinations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#68-summary-and-looking-ahead-preparing-for-general-combinations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.8 Summary and Looking Ahead: Preparing for General Combinations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In this chapter, we’ve formally introduced \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>, a vital utility combinator for managing the flow of events in a \u003Ccode dir=\"auto\">Timeline\u003C/code>. By filtering out consecutive duplicate values, it helps to:\u003C/p>\n\u003Cul>\n\u003Cli>Improve performance by avoiding unnecessary downstream computations.\u003C/li>\n\u003Cli>Reduce “noise” in reactive systems.\u003C/li>\n\u003Cli>Enable more semantically meaningful event streams.\u003C/li>\n\u003C/ul>\n\u003Cp>It directly addresses the efficiency concerns raised in \u003Cstrong>Chapter 4\u003C/strong> when discussing the behavior of naive Monoidal combinators or frequent updates from \u003Ccode dir=\"auto\">TL.define\u003C/code>.\u003C/p>\n\u003Cp>While this chapter focused on filtering a single timeline, \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> is a general-purpose tool. Its utility becomes even more apparent when applied to the \u003Cem>outputs\u003C/em> of more complex timeline combinations, which we are about to explore. For instance, when we combine two timelines, the resulting combined timeline might produce duplicate values even if the inputs are changing, and \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> can refine this output.\u003C/p>\n\u003Cp>With this tool for managing update frequency in hand, we are now better prepared to introduce a general mechanism for combining two timelines: \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. This will be the topic of \u003Cstrong>Chapter 5\u003C/strong> (as per our revised chapter order, \u003Ccode dir=\"auto\">zipWith\u003C/code> is introduced before \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code>, but for logical flow in \u003Cem>this specific original chapter\u003C/em>, reference to upcoming \u003Ccode dir=\"auto\">zipWith\u003C/code> is natural). We’ll see how the results of \u003Ccode dir=\"auto\">zipWith\u003C/code> can often benefit from the application of \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>.\n\u003Cem>(Self-correction: The original text’s forward reference to “New Chapter 7” for \u003Ccode dir=\"auto\">zipWith\u003C/code> was based on its old numbering. In our revised structure \u003Ccode dir=\"auto\">zipWith\u003C/code> is Chapter 5. The sentence has been rephrased slightly to reflect that \u003Ccode dir=\"auto\">zipWith\u003C/code> conceptually \u003Cem>could\u003C/em> come next in a general discussion, even if our book’s chapter order presents it earlier for foundational reasons. The main point is the synergy between \u003Ccode dir=\"auto\">zipWith\u003C/code> and \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code>.)\u003C/em>\u003C/p>",{"headings":1653,"localImagePaths":1678,"remoteImagePaths":1679,"frontmatter":1680,"imagePaths":1681},[1654,1657,1660,1663,1666,1669,1672,1675],{"depth":182,"slug":1655,"text":1656},"61-the-problem-of-redundant-updates-connecting-to-chapter-4","6.1 The Problem of Redundant Updates (Connecting to Chapter 4)",{"depth":182,"slug":1658,"text":1659},"62-revisiting-tldefine-why-events-always-propagate-by-default","6.2 Revisiting TL.define: Why Events Always Propagate by Default",{"depth":182,"slug":1661,"text":1662},"63-introducing-tldistinctuntilchanged-filtering-based-on-value-changes","6.3 Introducing TL.distinctUntilChanged: Filtering Based on Value Changes",{"depth":182,"slug":1664,"text":1665},"64-tldistinctuntilchanged-in-action-practical-examples","6.4 TL.distinctUntilChanged in Action: Practical Examples",{"depth":182,"slug":1667,"text":1668},"65-how-it-works-the-internal-mechanism","6.5 How It Works: The Internal Mechanism",{"depth":182,"slug":1670,"text":1671},"66-use-cases-and-benefits-of-filtering","6.6 Use Cases and Benefits of Filtering",{"depth":182,"slug":1673,"text":1674},"67-distinctuntilchanged-in-the-broader-timeline-ecosystem","6.7 distinctUntilChanged in the Broader Timeline Ecosystem",{"depth":182,"slug":1676,"text":1677},"68-summary-and-looking-ahead-preparing-for-general-combinations","6.8 Summary and Looking Ahead: Preparing for General Combinations",[],[],{"title":1642,"description":1643},[],"en/book/unit-5/section-1/7-refined-boolean-monoids",{"id":1682,"data":1684,"body":1690,"filePath":1691,"digest":1692,"rendered":1693},{"title":1685,"description":1686,"editUrl":16,"head":1687,"template":18,"sidebar":1688,"pagefind":16,"draft":20},"Chapter 7: Boolean Combinators with TL.zipWith","Chapter Goal: This chapter demonstrates how to construct practical and efficient boolean combinators (TL.Or and TL.And) for Timeline\u003Cbool> by leveraging the TL.zipWith combinator (introduced in Chapter 5) and standard boolean operators. It clarifies their relationship to Monoid principles, compares them to the \"naive\" implementations (Chapter 3), and highlights their utility when combined with TL.distinctUntilChanged.",[],{"hidden":20,"attrs":1689},{},"**Chapter Goal:** This chapter demonstrates how to construct practical and efficient boolean combinators (`TL.Or` and `TL.And`) for `Timeline\u003Cbool>` by leveraging the `TL.zipWith` combinator (introduced in Chapter 5) and standard boolean operators. It clarifies their relationship to Monoid principles, compares them to the \"naive\" implementations (Chapter 3), and highlights their utility when combined with `TL.distinctUntilChanged`.\n\n---\n\n## 7.1 Introduction: Practical Boolean Logic with a General Tool\n\n### 7.1.1 Recap: The Need for Practical Combinators (from Chapter 4)\n\nIn Chapter 3, we explored the \"naive\" Monoidal implementations, `TL.naiveOr` and `TL.naiveAnd`. These provided a foundational understanding of how `Timeline\u003Cbool>` can embody algebraic structures directly from `Timeline` fundamentals, ensuring adherence to Monoid laws. This is invaluable for establishing the theoretical soundness of combining reactive boolean conditions.\n\nHowever, as discussed in Chapter 4 (\"Need for General Combinators and Efficiency\"), while these naive implementations are algebraically correct, a mature `Timeline` library also benefits from combinators that offer greater ease of use, leverage general-purpose tools for conciseness, and integrate well with efficiency-enhancing utilities. Relying solely on bespoke naive implementations for every type of combination can lead to boilerplate and might not always offer the most straightforward approach for common tasks.\n\n### 7.1.2 Introducing `TL.zipWith` as the Foundation (from Chapter 5)\n\nChapter 5 introduced `TL.zipWith` as a highly versatile, general-purpose combinator for the point-wise combination of two timelines. Its signature, `val zipWith\u003C'a, 'b, 'c> : ('a -> 'b -> 'c) -> Timeline\u003C'b> -> Timeline\u003C'a> -> Timeline\u003C'c>`, allows us to take any two source timelines and a binary function to produce a new timeline.\n\nThis chapter will demonstrate how this powerful `TL.zipWith` can be used as the foundation for creating our \"refined\" boolean logical combinators: `TL.Or` and `TL.And`. By simply providing the standard F# boolean operators `||` (for OR) and `&&` (for AND) as the combining function to `TL.zipWith`, we can achieve the desired logical combinations in an elegant, practical, and algebraically sound manner.\n\n---\n\n## 7.2 Logical OR with `TL.zipWith`: Defining `TL.Or`\n\nWe begin by constructing a practical OR combinator for `Timeline\u003Cbool>` using `TL.zipWith`. This \"refined\" version aims to provide the same logical outcome as `TL.naiveOr` but with an implementation based on our general point-wise combination tool.\n\n### 7.2.1 Construction using `TL.zipWith (||)`\n\nThe core idea is remarkably straightforward: we use `TL.zipWith` and supply the standard F# boolean OR operator (`||`) as the combining function.\n\nIf `timelineA` and `timelineB` are `Timeline\u003Cbool>` instances, their OR combination is:\n`timelineA |> TL.zipWith (||) timelineB`\n\n**Behavior:**\nThe behavior of this combined timeline is directly inherited from the rules of `TL.zipWith` (as detailed in Chapter 5, Section 5.3):\n\n*   **Initialization:**\n    *   The resulting timeline is initialized by applying `||` to the initial values of `timelineA` and `timelineB`. Since `Timeline\u003Cbool>` instances are expected to hold non-`null` boolean values (`true` or `false`), the initial output will be `(initialValA || initialValB)`.\n*   **Updates:**\n    *   Whenever `timelineA` or `timelineB` is updated (via `TL.define`), `TL.zipWith` retrieves the latest current values from both.\n    *   It then applies the `||` operator to these latest values: `latestValA || latestValB`.\n    *   The result of this `||` operation is then defined onto the combined timeline, triggering its own downstream updates.\n\n**F# Code Example (Basic Usage):**\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessible\n\nlet condition1 : Timeline\u003Cbool> = Timeline false\nlet condition2 : Timeline\u003Cbool> = Timeline true\n\n// Combining function is the standard F# OR operator (||)\nlet combinedOrCondition : Timeline\u003Cbool> = condition1 |> TL.zipWith (||) condition2\n\nprintfn \"Initial OR State: %b\" (combinedOrCondition |> TL.at Now)\n// Expected Output: Initial OR State: true (false || true)\n\ncondition1 |> TL.define Now true\nprintfn \"After condition1 becomes true: %b\" (combinedOrCondition |> TL.at Now)\n// Expected Output: After condition1 becomes true: true (true || true)\n\ncondition2 |> TL.define Now false\nprintfn \"After condition2 becomes false: %b\" (combinedOrCondition |> TL.at Now)\n// Expected Output: After condition2 becomes false: true (true || false)\n\ncondition1 |> TL.define Now false\nprintfn \"After condition1 also becomes false: %b\" (combinedOrCondition |> TL.at Now)\n// Expected Output: After condition1 also becomes false: false (false || false)\n```\n\nThis example shows the expected reactive logical OR behavior.\n\n### 7.2.2 Comparison with `TL.naiveOr` (from Chapter 3)\n\n*   **Implementation Strategy:** `TL.naiveOr` was conceptually built using direct `Timeline` manipulations. The `TL.zipWith (||)` approach reuses the general-purpose `TL.zipWith`.\n*   **Behavioral Equivalence:** For `Timeline\u003Cbool>` (non-`null` boolean values), `timelineA |> TL.zipWith (||) timelineB` should behave identically to `timelineA |> TL.naiveOr timelineB`.\n*   **`null` Handling by `TL.zipWith`:** `TL.zipWith`'s general `null` handling (Chapter 5) doesn't typically affect `Timeline\u003Cbool>` with `TL.FalseTimeline`, as these present non-`null` booleans to `(||)`.\n\n### 7.2.3 Monoid Properties of `TL.Or`\n\nThis `TL.zipWith (||)` approach, which forms our `TL.Or`, adheres to Monoid laws with `TL.FalseTimeline` (`Timeline false`) as the identity.\n\n1.  **Identity Law:**\n    *   **Left Identity:** `TL.FalseTimeline |> TL.zipWith (||) timelineA` results in `false || valA = valA`. Behaves like `timelineA`.\n    *   **Right Identity:** `timelineA |> TL.zipWith (||) TL.FalseTimeline` results in `valA || false = valA`. Behaves like `timelineA`.\n    *   The identity law holds.\n\n2.  **Associativity Law:**\n    *   `(tA |> TL.zipWith (||) tB) |> TL.zipWith (||) tC` behaves identically to `tA |> TL.zipWith (||) (tB |> TL.zipWith (||) tC)`.\n    *   This holds because standard `||` is associative, and `TL.zipWith` applies it to current values.\n    *   The associativity law holds.\n\nThus, `timelineA |> TL.zipWith (||) timelineB` effectively forms a Monoid with `TL.FalseTimeline`.\n\n### 7.2.4 Convenience Helper: `TL.Or` Function Definition\n\nA named helper function `TL.Or` improves readability. This aligns with the `Timeline.fs` code where this function is named `Or`.\n\n```fsharp\nmodule TL =\n    // ... other definitions including zipWith, FalseTimeline ...\n\n    /// \u003Csummary>\n    /// Creates a timeline that is true if either of the input timelines is true.\n    /// This is a refined OR combinator implemented using TL.zipWith (||).\n    /// It effectively forms a Monoid with TL.FalseTimeline as its identity.\n    /// \u003C/summary>\n    let Or : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> = // Renamed to TL.Or\n        fun timelineB timelineA -> // For pipeline: timelineA |> TL.Or timelineB\n            timelineA |> TL.zipWith (||) timelineB\n```\n\n**Example Usage:**\n\n```fsharp\n// let hasAttention : Timeline\u003Cbool> = isMouseOver |> TL.Or hasFocus // Using the new TL.Or\n```\n\n### 7.2.5 Optimizing `TL.Or` with `TL.distinctUntilChanged` (from Chapter 6)\n\nThe output of `TL.Or` can benefit from `TL.distinctUntilChanged` to prevent propagation if the logical OR result remains the same.\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.Or, TL.distinctUntilChanged are accessible\n\nlet eventStreamA : Timeline\u003Cbool> = Timeline false\nlet eventStreamB : Timeline\u003Cbool> = Timeline false\n\nlet combinedUsingOr : Timeline\u003Cbool> = eventStreamA |> TL.Or eventStreamB // Using TL.Or\n\nlet efficientCombinedOr : Timeline\u003Cbool> =\n    combinedUsingOr\n    |> TL.distinctUntilChanged\n```\n\nThis ensures propagation only on actual changes in the logical OR state.\n\n### 7.2.6 Practical Advantages and Use Cases for `TL.Or`\n\nThis `TL.zipWith (||)` approach, encapsulated as `TL.Or`, offers:\n\n*   Simplicity and Clarity.\n*   Leverages Existing Tools (`TL.zipWith`).\n*   Good Default Behavior.\n*   Monoid Properties with `TL.FalseTimeline`.\n\n**Common Use Cases:** UI element states, event flag aggregation, feature toggles.\n\n---\n\n## 7.3 Logical AND with `TL.zipWith`: Defining `TL.And`\n\nSymmetrically, we construct a practical AND combinator using `TL.zipWith (&&)`.\n\n### 7.3.1 Construction using `TL.zipWith (&&)`\n\nThe AND combination is: `timelineA |> TL.zipWith (&&) timelineB`\n\n**Behavior:** Inherited from `TL.zipWith`.\n\n*   **Initialization:** Output is `(initialValA && initialValB)`.\n*   **Updates:** Output is `latestValA && latestValB`.\n\n**F# Code Example (Basic Usage):**\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessible\n\nlet conditionX : Timeline\u003Cbool> = Timeline true\nlet conditionY : Timeline\u003Cbool> = Timeline false\n\nlet combinedAndCondition : Timeline\u003Cbool> = conditionX |> TL.zipWith (&&) conditionY\n\nprintfn \"Initial AND State: %b\" (combinedAndCondition |> TL.at Now)\n// Expected Output: Initial AND State: false (true && false)\n\nconditionY |> TL.define Now true\nprintfn \"After conditionY becomes true: %b\" (combinedAndCondition |> TL.at Now)\n// Expected Output: After conditionY becomes true: true (true && true)\n\nconditionX |> TL.define Now false\nprintfn \"After conditionX becomes false: %b\" (combinedAndCondition |> TL.at Now)\n// Expected Output: After conditionX becomes false: false (false && true)\n```\n\n### 7.3.2 Comparison with `TL.naiveAnd` (from Chapter 3)\n\n*   **Implementation Strategy:** `TL.naiveAnd` (direct) vs. `TL.zipWith (&&)` (general tool).\n*   **Behavioral Equivalence:** Identical for non-`null` `Timeline\u003Cbool>`.\n*   **`null` Handling by `TL.zipWith`:** Usually no impact with `TL.TrueTimeline`.\n\n### 7.3.3 Monoid Properties of `TL.And`\n\nThis approach forms a Monoid with `TL.TrueTimeline` (`Timeline true`) as identity.\n\n1.  **Identity Law:**\n    *   **Left Identity:** `TL.TrueTimeline |> TL.zipWith (&&) timelineA` results in `true && valA = valA`.\n    *   **Right Identity:** `timelineA |> TL.zipWith (&&) TL.TrueTimeline` results in `valA && true = valA`.\n    *   Holds.\n\n2.  **Associativity Law:**\n    *   `(tA |> TL.zipWith (&&) tB) |> TL.zipWith (&&) tC` behaves identically to `tA |> TL.zipWith (&&) (tB |> TL.zipWith (&&) tC)`.\n    *   Holds due to associativity of standard `&&`.\n\nThus, `timelineA |> TL.zipWith (&&) timelineB` effectively forms a Monoid with `TL.TrueTimeline`.\n\n### 7.3.4 Convenience Helper: `TL.And` Function Definition\n\nA named helper `TL.And` (aligning with `Timeline.fs` `And`).\n\n```fsharp\nmodule TL =\n    // ... other definitions including zipWith, TrueTimeline ...\n\n    /// \u003Csummary>\n    /// Creates a timeline that is true only if both input timelines are true.\n    /// This is a refined AND combinator implemented using TL.zipWith (&&).\n    /// It effectively forms a Monoid with TL.TrueTimeline as its identity.\n    /// \u003C/summary>\n    let And : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> = // Renamed to TL.And\n        fun timelineB timelineA -> // For pipeline: timelineA |> TL.And timelineB\n            timelineA |> TL.zipWith (&&) timelineB\n```\n\n**Example Usage:**\n\n```fsharp\n// let formReadyToSubmit : Timeline\u003Cbool> = allFieldsValid |> TL.And termsAccepted // Using TL.And\n```\n\n### 7.3.5 Optimizing `TL.And` with `TL.distinctUntilChanged` (from Chapter 6)\n\nApply `TL.distinctUntilChanged` to prevent redundant propagations if the logical AND result is unchanged.\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.And, TL.distinctUntilChanged are accessible\n\nlet inputA_isValid : Timeline\u003Cbool> = Timeline true\nlet inputB_isValid : Timeline\u003Cbool> = Timeline true\n\nlet formIsValid_refined : Timeline\u003Cbool> = inputA_isValid |> TL.And inputB_isValid // Using TL.And\n\nlet efficientFormIsValid : Timeline\u003Cbool> =\n    formIsValid_refined\n    |> TL.distinctUntilChanged\n```\n\n### 7.3.6 Practical Advantages and Use Cases for `TL.And`\n\nOffers simplicity, clarity, and Monoidal robustness.\n**Common Use Cases:** Form validation, permission checks, state machine transitions, resource availability.\n\n---\n\n## 7.4 Summary: Refined Boolean Combinators\n\n### 7.4.1 `TL.Or` and `TL.And` as Robust and Practical Tools\n\nIn this chapter, we have constructed `TL.Or` and `TL.And`, our refined combinators for boolean logic on `Timeline\u003Cbool>`, both implemented using `TL.zipWith`.\n\nWe demonstrated that:\n\n*   `TL.Or` forms a Monoid with `TL.FalseTimeline`.\n*   `TL.And` forms a Monoid with `TL.TrueTimeline`.\n\nThese offer an excellent balance of algebraic soundness, ease of implementation, and intuitive behavior.\n\n### 7.4.2 Relationship to Naive Implementations\n\n`TL.naiveOr` and `TL.naiveAnd` (Chapter 3) provide foundational understanding. The `TL.zipWith`-based `TL.Or` and `TL.And` in this chapter offer practical advantages. For `Timeline\u003Cbool>`, `TL.zipWith` is a fitting general tool to lift boolean Monoids.\nFor optimal performance, outputs should typically be piped through `TL.distinctUntilChanged`.\n\n### 7.4.3 Looking Ahead: Aggregating Multiple Timelines (to Chapter 8)\n\nWith these binary Monoidal operations (`TL.Or`, `TL.And`) defined, we can extend this logic to collections. The next chapter (**Chapter 8: Aggregating Lists of Booleans**) will explore n-ary combinators (`TL.any`, `TL.all`).","src/content/docs/en/book/unit-5/section-1/7-refined-boolean-monoids.md","dd3a0756e6298733",{"html":1694,"metadata":1695},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter demonstrates how to construct practical and efficient boolean combinators (\u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code>) for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> by leveraging the \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> combinator (introduced in Chapter 5) and standard boolean operators. It clarifies their relationship to Monoid principles, compares them to the “naive” implementations (Chapter 3), and highlights their utility when combined with \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"71-introduction-practical-boolean-logic-with-a-general-tool\">7.1 Introduction: Practical Boolean Logic with a General Tool\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#71-introduction-practical-boolean-logic-with-a-general-tool\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.1 Introduction: Practical Boolean Logic with a General Tool”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"711-recap-the-need-for-practical-combinators-from-chapter-4\">7.1.1 Recap: The Need for Practical Combinators (from Chapter 4)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#711-recap-the-need-for-practical-combinators-from-chapter-4\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.1.1 Recap: The Need for Practical Combinators (from Chapter 4)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 3, we explored the “naive” Monoidal implementations, \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code>. These provided a foundational understanding of how \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> can embody algebraic structures directly from \u003Ccode dir=\"auto\">Timeline\u003C/code> fundamentals, ensuring adherence to Monoid laws. This is invaluable for establishing the theoretical soundness of combining reactive boolean conditions.\u003C/p>\n\u003Cp>However, as discussed in Chapter 4 (“Need for General Combinators and Efficiency”), while these naive implementations are algebraically correct, a mature \u003Ccode dir=\"auto\">Timeline\u003C/code> library also benefits from combinators that offer greater ease of use, leverage general-purpose tools for conciseness, and integrate well with efficiency-enhancing utilities. Relying solely on bespoke naive implementations for every type of combination can lead to boilerplate and might not always offer the most straightforward approach for common tasks.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"712-introducing-tlzipwith-as-the-foundation-from-chapter-5\">7.1.2 Introducing \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> as the Foundation (from Chapter 5)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#712-introducing-tlzipwith-as-the-foundation-from-chapter-5\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.1.2 Introducing TL.zipWith as the Foundation (from Chapter 5)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Chapter 5 introduced \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> as a highly versatile, general-purpose combinator for the point-wise combination of two timelines. Its signature, \u003Ccode dir=\"auto\">val zipWith&#x3C;'a, 'b, 'c> : ('a -> 'b -> 'c) -> Timeline&#x3C;'b> -> Timeline&#x3C;'a> -> Timeline&#x3C;'c>\u003C/code>, allows us to take any two source timelines and a binary function to produce a new timeline.\u003C/p>\n\u003Cp>This chapter will demonstrate how this powerful \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> can be used as the foundation for creating our “refined” boolean logical combinators: \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code>. By simply providing the standard F# boolean operators \u003Ccode dir=\"auto\">||\u003C/code> (for OR) and \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code> (for AND) as the combining function to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, we can achieve the desired logical combinations in an elegant, practical, and algebraically sound manner.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"72-logical-or-with-tlzipwith-defining-tlor\">7.2 Logical OR with \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>: Defining \u003Ccode dir=\"auto\">TL.Or\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#72-logical-or-with-tlzipwith-defining-tlor\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2 Logical OR with TL.zipWith: Defining TL.Or”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We begin by constructing a practical OR combinator for \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> using \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. This “refined” version aims to provide the same logical outcome as \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> but with an implementation based on our general point-wise combination tool.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"721-construction-using-tlzipwith\">7.2.1 Construction using \u003Ccode dir=\"auto\">TL.zipWith (||)\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#721-construction-using-tlzipwith\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.1 Construction using TL.zipWith (||)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The core idea is remarkably straightforward: we use \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> and supply the standard F# boolean OR operator (\u003Ccode dir=\"auto\">||\u003C/code>) as the combining function.\u003C/p>\n\u003Cp>If \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> are \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances, their OR combination is:\n\u003Ccode dir=\"auto\">timelineA |> TL.zipWith (||) timelineB\u003C/code>\u003C/p>\n\u003Cp>\u003Cstrong>Behavior:\u003C/strong>\nThe behavior of this combined timeline is directly inherited from the rules of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (as detailed in Chapter 5, Section 5.3):\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Initialization:\u003C/strong>\n\u003Cul>\n\u003Cli>The resulting timeline is initialized by applying \u003Ccode dir=\"auto\">||\u003C/code> to the initial values of \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code>. Since \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances are expected to hold non-\u003Ccode dir=\"auto\">null\u003C/code> boolean values (\u003Ccode dir=\"auto\">true\u003C/code> or \u003Ccode dir=\"auto\">false\u003C/code>), the initial output will be \u003Ccode dir=\"auto\">(initialValA || initialValB)\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Updates:\u003C/strong>\n\u003Cul>\n\u003Cli>Whenever \u003Ccode dir=\"auto\">timelineA\u003C/code> or \u003Ccode dir=\"auto\">timelineB\u003C/code> is updated (via \u003Ccode dir=\"auto\">TL.define\u003C/code>), \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> retrieves the latest current values from both.\u003C/li>\n\u003Cli>It then applies the \u003Ccode dir=\"auto\">||\u003C/code> operator to these latest values: \u003Ccode dir=\"auto\">latestValA || latestValB\u003C/code>.\u003C/li>\n\u003Cli>The result of this \u003Ccode dir=\"auto\">||\u003C/code> operation is then defined onto the combined timeline, triggering its own downstream updates.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>F# Code Example (Basic Usage):\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">condition1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">condition2\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Combining function is the standard F# OR operator (||)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">combinedOrCondition\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> condition1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(||)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> condition2\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial OR State: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedOrCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial OR State: true (false || true)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">condition1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After condition1 becomes true: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedOrCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After condition1 becomes true: true (true || true)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">condition2 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After condition2 becomes false: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedOrCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After condition2 becomes false: true (true || false)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">condition1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After condition1 also becomes false: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedOrCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After condition1 also becomes false: false (false || false)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessiblelet condition1 : Timeline\u003Cbool> = Timeline falselet condition2 : Timeline\u003Cbool> = Timeline true// Combining function is the standard F# OR operator (||)let combinedOrCondition : Timeline\u003Cbool> = condition1 |> TL.zipWith (||) condition2printfn &#x22;Initial OR State: %b&#x22; (combinedOrCondition |> TL.at Now)// Expected Output: Initial OR State: true (false || true)condition1 |> TL.define Now trueprintfn &#x22;After condition1 becomes true: %b&#x22; (combinedOrCondition |> TL.at Now)// Expected Output: After condition1 becomes true: true (true || true)condition2 |> TL.define Now falseprintfn &#x22;After condition2 becomes false: %b&#x22; (combinedOrCondition |> TL.at Now)// Expected Output: After condition2 becomes false: true (true || false)condition1 |> TL.define Now falseprintfn &#x22;After condition1 also becomes false: %b&#x22; (combinedOrCondition |> TL.at Now)// Expected Output: After condition1 also becomes false: false (false || false)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This example shows the expected reactive logical OR behavior.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"722-comparison-with-tlnaiveor-from-chapter-3\">7.2.2 Comparison with \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> (from Chapter 3)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#722-comparison-with-tlnaiveor-from-chapter-3\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.2 Comparison with TL.naiveOr (from Chapter 3)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Implementation Strategy:\u003C/strong> \u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> was conceptually built using direct \u003Ccode dir=\"auto\">Timeline\u003C/code> manipulations. The \u003Ccode dir=\"auto\">TL.zipWith (||)\u003C/code> approach reuses the general-purpose \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Behavioral Equivalence:\u003C/strong> For \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> (non-\u003Ccode dir=\"auto\">null\u003C/code> boolean values), \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (||) timelineB\u003C/code> should behave identically to \u003Ccode dir=\"auto\">timelineA |> TL.naiveOr timelineB\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">null\u003C/code> Handling by \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>:\u003C/strong> \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s general \u003Ccode dir=\"auto\">null\u003C/code> handling (Chapter 5) doesn’t typically affect \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> with \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>, as these present non-\u003Ccode dir=\"auto\">null\u003C/code> booleans to \u003Ccode dir=\"auto\">(||)\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"723-monoid-properties-of-tlor\">7.2.3 Monoid Properties of \u003Ccode dir=\"auto\">TL.Or\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#723-monoid-properties-of-tlor\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.3 Monoid Properties of TL.Or”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This \u003Ccode dir=\"auto\">TL.zipWith (||)\u003C/code> approach, which forms our \u003Ccode dir=\"auto\">TL.Or\u003C/code>, adheres to Monoid laws with \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code> (\u003Ccode dir=\"auto\">Timeline false\u003C/code>) as the identity.\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Identity Law:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Left Identity:\u003C/strong> \u003Ccode dir=\"auto\">TL.FalseTimeline |> TL.zipWith (||) timelineA\u003C/code> results in \u003Ccode dir=\"auto\">false || valA = valA\u003C/code>. Behaves like \u003Ccode dir=\"auto\">timelineA\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Right Identity:\u003C/strong> \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (||) TL.FalseTimeline\u003C/code> results in \u003Ccode dir=\"auto\">valA || false = valA\u003C/code>. Behaves like \u003Ccode dir=\"auto\">timelineA\u003C/code>.\u003C/li>\n\u003Cli>The identity law holds.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Associativity Law:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">(tA |> TL.zipWith (||) tB) |> TL.zipWith (||) tC\u003C/code> behaves identically to \u003Ccode dir=\"auto\">tA |> TL.zipWith (||) (tB |> TL.zipWith (||) tC)\u003C/code>.\u003C/li>\n\u003Cli>This holds because standard \u003Ccode dir=\"auto\">||\u003C/code> is associative, and \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> applies it to current values.\u003C/li>\n\u003Cli>The associativity law holds.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Thus, \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (||) timelineB\u003C/code> effectively forms a Monoid with \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"724-convenience-helper-tlor-function-definition\">7.2.4 Convenience Helper: \u003Ccode dir=\"auto\">TL.Or\u003C/code> Function Definition\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#724-convenience-helper-tlor-function-definition\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.4 Convenience Helper: TL.Or Function Definition”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A named helper function \u003Ccode dir=\"auto\">TL.Or\u003C/code> improves readability. This aligns with the \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> code where this function is named \u003Ccode dir=\"auto\">Or\u003C/code>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other definitions including zipWith, FalseTimeline ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// Creates a timeline that is true if either of the input timelines is true.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// This is a refined OR combinator implemented using TL.zipWith (||).\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// It effectively forms a Monoid with TL.FalseTimeline as its identity.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">Or\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Renamed to TL.Or\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> timelineB timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For pipeline: timelineA |> TL.Or timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(||)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL =    // ... other definitions including zipWith, FalseTimeline ...    /// \u003Csummary>    /// Creates a timeline that is true if either of the input timelines is true.    /// This is a refined OR combinator implemented using TL.zipWith (||).    /// It effectively forms a Monoid with TL.FalseTimeline as its identity.    /// \u003C/summary>    let Or : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> = // Renamed to TL.Or        fun timelineB timelineA -> // For pipeline: timelineA |> TL.Or timelineB            timelineA |> TL.zipWith (||) timelineB\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Example Usage:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let hasAttention : Timeline&#x3C;bool> = isMouseOver |> TL.Or hasFocus // Using the new TL.Or\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// let hasAttention : Timeline\u003Cbool> = isMouseOver |> TL.Or hasFocus // Using the new TL.Or\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"725-optimizing-tlor-with-tldistinctuntilchanged-from-chapter-6\">7.2.5 Optimizing \u003Ccode dir=\"auto\">TL.Or\u003C/code> with \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (from Chapter 6)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#725-optimizing-tlor-with-tldistinctuntilchanged-from-chapter-6\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.5 Optimizing TL.Or with TL.distinctUntilChanged (from Chapter 6)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The output of \u003Ccode dir=\"auto\">TL.Or\u003C/code> can benefit from \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> to prevent propagation if the logical OR result remains the same.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.Or, TL.distinctUntilChanged are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">eventStreamA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">eventStreamB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">combinedUsingOr\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> eventStreamA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.Or eventStreamB \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using TL.Or\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">efficientCombinedOr\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedUsingOr\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.Or, TL.distinctUntilChanged are accessiblelet eventStreamA : Timeline\u003Cbool> = Timeline falselet eventStreamB : Timeline\u003Cbool> = Timeline falselet combinedUsingOr : Timeline\u003Cbool> = eventStreamA |> TL.Or eventStreamB // Using TL.Orlet efficientCombinedOr : Timeline\u003Cbool> =    combinedUsingOr    |> TL.distinctUntilChanged\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This ensures propagation only on actual changes in the logical OR state.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"726-practical-advantages-and-use-cases-for-tlor\">7.2.6 Practical Advantages and Use Cases for \u003Ccode dir=\"auto\">TL.Or\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#726-practical-advantages-and-use-cases-for-tlor\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2.6 Practical Advantages and Use Cases for TL.Or”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This \u003Ccode dir=\"auto\">TL.zipWith (||)\u003C/code> approach, encapsulated as \u003Ccode dir=\"auto\">TL.Or\u003C/code>, offers:\u003C/p>\n\u003Cul>\n\u003Cli>Simplicity and Clarity.\u003C/li>\n\u003Cli>Leverages Existing Tools (\u003Ccode dir=\"auto\">TL.zipWith\u003C/code>).\u003C/li>\n\u003Cli>Good Default Behavior.\u003C/li>\n\u003Cli>Monoid Properties with \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Common Use Cases:\u003C/strong> UI element states, event flag aggregation, feature toggles.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"73-logical-and-with-tlzipwith-defining-tland\">7.3 Logical AND with \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>: Defining \u003Ccode dir=\"auto\">TL.And\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#73-logical-and-with-tlzipwith-defining-tland\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3 Logical AND with TL.zipWith: Defining TL.And”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Symmetrically, we construct a practical AND combinator using \u003Ccode dir=\"auto\">TL.zipWith (&#x26;&#x26;)\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"731-construction-using-tlzipwith\">7.3.1 Construction using \u003Ccode dir=\"auto\">TL.zipWith (&#x26;&#x26;)\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#731-construction-using-tlzipwith\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.1 Construction using TL.zipWith (&#x26;&#x26;)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The AND combination is: \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (&#x26;&#x26;) timelineB\u003C/code>\u003C/p>\n\u003Cp>\u003Cstrong>Behavior:\u003C/strong> Inherited from \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Initialization:\u003C/strong> Output is \u003Ccode dir=\"auto\">(initialValA &#x26;&#x26; initialValB)\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Updates:\u003C/strong> Output is \u003Ccode dir=\"auto\">latestValA &#x26;&#x26; latestValB\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>F# Code Example (Basic Usage):\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">conditionX\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">conditionY\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">combinedAndCondition\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> conditionX \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(&#x26;&#x26;)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> conditionY\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial AND State: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedAndCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial AND State: false (true &#x26;&#x26; false)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">conditionY \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After conditionY becomes true: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedAndCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After conditionY becomes true: true (true &#x26;&#x26; true)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">conditionX \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After conditionX becomes false: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedAndCondition \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After conditionX becomes false: false (false &#x26;&#x26; true)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.zipWith are accessiblelet conditionX : Timeline\u003Cbool> = Timeline truelet conditionY : Timeline\u003Cbool> = Timeline falselet combinedAndCondition : Timeline\u003Cbool> = conditionX |> TL.zipWith (&#x26;&#x26;) conditionYprintfn &#x22;Initial AND State: %b&#x22; (combinedAndCondition |> TL.at Now)// Expected Output: Initial AND State: false (true &#x26;&#x26; false)conditionY |> TL.define Now trueprintfn &#x22;After conditionY becomes true: %b&#x22; (combinedAndCondition |> TL.at Now)// Expected Output: After conditionY becomes true: true (true &#x26;&#x26; true)conditionX |> TL.define Now falseprintfn &#x22;After conditionX becomes false: %b&#x22; (combinedAndCondition |> TL.at Now)// Expected Output: After conditionX becomes false: false (false &#x26;&#x26; true)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"732-comparison-with-tlnaiveand-from-chapter-3\">7.3.2 Comparison with \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> (from Chapter 3)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#732-comparison-with-tlnaiveand-from-chapter-3\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.2 Comparison with TL.naiveAnd (from Chapter 3)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Implementation Strategy:\u003C/strong> \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> (direct) vs. \u003Ccode dir=\"auto\">TL.zipWith (&#x26;&#x26;)\u003C/code> (general tool).\u003C/li>\n\u003Cli>\u003Cstrong>Behavioral Equivalence:\u003C/strong> Identical for non-\u003Ccode dir=\"auto\">null\u003C/code> \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">null\u003C/code> Handling by \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>:\u003C/strong> Usually no impact with \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"733-monoid-properties-of-tland\">7.3.3 Monoid Properties of \u003Ccode dir=\"auto\">TL.And\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#733-monoid-properties-of-tland\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.3 Monoid Properties of TL.And”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This approach forms a Monoid with \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code> (\u003Ccode dir=\"auto\">Timeline true\u003C/code>) as identity.\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Identity Law:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Left Identity:\u003C/strong> \u003Ccode dir=\"auto\">TL.TrueTimeline |> TL.zipWith (&#x26;&#x26;) timelineA\u003C/code> results in \u003Ccode dir=\"auto\">true &#x26;&#x26; valA = valA\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Right Identity:\u003C/strong> \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (&#x26;&#x26;) TL.TrueTimeline\u003C/code> results in \u003Ccode dir=\"auto\">valA &#x26;&#x26; true = valA\u003C/code>.\u003C/li>\n\u003Cli>Holds.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Associativity Law:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">(tA |> TL.zipWith (&#x26;&#x26;) tB) |> TL.zipWith (&#x26;&#x26;) tC\u003C/code> behaves identically to \u003Ccode dir=\"auto\">tA |> TL.zipWith (&#x26;&#x26;) (tB |> TL.zipWith (&#x26;&#x26;) tC)\u003C/code>.\u003C/li>\n\u003Cli>Holds due to associativity of standard \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Thus, \u003Ccode dir=\"auto\">timelineA |> TL.zipWith (&#x26;&#x26;) timelineB\u003C/code> effectively forms a Monoid with \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"734-convenience-helper-tland-function-definition\">7.3.4 Convenience Helper: \u003Ccode dir=\"auto\">TL.And\u003C/code> Function Definition\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#734-convenience-helper-tland-function-definition\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.4 Convenience Helper: TL.And Function Definition”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A named helper \u003Ccode dir=\"auto\">TL.And\u003C/code> (aligning with \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> \u003Ccode dir=\"auto\">And\u003C/code>).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other definitions including zipWith, TrueTimeline ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// Creates a timeline that is true only if both input timelines are true.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// This is a refined AND combinator implemented using TL.zipWith (&#x26;&#x26;).\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// It effectively forms a Monoid with TL.TrueTimeline as its identity.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">And\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Renamed to TL.And\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> timelineB timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For pipeline: timelineA |> TL.And timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(&#x26;&#x26;)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineB\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL =    // ... other definitions including zipWith, TrueTimeline ...    /// \u003Csummary>    /// Creates a timeline that is true only if both input timelines are true.    /// This is a refined AND combinator implemented using TL.zipWith (&#x26;&#x26;).    /// It effectively forms a Monoid with TL.TrueTimeline as its identity.    /// \u003C/summary>    let And : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool> = // Renamed to TL.And        fun timelineB timelineA -> // For pipeline: timelineA |> TL.And timelineB            timelineA |> TL.zipWith (&#x26;&#x26;) timelineB\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Example Usage:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let formReadyToSubmit : Timeline&#x3C;bool> = allFieldsValid |> TL.And termsAccepted // Using TL.And\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// let formReadyToSubmit : Timeline\u003Cbool> = allFieldsValid |> TL.And termsAccepted // Using TL.And\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"735-optimizing-tland-with-tldistinctuntilchanged-from-chapter-6\">7.3.5 Optimizing \u003Ccode dir=\"auto\">TL.And\u003C/code> with \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (from Chapter 6)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#735-optimizing-tland-with-tldistinctuntilchanged-from-chapter-6\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.5 Optimizing TL.And with TL.distinctUntilChanged (from Chapter 6)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Apply \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> to prevent redundant propagations if the logical AND result is unchanged.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.And, TL.distinctUntilChanged are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">inputA_isValid\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">inputB_isValid\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">formIsValid_refined\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> inputA\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isValid \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.And inputB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isValid \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using TL.And\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">efficientFormIsValid\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">formIsValid\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">refined\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.And, TL.distinctUntilChanged are accessiblelet inputA_isValid : Timeline\u003Cbool> = Timeline truelet inputB_isValid : Timeline\u003Cbool> = Timeline truelet formIsValid_refined : Timeline\u003Cbool> = inputA_isValid |> TL.And inputB_isValid // Using TL.Andlet efficientFormIsValid : Timeline\u003Cbool> =    formIsValid_refined    |> TL.distinctUntilChanged\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"736-practical-advantages-and-use-cases-for-tland\">7.3.6 Practical Advantages and Use Cases for \u003Ccode dir=\"auto\">TL.And\u003C/code>\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#736-practical-advantages-and-use-cases-for-tland\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3.6 Practical Advantages and Use Cases for TL.And”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Offers simplicity, clarity, and Monoidal robustness.\n\u003Cstrong>Common Use Cases:\u003C/strong> Form validation, permission checks, state machine transitions, resource availability.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"74-summary-refined-boolean-combinators\">7.4 Summary: Refined Boolean Combinators\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#74-summary-refined-boolean-combinators\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.4 Summary: Refined Boolean Combinators”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"741-tlor-and-tland-as-robust-and-practical-tools\">7.4.1 \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code> as Robust and Practical Tools\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#741-tlor-and-tland-as-robust-and-practical-tools\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.4.1 TL.Or and TL.And as Robust and Practical Tools”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In this chapter, we have constructed \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code>, our refined combinators for boolean logic on \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>, both implemented using \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>.\u003C/p>\n\u003Cp>We demonstrated that:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TL.Or\u003C/code> forms a Monoid with \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.And\u003C/code> forms a Monoid with \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>These offer an excellent balance of algebraic soundness, ease of implementation, and intuitive behavior.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"742-relationship-to-naive-implementations\">7.4.2 Relationship to Naive Implementations\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#742-relationship-to-naive-implementations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.4.2 Relationship to Naive Implementations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Ccode dir=\"auto\">TL.naiveOr\u003C/code> and \u003Ccode dir=\"auto\">TL.naiveAnd\u003C/code> (Chapter 3) provide foundational understanding. The \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>-based \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code> in this chapter offer practical advantages. For \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>, \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is a fitting general tool to lift boolean Monoids.\nFor optimal performance, outputs should typically be piped through \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"743-looking-ahead-aggregating-multiple-timelines-to-chapter-8\">7.4.3 Looking Ahead: Aggregating Multiple Timelines (to Chapter 8)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#743-looking-ahead-aggregating-multiple-timelines-to-chapter-8\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.4.3 Looking Ahead: Aggregating Multiple Timelines (to Chapter 8)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>With these binary Monoidal operations (\u003Ccode dir=\"auto\">TL.Or\u003C/code>, \u003Ccode dir=\"auto\">TL.And\u003C/code>) defined, we can extend this logic to collections. The next chapter (\u003Cstrong>Chapter 8: Aggregating Lists of Booleans\u003C/strong>) will explore n-ary combinators (\u003Ccode dir=\"auto\">TL.any\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code>).\u003C/p>",{"headings":1696,"localImagePaths":1760,"remoteImagePaths":1761,"frontmatter":1762,"imagePaths":1763},[1697,1700,1703,1706,1709,1712,1715,1718,1721,1724,1727,1730,1733,1736,1739,1742,1745,1748,1751,1754,1757],{"depth":182,"slug":1698,"text":1699},"71-introduction-practical-boolean-logic-with-a-general-tool","7.1 Introduction: Practical Boolean Logic with a General Tool",{"depth":523,"slug":1701,"text":1702},"711-recap-the-need-for-practical-combinators-from-chapter-4","7.1.1 Recap: The Need for Practical Combinators (from Chapter 4)",{"depth":523,"slug":1704,"text":1705},"712-introducing-tlzipwith-as-the-foundation-from-chapter-5","7.1.2 Introducing TL.zipWith as the Foundation (from Chapter 5)",{"depth":182,"slug":1707,"text":1708},"72-logical-or-with-tlzipwith-defining-tlor","7.2 Logical OR with TL.zipWith: Defining TL.Or",{"depth":523,"slug":1710,"text":1711},"721-construction-using-tlzipwith","7.2.1 Construction using TL.zipWith (||)",{"depth":523,"slug":1713,"text":1714},"722-comparison-with-tlnaiveor-from-chapter-3","7.2.2 Comparison with TL.naiveOr (from Chapter 3)",{"depth":523,"slug":1716,"text":1717},"723-monoid-properties-of-tlor","7.2.3 Monoid Properties of TL.Or",{"depth":523,"slug":1719,"text":1720},"724-convenience-helper-tlor-function-definition","7.2.4 Convenience Helper: TL.Or Function Definition",{"depth":523,"slug":1722,"text":1723},"725-optimizing-tlor-with-tldistinctuntilchanged-from-chapter-6","7.2.5 Optimizing TL.Or with TL.distinctUntilChanged (from Chapter 6)",{"depth":523,"slug":1725,"text":1726},"726-practical-advantages-and-use-cases-for-tlor","7.2.6 Practical Advantages and Use Cases for TL.Or",{"depth":182,"slug":1728,"text":1729},"73-logical-and-with-tlzipwith-defining-tland","7.3 Logical AND with TL.zipWith: Defining TL.And",{"depth":523,"slug":1731,"text":1732},"731-construction-using-tlzipwith","7.3.1 Construction using TL.zipWith (&&)",{"depth":523,"slug":1734,"text":1735},"732-comparison-with-tlnaiveand-from-chapter-3","7.3.2 Comparison with TL.naiveAnd (from Chapter 3)",{"depth":523,"slug":1737,"text":1738},"733-monoid-properties-of-tland","7.3.3 Monoid Properties of TL.And",{"depth":523,"slug":1740,"text":1741},"734-convenience-helper-tland-function-definition","7.3.4 Convenience Helper: TL.And Function Definition",{"depth":523,"slug":1743,"text":1744},"735-optimizing-tland-with-tldistinctuntilchanged-from-chapter-6","7.3.5 Optimizing TL.And with TL.distinctUntilChanged (from Chapter 6)",{"depth":523,"slug":1746,"text":1747},"736-practical-advantages-and-use-cases-for-tland","7.3.6 Practical Advantages and Use Cases for TL.And",{"depth":182,"slug":1749,"text":1750},"74-summary-refined-boolean-combinators","7.4 Summary: Refined Boolean Combinators",{"depth":523,"slug":1752,"text":1753},"741-tlor-and-tland-as-robust-and-practical-tools","7.4.1 TL.Or and TL.And as Robust and Practical Tools",{"depth":523,"slug":1755,"text":1756},"742-relationship-to-naive-implementations","7.4.2 Relationship to Naive Implementations",{"depth":523,"slug":1758,"text":1759},"743-looking-ahead-aggregating-multiple-timelines-to-chapter-8","7.4.3 Looking Ahead: Aggregating Multiple Timelines (to Chapter 8)",[],[],{"title":1685,"description":1686},[],"en/book/unit-5/section-1/5-zipwith",{"id":1764,"data":1766,"body":1772,"filePath":1773,"digest":1774,"rendered":1775},{"title":1767,"description":1768,"editUrl":16,"head":1769,"template":18,"sidebar":1770,"pagefind":16,"draft":20},"Chapter 5: General Point-wise Combination: TL.zipWith","Chapter Goal: This chapter introduces TL.zipWith as a fundamental and highly versatile combinator for the point-wise combination of two timelines. We will explore the meaning of \"point-wise\" operations in the context of Timeline and the Block Universe model, then delve into TL.zipWith's mechanics, how it handles null (and Option types like None), its practical applications, and its crucial role as a building block for more complex, practical reactive patterns.",[],{"hidden":20,"attrs":1771},{},"**Chapter Goal:** This chapter introduces `TL.zipWith` as a fundamental and highly versatile combinator for the **point-wise** combination of two timelines. We will explore the meaning of \"point-wise\" operations in the context of `Timeline` and the Block Universe model, then delve into `TL.zipWith`'s mechanics, how it handles `null` (and `Option` types like `None`), its practical applications, and its crucial role as a building block for more complex, practical reactive patterns.\n\n## 5.1 Understanding \"Point-wise\" Operations\n\nBefore diving into `TL.zipWith` itself, let's clarify the term **\"point-wise\"** (or \"element-wise\"). While it might sound academic, the underlying concept is quite intuitive and fundamental to how we combine data in many areas, including mathematics and programming.\n\n**What Does \"Point-wise\" Mean in General?**\n\nAt its core, a \"point-wise\" operation refers to applying an operation to corresponding parts (the \"points\" or \"elements\") of two or more data structures to produce a new data structure. The key idea is that the operation on one part is independent of the operation on other parts, except that they occur at corresponding positions.\n\n* **In Mathematics:**\n      * **Functions:** If you have two functions, say $f(x)$ and $g(x)$, their point-wise sum $(f+g)(x)$ is a new function defined as $f(x) + g(x)$ for every point $x$ in their common domain. The addition at point $x\\_1$ doesn't affect the addition at point $x\\_2$.\n      * **Vectors/Matrices:** Adding two vectors $\\\\vec{v} = (v\\_1, v\\_2, v\\_3)$ and $\\\\vec{w} = (w\\_1, w\\_2, w\\_3)$ point-wise (or element-wise) results in a new vector $\\\\vec{u} = (v\\_1+w\\_1, v\\_2+w\\_2, v\\_3+w\\_3)$. Each component of the resulting vector is calculated independently using only the corresponding components of the input vectors.\n  * **In Programming (Lists/Arrays):**\n      * If you have two lists, `listA = [1, 2, 3]` and `listB = [4, 5, 6]`, a point-wise multiplication (assuming they are of the same length) might produce `[1*4, 2*5, 3*6] = [4, 10, 18]`. The first element of the result depends only on the first elements of the inputs, the second on the second, and so on.\n\nThe term \"point-wise\" emphasizes this correspondence at each \"point\" or \"index\" of the structures being combined.\n\n**\"Point-wise\" in the Context of `Timeline` and FRP**\n\nHow does this apply to `Timeline\u003C'a>` in our Functional Reactive Programming (FRP) model?\n\nRecall that a `Timeline\u003C'a>` represents a value that changes over time. We can think of a `Timeline` as a sequence of values indexed by time. Each \"point\" on the timeline corresponds to a specific instant in time, and at that instant, the `Timeline` has a particular value.\n\nTherefore, a **point-wise operation on two `Timeline`s, say `timelineA` and `timelineB`, means that to determine the value of the resulting `timelineC` at any specific instant `t`, we only need to look at the values of `timelineA` at instant `t` (i.e., `A(t)`) and `timelineB` at instant `t` (i.e., `B(t)`).** The value `C(t)` is then some function `f(A(t), B(t))`. The calculation of `C(t_1)` is independent of the calculation of `C(t_2)` (where $t\\_1 \\\\neq t\\_2$), except that they both follow the same rule `f` applied to their respective \"point-in-time\" input values.\n\n**Connecting to the Block Universe Model**\n\nThe Block Universe model (Unit 4, Chapter 0 & 2) posits that all of time – past, present, and future – exists as a complete, immutable block. Within this block, for any given `Timeline A` and `Timeline B`, their values at every specific time coordinate `t` (denoted $A\\_t$ and $B\\_t$) are definitively fixed.\n\nWhen we perform a point-wise operation `f` to combine `Timeline A` and `Timeline B` into a new `Timeline C`, we are essentially defining that for *every* time coordinate `t` in the Block Universe, the value of `Timeline C` at that coordinate, $C\\_t$, is determined by $f(A\\_t, B\\_t)$.\n\n* $TimelineA: [A\\_{t1}, A\\_{t2}, A\\_{t3}, ...]$\n  * $TimelineB: [B\\_{t1}, B\\_{t2}, B\\_{t3}, ...]$\n  * Operation: $f(\\_, \\_)$\n  * $TimelineC: [f(A\\_{t1}, B\\_{t1}), f(A\\_{t2}, B\\_{t2}), f(A\\_{t3}, B\\_{t3}), ...]$\n\nThe `Timeline` library, through its reactive mechanisms, then simulates an observer moving through this Block Universe. When the value of `Timeline A` or `Timeline B` is observed to change at the current `Now` (i.e., `TL.define` is called), the library ensures that the value of `Timeline C` at that same `Now` is re-calculated according to the point-wise rule $f(A\\_{Now}, B\\_{Now})$ and this new value for `C_{Now}` is propagated.\n\nThis \"point-wise\" nature is crucial because it simplifies reasoning about combined timelines. To understand the value of a combined timeline *now*, you only need to know the values of its constituent timelines *now*. You don't need to consider their past history in a complex way (unless the combining function `f` itself introduces such a dependency, which is a separate concern from the point-wise application mechanism itself).\n\n**`TL.zipWith` as the Embodiment of Point-wise Combination**\n\nThe `TL.zipWith` combinator, which we will introduce formally in the next section, is the primary tool in this library for performing such point-wise combinations of two timelines. It takes two input timelines and a binary function, and it produces a new timeline. This new timeline's value at any given moment is the result of applying the binary function to the \"simultaneous\" or \"current\" values of the two input timelines.\n\nThe name `zipWith` itself hints at this:\n\n* **`zip`**: Like a zipper bringing together corresponding teeth from two sides, `zipWith` conceptually pairs up the values from the two timelines that occur at the same \"point\" in time.\n  * **`With`**: It then applies a given function *With* these paired-up values.\n\nUnderstanding \"point-wise\" operations is key to understanding how `TL.zipWith` functions and why it's such a powerful and fundamental tool for building reactive systems with `Timeline`s. It allows us to define complex, derived reactive values in a clear, declarative, and temporally consistent manner.\n\n## 5.2 `TL.zipWith`: Zipping Values Over Time\n\nNow that we have a solid understanding of \"point-wise\" operations, we can formally introduce `TL.zipWith`. This combinator is the primary mechanism provided by the `Timeline` library for the general-purpose, point-wise combination of two timelines.\n\n**Analogy Revisited:**\n\nAs mentioned in the previous section, the name `zipWith` is quite descriptive.\nThink of the `List.zip` function in F\\# (or similar functions in other languages), which takes two lists, say `[1; 2; 3]` and `[\"a\"; \"b\"; \"c\"]`, and produces a list of pairs: `[(1, \"a\"); (2, \"b\"); (3, \"c\")]`. Then, imagine applying a function to each of these pairs (like `List.map` on the zipped list).\n`TL.zipWith` performs a conceptually similar operation, but for `Timeline` instances: it \"zips\" the sequences of values produced by two timelines as they evolve over time and applies a specified *combining function* to each pair of \"simultaneous\" or \"current\" values observed at each \"point\" in time.\n\n**Signature Breakdown:**\n\nThe type signature of `TL.zipWith` is designed to facilitate a natural pipelining style (`timelineA |> TL.zipWith f timelineB`).\n\n```fsharp\nmodule TL =\n    // Assuming Timeline\u003C'a> type and Now value/type are defined\n    // ... other TL functions ...\n\n    // Intended usage with pipeline: timelineA |> TL.zipWith f timelineB\n    // This means 'timelineA' provides the first argument to 'f', and 'timelineB' provides the second.\n    // Signature reflects parameters for currying to achieve this:\n    val zipWith\u003C'a, 'b, 'c> : ('a -> 'b -> 'c) -> Timeline\u003C'b> -> Timeline\u003C'a> -> Timeline\u003C'c>\n```\n\nLet's dissect this:\n\n1.  **`('a -> 'b -> 'c)` (The Combining Function `f`):** This is the first argument passed to `TL.zipWith`. It's a standard F\\# function that expects:\n\n      * a value of type `'a` as its *first* parameter.\n      * and a value of type `'b` as its *second* parameter.\n      * It returns a new value of type `'c`.\n        This function `f` encapsulates the specific logic for *how* the two point-in-time values should be merged or combined.\n\n2.  **`Timeline\u003C'b>` (Timeline for `f`'s second argument):** This is the second argument passed to `TL.zipWith`. The current value of this timeline will be supplied as the *second* argument (of type `'b'`) to the combining function `f`.\n\n3.  **`Timeline\u003C'a>` (Timeline for `f`'s first argument):** This is the third argument passed to `TL.zipWith`. The current value of this timeline will be supplied as the *first* argument (of type `'a'`) to the combining function `f`. In the idiomatic pipelined usage `timelineA |> TL.zipWith f timelineB`, `timelineA` is effectively passed as this third argument.\n\n4.  **`Timeline\u003C'c>` (Result Timeline):** The `TL.zipWith` operation returns a *new* timeline. This `resultTimeline` will hold values of type `'c'`, which are the outputs produced by applying the combining function `f` to the point-wise values from the input timelines.\n\n**Naming Rationale (`zipWith`)**\nThe name `zipWith` is chosen deliberately (and is a common term in functional programming, e.g., `List.zipWith` in F\\# and Haskell's `zipWith` for lists) because it strongly implies the semantics of pairing up corresponding elements (values at the same point in time) from two sources and then applying a function to those pairs. It's more descriptive of this specific \"paired application at each point\" than a more generic name like `map2` (which often implies a curried function applied to two values, but not necessarily the \"zipping\" of two structured sequences).\n\n**Rationale for Pipelined Usage (`A |> TL.zipWith f B`)**\n\nThe preference for the pipelined usage `timelineA |> TL.zipWith f timelineB` stems from several advantages in clarity and consistency, especially when dealing with operations where argument order to the combining function `f` matters (i.e., `f` is non-commutative):\n\n1.  **Clear Data Flow:** This style emphasizes `timelineA` as the primary data source or starting point of a data flow. The operation `f` is then applied to `timelineA`, using `timelineB` as an additional, \"secondary\" data source. This aligns well with the general F\\# philosophy of piping data through a series of transformations.\n\n2.  **Unambiguous Argument Order for the Combining Function (`f`):**\n    When using the `timelineA |> TL.zipWith f timelineB` pattern, a clear convention is established:\n\n      * The value from `timelineA` (the left-hand side of `|>`) corresponds to the *first* argument (type `'a'`) of the combining function `f: 'a -> 'b -> 'c`.\n      * The value from `timelineB` (the explicit argument to `TL.zipWith f`) corresponds to the *second* argument (type `'b'`) of `f`.\n        This convention ensures that even if `f` is non-commutative (e.g., subtraction, string formatting where order matters), programmers can reliably predict the outcome.\n\n3.  **Consistency with F\\# Style Guide:**\n    As discussed in this project's F\\# Style Guide (Section 3), the expression `timelineA |> TL.zipWith f timelineB` fits the preferred style `dataInstance |> ModuleName.functionName additionalArguments`:\n\n      * `dataInstance` corresponds to `timelineA`.\n      * `ModuleName.functionName` corresponds to `TL.zipWith`.\n      * `additionalArguments` correspond to `f` and `timelineB`.\n\n4.  **Avoiding Potential Ambiguity of Symmetric Calls:**\n    If a symmetric calling style like `TL.zipWith f timelineA timelineB` (assuming a different signature for `TL.zipWith`) were equally encouraged, it could lead to ambiguity regarding which timeline maps to which argument of `f` without constantly referring back to the function signature. The pipelined approach visually distinguishes the roles more effectively.\n\nTherefore, for `TL.zipWith`, we will primarily use and document the pipelined form `timelineA |> TL.zipWith f timelineB`.\n\n## 5.3 How `zipWith` Behaves: Initialization and Updates\n\nUnderstanding `TL.zipWith`'s behavior during its initialization and in response to updates from its source timelines is crucial for using it correctly. This behavior, especially concerning `null` values (and by extension, how it interacts with `Option` types if they are used to represent absence), strictly follows the `null` handling philosophy established in **Chapter 0: Handling Absence: `null` vs. `Option`**.\n\n**The \"Wait for Both Non-`null` Values\" Rule (Initialization and Updates):**\n\nThe core principle governing `TL.zipWith` is that the combining function `f` is only ever called if **both** input timelines currently hold values that are **not considered absent** according to the library's primary mechanism for checking absence (i.e., `isNull`).\n\n* **Initialization:**\n    When a `resultTimeline` is created using `timelineA |> TL.zipWith f timelineB`:\n\n    1.  `TL.zipWith` immediately inspects the *current* values of `timelineA` and `timelineB` (e.g., via `TL.at Now`).\n    2.  It uses the `isNull` helper (from Chapter 0) to check if **both** these initial values are non-`null`.\n    3.  **If both `timelineA |> TL.at Now` and `timelineB |> TL.at Now` are non-`null`:**\n        The combining function `f` is immediately invoked with these two initial values. The `resultTimeline` is then initialized with this computed value.\n    4.  **If either `timelineA |> TL.at Now` or `timelineB |> TL.at Now` (or both) initially holds `null`:**\n        The combining function `f` is **not** called. The `resultTimeline` is initialized with `null` (if `'c` is a reference type or `Nullable\u003C'c>`) or the default value for its type (e.g., `0` for `int`, `false` for `bool`) using `Unchecked.defaultof\u003C'c>`.\n\n  * **Reacting to Changes (Updates):**\n    Once initialized, the `resultTimeline` monitors both `timelineA` and `timelineB` for updates. When an update occurs on either source timeline:\n\n    1.  The internal logic of `TL.zipWith` is triggered.\n    2.  It retrieves the *latest current values* from **both** `timelineA` and `timelineB`.\n    3.  It again uses `isNull` to check if **both** these latest current values are non-`null`.\n    4.  **If both current values are non-`null`:**\n        The combining function `f` is applied. The resulting value is defined onto `resultTimeline`.\n    5.  **If either of the latest current values is `null`:**\n        The combining function `f` is **not** called. The `resultTimeline` is defined with `null` (or `Unchecked.defaultof\u003C'c>`).\n\n**Important Note on `Option` Types (e.g., `Timeline\u003Cint option>`):**\nThe `isNull` helper function, as typically defined, checks for `null` references. It does **not** treat `None` (from an `option` type) as `null`. Therefore, if `timelineA` is a `Timeline\u003C'a option>` and its current value is `None`, `isNull (timelineA |> TL.at Now)` will be `false` (unless `'a` itself could be `null` and the value is `Some null`, which is an edge case not directly supported by standard F\\# options unless `'a` is constrained to be a reference type or nullable value type).\nThis means that if you use `TL.zipWith` with `Timeline\u003C'a option>` and `Timeline\u003C'b option>`, and one of them holds `None`, the `None` value itself **will be passed** to your combining function `f`. Your combining function `f: 'a option -> 'b option -> 'c` would then be responsible for handling the `None` cases as appropriate for its logic (e.g., using pattern matching or `Option.map`/`Option.bind`).\nThe \"Wait for Both Non-`null` Values\" rule of `TL.zipWith` applies specifically to `null` references as detected by the `isNull` helper. It does not automatically unwrap `option` types or treat `None` as a reason to skip the combining function. If you wish for `None` to be treated similarly to `null` by `TL.zipWith` (i.e., for the combining function not to be called when `None` is present, and for the result to become `null` or a default), you would need to explicitly transform the `Timeline\u003C'a option>` *before* passing it to `TL.zipWith` (e.g., by using `TL.map Option.toObj` if `None` should become `null`, assuming `'a` is a reference type) or by using `TL.bind` to conditionally proceed only if the value is `Some`.\n\n*Conceptual Initial State Diagram:*\n\n```\nTimelineA: |---A1---| (current value at Now, may be null)\nTimelineB: |---B1---| (current value at Now, may be null)\n\n          TL.zipWith f\n             |\n             V\nTimelineC: |---C1---| (C1 = f(A1, B1) if A1 & B1 non-null, else null/default_of\u003C'c>)\n```\n\n*Conceptual Update Diagram (e.g., TimelineA updates):*\n\n```\nTimelineA (before update): |---A_old---|\nTimelineA (after update):  |------A_new------| (current value at Now)\nTimelineB (current state): |------B_curr-----| (current value at Now)\n\n                 TL.zipWith f\n                    |\n                    V\nTimelineC (updates to):    |------C_new------| (C_new = f(A_new, B_curr) if both non-null, else null/default_of\u003C'c>)\n```\n\nThis consistent `null` propagation behavior (for actual `null` references) is a direct consequence of the library's philosophy outlined in Chapter 0.\n\n## 5.4 A Simple Example: Summing Two Number Timelines\n\nLet's illustrate `TL.zipWith` with a classic example: creating a timeline that reactively represents the sum of two independent counter timelines.\n\n```fsharp\nopen Timeline // Assuming Timeline factory and TL module are available\n\n// Helper to observe timeline changes (for example purposes)\nlet trace (name: string) (timeline: Timeline\u003C'a>) =\n    timeline\n    |> TL.map (fun value -> // Use TL.map as per style guide\n        // Using a more robust null check for general types\n        let valueStr = if isNull value then \"null\" else sprintf \"%A\" value // Assuming isNull is globally accessible\n        printfn \"[%s at %s] %s\" name (System.DateTime.Now.ToString(\"HH:mm:ss.fff\")) valueStr\n    )\n    |> ignore\n\n// 1. Create source timelines\nlet counterA = Timeline 10 // Initialized with a non-null int\nlet counterB = Timeline 20 // Initialized with a non-null int\n\nprintfn \"Initial State of Sources:\"\nprintfn \"  CounterA: %d\" (counterA |> TL.at Now)\nprintfn \"  CounterB: %d\" (counterB |> TL.at Now)\n\n// 2. Create the sum timeline using TL.zipWith\nlet sumTimeline = counterA |> TL.zipWith (+) counterB // Pipelined usage\n\n// Optional: trace the sumTimeline\ntrace \"SumTimeline\" sumTimeline\n\n// 3. Check the initial value of sumTimeline\nprintfn \"Initial Sum: %d\" (sumTimeline |> TL.at Now)\n// Expected Output (after trace initialization):\n// [SumTimeline at HH:mm:ss.fff] 30\n// Initial Sum: 30\n\n// 4. Update counterA\nprintfn \"\\nUpdating CounterA to 15...\"\ncounterA |> TL.define Now 15\nprintfn \"Current Sum after A updated: %d\" (sumTimeline |> TL.at Now)\n// Expected Output (after trace for update):\n// [SumTimeline at HH:mm:ss.fff] 35\n// Current Sum after A updated: 35\n\n// 5. Update counterB\nprintfn \"\\nUpdating CounterB to 25...\"\ncounterB |> TL.define Now 25\nprintfn \"Current Sum after B updated: %d\" (sumTimeline |> TL.at Now)\n// Expected Output (after trace for update):\n// [SumTimeline at HH:mm:ss.fff] 40\n// Current Sum after B updated: 40\n\n// 6. Example with potential nulls (using strings for clarity)\nlet textA : Timeline\u003Cstring> = Timeline \"Hello\"\nlet textB : Timeline\u003Cstring> = Timeline \"World\"\n// combine simply concatenates if both are non-null, otherwise behavior depends on `isNull` check in zipWith\nlet combinedText = textA |> TL.zipWith (sprintf \"%s %s\") textB\ntrace \"CombinedText\" combinedText\n\nprintfn \"\\nInitial CombinedText: %A\" (combinedText |> TL.at Now)\n// Expected Output (after trace):\n// [CombinedText at HH:mm:ss.fff] \"Hello World\"\n// Initial CombinedText: \"Hello World\"\n\nprintfn \"\\nSetting textA to null...\"\ntextA |> TL.define Now null\nprintfn \"CombinedText after textA is null: %A\" (combinedText |> TL.at Now)\n// Expected Output (after trace for update):\n// [CombinedText at HH:mm:ss.fff] null\n// CombinedText after textA is null: null\n\nprintfn \"\\nSetting textA back to 'Hi'...\"\ntextA |> TL.define Now \"Hi\"\nprintfn \"CombinedText after textA is 'Hi': %A\" (combinedText |> TL.at Now)\n// Expected Output (after trace for update):\n// [CombinedText at HH:mm:ss.fff] \"Hi World\"\n// CombinedText after textA is 'Hi': \"Hi World\"\n```\n\n*Timeline Diagram (Values over conceptual time steps for `sumTimeline`):*\n(現行の図を維持)\n\n```\nStep ------> S0 (Initial) ---- S1 (A to 15) ---- S2 (B to 25) --->\ncounterA:      10                  15                 15\ncounterB:      20                  20                 25\n-----------------------------------------------------------------\nsumTimeline:   30                  35                 40\n               ^                   ^                  ^\n               |                   |                  Update B causes re-evaluation\n               |                   Update A causes re-evaluation\n               Initial calculation: 10+20\n```\n\nThis example clearly demonstrates how `sumTimeline` reactively updates to reflect the sum of the latest non-`null` values from `counterA` and `counterB` whenever either of them changes. The `null` handling example with strings further clarifies the \"wait for both non-`null` values\" rule for actual `null` references.\n\n## 5.5 More Examples: Strings and Booleans (Foundation for Refined Monoids)\n\n`TL.zipWith`'s versatility shines when working with different data types and combining functions. Let's explore a couple more examples, including one that directly foreshadows how we will build our refined boolean Monoid combinators.\n\n**(1) String Concatenation (Revisiting `null` Handling)**\n\nAs seen in the previous section (5.4, example 6), `TL.zipWith` handles `null` inputs by producing a `null` output without invoking the combining function. This makes it safe for operations like string concatenation where operating on `null` directly would cause errors.\n\n**(2) Boolean Logic (The Foundation for `TL.or` and `TL.and`)**\n\nCombining `Timeline\u003Cbool>` instances is a very common requirement for representing logical conditions that change over time. `TL.zipWith` provides a natural way to do this by using F\\#'s built-in boolean operators `||` (OR) and `&&` (AND) as the combining functions.\n\n* **Example: Logical AND (`&&`)**\n\n    ```fsharp\n    open Timeline\n\n    // (Assuming 'trace' helper function from previous section is available)\n\n    let isUserLoggedIn = Timeline true\n    let isFormValid = Timeline false\n\n    let canSubmitForm = isUserLoggedIn |> TL.zipWith (&&) isFormValid\n    trace \"CanSubmitForm\" canSubmitForm\n\n    printfn \"Initial Can Submit: %b\" (canSubmitForm |> TL.at Now)\n    // Expected Output (after trace):\n    // [CanSubmitForm at HH:mm:ss.fff] false\n    // Initial Can Submit: false\n\n    printfn \"\\nSetting isFormValid to true...\"\n    isFormValid |> TL.define Now true\n    printfn \"Can Submit after form becomes valid: %b\" (canSubmitForm |> TL.at Now)\n    // Expected Output (after trace):\n    // [CanSubmitForm at HH:mm:ss.fff] true\n    // Can Submit after form becomes valid: true\n\n    printfn \"\\nSetting isUserLoggedIn to false...\"\n    isUserLoggedIn |> TL.define Now false\n    printfn \"Can Submit after user logs out: %b\" (canSubmitForm |> TL.at Now)\n    // Expected Output (after trace):\n    // [CanSubmitForm at HH:mm:ss.fff] false\n    // Can Submit after user logs out: false\n    ```\n\n  * **Example: Logical OR (`||`)**\n\n    ```fsharp\n    open Timeline\n\n    // (Assuming 'trace' helper function from previous section is available)\n\n    let hasAdminRights = Timeline false\n    let isEmergencyOverride = Timeline false\n\n    let allowSensitiveAction = hasAdminRights |> TL.zipWith (||) isEmergencyOverride\n    trace \"AllowSensitiveAction\" allowSensitiveAction\n\n    printfn \"Initial Allow Action: %b\" (allowSensitiveAction |> TL.at Now)\n    // Expected Output: false\n\n    printfn \"\\nSetting isEmergencyOverride to true...\"\n    isEmergencyOverride |> TL.define Now true\n    printfn \"Allow Action after emergency override: %b\" (allowSensitiveAction |> TL.at Now)\n    // Expected Output: true\n    ```\n\n**A Note on Refined Monoidal Combinators:**\nThese simple examples, like `isUserLoggedIn |> TL.zipWith (&&) isFormValid`, are precisely how our **refined boolean combinators, `TL.or` and `TL.and`, will be implemented** in **Chapter 7: Boolean Combinators with `TL.zipWith`**.\n`TL.zipWith`, by applying standard F\\# functions like `(&&)` or `(||)` (which themselves form Monoids with `bool` values and respective identities `true` and `false`), effectively \"lifts\" these boolean Monoidal operations into the `Timeline\u003Cbool>` context. This approach provides an intuitive and direct way to achieve Monoid-like behavior for reactive boolean conditions, contrasting with the \"naive\" implementations discussed in Chapter 3 which were built from more fundamental `Timeline` operations.\n\n## 5.6 Optimizing Output: `zipWith` and `TL.distinctUntilChanged`\n\nA key characteristic of `TL.zipWith` is that it re-evaluates the combining function and propagates the result whenever *either* of its input timelines updates (and both inputs are currently non-`null`). However, as identified as a practical concern in **Chapter 4: Need for General Combinators and Efficiency**, and addressed by `TL.distinctUntilChanged` in **Chapter 6: Filtering Timelines: `TL.distinctUntilChanged`**, the *result* of this combination might not actually change even if an input did.\n\nFor instance, consider `maxTimeline = timelineA |> TL.zipWith max timelineB`:\n\n* If `timelineA` is `5` and `timelineB` is `3`, `maxTimeline` becomes `5`.\n  * If `timelineB` then updates from `3` to `2` (while `timelineA` remains `5`), `TL.zipWith` re-evaluates `max 5 2`, which is still `5`.\n    In this scenario, the `maxTimeline` would be updated with the value `5` again. While logically correct from a point-wise evaluation perspective, this re-propagation of an unchanged value can lead to unnecessary downstream computations or UI re-renders.\n\n**The Solution (from Chapter 6): Apply `TL.distinctUntilChanged`**\n\nTo prevent these redundant updates, we should apply `TL.distinctUntilChanged` to the *output timeline* produced by `TL.zipWith`:\n\n```fsharp\nopen Timeline\n\n// (Assuming 'trace' helper function is available)\n\nlet valX = Timeline 10\nlet valY = Timeline 5\nlet isSumGreaterThan20 (x:int) (y:int) = (x + y) > 20\n\nlet sumIsBig_Raw = valX |> TL.zipWith isSumGreaterThan20 valY // Use TL.zipWith\ntrace \"SumIsBig_Raw\" sumIsBig_Raw\n\nlet sumIsBig_Optimized =\n    (valX |> TL.zipWith isSumGreaterThan20 valY)\n    |> TL.distinctUntilChanged // Use TL.distinctUntilChanged\ntrace \"SumIsBig_Optimized\" sumIsBig_Optimized\n\nprintfn \"Initial Raw: %b, Optimized: %b\" (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)\n// Expected Output:\n// [SumIsBig_Raw at ...] false\n// [SumIsBig_Optimized at ...] false\n// Initial Raw: false, Optimized: false\n\nprintfn \"\\nUpdating valY to 10 (Sum = 20, still not > 20)\"\nvalY |> TL.define Now 10\nprintfn \"After valY to 10, Raw: %b, Optimized: %b\" (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)\n// Expected Output:\n// [SumIsBig_Raw at ...] false\n// After valY to 10, Raw: false, Optimized: false\n\nprintfn \"\\nUpdating valX to 11 (Sum = 21, now > 20)\"\nvalX |> TL.define Now 11\nprintfn \"After valX to 11, Raw: %b, Optimized: %b\" (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)\n// Expected Output:\n// [SumIsBig_Raw at ...] true\n// [SumIsBig_Optimized at ...] true\n// After valX to 11, Raw: true, Optimized: true\n\nprintfn \"\\nUpdating valY to 12 (Sum = 23, still > 20)\"\nvalY |> TL.define Now 12\nprintfn \"After valY to 12, Raw: %b, Optimized: %b\" (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)\n// Expected Output:\n// [SumIsBig_Raw at ...] true\n// After valY to 12, Raw: true, Optimized: true\n```\n\nThe `sumIsBig_Optimized` timeline will only propagate an update when the actual boolean result of `isSumGreaterThan20` changes. This is a common and recommended pattern: apply `TL.distinctUntilChanged` to the output of `TL.zipWith` (and other combinators) if you only care about actual changes in the resulting value.\n\n**Recap: Why Keep `zipWith` and `distinctUntilChanged` Separate?** (Referencing Chapter 6 arguments)\n\n1.  **Separation of Concerns:** `TL.zipWith`'s core responsibility is point-wise *combination*. `TL.distinctUntilChanged`'s responsibility is *filtering* based on value changes. Keeping them separate makes each combinator simpler and more focused.\n2.  **Flexibility:** Filtering out unchanged values is not always the desired behavior. `TL.zipWith` by itself allows for this. The developer can *choose* to add `TL.distinctUntilChanged`.\n3.  **Type Constraints:** `TL.distinctUntilChanged` requires its type parameter `'a` to support equality comparison (`'a : equality`). `TL.zipWith`'s output type `'c` does not inherently need to be equality comparable.\n\n## 5.7 Under the Hood: `zipWith` and `DependencyCore` (Conceptual)\n\nThe `TL.zipWith` combinator, like other functions that create reactive dependencies such as `TL.map` (Unit 4, Chapter 3) and `TL.bind` (Unit 4, Chapter 6), relies on the internal `DependencyCore` system. `DependencyCore` is the engine responsible for managing the graph of dependencies between timelines and propagating updates.\n\nWhen `resultTimeline = timelineA |> TL.zipWith f timelineB` is executed:\n\n1.  `TL.zipWith` first calculates the initial value for `resultTimeline` based on the current values of `timelineA` and `timelineB` and the `null`-handling rules.\n2.  It then registers **two** primary dependencies with `DependencyCore`:\n      * A dependency from `timelineA` to `resultTimeline`: When `timelineA` is updated (via `TL.define`), a reaction is triggered. This reaction will get the new value of `timelineA`, the *latest current value* of `timelineB`, apply `f` (if both non-`null`), and update `resultTimeline`.\n      * A dependency from `timelineB` to `resultTimeline`: A symmetrical reaction is registered for updates on `timelineB`.\n\nThis setup ensures that `resultTimeline` reactively reflects the point-wise combination. The actual mechanics of callback registration and invocation are managed by `DependencyCore`.\n\n*(A more detailed conceptual sketch of `zipWith`'s internal F\\# logic using `DependencyCore` was presented in the original `7-zipwith.md` (section 7.7). The core idea remains the same: `resultTimeline` becomes dependent on updates from *both* `timelineA` and `timelineB`.)*\n\n## 5.8 `zipWith`: The Engine for Combined Reactive Logic\n\n`TL.zipWith` is a cornerstone of the `Timeline` library. It provides an essential, versatile, and general-purpose mechanism for taking two independent timelines and producing a new timeline whose value, at any point in time, is derived from their combined latest values, transformed by a user-defined function.\n\nIts significance lies in its role as a powerful **engine** for many practical reactive patterns:\n\n* **Arbitrary Type Combinations:** It can combine timelines of different types (`Timeline\u003C'a>` and `Timeline\u003C'b>`) to produce a timeline of a third type (`Timeline\u003C'c>`).\n  * **Consistent `null` Propagation:** It correctly manages `null` references according to the library's established philosophy. (Note: As discussed in 5.3, `Option.None` values are passed through to the combining function unless pre-processed).\n  * **Foundation for Specific Combinators:** It forms the direct implementation basis for our refined boolean Monoid combinators, `TL.or` and `TL.and` (Chapter 7).\n  * **Enables Complex Data Flow:** By combining `TL.zipWith` with other combinators like `TL.map` and `TL.distinctUntilChanged`, sophisticated data transformation and reactive logic pipelines can be constructed.\n\nWith `TL.distinctUntilChanged` (Chapter 6) for refining event streams and `TL.zipWith` (this chapter) for general point-wise binary combination now understood, we possess the key practical tools for building a wide array of robust and efficient combined reactive behaviors. We are now well-prepared to apply these to construct highly usable logical combinators for boolean timelines and explore further patterns of aggregation.","src/content/docs/en/book/unit-5/section-1/5-zipwith.md","ce73491631b084f0",{"html":1776,"metadata":1777},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter introduces \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> as a fundamental and highly versatile combinator for the \u003Cstrong>point-wise\u003C/strong> combination of two timelines. We will explore the meaning of “point-wise” operations in the context of \u003Ccode dir=\"auto\">Timeline\u003C/code> and the Block Universe model, then delve into \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s mechanics, how it handles \u003Ccode dir=\"auto\">null\u003C/code> (and \u003Ccode dir=\"auto\">Option\u003C/code> types like \u003Ccode dir=\"auto\">None\u003C/code>), its practical applications, and its crucial role as a building block for more complex, practical reactive patterns.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"51-understanding-point-wise-operations\">5.1 Understanding “Point-wise” Operations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#51-understanding-point-wise-operations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.1 Understanding “Point-wise” Operations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Before diving into \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> itself, let’s clarify the term \u003Cstrong>“point-wise”\u003C/strong> (or “element-wise”). While it might sound academic, the underlying concept is quite intuitive and fundamental to how we combine data in many areas, including mathematics and programming.\u003C/p>\n\u003Cp>\u003Cstrong>What Does “Point-wise” Mean in General?\u003C/strong>\u003C/p>\n\u003Cp>At its core, a “point-wise” operation refers to applying an operation to corresponding parts (the “points” or “elements”) of two or more data structures to produce a new data structure. The key idea is that the operation on one part is independent of the operation on other parts, except that they occur at corresponding positions.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>In Mathematics:\u003C/strong>\n* \u003Cstrong>Functions:\u003C/strong> If you have two functions, say $f(x)$ and $g(x)$, their point-wise sum $(f+g)(x)$ is a new function defined as $f(x) + g(x)$ for every point $x$ in their common domain. The addition at point $x_1$ doesn’t affect the addition at point $x_2$.\n* \u003Cstrong>Vectors/Matrices:\u003C/strong> Adding two vectors $\\vec{v} = (v_1, v_2, v_3)$ and $\\vec{w} = (w_1, w_2, w_3)$ point-wise (or element-wise) results in a new vector $\\vec{u} = (v_1+w_1, v_2+w_2, v_3+w_3)$. Each component of the resulting vector is calculated independently using only the corresponding components of the input vectors.\n\u003Cul>\n\u003Cli>\u003Cstrong>In Programming (Lists/Arrays):\u003C/strong>\n\u003Cul>\n\u003Cli>If you have two lists, \u003Ccode dir=\"auto\">listA = [1, 2, 3]\u003C/code> and \u003Ccode dir=\"auto\">listB = [4, 5, 6]\u003C/code>, a point-wise multiplication (assuming they are of the same length) might produce \u003Ccode dir=\"auto\">[1*4, 2*5, 3*6] = [4, 10, 18]\u003C/code>. The first element of the result depends only on the first elements of the inputs, the second on the second, and so on.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>The term “point-wise” emphasizes this correspondence at each “point” or “index” of the structures being combined.\u003C/p>\n\u003Cp>\u003Cstrong>“Point-wise” in the Context of \u003Ccode dir=\"auto\">Timeline\u003C/code> and FRP\u003C/strong>\u003C/p>\n\u003Cp>How does this apply to \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> in our Functional Reactive Programming (FRP) model?\u003C/p>\n\u003Cp>Recall that a \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> represents a value that changes over time. We can think of a \u003Ccode dir=\"auto\">Timeline\u003C/code> as a sequence of values indexed by time. Each “point” on the timeline corresponds to a specific instant in time, and at that instant, the \u003Ccode dir=\"auto\">Timeline\u003C/code> has a particular value.\u003C/p>\n\u003Cp>Therefore, a \u003Cstrong>point-wise operation on two \u003Ccode dir=\"auto\">Timeline\u003C/code>s, say \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code>, means that to determine the value of the resulting \u003Ccode dir=\"auto\">timelineC\u003C/code> at any specific instant \u003Ccode dir=\"auto\">t\u003C/code>, we only need to look at the values of \u003Ccode dir=\"auto\">timelineA\u003C/code> at instant \u003Ccode dir=\"auto\">t\u003C/code> (i.e., \u003Ccode dir=\"auto\">A(t)\u003C/code>) and \u003Ccode dir=\"auto\">timelineB\u003C/code> at instant \u003Ccode dir=\"auto\">t\u003C/code> (i.e., \u003Ccode dir=\"auto\">B(t)\u003C/code>).\u003C/strong> The value \u003Ccode dir=\"auto\">C(t)\u003C/code> is then some function \u003Ccode dir=\"auto\">f(A(t), B(t))\u003C/code>. The calculation of \u003Ccode dir=\"auto\">C(t_1)\u003C/code> is independent of the calculation of \u003Ccode dir=\"auto\">C(t_2)\u003C/code> (where $t_1 \\neq t_2$), except that they both follow the same rule \u003Ccode dir=\"auto\">f\u003C/code> applied to their respective “point-in-time” input values.\u003C/p>\n\u003Cp>\u003Cstrong>Connecting to the Block Universe Model\u003C/strong>\u003C/p>\n\u003Cp>The Block Universe model (Unit 4, Chapter 0 &#x26; 2) posits that all of time – past, present, and future – exists as a complete, immutable block. Within this block, for any given \u003Ccode dir=\"auto\">Timeline A\u003C/code> and \u003Ccode dir=\"auto\">Timeline B\u003C/code>, their values at every specific time coordinate \u003Ccode dir=\"auto\">t\u003C/code> (denoted $A_t$ and $B_t$) are definitively fixed.\u003C/p>\n\u003Cp>When we perform a point-wise operation \u003Ccode dir=\"auto\">f\u003C/code> to combine \u003Ccode dir=\"auto\">Timeline A\u003C/code> and \u003Ccode dir=\"auto\">Timeline B\u003C/code> into a new \u003Ccode dir=\"auto\">Timeline C\u003C/code>, we are essentially defining that for \u003Cem>every\u003C/em> time coordinate \u003Ccode dir=\"auto\">t\u003C/code> in the Block Universe, the value of \u003Ccode dir=\"auto\">Timeline C\u003C/code> at that coordinate, $C_t$, is determined by $f(A_t, B_t)$.\u003C/p>\n\u003Cul>\n\u003Cli>$TimelineA: [A_{t1}, A_{t2}, A_{t3}, …]$\n\u003Cul>\n\u003Cli>$TimelineB: [B_{t1}, B_{t2}, B_{t3}, …]$\u003C/li>\n\u003Cli>Operation: $f(_, _)$\u003C/li>\n\u003Cli>$TimelineC: [f(A_{t1}, B_{t1}), f(A_{t2}, B_{t2}), f(A_{t3}, B_{t3}), …]$\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>The \u003Ccode dir=\"auto\">Timeline\u003C/code> library, through its reactive mechanisms, then simulates an observer moving through this Block Universe. When the value of \u003Ccode dir=\"auto\">Timeline A\u003C/code> or \u003Ccode dir=\"auto\">Timeline B\u003C/code> is observed to change at the current \u003Ccode dir=\"auto\">Now\u003C/code> (i.e., \u003Ccode dir=\"auto\">TL.define\u003C/code> is called), the library ensures that the value of \u003Ccode dir=\"auto\">Timeline C\u003C/code> at that same \u003Ccode dir=\"auto\">Now\u003C/code> is re-calculated according to the point-wise rule $f(A_{Now}, B_{Now})$ and this new value for \u003Ccode dir=\"auto\">C_{Now}\u003C/code> is propagated.\u003C/p>\n\u003Cp>This “point-wise” nature is crucial because it simplifies reasoning about combined timelines. To understand the value of a combined timeline \u003Cem>now\u003C/em>, you only need to know the values of its constituent timelines \u003Cem>now\u003C/em>. You don’t need to consider their past history in a complex way (unless the combining function \u003Ccode dir=\"auto\">f\u003C/code> itself introduces such a dependency, which is a separate concern from the point-wise application mechanism itself).\u003C/p>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> as the Embodiment of Point-wise Combination\u003C/strong>\u003C/p>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> combinator, which we will introduce formally in the next section, is the primary tool in this library for performing such point-wise combinations of two timelines. It takes two input timelines and a binary function, and it produces a new timeline. This new timeline’s value at any given moment is the result of applying the binary function to the “simultaneous” or “current” values of the two input timelines.\u003C/p>\n\u003Cp>The name \u003Ccode dir=\"auto\">zipWith\u003C/code> itself hints at this:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">zip\u003C/code>\u003C/strong>: Like a zipper bringing together corresponding teeth from two sides, \u003Ccode dir=\"auto\">zipWith\u003C/code> conceptually pairs up the values from the two timelines that occur at the same “point” in time.\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">With\u003C/code>\u003C/strong>: It then applies a given function \u003Cem>With\u003C/em> these paired-up values.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Understanding “point-wise” operations is key to understanding how \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> functions and why it’s such a powerful and fundamental tool for building reactive systems with \u003Ccode dir=\"auto\">Timeline\u003C/code>s. It allows us to define complex, derived reactive values in a clear, declarative, and temporally consistent manner.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"52-tlzipwith-zipping-values-over-time\">5.2 \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>: Zipping Values Over Time\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#52-tlzipwith-zipping-values-over-time\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.2 TL.zipWith: Zipping Values Over Time”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now that we have a solid understanding of “point-wise” operations, we can formally introduce \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. This combinator is the primary mechanism provided by the \u003Ccode dir=\"auto\">Timeline\u003C/code> library for the general-purpose, point-wise combination of two timelines.\u003C/p>\n\u003Cp>\u003Cstrong>Analogy Revisited:\u003C/strong>\u003C/p>\n\u003Cp>As mentioned in the previous section, the name \u003Ccode dir=\"auto\">zipWith\u003C/code> is quite descriptive.\nThink of the \u003Ccode dir=\"auto\">List.zip\u003C/code> function in F# (or similar functions in other languages), which takes two lists, say \u003Ccode dir=\"auto\">[1; 2; 3]\u003C/code> and \u003Ccode dir=\"auto\">[\"a\"; \"b\"; \"c\"]\u003C/code>, and produces a list of pairs: \u003Ccode dir=\"auto\">[(1, \"a\"); (2, \"b\"); (3, \"c\")]\u003C/code>. Then, imagine applying a function to each of these pairs (like \u003Ccode dir=\"auto\">List.map\u003C/code> on the zipped list).\n\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> performs a conceptually similar operation, but for \u003Ccode dir=\"auto\">Timeline\u003C/code> instances: it “zips” the sequences of values produced by two timelines as they evolve over time and applies a specified \u003Cem>combining function\u003C/em> to each pair of “simultaneous” or “current” values observed at each “point” in time.\u003C/p>\n\u003Cp>\u003Cstrong>Signature Breakdown:\u003C/strong>\u003C/p>\n\u003Cp>The type signature of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is designed to facilitate a natural pipelining style (\u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code>).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming Timeline&#x3C;'a> type and Now value/type are defined\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL functions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Intended usage with pipeline: timelineA |> TL.zipWith f timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This means 'timelineA' provides the first argument to 'f', and 'timelineB' provides the second.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Signature reflects parameters for currying to achieve this:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">val\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">zipWith\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'b\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">,\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'c\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'b \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'c\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">) ->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'b\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'c\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module TL =    // Assuming Timeline\u003C&#x27;a> type and Now value/type are defined    // ... other TL functions ...    // Intended usage with pipeline: timelineA |> TL.zipWith f timelineB    // This means &#x27;timelineA&#x27; provides the first argument to &#x27;f&#x27;, and &#x27;timelineB&#x27; provides the second.    // Signature reflects parameters for currying to achieve this:    val zipWith\u003C&#x27;a, &#x27;b, &#x27;c> : (&#x27;a -> &#x27;b -> &#x27;c) -> Timeline\u003C&#x27;b> -> Timeline\u003C&#x27;a> -> Timeline\u003C&#x27;c>\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Let’s dissect this:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">('a -> 'b -> 'c)\u003C/code> (The Combining Function \u003Ccode dir=\"auto\">f\u003C/code>):\u003C/strong> This is the first argument passed to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. It’s a standard F# function that expects:\u003C/p>\n\u003Cul>\n\u003Cli>a value of type \u003Ccode dir=\"auto\">'a\u003C/code> as its \u003Cem>first\u003C/em> parameter.\u003C/li>\n\u003Cli>and a value of type \u003Ccode dir=\"auto\">'b\u003C/code> as its \u003Cem>second\u003C/em> parameter.\u003C/li>\n\u003Cli>It returns a new value of type \u003Ccode dir=\"auto\">'c\u003C/code>.\nThis function \u003Ccode dir=\"auto\">f\u003C/code> encapsulates the specific logic for \u003Cem>how\u003C/em> the two point-in-time values should be merged or combined.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'b>\u003C/code> (Timeline for \u003Ccode dir=\"auto\">f\u003C/code>’s second argument):\u003C/strong> This is the second argument passed to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. The current value of this timeline will be supplied as the \u003Cem>second\u003C/em> argument (of type \u003Ccode dir=\"auto\">'b'\u003C/code>) to the combining function \u003Ccode dir=\"auto\">f\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> (Timeline for \u003Ccode dir=\"auto\">f\u003C/code>’s first argument):\u003C/strong> This is the third argument passed to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>. The current value of this timeline will be supplied as the \u003Cem>first\u003C/em> argument (of type \u003Ccode dir=\"auto\">'a'\u003C/code>) to the combining function \u003Ccode dir=\"auto\">f\u003C/code>. In the idiomatic pipelined usage \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code>, \u003Ccode dir=\"auto\">timelineA\u003C/code> is effectively passed as this third argument.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'c>\u003C/code> (Result Timeline):\u003C/strong> The \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> operation returns a \u003Cem>new\u003C/em> timeline. This \u003Ccode dir=\"auto\">resultTimeline\u003C/code> will hold values of type \u003Ccode dir=\"auto\">'c'\u003C/code>, which are the outputs produced by applying the combining function \u003Ccode dir=\"auto\">f\u003C/code> to the point-wise values from the input timelines.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Naming Rationale (\u003Ccode dir=\"auto\">zipWith\u003C/code>)\u003C/strong>\nThe name \u003Ccode dir=\"auto\">zipWith\u003C/code> is chosen deliberately (and is a common term in functional programming, e.g., \u003Ccode dir=\"auto\">List.zipWith\u003C/code> in F# and Haskell’s \u003Ccode dir=\"auto\">zipWith\u003C/code> for lists) because it strongly implies the semantics of pairing up corresponding elements (values at the same point in time) from two sources and then applying a function to those pairs. It’s more descriptive of this specific “paired application at each point” than a more generic name like \u003Ccode dir=\"auto\">map2\u003C/code> (which often implies a curried function applied to two values, but not necessarily the “zipping” of two structured sequences).\u003C/p>\n\u003Cp>\u003Cstrong>Rationale for Pipelined Usage (\u003Ccode dir=\"auto\">A |> TL.zipWith f B\u003C/code>)\u003C/strong>\u003C/p>\n\u003Cp>The preference for the pipelined usage \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code> stems from several advantages in clarity and consistency, especially when dealing with operations where argument order to the combining function \u003Ccode dir=\"auto\">f\u003C/code> matters (i.e., \u003Ccode dir=\"auto\">f\u003C/code> is non-commutative):\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Clear Data Flow:\u003C/strong> This style emphasizes \u003Ccode dir=\"auto\">timelineA\u003C/code> as the primary data source or starting point of a data flow. The operation \u003Ccode dir=\"auto\">f\u003C/code> is then applied to \u003Ccode dir=\"auto\">timelineA\u003C/code>, using \u003Ccode dir=\"auto\">timelineB\u003C/code> as an additional, “secondary” data source. This aligns well with the general F# philosophy of piping data through a series of transformations.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Unambiguous Argument Order for the Combining Function (\u003Ccode dir=\"auto\">f\u003C/code>):\u003C/strong>\nWhen using the \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code> pattern, a clear convention is established:\u003C/p>\n\u003Cul>\n\u003Cli>The value from \u003Ccode dir=\"auto\">timelineA\u003C/code> (the left-hand side of \u003Ccode dir=\"auto\">|>\u003C/code>) corresponds to the \u003Cem>first\u003C/em> argument (type \u003Ccode dir=\"auto\">'a'\u003C/code>) of the combining function \u003Ccode dir=\"auto\">f: 'a -> 'b -> 'c\u003C/code>.\u003C/li>\n\u003Cli>The value from \u003Ccode dir=\"auto\">timelineB\u003C/code> (the explicit argument to \u003Ccode dir=\"auto\">TL.zipWith f\u003C/code>) corresponds to the \u003Cem>second\u003C/em> argument (type \u003Ccode dir=\"auto\">'b'\u003C/code>) of \u003Ccode dir=\"auto\">f\u003C/code>.\nThis convention ensures that even if \u003Ccode dir=\"auto\">f\u003C/code> is non-commutative (e.g., subtraction, string formatting where order matters), programmers can reliably predict the outcome.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Consistency with F# Style Guide:\u003C/strong>\nAs discussed in this project’s F# Style Guide (Section 3), the expression \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code> fits the preferred style \u003Ccode dir=\"auto\">dataInstance |> ModuleName.functionName additionalArguments\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">dataInstance\u003C/code> corresponds to \u003Ccode dir=\"auto\">timelineA\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">ModuleName.functionName\u003C/code> corresponds to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">additionalArguments\u003C/code> correspond to \u003Ccode dir=\"auto\">f\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Avoiding Potential Ambiguity of Symmetric Calls:\u003C/strong>\nIf a symmetric calling style like \u003Ccode dir=\"auto\">TL.zipWith f timelineA timelineB\u003C/code> (assuming a different signature for \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>) were equally encouraged, it could lead to ambiguity regarding which timeline maps to which argument of \u003Ccode dir=\"auto\">f\u003C/code> without constantly referring back to the function signature. The pipelined approach visually distinguishes the roles more effectively.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Therefore, for \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, we will primarily use and document the pipelined form \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"53-how-zipwith-behaves-initialization-and-updates\">5.3 How \u003Ccode dir=\"auto\">zipWith\u003C/code> Behaves: Initialization and Updates\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#53-how-zipwith-behaves-initialization-and-updates\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.3 How zipWith Behaves: Initialization and Updates”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Understanding \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s behavior during its initialization and in response to updates from its source timelines is crucial for using it correctly. This behavior, especially concerning \u003Ccode dir=\"auto\">null\u003C/code> values (and by extension, how it interacts with \u003Ccode dir=\"auto\">Option\u003C/code> types if they are used to represent absence), strictly follows the \u003Ccode dir=\"auto\">null\u003C/code> handling philosophy established in \u003Cstrong>Chapter 0: Handling Absence: \u003Ccode dir=\"auto\">null\u003C/code> vs. \u003Ccode dir=\"auto\">Option\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cstrong>The “Wait for Both Non-\u003Ccode dir=\"auto\">null\u003C/code> Values” Rule (Initialization and Updates):\u003C/strong>\u003C/p>\n\u003Cp>The core principle governing \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is that the combining function \u003Ccode dir=\"auto\">f\u003C/code> is only ever called if \u003Cstrong>both\u003C/strong> input timelines currently hold values that are \u003Cstrong>not considered absent\u003C/strong> according to the library’s primary mechanism for checking absence (i.e., \u003Ccode dir=\"auto\">isNull\u003C/code>).\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Initialization:\u003C/strong>\nWhen a \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is created using \u003Ccode dir=\"auto\">timelineA |> TL.zipWith f timelineB\u003C/code>:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> immediately inspects the \u003Cem>current\u003C/em> values of \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> (e.g., via \u003Ccode dir=\"auto\">TL.at Now\u003C/code>).\u003C/li>\n\u003Cli>It uses the \u003Ccode dir=\"auto\">isNull\u003C/code> helper (from Chapter 0) to check if \u003Cstrong>both\u003C/strong> these initial values are non-\u003Ccode dir=\"auto\">null\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>If both \u003Ccode dir=\"auto\">timelineA |> TL.at Now\u003C/code> and \u003Ccode dir=\"auto\">timelineB |> TL.at Now\u003C/code> are non-\u003Ccode dir=\"auto\">null\u003C/code>:\u003C/strong>\nThe combining function \u003Ccode dir=\"auto\">f\u003C/code> is immediately invoked with these two initial values. The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is then initialized with this computed value.\u003C/li>\n\u003Cli>\u003Cstrong>If either \u003Ccode dir=\"auto\">timelineA |> TL.at Now\u003C/code> or \u003Ccode dir=\"auto\">timelineB |> TL.at Now\u003C/code> (or both) initially holds \u003Ccode dir=\"auto\">null\u003C/code>:\u003C/strong>\nThe combining function \u003Ccode dir=\"auto\">f\u003C/code> is \u003Cstrong>not\u003C/strong> called. The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is initialized with \u003Ccode dir=\"auto\">null\u003C/code> (if \u003Ccode dir=\"auto\">'c\u003C/code> is a reference type or \u003Ccode dir=\"auto\">Nullable&#x3C;'c>\u003C/code>) or the default value for its type (e.g., \u003Ccode dir=\"auto\">0\u003C/code> for \u003Ccode dir=\"auto\">int\u003C/code>, \u003Ccode dir=\"auto\">false\u003C/code> for \u003Ccode dir=\"auto\">bool\u003C/code>) using \u003Ccode dir=\"auto\">Unchecked.defaultof&#x3C;'c>\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Reacting to Changes (Updates):\u003C/strong>\nOnce initialized, the \u003Ccode dir=\"auto\">resultTimeline\u003C/code> monitors both \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> for updates. When an update occurs on either source timeline:\u003C/p>\n\u003Col>\n\u003Cli>The internal logic of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is triggered.\u003C/li>\n\u003Cli>It retrieves the \u003Cem>latest current values\u003C/em> from \u003Cstrong>both\u003C/strong> \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003Cli>It again uses \u003Ccode dir=\"auto\">isNull\u003C/code> to check if \u003Cstrong>both\u003C/strong> these latest current values are non-\u003Ccode dir=\"auto\">null\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>If both current values are non-\u003Ccode dir=\"auto\">null\u003C/code>:\u003C/strong>\nThe combining function \u003Ccode dir=\"auto\">f\u003C/code> is applied. The resulting value is defined onto \u003Ccode dir=\"auto\">resultTimeline\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>If either of the latest current values is \u003Ccode dir=\"auto\">null\u003C/code>:\u003C/strong>\nThe combining function \u003Ccode dir=\"auto\">f\u003C/code> is \u003Cstrong>not\u003C/strong> called. The \u003Ccode dir=\"auto\">resultTimeline\u003C/code> is defined with \u003Ccode dir=\"auto\">null\u003C/code> (or \u003Ccode dir=\"auto\">Unchecked.defaultof&#x3C;'c>\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Important Note on \u003Ccode dir=\"auto\">Option\u003C/code> Types (e.g., \u003Ccode dir=\"auto\">Timeline&#x3C;int option>\u003C/code>):\u003C/strong>\nThe \u003Ccode dir=\"auto\">isNull\u003C/code> helper function, as typically defined, checks for \u003Ccode dir=\"auto\">null\u003C/code> references. It does \u003Cstrong>not\u003C/strong> treat \u003Ccode dir=\"auto\">None\u003C/code> (from an \u003Ccode dir=\"auto\">option\u003C/code> type) as \u003Ccode dir=\"auto\">null\u003C/code>. Therefore, if \u003Ccode dir=\"auto\">timelineA\u003C/code> is a \u003Ccode dir=\"auto\">Timeline&#x3C;'a option>\u003C/code> and its current value is \u003Ccode dir=\"auto\">None\u003C/code>, \u003Ccode dir=\"auto\">isNull (timelineA |> TL.at Now)\u003C/code> will be \u003Ccode dir=\"auto\">false\u003C/code> (unless \u003Ccode dir=\"auto\">'a\u003C/code> itself could be \u003Ccode dir=\"auto\">null\u003C/code> and the value is \u003Ccode dir=\"auto\">Some null\u003C/code>, which is an edge case not directly supported by standard F# options unless \u003Ccode dir=\"auto\">'a\u003C/code> is constrained to be a reference type or nullable value type).\nThis means that if you use \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> with \u003Ccode dir=\"auto\">Timeline&#x3C;'a option>\u003C/code> and \u003Ccode dir=\"auto\">Timeline&#x3C;'b option>\u003C/code>, and one of them holds \u003Ccode dir=\"auto\">None\u003C/code>, the \u003Ccode dir=\"auto\">None\u003C/code> value itself \u003Cstrong>will be passed\u003C/strong> to your combining function \u003Ccode dir=\"auto\">f\u003C/code>. Your combining function \u003Ccode dir=\"auto\">f: 'a option -> 'b option -> 'c\u003C/code> would then be responsible for handling the \u003Ccode dir=\"auto\">None\u003C/code> cases as appropriate for its logic (e.g., using pattern matching or \u003Ccode dir=\"auto\">Option.map\u003C/code>/\u003Ccode dir=\"auto\">Option.bind\u003C/code>).\nThe “Wait for Both Non-\u003Ccode dir=\"auto\">null\u003C/code> Values” rule of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> applies specifically to \u003Ccode dir=\"auto\">null\u003C/code> references as detected by the \u003Ccode dir=\"auto\">isNull\u003C/code> helper. It does not automatically unwrap \u003Ccode dir=\"auto\">option\u003C/code> types or treat \u003Ccode dir=\"auto\">None\u003C/code> as a reason to skip the combining function. If you wish for \u003Ccode dir=\"auto\">None\u003C/code> to be treated similarly to \u003Ccode dir=\"auto\">null\u003C/code> by \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (i.e., for the combining function not to be called when \u003Ccode dir=\"auto\">None\u003C/code> is present, and for the result to become \u003Ccode dir=\"auto\">null\u003C/code> or a default), you would need to explicitly transform the \u003Ccode dir=\"auto\">Timeline&#x3C;'a option>\u003C/code> \u003Cem>before\u003C/em> passing it to \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (e.g., by using \u003Ccode dir=\"auto\">TL.map Option.toObj\u003C/code> if \u003Ccode dir=\"auto\">None\u003C/code> should become \u003Ccode dir=\"auto\">null\u003C/code>, assuming \u003Ccode dir=\"auto\">'a\u003C/code> is a reference type) or by using \u003Ccode dir=\"auto\">TL.bind\u003C/code> to conditionally proceed only if the value is \u003Ccode dir=\"auto\">Some\u003C/code>.\u003C/p>\n\u003Cp>\u003Cem>Conceptual Initial State Diagram:\u003C/em>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineA: |---A1---| (current value at Now, may be null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineB: |---B1---| (current value at Now, may be null)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">          \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TL.zipWith f\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">             \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">|\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">             \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">V\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineC: |---C1---| (C1 = f(A1, B1) if A1 &#x26; B1 non-null, else null/default_of&#x3C;'c>)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"TimelineA: |---A1---| (current value at Now, may be null)TimelineB: |---B1---| (current value at Now, may be null)          TL.zipWith f             |             VTimelineC: |---C1---| (C1 = f(A1, B1) if A1 &#x26; B1 non-null, else null/default_of\u003C&#x27;c>)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>Conceptual Update Diagram (e.g., TimelineA updates):\u003C/em>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineA (before update): |---A_old---|\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineA (after update):  |------A_new------| (current value at Now)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineB (current state): |------B_curr-----| (current value at Now)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">                 \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TL.zipWith f\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">|\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">V\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">TimelineC (updates to):    |------C_new------| (C_new = f(A_new, B_curr) if both non-null, else null/default_of&#x3C;'c>)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"TimelineA (before update): |---A_old---|TimelineA (after update):  |------A_new------| (current value at Now)TimelineB (current state): |------B_curr-----| (current value at Now)                 TL.zipWith f                    |                    VTimelineC (updates to):    |------C_new------| (C_new = f(A_new, B_curr) if both non-null, else null/default_of\u003C&#x27;c>)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This consistent \u003Ccode dir=\"auto\">null\u003C/code> propagation behavior (for actual \u003Ccode dir=\"auto\">null\u003C/code> references) is a direct consequence of the library’s philosophy outlined in Chapter 0.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"54-a-simple-example-summing-two-number-timelines\">5.4 A Simple Example: Summing Two Number Timelines\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#54-a-simple-example-summing-two-number-timelines\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.4 A Simple Example: Summing Two Number Timelines”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s illustrate \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> with a classic example: creating a timeline that reactively represents the sum of two independent counter timelines.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming Timeline factory and TL module are available\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Helper to observe timeline changes (for example purposes)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">trace\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">name\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use TL.map as per style guide\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using a more robust null check for general types\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">valueStr\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isNull value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">null\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming isNull is globally accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">[\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> at \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">] \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> name \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">System.DateTime.Now.ToString\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">HH:mm:ss.fff\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">))\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> valueStr\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Create source timelines\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">counterA\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initialized with a non-null int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">counterB\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">20\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initialized with a non-null int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial State of Sources:\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">  CounterA: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counterA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">  CounterB: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counterB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Create the sum timeline using TL.zipWith\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumTimeline\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> counterA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(+)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> counterB \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Pipelined usage\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Optional: trace the sumTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">SumTimeline\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3. Check the initial value of sumTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial Sum: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace initialization):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumTimeline at HH:mm:ss.fff] 30\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial Sum: 30\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 4. Update counterA\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updating CounterA to 15...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counterA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">15\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Current Sum after A updated: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace for update):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumTimeline at HH:mm:ss.fff] 35\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Current Sum after A updated: 35\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 5. Update counterB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updating CounterB to 25...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">counterB \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">25\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Current Sum after B updated: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace for update):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumTimeline at HH:mm:ss.fff] 40\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Current Sum after B updated: 40\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 6. Example with potential nulls (using strings for clarity)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">textA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">textB\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">World\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// combine simply concatenates if both are non-null, otherwise behavior depends on `isNull` check in zipWith\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">combinedText\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> textA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> textB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">CombinedText\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> combinedText\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial CombinedText: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedText \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CombinedText at HH:mm:ss.fff] \"Hello World\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial CombinedText: \"Hello World\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Setting textA to null...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">textA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">CombinedText after textA is null: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedText \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace for update):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CombinedText at HH:mm:ss.fff] null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// CombinedText after textA is null: null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Setting textA back to 'Hi'...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">textA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hi\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">CombinedText after textA is 'Hi': \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">combinedText \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace for update):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CombinedText at HH:mm:ss.fff] \"Hi World\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// CombinedText after textA is 'Hi': \"Hi World\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open Timeline // Assuming Timeline factory and TL module are available// Helper to observe timeline changes (for example purposes)let trace (name: string) (timeline: Timeline\u003C&#x27;a>) =    timeline    |> TL.map (fun value -> // Use TL.map as per style guide        // Using a more robust null check for general types        let valueStr = if isNull value then &#x22;null&#x22; else sprintf &#x22;%A&#x22; value // Assuming isNull is globally accessible        printfn &#x22;[%s at %s] %s&#x22; name (System.DateTime.Now.ToString(&#x22;HH:mm:ss.fff&#x22;)) valueStr    )    |> ignore// 1. Create source timelineslet counterA = Timeline 10 // Initialized with a non-null intlet counterB = Timeline 20 // Initialized with a non-null intprintfn &#x22;Initial State of Sources:&#x22;printfn &#x22;  CounterA: %d&#x22; (counterA |> TL.at Now)printfn &#x22;  CounterB: %d&#x22; (counterB |> TL.at Now)// 2. Create the sum timeline using TL.zipWithlet sumTimeline = counterA |> TL.zipWith (+) counterB // Pipelined usage// Optional: trace the sumTimelinetrace &#x22;SumTimeline&#x22; sumTimeline// 3. Check the initial value of sumTimelineprintfn &#x22;Initial Sum: %d&#x22; (sumTimeline |> TL.at Now)// Expected Output (after trace initialization):// [SumTimeline at HH:mm:ss.fff] 30// Initial Sum: 30// 4. Update counterAprintfn &#x22;\\nUpdating CounterA to 15...&#x22;counterA |> TL.define Now 15printfn &#x22;Current Sum after A updated: %d&#x22; (sumTimeline |> TL.at Now)// Expected Output (after trace for update):// [SumTimeline at HH:mm:ss.fff] 35// Current Sum after A updated: 35// 5. Update counterBprintfn &#x22;\\nUpdating CounterB to 25...&#x22;counterB |> TL.define Now 25printfn &#x22;Current Sum after B updated: %d&#x22; (sumTimeline |> TL.at Now)// Expected Output (after trace for update):// [SumTimeline at HH:mm:ss.fff] 40// Current Sum after B updated: 40// 6. Example with potential nulls (using strings for clarity)let textA : Timeline\u003Cstring> = Timeline &#x22;Hello&#x22;let textB : Timeline\u003Cstring> = Timeline &#x22;World&#x22;// combine simply concatenates if both are non-null, otherwise behavior depends on &#x60;isNull&#x60; check in zipWithlet combinedText = textA |> TL.zipWith (sprintf &#x22;%s %s&#x22;) textBtrace &#x22;CombinedText&#x22; combinedTextprintfn &#x22;\\nInitial CombinedText: %A&#x22; (combinedText |> TL.at Now)// Expected Output (after trace):// [CombinedText at HH:mm:ss.fff] &#x22;Hello World&#x22;// Initial CombinedText: &#x22;Hello World&#x22;printfn &#x22;\\nSetting textA to null...&#x22;textA |> TL.define Now nullprintfn &#x22;CombinedText after textA is null: %A&#x22; (combinedText |> TL.at Now)// Expected Output (after trace for update):// [CombinedText at HH:mm:ss.fff] null// CombinedText after textA is null: nullprintfn &#x22;\\nSetting textA back to &#x27;Hi&#x27;...&#x22;textA |> TL.define Now &#x22;Hi&#x22;printfn &#x22;CombinedText after textA is &#x27;Hi&#x27;: %A&#x22; (combinedText |> TL.at Now)// Expected Output (after trace for update):// [CombinedText at HH:mm:ss.fff] &#x22;Hi World&#x22;// CombinedText after textA is &#x27;Hi&#x27;: &#x22;Hi World&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>Timeline Diagram (Values over conceptual time steps for \u003Ccode dir=\"auto\">sumTimeline\u003C/code>):\u003C/em>\n(現行の図を維持)\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">Step ------> S0 (Initial) ---- S1 (A to 15) ---- S2 (B to 25) --->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">counterA:      10                  15                 15\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">counterB:      20                  20                 25\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">-----------------------------------------------------------------\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">sumTimeline:   30                  35                 40\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">               \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">^                   ^                  ^\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">               \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">|                   |                  Update B causes re-evaluation\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">               \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">|                   Update A causes re-evaluation\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">               \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">Initial calculation: 10+20\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Step ------> S0 (Initial) ---- S1 (A to 15) ---- S2 (B to 25) --->counterA:      10                  15                 15counterB:      20                  20                 25-----------------------------------------------------------------sumTimeline:   30                  35                 40               ^                   ^                  ^               |                   |                  Update B causes re-evaluation               |                   Update A causes re-evaluation               Initial calculation: 10+20\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This example clearly demonstrates how \u003Ccode dir=\"auto\">sumTimeline\u003C/code> reactively updates to reflect the sum of the latest non-\u003Ccode dir=\"auto\">null\u003C/code> values from \u003Ccode dir=\"auto\">counterA\u003C/code> and \u003Ccode dir=\"auto\">counterB\u003C/code> whenever either of them changes. The \u003Ccode dir=\"auto\">null\u003C/code> handling example with strings further clarifies the “wait for both non-\u003Ccode dir=\"auto\">null\u003C/code> values” rule for actual \u003Ccode dir=\"auto\">null\u003C/code> references.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"55-more-examples-strings-and-booleans-foundation-for-refined-monoids\">5.5 More Examples: Strings and Booleans (Foundation for Refined Monoids)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#55-more-examples-strings-and-booleans-foundation-for-refined-monoids\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.5 More Examples: Strings and Booleans (Foundation for Refined Monoids)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s versatility shines when working with different data types and combining functions. Let’s explore a couple more examples, including one that directly foreshadows how we will build our refined boolean Monoid combinators.\u003C/p>\n\u003Cp>\u003Cstrong>(1) String Concatenation (Revisiting \u003Ccode dir=\"auto\">null\u003C/code> Handling)\u003C/strong>\u003C/p>\n\u003Cp>As seen in the previous section (5.4, example 6), \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> handles \u003Ccode dir=\"auto\">null\u003C/code> inputs by producing a \u003Ccode dir=\"auto\">null\u003C/code> output without invoking the combining function. This makes it safe for operations like string concatenation where operating on \u003Ccode dir=\"auto\">null\u003C/code> directly would cause errors.\u003C/p>\n\u003Cp>\u003Cstrong>(2) Boolean Logic (The Foundation for \u003Ccode dir=\"auto\">TL.or\u003C/code> and \u003Ccode dir=\"auto\">TL.and\u003C/code>)\u003C/strong>\u003C/p>\n\u003Cp>Combining \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances is a very common requirement for representing logical conditions that change over time. \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> provides a natural way to do this by using F#‘s built-in boolean operators \u003Ccode dir=\"auto\">||\u003C/code> (OR) and \u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code> (AND) as the combining functions.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Example: Logical AND (\u003Ccode dir=\"auto\">&#x26;&#x26;\u003C/code>)\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Assuming 'trace' helper function from previous section is available)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isUserLoggedIn\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isFormValid\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">canSubmitForm\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isUserLoggedIn \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(&#x26;&#x26;)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isFormValid\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">CanSubmitForm\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> canSubmitForm\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial Can Submit: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">canSubmitForm \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CanSubmitForm at HH:mm:ss.fff] false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial Can Submit: false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Setting isFormValid to true...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isFormValid \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Can Submit after form becomes valid: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">canSubmitForm \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CanSubmitForm at HH:mm:ss.fff] true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Can Submit after form becomes valid: true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Setting isUserLoggedIn to false...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isUserLoggedIn \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Can Submit after user logs out: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">canSubmitForm \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output (after trace):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [CanSubmitForm at HH:mm:ss.fff] false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Can Submit after user logs out: false\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open Timeline// (Assuming &#x27;trace&#x27; helper function from previous section is available)let isUserLoggedIn = Timeline truelet isFormValid = Timeline falselet canSubmitForm = isUserLoggedIn |> TL.zipWith (&#x26;&#x26;) isFormValidtrace &#x22;CanSubmitForm&#x22; canSubmitFormprintfn &#x22;Initial Can Submit: %b&#x22; (canSubmitForm |> TL.at Now)// Expected Output (after trace):// [CanSubmitForm at HH:mm:ss.fff] false// Initial Can Submit: falseprintfn &#x22;\\nSetting isFormValid to true...&#x22;isFormValid |> TL.define Now trueprintfn &#x22;Can Submit after form becomes valid: %b&#x22; (canSubmitForm |> TL.at Now)// Expected Output (after trace):// [CanSubmitForm at HH:mm:ss.fff] true// Can Submit after form becomes valid: trueprintfn &#x22;\\nSetting isUserLoggedIn to false...&#x22;isUserLoggedIn |> TL.define Now falseprintfn &#x22;Can Submit after user logs out: %b&#x22; (canSubmitForm |> TL.at Now)// Expected Output (after trace):// [CanSubmitForm at HH:mm:ss.fff] false// Can Submit after user logs out: false\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Example: Logical OR (\u003Ccode dir=\"auto\">||\u003C/code>)\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Assuming 'trace' helper function from previous section is available)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">hasAdminRights\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isEmergencyOverride\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">allowSensitiveAction\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> hasAdminRights \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(||)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> isEmergencyOverride\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">AllowSensitiveAction\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> allowSensitiveAction\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial Allow Action: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allowSensitiveAction \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Setting isEmergencyOverride to true...\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isEmergencyOverride \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Allow Action after emergency override: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allowSensitiveAction \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: true\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open Timeline// (Assuming &#x27;trace&#x27; helper function from previous section is available)let hasAdminRights = Timeline falselet isEmergencyOverride = Timeline falselet allowSensitiveAction = hasAdminRights |> TL.zipWith (||) isEmergencyOverridetrace &#x22;AllowSensitiveAction&#x22; allowSensitiveActionprintfn &#x22;Initial Allow Action: %b&#x22; (allowSensitiveAction |> TL.at Now)// Expected Output: falseprintfn &#x22;\\nSetting isEmergencyOverride to true...&#x22;isEmergencyOverride |> TL.define Now trueprintfn &#x22;Allow Action after emergency override: %b&#x22; (allowSensitiveAction |> TL.at Now)// Expected Output: true\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>A Note on Refined Monoidal Combinators:\u003C/strong>\nThese simple examples, like \u003Ccode dir=\"auto\">isUserLoggedIn |> TL.zipWith (&#x26;&#x26;) isFormValid\u003C/code>, are precisely how our \u003Cstrong>refined boolean combinators, \u003Ccode dir=\"auto\">TL.or\u003C/code> and \u003Ccode dir=\"auto\">TL.and\u003C/code>, will be implemented\u003C/strong> in \u003Cstrong>Chapter 7: Boolean Combinators with \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>\u003C/strong>.\n\u003Ccode dir=\"auto\">TL.zipWith\u003C/code>, by applying standard F# functions like \u003Ccode dir=\"auto\">(&#x26;&#x26;)\u003C/code> or \u003Ccode dir=\"auto\">(||)\u003C/code> (which themselves form Monoids with \u003Ccode dir=\"auto\">bool\u003C/code> values and respective identities \u003Ccode dir=\"auto\">true\u003C/code> and \u003Ccode dir=\"auto\">false\u003C/code>), effectively “lifts” these boolean Monoidal operations into the \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> context. This approach provides an intuitive and direct way to achieve Monoid-like behavior for reactive boolean conditions, contrasting with the “naive” implementations discussed in Chapter 3 which were built from more fundamental \u003Ccode dir=\"auto\">Timeline\u003C/code> operations.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"56-optimizing-output-zipwith-and-tldistinctuntilchanged\">5.6 Optimizing Output: \u003Ccode dir=\"auto\">zipWith\u003C/code> and \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#56-optimizing-output-zipwith-and-tldistinctuntilchanged\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.6 Optimizing Output: zipWith and TL.distinctUntilChanged”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A key characteristic of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is that it re-evaluates the combining function and propagates the result whenever \u003Cem>either\u003C/em> of its input timelines updates (and both inputs are currently non-\u003Ccode dir=\"auto\">null\u003C/code>). However, as identified as a practical concern in \u003Cstrong>Chapter 4: Need for General Combinators and Efficiency\u003C/strong>, and addressed by \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> in \u003Cstrong>Chapter 6: Filtering Timelines: \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/strong>, the \u003Cem>result\u003C/em> of this combination might not actually change even if an input did.\u003C/p>\n\u003Cp>For instance, consider \u003Ccode dir=\"auto\">maxTimeline = timelineA |> TL.zipWith max timelineB\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineA\u003C/code> is \u003Ccode dir=\"auto\">5\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> is \u003Ccode dir=\"auto\">3\u003C/code>, \u003Ccode dir=\"auto\">maxTimeline\u003C/code> becomes \u003Ccode dir=\"auto\">5\u003C/code>.\n\u003Cul>\n\u003Cli>If \u003Ccode dir=\"auto\">timelineB\u003C/code> then updates from \u003Ccode dir=\"auto\">3\u003C/code> to \u003Ccode dir=\"auto\">2\u003C/code> (while \u003Ccode dir=\"auto\">timelineA\u003C/code> remains \u003Ccode dir=\"auto\">5\u003C/code>), \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> re-evaluates \u003Ccode dir=\"auto\">max 5 2\u003C/code>, which is still \u003Ccode dir=\"auto\">5\u003C/code>.\nIn this scenario, the \u003Ccode dir=\"auto\">maxTimeline\u003C/code> would be updated with the value \u003Ccode dir=\"auto\">5\u003C/code> again. While logically correct from a point-wise evaluation perspective, this re-propagation of an unchanged value can lead to unnecessary downstream computations or UI re-renders.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>The Solution (from Chapter 6): Apply \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/strong>\u003C/p>\n\u003Cp>To prevent these redundant updates, we should apply \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> to the \u003Cem>output timeline\u003C/em> produced by \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Assuming 'trace' helper function is available)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">valX\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">valY\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isSumGreaterThan20\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">x\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\">y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">+\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">20\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumIsBig_Raw\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> valX \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith isSumGreaterThan20 valY \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use TL.zipWith\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">SumIsBig_Raw\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Raw\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sumIsBig_Optimized\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">valX \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.zipWith isSumGreaterThan20 valY\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.distinctUntilChanged \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">trace \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">SumIsBig_Optimized\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Optimized\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial Raw: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Optimized: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Raw \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Optimized \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Raw at ...] false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Optimized at ...] false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial Raw: false, Optimized: false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updating valY to 10 (Sum = 20, still not > 20)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">valY \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After valY to 10, Raw: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Optimized: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Raw \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Optimized \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Raw at ...] false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// After valY to 10, Raw: false, Optimized: false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updating valX to 11 (Sum = 21, now > 20)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">valX \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">11\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After valX to 11, Raw: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Optimized: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Raw \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Optimized \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Raw at ...] true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Optimized at ...] true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// After valX to 11, Raw: true, Optimized: true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">\\n\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updating valY to 12 (Sum = 23, still > 20)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">valY \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">12\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After valY to 12, Raw: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">, Optimized: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Raw \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sumIsBig\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Optimized \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// [SumIsBig_Raw at ...] true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// After valY to 12, Raw: true, Optimized: true\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open Timeline// (Assuming &#x27;trace&#x27; helper function is available)let valX = Timeline 10let valY = Timeline 5let isSumGreaterThan20 (x:int) (y:int) = (x + y) > 20let sumIsBig_Raw = valX |> TL.zipWith isSumGreaterThan20 valY // Use TL.zipWithtrace &#x22;SumIsBig_Raw&#x22; sumIsBig_Rawlet sumIsBig_Optimized =    (valX |> TL.zipWith isSumGreaterThan20 valY)    |> TL.distinctUntilChanged // Use TL.distinctUntilChangedtrace &#x22;SumIsBig_Optimized&#x22; sumIsBig_Optimizedprintfn &#x22;Initial Raw: %b, Optimized: %b&#x22; (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)// Expected Output:// [SumIsBig_Raw at ...] false// [SumIsBig_Optimized at ...] false// Initial Raw: false, Optimized: falseprintfn &#x22;\\nUpdating valY to 10 (Sum = 20, still not > 20)&#x22;valY |> TL.define Now 10printfn &#x22;After valY to 10, Raw: %b, Optimized: %b&#x22; (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)// Expected Output:// [SumIsBig_Raw at ...] false// After valY to 10, Raw: false, Optimized: falseprintfn &#x22;\\nUpdating valX to 11 (Sum = 21, now > 20)&#x22;valX |> TL.define Now 11printfn &#x22;After valX to 11, Raw: %b, Optimized: %b&#x22; (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)// Expected Output:// [SumIsBig_Raw at ...] true// [SumIsBig_Optimized at ...] true// After valX to 11, Raw: true, Optimized: trueprintfn &#x22;\\nUpdating valY to 12 (Sum = 23, still > 20)&#x22;valY |> TL.define Now 12printfn &#x22;After valY to 12, Raw: %b, Optimized: %b&#x22; (sumIsBig_Raw |> TL.at Now) (sumIsBig_Optimized |> TL.at Now)// Expected Output:// [SumIsBig_Raw at ...] true// After valY to 12, Raw: true, Optimized: true\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">sumIsBig_Optimized\u003C/code> timeline will only propagate an update when the actual boolean result of \u003Ccode dir=\"auto\">isSumGreaterThan20\u003C/code> changes. This is a common and recommended pattern: apply \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> to the output of \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (and other combinators) if you only care about actual changes in the resulting value.\u003C/p>\n\u003Cp>\u003Cstrong>Recap: Why Keep \u003Ccode dir=\"auto\">zipWith\u003C/code> and \u003Ccode dir=\"auto\">distinctUntilChanged\u003C/code> Separate?\u003C/strong> (Referencing Chapter 6 arguments)\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Separation of Concerns:\u003C/strong> \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s core responsibility is point-wise \u003Cem>combination\u003C/em>. \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>’s responsibility is \u003Cem>filtering\u003C/em> based on value changes. Keeping them separate makes each combinator simpler and more focused.\u003C/li>\n\u003Cli>\u003Cstrong>Flexibility:\u003C/strong> Filtering out unchanged values is not always the desired behavior. \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> by itself allows for this. The developer can \u003Cem>choose\u003C/em> to add \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Type Constraints:\u003C/strong> \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> requires its type parameter \u003Ccode dir=\"auto\">'a\u003C/code> to support equality comparison (\u003Ccode dir=\"auto\">'a : equality\u003C/code>). \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>’s output type \u003Ccode dir=\"auto\">'c\u003C/code> does not inherently need to be equality comparable.\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"57-under-the-hood-zipwith-and-dependencycore-conceptual\">5.7 Under the Hood: \u003Ccode dir=\"auto\">zipWith\u003C/code> and \u003Ccode dir=\"auto\">DependencyCore\u003C/code> (Conceptual)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#57-under-the-hood-zipwith-and-dependencycore-conceptual\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.7 Under the Hood: zipWith and DependencyCore (Conceptual)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> combinator, like other functions that create reactive dependencies such as \u003Ccode dir=\"auto\">TL.map\u003C/code> (Unit 4, Chapter 3) and \u003Ccode dir=\"auto\">TL.bind\u003C/code> (Unit 4, Chapter 6), relies on the internal \u003Ccode dir=\"auto\">DependencyCore\u003C/code> system. \u003Ccode dir=\"auto\">DependencyCore\u003C/code> is the engine responsible for managing the graph of dependencies between timelines and propagating updates.\u003C/p>\n\u003Cp>When \u003Ccode dir=\"auto\">resultTimeline = timelineA |> TL.zipWith f timelineB\u003C/code> is executed:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> first calculates the initial value for \u003Ccode dir=\"auto\">resultTimeline\u003C/code> based on the current values of \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code> and the \u003Ccode dir=\"auto\">null\u003C/code>-handling rules.\u003C/li>\n\u003Cli>It then registers \u003Cstrong>two\u003C/strong> primary dependencies with \u003Ccode dir=\"auto\">DependencyCore\u003C/code>:\n\u003Cul>\n\u003Cli>A dependency from \u003Ccode dir=\"auto\">timelineA\u003C/code> to \u003Ccode dir=\"auto\">resultTimeline\u003C/code>: When \u003Ccode dir=\"auto\">timelineA\u003C/code> is updated (via \u003Ccode dir=\"auto\">TL.define\u003C/code>), a reaction is triggered. This reaction will get the new value of \u003Ccode dir=\"auto\">timelineA\u003C/code>, the \u003Cem>latest current value\u003C/em> of \u003Ccode dir=\"auto\">timelineB\u003C/code>, apply \u003Ccode dir=\"auto\">f\u003C/code> (if both non-\u003Ccode dir=\"auto\">null\u003C/code>), and update \u003Ccode dir=\"auto\">resultTimeline\u003C/code>.\u003C/li>\n\u003Cli>A dependency from \u003Ccode dir=\"auto\">timelineB\u003C/code> to \u003Ccode dir=\"auto\">resultTimeline\u003C/code>: A symmetrical reaction is registered for updates on \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This setup ensures that \u003Ccode dir=\"auto\">resultTimeline\u003C/code> reactively reflects the point-wise combination. The actual mechanics of callback registration and invocation are managed by \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/p>\n\u003Cp>\u003Cem>(A more detailed conceptual sketch of \u003Ccode dir=\"auto\">zipWith\u003C/code>’s internal F# logic using \u003Ccode dir=\"auto\">DependencyCore\u003C/code> was presented in the original \u003Ccode dir=\"auto\">7-zipwith.md\u003C/code> (section 7.7). The core idea remains the same: \u003Ccode dir=\"auto\">resultTimeline\u003C/code> becomes dependent on updates from \u003Cem>both\u003C/em> \u003Ccode dir=\"auto\">timelineA\u003C/code> and \u003Ccode dir=\"auto\">timelineB\u003C/code>.)\u003C/em>\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"58-zipwith-the-engine-for-combined-reactive-logic\">5.8 \u003Ccode dir=\"auto\">zipWith\u003C/code>: The Engine for Combined Reactive Logic\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#58-zipwith-the-engine-for-combined-reactive-logic\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.8 zipWith: The Engine for Combined Reactive Logic”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> is a cornerstone of the \u003Ccode dir=\"auto\">Timeline\u003C/code> library. It provides an essential, versatile, and general-purpose mechanism for taking two independent timelines and producing a new timeline whose value, at any point in time, is derived from their combined latest values, transformed by a user-defined function.\u003C/p>\n\u003Cp>Its significance lies in its role as a powerful \u003Cstrong>engine\u003C/strong> for many practical reactive patterns:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Arbitrary Type Combinations:\u003C/strong> It can combine timelines of different types (\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> and \u003Ccode dir=\"auto\">Timeline&#x3C;'b>\u003C/code>) to produce a timeline of a third type (\u003Ccode dir=\"auto\">Timeline&#x3C;'c>\u003C/code>).\n\u003Cul>\n\u003Cli>\u003Cstrong>Consistent \u003Ccode dir=\"auto\">null\u003C/code> Propagation:\u003C/strong> It correctly manages \u003Ccode dir=\"auto\">null\u003C/code> references according to the library’s established philosophy. (Note: As discussed in 5.3, \u003Ccode dir=\"auto\">Option.None\u003C/code> values are passed through to the combining function unless pre-processed).\u003C/li>\n\u003Cli>\u003Cstrong>Foundation for Specific Combinators:\u003C/strong> It forms the direct implementation basis for our refined boolean Monoid combinators, \u003Ccode dir=\"auto\">TL.or\u003C/code> and \u003Ccode dir=\"auto\">TL.and\u003C/code> (Chapter 7).\u003C/li>\n\u003Cli>\u003Cstrong>Enables Complex Data Flow:\u003C/strong> By combining \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> with other combinators like \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>, sophisticated data transformation and reactive logic pipelines can be constructed.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>With \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (Chapter 6) for refining event streams and \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (this chapter) for general point-wise binary combination now understood, we possess the key practical tools for building a wide array of robust and efficient combined reactive behaviors. We are now well-prepared to apply these to construct highly usable logical combinators for boolean timelines and explore further patterns of aggregation.\u003C/p>",{"headings":1778,"localImagePaths":1803,"remoteImagePaths":1804,"frontmatter":1805,"imagePaths":1806},[1779,1782,1785,1788,1791,1794,1797,1800],{"depth":182,"slug":1780,"text":1781},"51-understanding-point-wise-operations","5.1 Understanding “Point-wise” Operations",{"depth":182,"slug":1783,"text":1784},"52-tlzipwith-zipping-values-over-time","5.2 TL.zipWith: Zipping Values Over Time",{"depth":182,"slug":1786,"text":1787},"53-how-zipwith-behaves-initialization-and-updates","5.3 How zipWith Behaves: Initialization and Updates",{"depth":182,"slug":1789,"text":1790},"54-a-simple-example-summing-two-number-timelines","5.4 A Simple Example: Summing Two Number Timelines",{"depth":182,"slug":1792,"text":1793},"55-more-examples-strings-and-booleans-foundation-for-refined-monoids","5.5 More Examples: Strings and Booleans (Foundation for Refined Monoids)",{"depth":182,"slug":1795,"text":1796},"56-optimizing-output-zipwith-and-tldistinctuntilchanged","5.6 Optimizing Output: zipWith and TL.distinctUntilChanged",{"depth":182,"slug":1798,"text":1799},"57-under-the-hood-zipwith-and-dependencycore-conceptual","5.7 Under the Hood: zipWith and DependencyCore (Conceptual)",{"depth":182,"slug":1801,"text":1802},"58-zipwith-the-engine-for-combined-reactive-logic","5.8 zipWith: The Engine for Combined Reactive Logic",[],[],{"title":1767,"description":1768},[],"en/book/unit-5/section-1/8-list-aggregation",{"id":1807,"data":1809,"body":1815,"filePath":1816,"digest":1817,"rendered":1818},{"title":1810,"description":1811,"editUrl":16,"head":1812,"template":18,"sidebar":1813,"pagefind":16,"draft":20},"Chapter 8: Aggregating Lists of Booleans","Chapter Goal: This chapter extends the practical OR and AND logic developed for binary combinations (TL.Or and TL.And from Chapter 7) to handle collections (specifically, lists) of Timeline\u003Cbool> instances. We will demonstrate how the Monoidal nature of our refined combinators allows for elegant aggregation of multiple boolean timelines using the standard List.fold operation, introducing TL.any and TL.all. The reactive implications of such aggregations will also be discussed.",[],{"hidden":20,"attrs":1814},{},"**Chapter Goal:** This chapter extends the practical OR and AND logic developed for binary combinations (`TL.Or` and `TL.And` from Chapter 7) to handle collections (specifically, lists) of `Timeline\u003Cbool>` instances. We will demonstrate how the Monoidal nature of our refined combinators allows for elegant aggregation of multiple boolean timelines using the standard `List.fold` operation, introducing `TL.any` and `TL.all`. The reactive implications of such aggregations will also be discussed.\n\n## 8.1 Introduction: Beyond Binary Combinations\n\nIn Chapter 7, we established `TL.Or` and `TL.And` as refined, `TL.zipWith`-based combinators for merging the state of *two* `Timeline\u003Cbool>` instances. These provide clear, Monoid-adherent ways to handle binary logical conditions.\n\nHowever, many real-world scenarios involve more than two conditions. Consider:\n\n*   A UI form where multiple sections must be valid before submission: `allChecksPassed = section1Valid |> TL.And section2Valid |> TL.And section3Valid |> ...`\n*   An alerting system where an alarm triggers if *any* of several sensor timelines indicate an issue: `alert = sensorA_error |> TL.Or sensorB_error |> TL.Or sensorC_error |> ...`\n\nIn these cases, we have a *list* of boolean timelines (e.g., `validationChecks: list\u003CTimeline\u003Cbool>>`) and need to derive a single `Timeline\u003Cbool>` that represents whether *all* conditions in the list are true, or if *any* condition in the list is true. This chapter explores how to build such n-ary (operating on multiple inputs) combinators, which we will name `TL.all` and `TL.any`.\n\n## 8.2 Leveraging Monoids for Aggregation: The Power of `fold`\n\nThe key to elegantly aggregating a list of values lies in the concept of a **Monoid**. Recall from Chapter 2 and Chapter 7 that:\n\n1.  A set of values (`Timeline\u003Cbool>`).\n2.  An **associative** binary operation (`TL.Or` or `TL.And`).\n3.  An **identity element** (`TL.FalseTimeline` for `TL.Or`, `TL.TrueTimeline` for `TL.And`).\n\nThe `List.fold` function is perfectly designed to work with Monoidal structures. It takes a binary combining function, an initial accumulator value (the Monoid's identity element), and a list, then iteratively applies the combining function.\n\nGiven that `(Timeline\u003Cbool>, TL.Or, TL.FalseTimeline)` and `(Timeline\u003Cbool>, TL.And, TL.TrueTimeline)` effectively form Monoids, we can use `List.fold` with `TL.Or` and `TL.And` for n-ary aggregation.\n\n## 8.3 `TL.any`: Is At Least One Timeline True?\n\n**Conceptual Goal:**\nGiven `timelines: list\u003CTimeline\u003Cbool>>`, produce `resultTimeline: Timeline\u003Cbool>` that is `true` if *any* timeline in the input list is currently `true`.\n\n**Implementation using `List.fold`:**\nWe define `TL.any` by folding over the input list using `TL.Or` (from Chapter 7) as the combining operation and `TL.FalseTimeline` (from Chapter 3) as the initial accumulator.\n\n```fsharp\n// Assumes TL.Or and TL.FalseTimeline are defined.\n// TL.Or : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>\n// TL.FalseTimeline : Timeline\u003Cbool> (always false)\n\nmodule TL =\n    // ... other TL definitions ...\n\n    /// \u003Csummary>\n    /// Given a list of boolean timelines, creates a new timeline that is true\n    /// if any timeline in the input list is currently true.\n    /// If the input list is empty, it returns TL.FalseTimeline.\n    /// \u003C/summary>\n    let any : list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool> = // Renamed from anyTrueInList\n        fun booleanTimelines ->\n            let initialAccumulator : Timeline\u003Cbool> = FalseTimeline\n            // List.fold applies accumulator as the first argument to the folder function.\n            // TL.Or is defined as: fun timelineB timelineA -> timelineA |> TL.zipWith (||) timelineB\n            // For `acc |> TL.Or elem`, `acc` is `timelineA` and `elem` is `timelineB`.\n            // `List.fold folder acc elem` means `folder acc elem`.\n            // So, the folder function should be: fun acc elem -> acc |> TL.Or elem\n            List.fold (fun acc elem -> acc |> TL.Or elem) initialAccumulator booleanTimelines\n```\n\n**Explanation:**\n\n1.  `initialAccumulator` is `TL.FalseTimeline`.\n2.  `List.fold` iterates:\n    *   For `t1`: `TL.FalseTimeline |> TL.Or t1` (simplifies to `t1`).\n    *   For `t2`: `(current_accumulator) |> TL.Or t2`.\n    *   And so on.\n\n**Handling Empty List:**\n`TL.any []` correctly returns `TL.FalseTimeline`.\n\n**Reactivity:**\n`TL.any [t1; t2; t3]` constructs a static reactive dependency graph like `((TL.FalseTimeline |> TL.Or t1) |> TL.Or t2) |> TL.Or t3`. Changes in `t1`, `t2`, or `t3` propagate through this chain of `TL.Or` operations.\n\n**Example Usage:**\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.any, TL.FalseTimeline are accessible.\n\nlet sensorA_active : Timeline\u003Cbool> = Timeline false\nlet sensorB_active : Timeline\u003Cbool> = Timeline false\nlet sensorC_active : Timeline\u003Cbool> = Timeline false\n\nlet anySensorActive : Timeline\u003Cbool> =\n    [ sensorA_active; sensorB_active; sensorC_active ] |> TL.any \n\nprintfn \"Initial: Any sensor active? %b\" (anySensorActive |> TL.at Now)\n// Expected Output: Initial: Any sensor active? false\n\nsensorB_active |> TL.define Now true\nprintfn \"After B active: Any sensor active? %b\" (anySensorActive |> TL.at Now)\n// Expected Output: After B active: Any sensor active? true\n\nsensorB_active |> TL.define Now false\nprintfn \"After B inactive: Any sensor active? %b\" (anySensorActive |> TL.at Now)\n// Expected Output: After B inactive: Any sensor active? false\n```\n\n## 8.4 `TL.all`: Are All Timelines True?\n\n**Conceptual Goal:**\nGiven `timelines: list\u003CTimeline\u003Cbool>>`, produce `resultTimeline: Timeline\u003Cbool>` that is `true` only if *all* timelines in the input list are currently `true`.\n\n**Implementation using `List.fold`:**\nDefine `TL.all` by folding with `TL.And` (from Chapter 7) and `TL.TrueTimeline` (from Chapter 3).\n\n```fsharp\n// Assumes TL.And and TL.TrueTimeline are defined.\n// TL.And : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>\n// TL.TrueTimeline : Timeline\u003Cbool> (always true)\n\nmodule TL =\n    // ... other TL definitions ...\n\n    /// \u003Csummary>\n    /// Given a list of boolean timelines, creates a new timeline that is true\n    /// if all timelines in the input list are currently true.\n    /// If the input list is empty, it returns TL.TrueTimeline.\n    /// \u003C/summary>\n    let all : list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool> = // Renamed from allTrueInList\n        fun booleanTimelines ->\n            let initialAccumulator : Timeline\u003Cbool> = TrueTimeline\n            List.fold (fun acc elem -> acc |> TL.And elem) initialAccumulator booleanTimelines\n```\n\n**Handling Empty List:**\n`TL.all []` correctly returns `TL.TrueTimeline` (vacuously true).\n\n**Reactivity:**\nSimilar to `TL.any`, `TL.all` constructs a static reactive chain.\n\n**Example Usage:**\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.all, TL.TrueTimeline are accessible.\n\nlet check1_passed : Timeline\u003Cbool> = Timeline true\nlet check2_passed : Timeline\u003Cbool> = Timeline true\nlet check3_passed : Timeline\u003Cbool> = Timeline false\n\nlet allChecksPassed : Timeline\u003Cbool> =\n    [ check1_passed; check2_passed; check3_passed ] |> TL.all\n\nprintfn \"Initial: All checks passed? %b\" (allChecksPassed |> TL.at Now)\n// Expected Output: Initial: All checks passed? false\n\ncheck3_passed |> TL.define Now true\nprintfn \"After check3 passed: All checks passed? %b\" (allChecksPassed |> TL.at Now)\n// Expected Output: After check3 passed: All checks passed? true\n\ncheck1_passed |> TL.define Now false\nprintfn \"After check1 failed: All checks passed? %b\" (allChecksPassed |> TL.at Now)\n// Expected Output: After check1 failed: All checks passed? false\n```\n\n## 8.5 Optimizing N-ary Combinators with `TL.distinctUntilChanged`\n\nThe output timelines from `TL.any` and `TL.all` can benefit from `TL.distinctUntilChanged` (Chapter 6) to prevent redundant downstream reactions if the final aggregated boolean state remains the same despite internal updates.\n\n```fsharp\n// Assume myTimelineList : list\u003CTimeline\u003Cbool>> is defined\n// Assume TL.any, TL.all, TL.distinctUntilChanged are accessible\n\n// let efficientAny : Timeline\u003Cbool> = (myTimelineList |> TL.any) |> TL.distinctUntilChanged\n// let efficientAll : Timeline\u003Cbool> = (myTimelineList |> TL.all) |> TL.distinctUntilChanged\n```\n\n*(Code example commented out as `myTimelineList` is not defined here, but the pattern is shown).*\n\n## 8.6 Practical Considerations: Dynamic Lists of Timelines\n\nThe `TL.any` and `TL.all` implementations shown use `List.fold` on an input list known when the aggregation timeline is created. The `List.fold` builds a static reactive dependency graph.\n\nIf the list of timelines to aggregate is itself dynamic (e.g., tasks added/removed), the simple `List.fold` is insufficient as it doesn't react to changes *in the list structure*. Handling dynamic collections typically requires `TL.bind` (Unit 4) to reconstruct the aggregation when the list of timelines changes, or specialized dynamic collection combinators. This chapter focuses on aggregating an initially provided list.\n\n## 8.7 Summary and Outlook: Basic Combinators for Unit 5 Section 1\n\nWe extended our refined binary logical combinators, `TL.Or` and `TL.And`, to n-ary versions, `TL.any` and `TL.all`, using `List.fold` and leveraging Monoidal properties. We noted `TL.distinctUntilChanged` for optimization and briefly considered dynamic list challenges.\n\nOur toolkit for fundamental logical combinations on `Timeline\u003Cbool>` is largely complete, covering:\n\n*   Monoid theory (Chapter 2).\n*   Naive Monoidal OR/AND (Chapter 3).\n*   Motivation for general tools (Chapter 4).\n*   `TL.zipWith` (Chapter 5) and `TL.distinctUntilChanged` (Chapter 6).\n*   Refined binary `TL.Or`/`TL.And` (Chapter 7).\n*   N-ary `TL.any`/`TL.all` (this chapter).\n\nThis provides solid tools for reactive boolean states.\n\n**Outlook: Applying to Non-Boolean Timelines**\nHow do we aggregate if source timelines aren't boolean (e.g., \"all HTTP requests successful\")? This involves mapping each non-boolean timeline (e.g., `Timeline\u003CHttpResponse>`) to a `Timeline\u003Cbool>` (e.g., `response.IsSuccessStatusCode`), then applying `TL.any`/`TL.all`. This \"map to boolean, then aggregate\" pattern is explored in **Chapter 9: Practical Aggregation of Non-Boolean Timelines**.","src/content/docs/en/book/unit-5/section-1/8-list-aggregation.md","fec37ce66d4fc10f",{"html":1819,"metadata":1820},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong> This chapter extends the practical OR and AND logic developed for binary combinations (\u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code> from Chapter 7) to handle collections (specifically, lists) of \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances. We will demonstrate how the Monoidal nature of our refined combinators allows for elegant aggregation of multiple boolean timelines using the standard \u003Ccode dir=\"auto\">List.fold\u003C/code> operation, introducing \u003Ccode dir=\"auto\">TL.any\u003C/code> and \u003Ccode dir=\"auto\">TL.all\u003C/code>. The reactive implications of such aggregations will also be discussed.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"81-introduction-beyond-binary-combinations\">8.1 Introduction: Beyond Binary Combinations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#81-introduction-beyond-binary-combinations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.1 Introduction: Beyond Binary Combinations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 7, we established \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code> as refined, \u003Ccode dir=\"auto\">TL.zipWith\u003C/code>-based combinators for merging the state of \u003Cem>two\u003C/em> \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances. These provide clear, Monoid-adherent ways to handle binary logical conditions.\u003C/p>\n\u003Cp>However, many real-world scenarios involve more than two conditions. Consider:\u003C/p>\n\u003Cul>\n\u003Cli>A UI form where multiple sections must be valid before submission: \u003Ccode dir=\"auto\">allChecksPassed = section1Valid |> TL.And section2Valid |> TL.And section3Valid |> ...\u003C/code>\u003C/li>\n\u003Cli>An alerting system where an alarm triggers if \u003Cem>any\u003C/em> of several sensor timelines indicate an issue: \u003Ccode dir=\"auto\">alert = sensorA_error |> TL.Or sensorB_error |> TL.Or sensorC_error |> ...\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>In these cases, we have a \u003Cem>list\u003C/em> of boolean timelines (e.g., \u003Ccode dir=\"auto\">validationChecks: list&#x3C;Timeline&#x3C;bool>>\u003C/code>) and need to derive a single \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that represents whether \u003Cem>all\u003C/em> conditions in the list are true, or if \u003Cem>any\u003C/em> condition in the list is true. This chapter explores how to build such n-ary (operating on multiple inputs) combinators, which we will name \u003Ccode dir=\"auto\">TL.all\u003C/code> and \u003Ccode dir=\"auto\">TL.any\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"82-leveraging-monoids-for-aggregation-the-power-of-fold\">8.2 Leveraging Monoids for Aggregation: The Power of \u003Ccode dir=\"auto\">fold\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#82-leveraging-monoids-for-aggregation-the-power-of-fold\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.2 Leveraging Monoids for Aggregation: The Power of fold”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The key to elegantly aggregating a list of values lies in the concept of a \u003Cstrong>Monoid\u003C/strong>. Recall from Chapter 2 and Chapter 7 that:\u003C/p>\n\u003Col>\n\u003Cli>A set of values (\u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code>).\u003C/li>\n\u003Cli>An \u003Cstrong>associative\u003C/strong> binary operation (\u003Ccode dir=\"auto\">TL.Or\u003C/code> or \u003Ccode dir=\"auto\">TL.And\u003C/code>).\u003C/li>\n\u003Cli>An \u003Cstrong>identity element\u003C/strong> (\u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code> for \u003Ccode dir=\"auto\">TL.Or\u003C/code>, \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code> for \u003Ccode dir=\"auto\">TL.And\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003Cp>The \u003Ccode dir=\"auto\">List.fold\u003C/code> function is perfectly designed to work with Monoidal structures. It takes a binary combining function, an initial accumulator value (the Monoid’s identity element), and a list, then iteratively applies the combining function.\u003C/p>\n\u003Cp>Given that \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.Or, TL.FalseTimeline)\u003C/code> and \u003Ccode dir=\"auto\">(Timeline&#x3C;bool>, TL.And, TL.TrueTimeline)\u003C/code> effectively form Monoids, we can use \u003Ccode dir=\"auto\">List.fold\u003C/code> with \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code> for n-ary aggregation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"83-tlany-is-at-least-one-timeline-true\">8.3 \u003Ccode dir=\"auto\">TL.any\u003C/code>: Is At Least One Timeline True?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#83-tlany-is-at-least-one-timeline-true\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.3 TL.any: Is At Least One Timeline True?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cstrong>Conceptual Goal:\u003C/strong>\nGiven \u003Ccode dir=\"auto\">timelines: list&#x3C;Timeline&#x3C;bool>>\u003C/code>, produce \u003Ccode dir=\"auto\">resultTimeline: Timeline&#x3C;bool>\u003C/code> that is \u003Ccode dir=\"auto\">true\u003C/code> if \u003Cem>any\u003C/em> timeline in the input list is currently \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Implementation using \u003Ccode dir=\"auto\">List.fold\u003C/code>:\u003C/strong>\nWe define \u003Ccode dir=\"auto\">TL.any\u003C/code> by folding over the input list using \u003Ccode dir=\"auto\">TL.Or\u003C/code> (from Chapter 7) as the combining operation and \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code> (from Chapter 3) as the initial accumulator.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assumes TL.Or and TL.FalseTimeline are defined.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.Or : Timeline&#x3C;bool> -> Timeline&#x3C;bool> -> Timeline&#x3C;bool>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.FalseTimeline : Timeline&#x3C;bool> (always false)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// Given a list of boolean timelines, creates a new timeline that is true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// if any timeline in the input list is currently true.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// If the input list is empty, it returns TL.FalseTimeline.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">any\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Renamed from anyTrueInList\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> booleanTimelines \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialAccumulator\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> FalseTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// List.fold applies accumulator as the first argument to the folder function.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.Or is defined as: fun timelineB timelineA -> timelineA |> TL.zipWith (||) timelineB\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For `acc |> TL.Or elem`, `acc` is `timelineA` and `elem` is `timelineB`.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// `List.fold folder acc elem` means `folder acc elem`.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// So, the folder function should be: fun acc elem -> acc |> TL.Or elem\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List.fold \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> acc elem \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> acc \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.Or elem\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialAccumulator booleanTimelines\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assumes TL.Or and TL.FalseTimeline are defined.// TL.Or : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>// TL.FalseTimeline : Timeline\u003Cbool> (always false)module TL =    // ... other TL definitions ...    /// \u003Csummary>    /// Given a list of boolean timelines, creates a new timeline that is true    /// if any timeline in the input list is currently true.    /// If the input list is empty, it returns TL.FalseTimeline.    /// \u003C/summary>    let any : list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool> = // Renamed from anyTrueInList        fun booleanTimelines ->            let initialAccumulator : Timeline\u003Cbool> = FalseTimeline            // List.fold applies accumulator as the first argument to the folder function.            // TL.Or is defined as: fun timelineB timelineA -> timelineA |> TL.zipWith (||) timelineB            // For &#x60;acc |> TL.Or elem&#x60;, &#x60;acc&#x60; is &#x60;timelineA&#x60; and &#x60;elem&#x60; is &#x60;timelineB&#x60;.            // &#x60;List.fold folder acc elem&#x60; means &#x60;folder acc elem&#x60;.            // So, the folder function should be: fun acc elem -> acc |> TL.Or elem            List.fold (fun acc elem -> acc |> TL.Or elem) initialAccumulator booleanTimelines\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Explanation:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode dir=\"auto\">initialAccumulator\u003C/code> is \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">List.fold\u003C/code> iterates:\n\u003Cul>\n\u003Cli>For \u003Ccode dir=\"auto\">t1\u003C/code>: \u003Ccode dir=\"auto\">TL.FalseTimeline |> TL.Or t1\u003C/code> (simplifies to \u003Ccode dir=\"auto\">t1\u003C/code>).\u003C/li>\n\u003Cli>For \u003Ccode dir=\"auto\">t2\u003C/code>: \u003Ccode dir=\"auto\">(current_accumulator) |> TL.Or t2\u003C/code>.\u003C/li>\n\u003Cli>And so on.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Handling Empty List:\u003C/strong>\n\u003Ccode dir=\"auto\">TL.any []\u003C/code> correctly returns \u003Ccode dir=\"auto\">TL.FalseTimeline\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Reactivity:\u003C/strong>\n\u003Ccode dir=\"auto\">TL.any [t1; t2; t3]\u003C/code> constructs a static reactive dependency graph like \u003Ccode dir=\"auto\">((TL.FalseTimeline |> TL.Or t1) |> TL.Or t2) |> TL.Or t3\u003C/code>. Changes in \u003Ccode dir=\"auto\">t1\u003C/code>, \u003Ccode dir=\"auto\">t2\u003C/code>, or \u003Ccode dir=\"auto\">t3\u003C/code> propagate through this chain of \u003Ccode dir=\"auto\">TL.Or\u003C/code> operations.\u003C/p>\n\u003Cp>\u003Cstrong>Example Usage:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.any, TL.FalseTimeline are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sensorA_active\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sensorB_active\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">sensorC_active\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">anySensorActive\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sensorA\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">active\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sensorB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">active\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sensorC\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">active \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.any\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial: Any sensor active? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">anySensorActive \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial: Any sensor active? false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sensorB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">active \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After B active: Any sensor active? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">anySensorActive \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After B active: Any sensor active? true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sensorB\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">active \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After B inactive: Any sensor active? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">anySensorActive \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After B inactive: Any sensor active? false\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.any, TL.FalseTimeline are accessible.let sensorA_active : Timeline\u003Cbool> = Timeline falselet sensorB_active : Timeline\u003Cbool> = Timeline falselet sensorC_active : Timeline\u003Cbool> = Timeline falselet anySensorActive : Timeline\u003Cbool> =    [ sensorA_active; sensorB_active; sensorC_active ] |> TL.anyprintfn &#x22;Initial: Any sensor active? %b&#x22; (anySensorActive |> TL.at Now)// Expected Output: Initial: Any sensor active? falsesensorB_active |> TL.define Now trueprintfn &#x22;After B active: Any sensor active? %b&#x22; (anySensorActive |> TL.at Now)// Expected Output: After B active: Any sensor active? truesensorB_active |> TL.define Now falseprintfn &#x22;After B inactive: Any sensor active? %b&#x22; (anySensorActive |> TL.at Now)// Expected Output: After B inactive: Any sensor active? false\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"84-tlall-are-all-timelines-true\">8.4 \u003Ccode dir=\"auto\">TL.all\u003C/code>: Are All Timelines True?\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#84-tlall-are-all-timelines-true\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.4 TL.all: Are All Timelines True?”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>\u003Cstrong>Conceptual Goal:\u003C/strong>\nGiven \u003Ccode dir=\"auto\">timelines: list&#x3C;Timeline&#x3C;bool>>\u003C/code>, produce \u003Ccode dir=\"auto\">resultTimeline: Timeline&#x3C;bool>\u003C/code> that is \u003Ccode dir=\"auto\">true\u003C/code> only if \u003Cem>all\u003C/em> timelines in the input list are currently \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Implementation using \u003Ccode dir=\"auto\">List.fold\u003C/code>:\u003C/strong>\nDefine \u003Ccode dir=\"auto\">TL.all\u003C/code> by folding with \u003Ccode dir=\"auto\">TL.And\u003C/code> (from Chapter 7) and \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code> (from Chapter 3).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assumes TL.And and TL.TrueTimeline are defined.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.And : Timeline&#x3C;bool> -> Timeline&#x3C;bool> -> Timeline&#x3C;bool>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.TrueTimeline : Timeline&#x3C;bool> (always true)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">module\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... other TL definitions ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// Given a list of boolean timelines, creates a new timeline that is true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// if all timelines in the input list are currently true.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// If the input list is empty, it returns TL.TrueTimeline.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5F636F\">/// \u003C/span>\u003Cspan style=\"--1:#8844AE\">\u003Cspan style=\"--0:#7FDBCA\">&#x3C;/\u003C/span>\u003Cspan style=\"--0:#CAECE6\">summary\u003C/span>\u003Cspan style=\"--0:#7FDBCA\">>\u003C/span>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">all\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> list\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Renamed from allTrueInList\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> booleanTimelines \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialAccumulator\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TrueTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">List.fold \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> acc elem \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> acc \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.And elem\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> initialAccumulator booleanTimelines\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assumes TL.And and TL.TrueTimeline are defined.// TL.And : Timeline\u003Cbool> -> Timeline\u003Cbool> -> Timeline\u003Cbool>// TL.TrueTimeline : Timeline\u003Cbool> (always true)module TL =    // ... other TL definitions ...    /// \u003Csummary>    /// Given a list of boolean timelines, creates a new timeline that is true    /// if all timelines in the input list are currently true.    /// If the input list is empty, it returns TL.TrueTimeline.    /// \u003C/summary>    let all : list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool> = // Renamed from allTrueInList        fun booleanTimelines ->            let initialAccumulator : Timeline\u003Cbool> = TrueTimeline            List.fold (fun acc elem -> acc |> TL.And elem) initialAccumulator booleanTimelines\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Handling Empty List:\u003C/strong>\n\u003Ccode dir=\"auto\">TL.all []\u003C/code> correctly returns \u003Ccode dir=\"auto\">TL.TrueTimeline\u003C/code> (vacuously true).\u003C/p>\n\u003Cp>\u003Cstrong>Reactivity:\u003C/strong>\nSimilar to \u003Ccode dir=\"auto\">TL.any\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code> constructs a static reactive chain.\u003C/p>\n\u003Cp>\u003Cstrong>Example Usage:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.all, TL.TrueTimeline are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">check1_passed\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">check2_passed\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">check3_passed\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">allChecksPassed\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> check1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passed\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> check2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passed\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> check3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.all\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial: All checks passed? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allChecksPassed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial: All checks passed? false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">check3\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After check3 passed: All checks passed? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allChecksPassed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After check3 passed: All checks passed? true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">check1\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#FF6A83;--1:#A24848\">false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">After check1 failed: All checks passed? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allChecksPassed \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: After check1 failed: All checks passed? false\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.all, TL.TrueTimeline are accessible.let check1_passed : Timeline\u003Cbool> = Timeline truelet check2_passed : Timeline\u003Cbool> = Timeline truelet check3_passed : Timeline\u003Cbool> = Timeline falselet allChecksPassed : Timeline\u003Cbool> =    [ check1_passed; check2_passed; check3_passed ] |> TL.allprintfn &#x22;Initial: All checks passed? %b&#x22; (allChecksPassed |> TL.at Now)// Expected Output: Initial: All checks passed? falsecheck3_passed |> TL.define Now trueprintfn &#x22;After check3 passed: All checks passed? %b&#x22; (allChecksPassed |> TL.at Now)// Expected Output: After check3 passed: All checks passed? truecheck1_passed |> TL.define Now falseprintfn &#x22;After check1 failed: All checks passed? %b&#x22; (allChecksPassed |> TL.at Now)// Expected Output: After check1 failed: All checks passed? false\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"85-optimizing-n-ary-combinators-with-tldistinctuntilchanged\">8.5 Optimizing N-ary Combinators with \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#85-optimizing-n-ary-combinators-with-tldistinctuntilchanged\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.5 Optimizing N-ary Combinators with TL.distinctUntilChanged”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The output timelines from \u003Ccode dir=\"auto\">TL.any\u003C/code> and \u003Ccode dir=\"auto\">TL.all\u003C/code> can benefit from \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (Chapter 6) to prevent redundant downstream reactions if the final aggregated boolean state remains the same despite internal updates.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume myTimelineList : list&#x3C;Timeline&#x3C;bool>> is defined\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume TL.any, TL.all, TL.distinctUntilChanged are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let efficientAny : Timeline&#x3C;bool> = (myTimelineList |> TL.any) |> TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let efficientAll : Timeline&#x3C;bool> = (myTimelineList |> TL.all) |> TL.distinctUntilChanged\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume myTimelineList : list\u003CTimeline\u003Cbool>> is defined// Assume TL.any, TL.all, TL.distinctUntilChanged are accessible// let efficientAny : Timeline\u003Cbool> = (myTimelineList |> TL.any) |> TL.distinctUntilChanged// let efficientAll : Timeline\u003Cbool> = (myTimelineList |> TL.all) |> TL.distinctUntilChanged\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Code example commented out as \u003Ccode dir=\"auto\">myTimelineList\u003C/code> is not defined here, but the pattern is shown).\u003C/em>\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"86-practical-considerations-dynamic-lists-of-timelines\">8.6 Practical Considerations: Dynamic Lists of Timelines\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#86-practical-considerations-dynamic-lists-of-timelines\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.6 Practical Considerations: Dynamic Lists of Timelines”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.any\u003C/code> and \u003Ccode dir=\"auto\">TL.all\u003C/code> implementations shown use \u003Ccode dir=\"auto\">List.fold\u003C/code> on an input list known when the aggregation timeline is created. The \u003Ccode dir=\"auto\">List.fold\u003C/code> builds a static reactive dependency graph.\u003C/p>\n\u003Cp>If the list of timelines to aggregate is itself dynamic (e.g., tasks added/removed), the simple \u003Ccode dir=\"auto\">List.fold\u003C/code> is insufficient as it doesn’t react to changes \u003Cem>in the list structure\u003C/em>. Handling dynamic collections typically requires \u003Ccode dir=\"auto\">TL.bind\u003C/code> (Unit 4) to reconstruct the aggregation when the list of timelines changes, or specialized dynamic collection combinators. This chapter focuses on aggregating an initially provided list.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"87-summary-and-outlook-basic-combinators-for-unit-5-section-1\">8.7 Summary and Outlook: Basic Combinators for Unit 5 Section 1\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#87-summary-and-outlook-basic-combinators-for-unit-5-section-1\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “8.7 Summary and Outlook: Basic Combinators for Unit 5 Section 1”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>We extended our refined binary logical combinators, \u003Ccode dir=\"auto\">TL.Or\u003C/code> and \u003Ccode dir=\"auto\">TL.And\u003C/code>, to n-ary versions, \u003Ccode dir=\"auto\">TL.any\u003C/code> and \u003Ccode dir=\"auto\">TL.all\u003C/code>, using \u003Ccode dir=\"auto\">List.fold\u003C/code> and leveraging Monoidal properties. We noted \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> for optimization and briefly considered dynamic list challenges.\u003C/p>\n\u003Cp>Our toolkit for fundamental logical combinations on \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> is largely complete, covering:\u003C/p>\n\u003Cul>\n\u003Cli>Monoid theory (Chapter 2).\u003C/li>\n\u003Cli>Naive Monoidal OR/AND (Chapter 3).\u003C/li>\n\u003Cli>Motivation for general tools (Chapter 4).\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (Chapter 5) and \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (Chapter 6).\u003C/li>\n\u003Cli>Refined binary \u003Ccode dir=\"auto\">TL.Or\u003C/code>/\u003Ccode dir=\"auto\">TL.And\u003C/code> (Chapter 7).\u003C/li>\n\u003Cli>N-ary \u003Ccode dir=\"auto\">TL.any\u003C/code>/\u003Ccode dir=\"auto\">TL.all\u003C/code> (this chapter).\u003C/li>\n\u003C/ul>\n\u003Cp>This provides solid tools for reactive boolean states.\u003C/p>\n\u003Cp>\u003Cstrong>Outlook: Applying to Non-Boolean Timelines\u003C/strong>\nHow do we aggregate if source timelines aren’t boolean (e.g., “all HTTP requests successful”)? This involves mapping each non-boolean timeline (e.g., \u003Ccode dir=\"auto\">Timeline&#x3C;HttpResponse>\u003C/code>) to a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> (e.g., \u003Ccode dir=\"auto\">response.IsSuccessStatusCode\u003C/code>), then applying \u003Ccode dir=\"auto\">TL.any\u003C/code>/\u003Ccode dir=\"auto\">TL.all\u003C/code>. This “map to boolean, then aggregate” pattern is explored in \u003Cstrong>Chapter 9: Practical Aggregation of Non-Boolean Timelines\u003C/strong>.\u003C/p>",{"headings":1821,"localImagePaths":1843,"remoteImagePaths":1844,"frontmatter":1845,"imagePaths":1846},[1822,1825,1828,1831,1834,1837,1840],{"depth":182,"slug":1823,"text":1824},"81-introduction-beyond-binary-combinations","8.1 Introduction: Beyond Binary Combinations",{"depth":182,"slug":1826,"text":1827},"82-leveraging-monoids-for-aggregation-the-power-of-fold","8.2 Leveraging Monoids for Aggregation: The Power of fold",{"depth":182,"slug":1829,"text":1830},"83-tlany-is-at-least-one-timeline-true","8.3 TL.any: Is At Least One Timeline True?",{"depth":182,"slug":1832,"text":1833},"84-tlall-are-all-timelines-true","8.4 TL.all: Are All Timelines True?",{"depth":182,"slug":1835,"text":1836},"85-optimizing-n-ary-combinators-with-tldistinctuntilchanged","8.5 Optimizing N-ary Combinators with TL.distinctUntilChanged",{"depth":182,"slug":1838,"text":1839},"86-practical-considerations-dynamic-lists-of-timelines","8.6 Practical Considerations: Dynamic Lists of Timelines",{"depth":182,"slug":1841,"text":1842},"87-summary-and-outlook-basic-combinators-for-unit-5-section-1","8.7 Summary and Outlook: Basic Combinators for Unit 5 Section 1",[],[],{"title":1810,"description":1811},[],"en/book/unit-5/section-1/9-non-bool-aggregation",{"id":1847,"data":1849,"body":1855,"filePath":1856,"digest":1857,"rendered":1858},{"title":1850,"description":1851,"editUrl":16,"head":1852,"template":18,"sidebar":1853,"pagefind":16,"draft":20},"Chapter 9: Practical Aggregation of Non-Boolean Timelines – The \"Map to Boolean\" Pattern","Chapter Goal: This chapter demonstrates a common and powerful pattern for applying the boolean aggregation combinators (like TL.all and TL.any from Chapter 8) to collections of timelines that do not originally hold boolean values. We will show how to first transform these timelines into Timeline\u003Cbool> instances using TL.map and then aggregate these boolean timelines, using practical examples like checking the success of multiple HTTP requests.",[],{"hidden":20,"attrs":1854},{},"**Chapter Goal:**\nThis chapter demonstrates a common and powerful pattern for applying the boolean aggregation combinators (like `TL.all` and `TL.any` from Chapter 8) to collections of timelines that do not originally hold boolean values. We will show how to first transform these timelines into `Timeline\u003Cbool>` instances using `TL.map` and then aggregate these boolean timelines, using practical examples like checking the success of multiple HTTP requests.\n\n## 9.1 Introduction: The Challenge of Aggregating Diverse Data\n\nIn Chapter 8, we developed `TL.all` and `TL.any`, powerful tools for aggregating conditions from a `list\u003CTimeline\u003Cbool>>`. These allow us to easily determine if all boolean timelines in a list are `true`, or if at least one is `true`.\n\nHowever, a practical question quickly arises: what if our source timelines don't inherently represent boolean states? Consider these common scenarios:\n\n*   **Multiple HTTP Requests:** We might have several independent HTTP requests, each represented by a `Timeline` that will eventually hold a response object (e.g., `Timeline\u003CHttpResponseInfo>`). How do we create a single `Timeline\u003Cbool>` that tells us if *all* these requests completed successfully?\n*   **Form Input Validation:** A form might have various input fields, each with its own validation logic. An email field might return `Timeline\u003CEmailValidationResult>`, a password field `Timeline\u003CPasswordStrengthScore>`, and a username field `Timeline\u003CUsernameAvailability>`. How do we combine these diverse validation outcomes into a single `Timeline\u003Cbool>` indicating if the *entire form* is valid?\n*   **System Health Checks:** Monitoring various system components (database, external services, internal queues), each providing status updates via a `Timeline` (e.g., `Timeline\u003CServiceStatus>`). How do we get an overall `Timeline\u003Cbool>` for \"all systems operational\"?\n\nIn these cases, the source data isn't directly boolean, but we need to derive a boolean condition from each source before we can perform a logical aggregation (like AND or OR) across all of them. This chapter introduces a versatile two-step pattern to address this: **\"Map to Boolean, then Aggregate.\"**\n\n## 9.2 The Core Pattern: Map, Then Aggregate\n\nThe \"Map to Boolean, then Aggregate\" pattern is a straightforward yet powerful strategy for applying logical aggregation to collections of non-boolean timelines. It involves two distinct steps:\n\n1.  **Step 1: Map to Boolean (`Timeline\u003C'a> -> Timeline\u003Cbool>`)**\n    For each individual source timeline that doesn't inherently hold a boolean value (let's say it's a `Timeline\u003C'a>`), we use the `TL.map` combinator (from Unit 4, Chapter 3). We provide `TL.map` with a predicate function of type `'a -> bool`. This function takes the value from the source timeline and transforms it into a boolean value representing the specific condition we care about for that source.\n    *   Example: If `sourceTimeline: Timeline\u003CHttpResponseInfo>`, the mapping function might be `fun responseInfo -> responseInfo.IsSuccess`. This produces a `Timeline\u003Cbool>` indicating if that specific request was successful.\n    *   Example: If `sourceTimeline: Timeline\u003Cstring>` for a username, the mapping function might be `fun username -> username.Length > 3 && not (System.String.IsNullOrWhiteSpace username) (* more checks *)`. This produces a `Timeline\u003Cbool>` indicating if the username is valid.\n\n2.  **Step 2: Aggregate Booleans (`list\u003CTimeline\u003Cbool>> -> Timeline\u003Cbool>`)**\n    Once each of the original source timelines has been transformed into a `Timeline\u003Cbool>` representing the relevant boolean condition, we collect these new `Timeline\u003Cbool>` instances into a list.\n    Then, we apply one of the n-ary boolean aggregation combinators developed in Chapter 8:\n    *   `TL.all`: To check if *all* conditions are true.\n    *   `TL.any`: To check if *any* of the conditions are true.\n    This yields a final, single `Timeline\u003Cbool>` representing the overall aggregated logical state.\n\nThis pattern elegantly separates concerns:\n\n*   The logic for determining the boolean status of an individual source is encapsulated within its specific mapping function.\n*   The logic for aggregating multiple boolean statuses is handled by the general-purpose `TL.all` or `TL.any` combinators.\n\nThis composability makes the overall system easier to understand, maintain, and extend.\n\n## 9.3 Example: Aggregating Success of Multiple HTTP Requests\n\nLet's make the common scenario of checking if multiple HTTP requests have all completed successfully more concrete.\n\n**Scenario Setup:**\nSuppose we have functions that initiate different API calls. Each returns a `Timeline` that will eventually contain information about the HTTP response. (This example reuses the `HttpResponseInfo` type and `makeRequest` function structure from the original Chapter 11, which mirrors the case study in original Chapter 12 / new Chapter 10).\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all, TL.any are accessible.\n// Assume isNull helper is globally available.\n\n// Record definition (similar to one used in Chapter 10's case study)\ntype HttpResponseInfo = {\n    Url: string\n    StatusCode: int \n    IsSuccess: bool // True if status code indicates success (e.g., 2xx)\n    ContentLength: int64\n}\n\n// Functions that simulate making requests and returning results on timelines\n// In a real app, these would involve actual async HTTP calls (see Unit 4, Chapter 4)\nlet makeRequest : string -> int -> Timeline\u003CHttpResponseInfo> =\n    fun url simulatedStatusCode ->\n        let response : HttpResponseInfo = \n            { Url = url\n              StatusCode = simulatedStatusCode\n              IsSuccess = simulatedStatusCode >= 200 && simulatedStatusCode \u003C 300\n              ContentLength = 1024L } // Dummy length\n        Timeline response // In a real scenario, this would be updated async\n\nlet request1Result: Timeline\u003CHttpResponseInfo> = makeRequest \"/api/data/1\" 200\nlet request2Result: Timeline\u003CHttpResponseInfo> = makeRequest \"/api/data/2\" 200\nlet request3Result: Timeline\u003CHttpResponseInfo> = makeRequest \"/api/data/3\" 404 // This one will fail\n```\n\n**Step 1: Map each request result to `Timeline\u003Cbool>` (Success/Failure)**\nWe need a function to determine if an `HttpResponseInfo` represents a successful request.\n\n```fsharp\n// (Continued from previous F# block)\n\n// Mapping function: extracts the IsSuccess flag\nlet wasRequestSuccessfulPredicate : HttpResponseInfo -> bool = \n    fun responseInfo ->\n        responseInfo.IsSuccess\n\n// Create boolean timelines representing the success of each request\nlet request1Succeeded: Timeline\u003Cbool> = request1Result |> TL.map wasRequestSuccessfulPredicate\nlet request2Succeeded: Timeline\u003Cbool> = request2Result |> TL.map wasRequestSuccessfulPredicate\nlet request3Succeeded: Timeline\u003Cbool> = request3Result |> TL.map wasRequestSuccessfulPredicate\n\n// At this point (conceptually, after initial values are processed):\n// request1Succeeded |> TL.at Now  // true\n// request2Succeeded |> TL.at Now  // true\n// request3Succeeded |> TL.at Now  // false\n```\n\n**Step 2: Aggregate the boolean success timelines**\nNow that we have a list of `Timeline\u003Cbool>` instances, we use `TL.all` (from Chapter 8).\n\n```fsharp\n// (Continued from previous F# block)\n\nlet allRequestsSucceeded: Timeline\u003Cbool> =\n    [request1Succeeded; request2Succeeded; request3Succeeded]\n    |> TL.all // Using the n-ary combinator TL.all (from Chapter 8)\n\nprintfn \"Initial: All requests succeeded? %b\" (allRequestsSucceeded |> TL.at Now)\n// Expected Output: Initial: All requests succeeded? false (because request3 failed)\n\n// To check if *any* request succeeded:\nlet anyRequestSucceeded: Timeline\u003Cbool> =\n    [request1Succeeded; request2Succeeded; request3Succeeded]\n    |> TL.any // Using the n-ary combinator TL.any (from Chapter 8)\n\nprintfn \"Initial: Any request succeeded? %b\" (anyRequestSucceeded |> TL.at Now)\n// Expected Output: Initial: Any request succeeded? true (because request1 and request2 succeeded)\n```\n\nThis demonstrates the pattern. For efficiency, one would typically apply `TL.distinctUntilChanged` (Chapter 6) to `allRequestsSucceeded` or `anyRequestSucceeded`.\n\n## 9.4 Example: Validating Multiple Input Fields for Form Submission\n\nAnother common use case is determining if a form is ready for submission.\n\n**Scenario Setup:**\nA registration form with username, password complexity, and email format.\n\n```fsharp\n// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all are accessible.\n\n// Simulate input timelines and their validation state\ntype EmailValidationStatus = NotValidated | Validating | Valid | Invalid\n\nlet usernameValue: Timeline\u003Cstring> = Timeline \"\"\nlet passwordScore: Timeline\u003Cint> = Timeline 0 // Score from 0-100\nlet emailStatus: Timeline\u003CEmailValidationStatus> = Timeline EmailValidationStatus.NotValidated\n```\n\n**Step 1: Map each input state to `Timeline\u003Cbool>` (Is Valid?)**\nDefine predicates for each field.\n\n```fsharp\n// (Continued from previous F# block)\n\nlet isUsernameValidCriteria : string -> bool = \n    fun name -> name.Length >= 4\n\nlet isPasswordStrongCriteria : int -> bool = \n    fun score -> score >= 75\n\nlet isEmailFormatValidCriteria : EmailValidationStatus -> bool = \n    fun status -> status = EmailValidationStatus.Valid\n\n// Create boolean timelines for each validation check\nlet usernameIsValid: Timeline\u003Cbool> = usernameValue |> TL.map isUsernameValidCriteria\nlet passwordIsStrong: Timeline\u003Cbool> = passwordScore |> TL.map isPasswordStrongCriteria\nlet emailFormatIsValid: Timeline\u003Cbool> = emailStatus |> TL.map isEmailFormatValidCriteria\n```\n\n**Step 2: Aggregate for overall form validity**\nUse `TL.all` to check if all individual validation timelines are `true`.\n\n```fsharp\n// (Continued from previous F# block)\n\nlet isFormReadyToSubmit: Timeline\u003Cbool> =\n    [usernameIsValid; passwordIsStrong; emailFormatIsValid]\n    |> TL.all // Using new TL.all\n\n// This timeline can now be used to enable/disable a submit button.\n// let submitButtonReaction (canSubmit: bool) : unit = (* submitButton.IsEnabled \u003C- canSubmit *) ()\n// isFormReadyToSubmit |> TL.map submitButtonReaction |> ignore\n\nprintfn \"Initial form readiness: %b\" (isFormReadyToSubmit |> TL.at Now)\n// Expected Output: Initial form readiness: false\n\n// Simulate user typing and validation occurring\nusernameValue |> TL.define Now \"TestUser\"    // usernameIsValid becomes true\npasswordScore |> TL.define Now 80           // passwordIsStrong becomes true\nemailStatus |> TL.define Now EmailValidationStatus.Valid // emailFormatIsValid becomes true\n\nprintfn \"Updated form readiness: %b\" (isFormReadyToSubmit |> TL.at Now)\n// Expected Output: Updated form readiness: true\n```\n\nThis `isFormReadyToSubmit` timeline reactively reflects the overall form validity.\n\n## 9.5 Benefits of the \"Map to Boolean\" Pattern\n\nThis two-step pattern offers significant advantages:\n\n1.  **Modularity and Separation of Concerns:**\n    *   Individual condition logic is encapsulated in mapping functions (`'a -> bool`).\n    *   Aggregation is handled by generic `TL.all` or `TL.any`.\n2.  **Reusability:**\n    *   `TL.all`, `TL.any` are highly reusable.\n    *   Mapping functions can also be reused.\n3.  **Clarity and Readability:**\n    *   The two-step process often makes overall logic easier to understand.\n4.  **Flexibility:**\n    *   Different mapping functions can be applied to diverse data types before aggregation.\n\n## 9.6 Conclusion: A Versatile Strategy for Complex Conditions\n\nThe \"Map to Boolean, then Aggregate\" pattern is a cornerstone strategy for applying logical AND/OR combinators (`TL.Or`/`TL.And` for binary from Chapter 7, `TL.any`/`TL.all` for n-ary from Chapter 8) to collections of reactive data sources not initially boolean. By first using `TL.map` to transform diverse timelines into `Timeline\u003Cbool>` instances representing specific conditions, we then leverage the power and robustness of `TL.all` and `TL.any` for aggregation.\n\nThis approach embodies the composable nature of functional reactive programming. It effectively concludes our primary discussion on fundamental combinators for boolean logic within Unit 5, Section 1.\n\nWith the tools and patterns explored – from naive Monoids (Chapter 3), motivations for general tools (Chapter 4), `TL.zipWith` (Chapter 5), `TL.distinctUntilChanged` (Chapter 6), refined binary (`TL.Or`, `TL.And` in Chapter 7) and n-ary (`TL.any`, `TL.all` in Chapter 8) logical combinators, and now this \"Map to Boolean\" strategy – you are equipped to construct a wide range of complex and robust reactive systems. The final chapter in this section will present a comprehensive case study putting many of these pieces together.","src/content/docs/en/book/unit-5/section-1/9-non-bool-aggregation.md","fdec3382c3d672f2",{"html":1859,"metadata":1860},"\u003Cp>\u003Cstrong>Chapter Goal:\u003C/strong>\nThis chapter demonstrates a common and powerful pattern for applying the boolean aggregation combinators (like \u003Ccode dir=\"auto\">TL.all\u003C/code> and \u003Ccode dir=\"auto\">TL.any\u003C/code> from Chapter 8) to collections of timelines that do not originally hold boolean values. We will show how to first transform these timelines into \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances using \u003Ccode dir=\"auto\">TL.map\u003C/code> and then aggregate these boolean timelines, using practical examples like checking the success of multiple HTTP requests.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"91-introduction-the-challenge-of-aggregating-diverse-data\">9.1 Introduction: The Challenge of Aggregating Diverse Data\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#91-introduction-the-challenge-of-aggregating-diverse-data\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.1 Introduction: The Challenge of Aggregating Diverse Data”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In Chapter 8, we developed \u003Ccode dir=\"auto\">TL.all\u003C/code> and \u003Ccode dir=\"auto\">TL.any\u003C/code>, powerful tools for aggregating conditions from a \u003Ccode dir=\"auto\">list&#x3C;Timeline&#x3C;bool>>\u003C/code>. These allow us to easily determine if all boolean timelines in a list are \u003Ccode dir=\"auto\">true\u003C/code>, or if at least one is \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/p>\n\u003Cp>However, a practical question quickly arises: what if our source timelines don’t inherently represent boolean states? Consider these common scenarios:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Multiple HTTP Requests:\u003C/strong> We might have several independent HTTP requests, each represented by a \u003Ccode dir=\"auto\">Timeline\u003C/code> that will eventually hold a response object (e.g., \u003Ccode dir=\"auto\">Timeline&#x3C;HttpResponseInfo>\u003C/code>). How do we create a single \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> that tells us if \u003Cem>all\u003C/em> these requests completed successfully?\u003C/li>\n\u003Cli>\u003Cstrong>Form Input Validation:\u003C/strong> A form might have various input fields, each with its own validation logic. An email field might return \u003Ccode dir=\"auto\">Timeline&#x3C;EmailValidationResult>\u003C/code>, a password field \u003Ccode dir=\"auto\">Timeline&#x3C;PasswordStrengthScore>\u003C/code>, and a username field \u003Ccode dir=\"auto\">Timeline&#x3C;UsernameAvailability>\u003C/code>. How do we combine these diverse validation outcomes into a single \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> indicating if the \u003Cem>entire form\u003C/em> is valid?\u003C/li>\n\u003Cli>\u003Cstrong>System Health Checks:\u003C/strong> Monitoring various system components (database, external services, internal queues), each providing status updates via a \u003Ccode dir=\"auto\">Timeline\u003C/code> (e.g., \u003Ccode dir=\"auto\">Timeline&#x3C;ServiceStatus>\u003C/code>). How do we get an overall \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> for “all systems operational”?\u003C/li>\n\u003C/ul>\n\u003Cp>In these cases, the source data isn’t directly boolean, but we need to derive a boolean condition from each source before we can perform a logical aggregation (like AND or OR) across all of them. This chapter introduces a versatile two-step pattern to address this: \u003Cstrong>“Map to Boolean, then Aggregate.”\u003C/strong>\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"92-the-core-pattern-map-then-aggregate\">9.2 The Core Pattern: Map, Then Aggregate\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#92-the-core-pattern-map-then-aggregate\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.2 The Core Pattern: Map, Then Aggregate”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The “Map to Boolean, then Aggregate” pattern is a straightforward yet powerful strategy for applying logical aggregation to collections of non-boolean timelines. It involves two distinct steps:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Step 1: Map to Boolean (\u003Ccode dir=\"auto\">Timeline&#x3C;'a> -> Timeline&#x3C;bool>\u003C/code>)\u003C/strong>\nFor each individual source timeline that doesn’t inherently hold a boolean value (let’s say it’s a \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>), we use the \u003Ccode dir=\"auto\">TL.map\u003C/code> combinator (from Unit 4, Chapter 3). We provide \u003Ccode dir=\"auto\">TL.map\u003C/code> with a predicate function of type \u003Ccode dir=\"auto\">'a -> bool\u003C/code>. This function takes the value from the source timeline and transforms it into a boolean value representing the specific condition we care about for that source.\u003C/p>\n\u003Cul>\n\u003Cli>Example: If \u003Ccode dir=\"auto\">sourceTimeline: Timeline&#x3C;HttpResponseInfo>\u003C/code>, the mapping function might be \u003Ccode dir=\"auto\">fun responseInfo -> responseInfo.IsSuccess\u003C/code>. This produces a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> indicating if that specific request was successful.\u003C/li>\n\u003Cli>Example: If \u003Ccode dir=\"auto\">sourceTimeline: Timeline&#x3C;string>\u003C/code> for a username, the mapping function might be \u003Ccode dir=\"auto\">fun username -> username.Length > 3 &#x26;&#x26; not (System.String.IsNullOrWhiteSpace username) (* more checks *)\u003C/code>. This produces a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> indicating if the username is valid.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Step 2: Aggregate Booleans (\u003Ccode dir=\"auto\">list&#x3C;Timeline&#x3C;bool>> -> Timeline&#x3C;bool>\u003C/code>)\u003C/strong>\nOnce each of the original source timelines has been transformed into a \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> representing the relevant boolean condition, we collect these new \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances into a list.\nThen, we apply one of the n-ary boolean aggregation combinators developed in Chapter 8:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TL.all\u003C/code>: To check if \u003Cem>all\u003C/em> conditions are true.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.any\u003C/code>: To check if \u003Cem>any\u003C/em> of the conditions are true.\nThis yields a final, single \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> representing the overall aggregated logical state.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This pattern elegantly separates concerns:\u003C/p>\n\u003Cul>\n\u003Cli>The logic for determining the boolean status of an individual source is encapsulated within its specific mapping function.\u003C/li>\n\u003Cli>The logic for aggregating multiple boolean statuses is handled by the general-purpose \u003Ccode dir=\"auto\">TL.all\u003C/code> or \u003Ccode dir=\"auto\">TL.any\u003C/code> combinators.\u003C/li>\n\u003C/ul>\n\u003Cp>This composability makes the overall system easier to understand, maintain, and extend.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"93-example-aggregating-success-of-multiple-http-requests\">9.3 Example: Aggregating Success of Multiple HTTP Requests\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#93-example-aggregating-success-of-multiple-http-requests\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.3 Example: Aggregating Success of Multiple HTTP Requests”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s make the common scenario of checking if multiple HTTP requests have all completed successfully more concrete.\u003C/p>\n\u003Cp>\u003Cstrong>Scenario Setup:\u003C/strong>\nSuppose we have functions that initiate different API calls. Each returns a \u003Ccode dir=\"auto\">Timeline\u003C/code> that will eventually contain information about the HTTP response. (This example reuses the \u003Ccode dir=\"auto\">HttpResponseInfo\u003C/code> type and \u003Ccode dir=\"auto\">makeRequest\u003C/code> function structure from the original Chapter 11, which mirrors the case study in original Chapter 12 / new Chapter 10).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all, TL.any are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume isNull helper is globally available.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Record definition (similar to one used in Chapter 10's case study)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">StatusCode\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">IsSuccess\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// True if status code indicates success (e.g., 2xx)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ContentLength\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int64\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Functions that simulate making requests and returning results on timelines\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// In a real app, these would involve actual async HTTP calls (see Unit 4, Chapter 4)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">makeRequest\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> url simulatedStatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">response\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">StatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> simulatedStatusCode\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">IsSuccess \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> simulatedStatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">200\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> simulatedStatusCode \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">300\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">ContentLength \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">1024\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">L \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Dummy length\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">Timeline response \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// In a real scenario, this would be updated async\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request1Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> makeRequest \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">/api/data/1\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">200\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request2Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> makeRequest \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">/api/data/2\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">200\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request3Result\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">HttpResponseInfo\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> makeRequest \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">/api/data/3\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">404\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This one will fail\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all, TL.any are accessible.// Assume isNull helper is globally available.// Record definition (similar to one used in Chapter 10&#x27;s case study)type HttpResponseInfo = {    Url: string    StatusCode: int    IsSuccess: bool // True if status code indicates success (e.g., 2xx)    ContentLength: int64}// Functions that simulate making requests and returning results on timelines// In a real app, these would involve actual async HTTP calls (see Unit 4, Chapter 4)let makeRequest : string -> int -> Timeline\u003CHttpResponseInfo> =    fun url simulatedStatusCode ->        let response : HttpResponseInfo =            { Url = url              StatusCode = simulatedStatusCode              IsSuccess = simulatedStatusCode >= 200 &#x26;&#x26; simulatedStatusCode \u003C 300              ContentLength = 1024L } // Dummy length        Timeline response // In a real scenario, this would be updated asynclet request1Result: Timeline\u003CHttpResponseInfo> = makeRequest &#x22;/api/data/1&#x22; 200let request2Result: Timeline\u003CHttpResponseInfo> = makeRequest &#x22;/api/data/2&#x22; 200let request3Result: Timeline\u003CHttpResponseInfo> = makeRequest &#x22;/api/data/3&#x22; 404 // This one will fail\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Step 1: Map each request result to \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> (Success/Failure)\u003C/strong>\nWe need a function to determine if an \u003Ccode dir=\"auto\">HttpResponseInfo\u003C/code> represents a successful request.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Continued from previous F# block)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Mapping function: extracts the IsSuccess flag\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">wasRequestSuccessfulPredicate\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpResponseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> responseInfo \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">responseInfo.IsSuccess\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create boolean timelines representing the success of each request\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request1Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request1Result \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map wasRequestSuccessfulPredicate\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request2Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request2Result \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map wasRequestSuccessfulPredicate\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">request3Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request3Result \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map wasRequestSuccessfulPredicate\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// At this point (conceptually, after initial values are processed):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// request1Succeeded |> TL.at Now  // true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// request2Succeeded |> TL.at Now  // true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// request3Succeeded |> TL.at Now  // false\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// (Continued from previous F# block)// Mapping function: extracts the IsSuccess flaglet wasRequestSuccessfulPredicate : HttpResponseInfo -> bool =    fun responseInfo ->        responseInfo.IsSuccess// Create boolean timelines representing the success of each requestlet request1Succeeded: Timeline\u003Cbool> = request1Result |> TL.map wasRequestSuccessfulPredicatelet request2Succeeded: Timeline\u003Cbool> = request2Result |> TL.map wasRequestSuccessfulPredicatelet request3Succeeded: Timeline\u003Cbool> = request3Result |> TL.map wasRequestSuccessfulPredicate// At this point (conceptually, after initial values are processed):// request1Succeeded |> TL.at Now  // true// request2Succeeded |> TL.at Now  // true// request3Succeeded |> TL.at Now  // false\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Step 2: Aggregate the boolean success timelines\u003C/strong>\nNow that we have a list of \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances, we use \u003Ccode dir=\"auto\">TL.all\u003C/code> (from Chapter 8).\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Continued from previous F# block)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">allRequestsSucceeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">request1Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request2Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request3Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.all \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the n-ary combinator TL.all (from Chapter 8)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial: All requests succeeded? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">allRequestsSucceeded \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial: All requests succeeded? false (because request3 failed)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// To check if *any* request succeeded:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">anyRequestSucceeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">request1Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request2Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> request3Succeeded\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.any \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the n-ary combinator TL.any (from Chapter 8)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial: Any request succeeded? \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">anyRequestSucceeded \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial: Any request succeeded? true (because request1 and request2 succeeded)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// (Continued from previous F# block)let allRequestsSucceeded: Timeline\u003Cbool> =    [request1Succeeded; request2Succeeded; request3Succeeded]    |> TL.all // Using the n-ary combinator TL.all (from Chapter 8)printfn &#x22;Initial: All requests succeeded? %b&#x22; (allRequestsSucceeded |> TL.at Now)// Expected Output: Initial: All requests succeeded? false (because request3 failed)// To check if *any* request succeeded:let anyRequestSucceeded: Timeline\u003Cbool> =    [request1Succeeded; request2Succeeded; request3Succeeded]    |> TL.any // Using the n-ary combinator TL.any (from Chapter 8)printfn &#x22;Initial: Any request succeeded? %b&#x22; (anyRequestSucceeded |> TL.at Now)// Expected Output: Initial: Any request succeeded? true (because request1 and request2 succeeded)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This demonstrates the pattern. For efficiency, one would typically apply \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (Chapter 6) to \u003Ccode dir=\"auto\">allRequestsSucceeded\u003C/code> or \u003Ccode dir=\"auto\">anyRequestSucceeded\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"94-example-validating-multiple-input-fields-for-form-submission\">9.4 Example: Validating Multiple Input Fields for Form Submission\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#94-example-validating-multiple-input-fields-for-form-submission\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.4 Example: Validating Multiple Input Fields for Form Submission”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Another common use case is determining if a form is ready for submission.\u003C/p>\n\u003Cp>\u003Cstrong>Scenario Setup:\u003C/strong>\nA registration form with username, password complexity, and email format.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Simulate input timelines and their validation state\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> EmailValidationStatus \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> NotValidated \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Validating \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Valid \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Invalid\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">usernameValue\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">passwordScore\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Score from 0-100\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">emailStatus\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">EmailValidationStatus\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline EmailValidationStatus.NotValidated\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, TL.at, TL.define, TL.map, TL.all are accessible.// Simulate input timelines and their validation statetype EmailValidationStatus = NotValidated | Validating | Valid | Invalidlet usernameValue: Timeline\u003Cstring> = Timeline &#x22;&#x22;let passwordScore: Timeline\u003Cint> = Timeline 0 // Score from 0-100let emailStatus: Timeline\u003CEmailValidationStatus> = Timeline EmailValidationStatus.NotValidated\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Step 1: Map each input state to \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> (Is Valid?)\u003C/strong>\nDefine predicates for each field.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Continued from previous F# block)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isUsernameValidCriteria\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> name \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> name.Length \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isPasswordStrongCriteria\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> score \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">75\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isEmailFormatValidCriteria\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> EmailValidationStatus \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> status \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> status \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> EmailValidationStatus.Valid\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create boolean timelines for each validation check\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">usernameIsValid\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> usernameValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map isUsernameValidCriteria\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">passwordIsStrong\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> passwordScore \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map isPasswordStrongCriteria\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">emailFormatIsValid\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> emailStatus \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map isEmailFormatValidCriteria\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// (Continued from previous F# block)let isUsernameValidCriteria : string -> bool =    fun name -> name.Length >= 4let isPasswordStrongCriteria : int -> bool =    fun score -> score >= 75let isEmailFormatValidCriteria : EmailValidationStatus -> bool =    fun status -> status = EmailValidationStatus.Valid// Create boolean timelines for each validation checklet usernameIsValid: Timeline\u003Cbool> = usernameValue |> TL.map isUsernameValidCriterialet passwordIsStrong: Timeline\u003Cbool> = passwordScore |> TL.map isPasswordStrongCriterialet emailFormatIsValid: Timeline\u003Cbool> = emailStatus |> TL.map isEmailFormatValidCriteria\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Step 2: Aggregate for overall form validity\u003C/strong>\nUse \u003Ccode dir=\"auto\">TL.all\u003C/code> to check if all individual validation timelines are \u003Ccode dir=\"auto\">true\u003C/code>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// (Continued from previous F# block)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">isFormReadyToSubmit\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">[\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">usernameIsValid\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> passwordIsStrong\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> emailFormatIsValid\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">]\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.all \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using new TL.all\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// This timeline can now be used to enable/disable a submit button.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let submitButtonReaction (canSubmit: bool) : unit = (* submitButton.IsEnabled &#x3C;- canSubmit *) ()\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// isFormReadyToSubmit |> TL.map submitButtonReaction |> ignore\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial form readiness: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isFormReadyToSubmit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Initial form readiness: false\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Simulate user typing and validation occurring\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">usernameValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">TestUser\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// usernameIsValid becomes true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">passwordScore \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">80\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">           \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// passwordIsStrong becomes true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">emailStatus \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now EmailValidationStatus.Valid \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// emailFormatIsValid becomes true\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updated form readiness: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%b\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isFormReadyToSubmit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Expected Output: Updated form readiness: true\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// (Continued from previous F# block)let isFormReadyToSubmit: Timeline\u003Cbool> =    [usernameIsValid; passwordIsStrong; emailFormatIsValid]    |> TL.all // Using new TL.all// This timeline can now be used to enable/disable a submit button.// let submitButtonReaction (canSubmit: bool) : unit = (* submitButton.IsEnabled \u003C- canSubmit *) ()// isFormReadyToSubmit |> TL.map submitButtonReaction |> ignoreprintfn &#x22;Initial form readiness: %b&#x22; (isFormReadyToSubmit |> TL.at Now)// Expected Output: Initial form readiness: false// Simulate user typing and validation occurringusernameValue |> TL.define Now &#x22;TestUser&#x22;    // usernameIsValid becomes truepasswordScore |> TL.define Now 80           // passwordIsStrong becomes trueemailStatus |> TL.define Now EmailValidationStatus.Valid // emailFormatIsValid becomes trueprintfn &#x22;Updated form readiness: %b&#x22; (isFormReadyToSubmit |> TL.at Now)// Expected Output: Updated form readiness: true\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This \u003Ccode dir=\"auto\">isFormReadyToSubmit\u003C/code> timeline reactively reflects the overall form validity.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"95-benefits-of-the-map-to-boolean-pattern\">9.5 Benefits of the “Map to Boolean” Pattern\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#95-benefits-of-the-map-to-boolean-pattern\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.5 Benefits of the “Map to Boolean” Pattern”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This two-step pattern offers significant advantages:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Modularity and Separation of Concerns:\u003C/strong>\n\u003Cul>\n\u003Cli>Individual condition logic is encapsulated in mapping functions (\u003Ccode dir=\"auto\">'a -> bool\u003C/code>).\u003C/li>\n\u003Cli>Aggregation is handled by generic \u003Ccode dir=\"auto\">TL.all\u003C/code> or \u003Ccode dir=\"auto\">TL.any\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Reusability:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">TL.all\u003C/code>, \u003Ccode dir=\"auto\">TL.any\u003C/code> are highly reusable.\u003C/li>\n\u003Cli>Mapping functions can also be reused.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Clarity and Readability:\u003C/strong>\n\u003Cul>\n\u003Cli>The two-step process often makes overall logic easier to understand.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Flexibility:\u003C/strong>\n\u003Cul>\n\u003Cli>Different mapping functions can be applied to diverse data types before aggregation.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"96-conclusion-a-versatile-strategy-for-complex-conditions\">9.6 Conclusion: A Versatile Strategy for Complex Conditions\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#96-conclusion-a-versatile-strategy-for-complex-conditions\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “9.6 Conclusion: A Versatile Strategy for Complex Conditions”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The “Map to Boolean, then Aggregate” pattern is a cornerstone strategy for applying logical AND/OR combinators (\u003Ccode dir=\"auto\">TL.Or\u003C/code>/\u003Ccode dir=\"auto\">TL.And\u003C/code> for binary from Chapter 7, \u003Ccode dir=\"auto\">TL.any\u003C/code>/\u003Ccode dir=\"auto\">TL.all\u003C/code> for n-ary from Chapter 8) to collections of reactive data sources not initially boolean. By first using \u003Ccode dir=\"auto\">TL.map\u003C/code> to transform diverse timelines into \u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> instances representing specific conditions, we then leverage the power and robustness of \u003Ccode dir=\"auto\">TL.all\u003C/code> and \u003Ccode dir=\"auto\">TL.any\u003C/code> for aggregation.\u003C/p>\n\u003Cp>This approach embodies the composable nature of functional reactive programming. It effectively concludes our primary discussion on fundamental combinators for boolean logic within Unit 5, Section 1.\u003C/p>\n\u003Cp>With the tools and patterns explored – from naive Monoids (Chapter 3), motivations for general tools (Chapter 4), \u003Ccode dir=\"auto\">TL.zipWith\u003C/code> (Chapter 5), \u003Ccode dir=\"auto\">TL.distinctUntilChanged\u003C/code> (Chapter 6), refined binary (\u003Ccode dir=\"auto\">TL.Or\u003C/code>, \u003Ccode dir=\"auto\">TL.And\u003C/code> in Chapter 7) and n-ary (\u003Ccode dir=\"auto\">TL.any\u003C/code>, \u003Ccode dir=\"auto\">TL.all\u003C/code> in Chapter 8) logical combinators, and now this “Map to Boolean” strategy – you are equipped to construct a wide range of complex and robust reactive systems. The final chapter in this section will present a comprehensive case study putting many of these pieces together.\u003C/p>",{"headings":1861,"localImagePaths":1880,"remoteImagePaths":1881,"frontmatter":1882,"imagePaths":1883},[1862,1865,1868,1871,1874,1877],{"depth":182,"slug":1863,"text":1864},"91-introduction-the-challenge-of-aggregating-diverse-data","9.1 Introduction: The Challenge of Aggregating Diverse Data",{"depth":182,"slug":1866,"text":1867},"92-the-core-pattern-map-then-aggregate","9.2 The Core Pattern: Map, Then Aggregate",{"depth":182,"slug":1869,"text":1870},"93-example-aggregating-success-of-multiple-http-requests","9.3 Example: Aggregating Success of Multiple HTTP Requests",{"depth":182,"slug":1872,"text":1873},"94-example-validating-multiple-input-fields-for-form-submission","9.4 Example: Validating Multiple Input Fields for Form Submission",{"depth":182,"slug":1875,"text":1876},"95-benefits-of-the-map-to-boolean-pattern","9.5 Benefits of the “Map to Boolean” Pattern",{"depth":182,"slug":1878,"text":1879},"96-conclusion-a-versatile-strategy-for-complex-conditions","9.6 Conclusion: A Versatile Strategy for Complex Conditions",[],[],{"title":1850,"description":1851},[],"en/book/unit-3/section-3/0-option",{"id":1884,"data":1886,"body":1892,"filePath":1893,"digest":1894,"rendered":1895},{"title":1887,"description":1888,"editUrl":16,"head":1889,"template":18,"sidebar":1890,"pagefind":16,"draft":20},"Section 2: Option (Maybe) Functor and Monad","Option (also called Maybe) is a container for handling the possibility of missing values. It expresses the presence or absence of a value in the type, as a safer alternative to null or undefined.",[],{"hidden":20,"attrs":1891},{},"Option (also called Maybe) is a container for handling the possibility of missing values. It expresses the presence or absence of a value in the type, as a safer alternative to `null` or `undefined`.\n\n- Functor: Applies a function only if a value is present (`map`).\n- Monad: Allows safe chaining of computations, even if the value disappears along the way (`flatMap`).\n\nOption is used to safely handle failures or missing values.","src/content/docs/en/book/unit-3/section-3/0-option.md","83359b9b92fc7903",{"html":1896,"metadata":1897},"\u003Cp>Option (also called Maybe) is a container for handling the possibility of missing values. It expresses the presence or absence of a value in the type, as a safer alternative to \u003Ccode dir=\"auto\">null\u003C/code> or \u003Ccode dir=\"auto\">undefined\u003C/code>.\u003C/p>\n\u003Cul>\n\u003Cli>Functor: Applies a function only if a value is present (\u003Ccode dir=\"auto\">map\u003C/code>).\u003C/li>\n\u003Cli>Monad: Allows safe chaining of computations, even if the value disappears along the way (\u003Ccode dir=\"auto\">flatMap\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>Option is used to safely handle failures or missing values.\u003C/p>",{"headings":1898,"localImagePaths":1899,"remoteImagePaths":1900,"frontmatter":1901,"imagePaths":1902},[],[],[],{"title":1887,"description":1888},[],"en/book/unit-3/section-3/1-option-functor",{"id":1903,"data":1905,"body":1911,"filePath":1912,"digest":1913,"rendered":1914},{"title":1906,"description":1907,"editUrl":16,"head":1908,"template":18,"sidebar":1909,"pagefind":16,"draft":20},"Option Functor","Option, as a Functor, provides Option.map to apply a function only if the value is Some.",[],{"hidden":20,"attrs":1910},{},"Option, as a Functor, provides `Option.map` to apply a function only if the value is Some.\n\n## Example in F#\n\n```fsharp\nlet value = Some 10\nlet doubled = value |> Option.map (fun x -> x * 2)\n// doubled = Some 20\n\nlet noneValue = None\nlet doubledNone = noneValue |> Option.map (fun x -> x * 2)\n// doubledNone = None\n```\n\nOption.map applies the function only if a value is present.","src/content/docs/en/book/unit-3/section-3/1-option-functor.md","3b1c517941f56594",{"html":1915,"metadata":1916},"\u003Cp>Option, as a Functor, provides \u003Ccode dir=\"auto\">Option.map\u003C/code> to apply a function only if the value is Some.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">value\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubled\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Option.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// doubled = Some 20\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">noneValue\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubledNone\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> noneValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Option.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// doubledNone = None\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let value = Some 10let doubled = value |> Option.map (fun x -> x * 2)// doubled = Some 20let noneValue = Nonelet doubledNone = noneValue |> Option.map (fun x -> x * 2)// doubledNone = None\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Option.map applies the function only if a value is present.\u003C/p>",{"headings":1917,"localImagePaths":1919,"remoteImagePaths":1920,"frontmatter":1921,"imagePaths":1922},[1918],{"depth":182,"slug":1361,"text":1362},[],[],{"title":1906,"description":1907},[],"en/book/unit-3/section-3/2-option-monad",{"id":1923,"data":1925,"body":1931,"filePath":1932,"digest":1933,"rendered":1934},{"title":1926,"description":1927,"editUrl":16,"head":1928,"template":18,"sidebar":1929,"pagefind":16,"draft":20},"Option Monad","Option, as a Monad, provides bind (Option.bind in F#), which enables powerful control over computation flow.",[],{"hidden":20,"attrs":1930},{},"Option, as a Monad, provides `bind` (Option.bind in F#), which enables powerful control over computation flow.\n\n## Example in F#\n\n```fsharp\nlet safeDivide = fun x y -> if y = 0 then None else Some (x / y)\nlet result = Some 100 |> Option.bind (fun x -> safeDivide x 2) |> Option.bind (fun x -> safeDivide x 0)\n// result = None\n```\n\n---\n\n## Functor (map) vs Monad (bind): Capabilities and Limitations\n\n- Functor's `map` applies a function only if the value is Some, leaving None unchanged. It can transform the value inside Some, but cannot change Some to None or vice versa. The container's shape (Some/None) is preserved, so early exit or conditional logic is not possible.\n- Monad's `bind` allows the function to return Some or None, enabling short-circuiting: if any step returns None, subsequent computations are skipped. This allows for safe chaining of computations that may fail, early exit, and conditional logic—capabilities not possible with map alone.\n\nThis distinction is fundamental: map is for value transformation only, while bind enables control over the computation's flow and structure.","src/content/docs/en/book/unit-3/section-3/2-option-monad.md","d8a394bfec18e7b5",{"html":1935,"metadata":1936},"\u003Cp>Option, as a Monad, provides \u003Ccode dir=\"auto\">bind\u003C/code> (Option.bind in F#), which enables powerful control over computation flow.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">safeDivide\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> None \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">/\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Some \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">100\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Option.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> safeDivide x \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Option.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> safeDivide x \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result = None\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let safeDivide = fun x y -> if y = 0 then None else Some (x / y)let result = Some 100 |> Option.bind (fun x -> safeDivide x 2) |> Option.bind (fun x -> safeDivide x 0)// result = None\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"functor-map-vs-monad-bind-capabilities-and-limitations\">Functor (map) vs Monad (bind): Capabilities and Limitations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#functor-map-vs-monad-bind-capabilities-and-limitations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Functor (map) vs Monad (bind): Capabilities and Limitations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Functor’s \u003Ccode dir=\"auto\">map\u003C/code> applies a function only if the value is Some, leaving None unchanged. It can transform the value inside Some, but cannot change Some to None or vice versa. The container’s shape (Some/None) is preserved, so early exit or conditional logic is not possible.\u003C/li>\n\u003Cli>Monad’s \u003Ccode dir=\"auto\">bind\u003C/code> allows the function to return Some or None, enabling short-circuiting: if any step returns None, subsequent computations are skipped. This allows for safe chaining of computations that may fail, early exit, and conditional logic—capabilities not possible with map alone.\u003C/li>\n\u003C/ul>\n\u003Cp>This distinction is fundamental: map is for value transformation only, while bind enables control over the computation’s flow and structure.\u003C/p>",{"headings":1937,"localImagePaths":1942,"remoteImagePaths":1943,"frontmatter":1944,"imagePaths":1945},[1938,1939],{"depth":182,"slug":1361,"text":1362},{"depth":182,"slug":1940,"text":1941},"functor-map-vs-monad-bind-capabilities-and-limitations","Functor (map) vs Monad (bind): Capabilities and Limitations",[],[],{"title":1926,"description":1927},[],"en/book/unit-4/section-0/0-about-unit",{"id":1946,"data":1948,"body":1954,"filePath":1955,"digest":1956,"rendered":1957},{"title":1949,"description":1950,"editUrl":16,"head":1951,"template":18,"sidebar":1952,"pagefind":16,"draft":20},"🔍 Overview - Unit 4","In this chapter, we bring together the core ideas explored so far and focus on one of the most powerful aspects of functional programming: the unified treatment of state, events, and concurrency.",[],{"hidden":20,"attrs":1953},{},"In this chapter, we bring together the core ideas explored so far and focus on one of the most powerful aspects of functional programming: the unified treatment of state, events, and concurrency.\n\nHere, we will see how functional programming—especially through the lens of Functional Reactive Programming (FRP)—offers a cohesive and elegant approach to managing values that change over time, discrete events, and concurrent computations. This unit builds directly on the unifying perspective introduced in Unit 0, showing how streams and pipelines can simplify even the most complex interactive and concurrent applications.","src/content/docs/en/book/unit-4/section-0/0-about-unit.md","c72016f321058d1e",{"html":1958,"metadata":1959},"\u003Cp>In this chapter, we bring together the core ideas explored so far and focus on one of the most powerful aspects of functional programming: the unified treatment of state, events, and concurrency.\u003C/p>\n\u003Cp>Here, we will see how functional programming—especially through the lens of Functional Reactive Programming (FRP)—offers a cohesive and elegant approach to managing values that change over time, discrete events, and concurrent computations. This unit builds directly on the unifying perspective introduced in Unit 0, showing how streams and pipelines can simplify even the most complex interactive and concurrent applications.\u003C/p>",{"headings":1960,"localImagePaths":1961,"remoteImagePaths":1962,"frontmatter":1963,"imagePaths":1964},[],[],[],{"title":1949,"description":1950},[],"en/book/unit-3/section-5/0-io",{"id":1965,"data":1967,"body":1973,"filePath":1974,"digest":1975,"rendered":1976},{"title":1968,"description":1969,"editUrl":16,"head":1970,"template":18,"sidebar":1971,"pagefind":16,"draft":20},"Section 4: IO Functor and Monad","IO is a container for treating effectful computations as values. It delays side effects until execution, helping to maintain pure functional programming.",[],{"hidden":20,"attrs":1972},{},"IO is a container for treating effectful computations as values. It delays side effects until execution, helping to maintain pure functional programming.\n\n- Functor: Applies a function to the value inside IO (`map`).\n- Monad: Chains multiple IO actions in sequence (`flatMap`).\n\nIO is used to safely handle interactions with the outside world (input/output, side effects).","src/content/docs/en/book/unit-3/section-5/0-io.md","3902764d57a4160d",{"html":1977,"metadata":1978},"\u003Cp>IO is a container for treating effectful computations as values. It delays side effects until execution, helping to maintain pure functional programming.\u003C/p>\n\u003Cul>\n\u003Cli>Functor: Applies a function to the value inside IO (\u003Ccode dir=\"auto\">map\u003C/code>).\u003C/li>\n\u003Cli>Monad: Chains multiple IO actions in sequence (\u003Ccode dir=\"auto\">flatMap\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>IO is used to safely handle interactions with the outside world (input/output, side effects).\u003C/p>",{"headings":1979,"localImagePaths":1980,"remoteImagePaths":1981,"frontmatter":1982,"imagePaths":1983},[],[],[],{"title":1968,"description":1969},[],"en/book/unit-3/section-5/2-io-functor",{"id":1984,"data":1986,"body":1992,"filePath":1993,"digest":1994,"rendered":1995},{"title":1987,"description":1988,"editUrl":16,"head":1989,"template":18,"sidebar":1990,"pagefind":16,"draft":20},"IO Functor","IO is a type for treating effectful computations as values. As a Functor, it provides mapIO to apply a function to the value inside IO.",[],{"hidden":20,"attrs":1991},{},"IO is a type for treating effectful computations as values. As a Functor, it provides `mapIO` to apply a function to the value inside IO.\n\n## Example in F# (pseudo IO type)\n\n```fsharp\ntype IO\u003C'a> = IO of (unit -> 'a)\n\nmapIO = fun f (IO action) -> IO (fun () -> f (action ()))\n\nlet ioValue = IO (fun () -> 10)\nlet mappedIO = ioValue |> mapIO (fun x -> x * 2)\n// mappedIO |> fun (IO act) -> act () = 20\n```\n\nThis way, you can apply a function to the value inside IO.","src/content/docs/en/book/unit-3/section-5/2-io-functor.md","b1985186fe5d560d",{"html":1996,"metadata":1997},"\u003Cp>IO is a type for treating effectful computations as values. As a Functor, it provides \u003Ccode dir=\"auto\">mapIO\u003C/code> to apply a function to the value inside IO.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f-pseudo-io-type\">Example in F# (pseudo IO type)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f-pseudo-io-type\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F# (pseudo IO type)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">of\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">mapIO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">IO\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> action\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">action \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()))\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">ioValue\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mappedIO\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ioValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> mapIO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// mappedIO |> fun (IO act) -> act () = 20\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"type IO\u003C&#x27;a> = IO of (unit -> &#x27;a)mapIO = fun f (IO action) -> IO (fun () -> f (action ()))let ioValue = IO (fun () -> 10)let mappedIO = ioValue |> mapIO (fun x -> x * 2)// mappedIO |> fun (IO act) -> act () = 20\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This way, you can apply a function to the value inside IO.\u003C/p>",{"headings":1998,"localImagePaths":2002,"remoteImagePaths":2003,"frontmatter":2004,"imagePaths":2005},[1999],{"depth":182,"slug":2000,"text":2001},"example-in-f-pseudo-io-type","Example in F# (pseudo IO type)",[],[],{"title":1987,"description":1988},[],"en/book/unit-3/section-5/3-io-monad",{"id":2006,"data":2008,"body":2014,"filePath":2015,"digest":2016,"rendered":2017},{"title":2009,"description":2010,"editUrl":16,"head":2011,"template":18,"sidebar":2012,"pagefind":16,"draft":20},"IO Monad","IO, as a Monad, allows chaining multiple IO actions in sequence, enabling dynamic and controlled side-effectful workflows.",[],{"hidden":20,"attrs":2013},{},"IO, as a Monad, allows chaining multiple IO actions in sequence, enabling dynamic and controlled side-effectful workflows.\n\n## Example in F# (pseudo IO type)\n\n```fsharp\ntype IO\u003C'a> = IO of (unit -> 'a)\nbindIO = fun f (IO action) -> f (action ())\n\nlet readInput = IO (fun () -> System.Console.ReadLine())\nlet printTwice = fun input -> IO (fun () -> printfn \"%s\" input; printfn \"%s\" input)\nlet program = readInput |> bindIO printTwice\n// When executed, this will read input and print it twice\n```\n\n---\n\n## Functor (map) vs Monad (bind): Capabilities and Limitations\n\n- Functor's `mapIO` applies a function to the value produced by an IO action, wrapping the result in a new IO action. It cannot control the sequence or branching of side effects; the structure and order are fixed.\n- Monad's `bindIO` allows you to execute an IO action, then use its result to determine and execute the next IO action. This enables chaining, conditional branching, and complex workflows involving side effects—capabilities not possible with mapIO alone.\n\nThis distinction is fundamental: mapIO is for value transformation only, while bindIO enables full control over the flow and composition of side effects.","src/content/docs/en/book/unit-3/section-5/3-io-monad.md","6626fd3b70745085",{"html":2018,"metadata":2019},"\u003Cp>IO, as a Monad, allows chaining multiple IO actions in sequence, enabling dynamic and controlled side-effectful workflows.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f-pseudo-io-type\">Example in F# (pseudo IO type)\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f-pseudo-io-type\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F# (pseudo IO type)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">type\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">of\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bindIO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--1:#403F53\">\u003Cspan style=\"--0:#D7DBE0\">IO\u003C/span>\u003Cspan style=\"--0:#D6DEEB\"> action\u003C/span>\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">action \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">())\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">readInput\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System.Console.ReadLine\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">())\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">printTwice\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> input \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> IO \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> input\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> input\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">program\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> readInput \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bindIO printTwice\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// When executed, this will read input and print it twice\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"type IO\u003C&#x27;a> = IO of (unit -> &#x27;a)bindIO = fun f (IO action) -> f (action ())let readInput = IO (fun () -> System.Console.ReadLine())let printTwice = fun input -> IO (fun () -> printfn &#x22;%s&#x22; input; printfn &#x22;%s&#x22; input)let program = readInput |> bindIO printTwice// When executed, this will read input and print it twice\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"functor-map-vs-monad-bind-capabilities-and-limitations\">Functor (map) vs Monad (bind): Capabilities and Limitations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#functor-map-vs-monad-bind-capabilities-and-limitations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Functor (map) vs Monad (bind): Capabilities and Limitations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Functor’s \u003Ccode dir=\"auto\">mapIO\u003C/code> applies a function to the value produced by an IO action, wrapping the result in a new IO action. It cannot control the sequence or branching of side effects; the structure and order are fixed.\u003C/li>\n\u003Cli>Monad’s \u003Ccode dir=\"auto\">bindIO\u003C/code> allows you to execute an IO action, then use its result to determine and execute the next IO action. This enables chaining, conditional branching, and complex workflows involving side effects—capabilities not possible with mapIO alone.\u003C/li>\n\u003C/ul>\n\u003Cp>This distinction is fundamental: mapIO is for value transformation only, while bindIO enables full control over the flow and composition of side effects.\u003C/p>",{"headings":2020,"localImagePaths":2023,"remoteImagePaths":2024,"frontmatter":2025,"imagePaths":2026},[2021,2022],{"depth":182,"slug":2000,"text":2001},{"depth":182,"slug":1940,"text":1941},[],[],{"title":2009,"description":2010},[],"en/book/unit-3/section-4/0-result",{"id":2027,"data":2029,"body":2035,"filePath":2036,"digest":2037,"rendered":2038},{"title":2030,"description":2031,"editUrl":16,"head":2032,"template":18,"sidebar":2033,"pagefind":16,"draft":20},"Section 3: Result (Either) Functor and Monad","Result (also known as Either) is a container that represents both success and failure cases in the type. It allows you to safely handle error processing and branching results.",[],{"hidden":20,"attrs":2034},{},"Result (also known as Either) is a container that represents both success and failure cases in the type. It allows you to safely handle error processing and branching results.\n\n- Functor: Applies a function only in the success (Right/Ok) case (`map`).\n- Monad: Skips further computations if a failure (Left/Error) occurs along the way (`flatMap`).\n\nResult/Either is used for error handling without exceptions.","src/content/docs/en/book/unit-3/section-4/0-result.md","2b38b050f3a2e5e8",{"html":2039,"metadata":2040},"\u003Cp>Result (also known as Either) is a container that represents both success and failure cases in the type. It allows you to safely handle error processing and branching results.\u003C/p>\n\u003Cul>\n\u003Cli>Functor: Applies a function only in the success (Right/Ok) case (\u003Ccode dir=\"auto\">map\u003C/code>).\u003C/li>\n\u003Cli>Monad: Skips further computations if a failure (Left/Error) occurs along the way (\u003Ccode dir=\"auto\">flatMap\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>Result/Either is used for error handling without exceptions.\u003C/p>",{"headings":2041,"localImagePaths":2042,"remoteImagePaths":2043,"frontmatter":2044,"imagePaths":2045},[],[],[],{"title":2030,"description":2031},[],"en/book/unit-3/section-4/1-result-functor",{"id":2046,"data":2048,"body":2054,"filePath":2055,"digest":2056,"rendered":2057},{"title":2049,"description":2050,"editUrl":16,"head":2051,"template":18,"sidebar":2052,"pagefind":16,"draft":20},"Result (Either) Functor","Result (the Result type in F#) has two cases: success (Ok) and failure (Error). As a Functor, it provides Result.map to apply a function only in the success case.",[],{"hidden":20,"attrs":2053},{},"Result (the Result type in F#) has two cases: success (Ok) and failure (Error). As a Functor, it provides `Result.map` to apply a function only in the success case.\n\n## Example in F#\n\n```fsharp\nlet okValue = Ok 10\nlet mappedOk = okValue |> Result.map (fun x -> x * 2)\n// mappedOk = Ok 20\n\nlet errorValue = Error \"error\"\nlet mappedError = errorValue |> Result.map (fun x -> x * 2)\n// mappedError = Error \"error\"\n```\n\nResult.map applies the function only in the Ok case and returns Error unchanged.","src/content/docs/en/book/unit-3/section-4/1-result-functor.md","20d781874f9dcadb",{"html":2058,"metadata":2059},"\u003Cp>Result (the Result type in F#) has two cases: success (Ok) and failure (Error). As a Functor, it provides \u003Ccode dir=\"auto\">Result.map\u003C/code> to apply a function only in the success case.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">okValue\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Ok \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mappedOk\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> okValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Result.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// mappedOk = Ok 20\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">errorValue\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Error \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">error\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">mappedError\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> errorValue \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Result.map \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// mappedError = Error \"error\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let okValue = Ok 10let mappedOk = okValue |> Result.map (fun x -> x * 2)// mappedOk = Ok 20let errorValue = Error &#x22;error&#x22;let mappedError = errorValue |> Result.map (fun x -> x * 2)// mappedError = Error &#x22;error&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Result.map applies the function only in the Ok case and returns Error unchanged.\u003C/p>",{"headings":2060,"localImagePaths":2062,"remoteImagePaths":2063,"frontmatter":2064,"imagePaths":2065},[2061],{"depth":182,"slug":1361,"text":1362},[],[],{"title":2049,"description":2050},[],"en/book/unit-3/section-4/2-result-monad",{"id":2066,"data":2068,"body":2074,"filePath":2075,"digest":2076,"rendered":2077},{"title":2069,"description":2070,"editUrl":16,"head":2071,"template":18,"sidebar":2072,"pagefind":16,"draft":20},"Result (Either) Monad","Result, as a Monad, provides bind (Result.bind in F#), which enables robust error handling and control flow.",[],{"hidden":20,"attrs":2073},{},"Result, as a Monad, provides `bind` (Result.bind in F#), which enables robust error handling and control flow.\n\n## Example in F#\n\n```fsharp\nlet safeDivide = fun x y -> if y = 0 then Error \"div by zero\" else Ok (x / y)\nlet result = Ok 100 |> Result.bind (fun x -> safeDivide x 2) |> Result.bind (fun x -> safeDivide x 0)\n// result = Error \"div by zero\"\n```\n\n---\n\n## Functor (map) vs Monad (bind): Capabilities and Limitations\n\n- Functor's `map` applies a function only if the value is Ok, leaving Error unchanged. It can transform the value inside Ok, but cannot change Ok to Error or vice versa. The success/failure state is preserved, so error propagation or early exit is not possible.\n- Monad's `bind` allows the function to return Ok or Error, enabling short-circuiting: if any step returns Error, subsequent computations are skipped. This allows for safe error propagation, early exit on failure, and composition of error-prone computations—capabilities not possible with map alone.\n\nThis distinction is fundamental: map is for value transformation only, while bind enables control over the computation's flow and error handling.","src/content/docs/en/book/unit-3/section-4/2-result-monad.md","335e17ebb968aa30",{"html":2078,"metadata":2079},"\u003Cp>Result, as a Monad, provides \u003Ccode dir=\"auto\">bind\u003C/code> (Result.bind in F#), which enables robust error handling and control flow.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"example-in-f\">Example in F#\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#example-in-f\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Example in F#”\u003C/span>\u003C/a>\u003C/div>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">safeDivide\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Error \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">div by zero\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Ok \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">/\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> y\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">result\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Ok \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">100\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Result.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> safeDivide x \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Result.bind \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> safeDivide x \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">0\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// result = Error \"div by zero\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let safeDivide = fun x y -> if y = 0 then Error &#x22;div by zero&#x22; else Ok (x / y)let result = Ok 100 |> Result.bind (fun x -> safeDivide x 2) |> Result.bind (fun x -> safeDivide x 0)// result = Error &#x22;div by zero&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"functor-map-vs-monad-bind-capabilities-and-limitations\">Functor (map) vs Monad (bind): Capabilities and Limitations\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#functor-map-vs-monad-bind-capabilities-and-limitations\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Functor (map) vs Monad (bind): Capabilities and Limitations”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>Functor’s \u003Ccode dir=\"auto\">map\u003C/code> applies a function only if the value is Ok, leaving Error unchanged. It can transform the value inside Ok, but cannot change Ok to Error or vice versa. The success/failure state is preserved, so error propagation or early exit is not possible.\u003C/li>\n\u003Cli>Monad’s \u003Ccode dir=\"auto\">bind\u003C/code> allows the function to return Ok or Error, enabling short-circuiting: if any step returns Error, subsequent computations are skipped. This allows for safe error propagation, early exit on failure, and composition of error-prone computations—capabilities not possible with map alone.\u003C/li>\n\u003C/ul>\n\u003Cp>This distinction is fundamental: map is for value transformation only, while bind enables control over the computation’s flow and error handling.\u003C/p>",{"headings":2080,"localImagePaths":2083,"remoteImagePaths":2084,"frontmatter":2085,"imagePaths":2086},[2081,2082],{"depth":182,"slug":1361,"text":1362},{"depth":182,"slug":1940,"text":1941},[],[],{"title":2069,"description":2070},[],"en/book/unit-4/section-1/0-immutable-world",{"id":2087,"data":2089,"body":2095,"filePath":2096,"digest":2097,"rendered":2098},{"title":2090,"description":2091,"editUrl":16,"head":2092,"template":18,"sidebar":2093,"pagefind":16,"draft":20},"Chapter 0: Immutable World","Throughout this book, we've consistently explained that the core concept of programming is transforming data through pipelines of functions. We've shown that, in principle, all of this can be expressed mathematically—centered around binary operations and algebraic structures.",[],{"hidden":20,"attrs":2094},{},"Throughout this book, we've consistently explained that the core concept of programming is transforming data through pipelines of functions. We've shown that, in principle, all of this can be expressed mathematically—centered around binary operations and algebraic structures.\n\n![Pipeline image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png)\n\nWith a few exceptions like recursion, we've demonstrated that Monoids, Functors, and Monads all fit neatly into this pipeline model, either as binary operations or higher-order functions.\n\nWe've also shown that the terminology often used to describe functional programming is largely absent in mathematics, where these properties are simply taken for granted. Such terms mainly serve as an antithesis to imperative programming, helping learners \"unlearn\" old habits.\n\n**Immutability**, for example, is such a fundamental principle in mathematics that it's rarely even mentioned.\n\nThis leads to an important question:\n\n**If mathematics takes immutability for granted, why is it that in imperative programming, variables are typically mutable and change freely?**\n\n## 0.1 Mutable World\n\nThe answer is simple: our everyday experience of the world is mutable. The universe we inhabit evolves along the timeline, and this mindset is deeply embedded in imperative programming.\n\n![A naive worldview: Universe = Mutable](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825090668.png)\n\n-   Universe = Mutable: This is the default worldview, and imperative programming naturally adopts it.\n-   Mathematics = Mutable: This is a misconception—mathematics doesn't have such a concept; it's unique to programming.\n\nFor example, in games, simulations, or any program modeling a changing world, many programmers believe that immutability is impractical. They see mutable variables as the only realistic way to represent a world in flux, and view the immutability promoted by functional programming as an unattainable ideal.\n\n## 0.2 Block Universe: Immutable World\n\nSurprisingly, this worldview—that our universe is fundamentally mutable—is not supported by modern science. In theoretical physics, the universe is described mathematically, and those mathematical values are immutable. Even as the timeline progresses, each moment (t1, t2, t3, ...) is just a different value on the timeline; time itself is not overwritten like a mutable variable.\n\nFrom the perspective of theoretical physics, the universe is modeled as immutable.\n\nSome refer to this model as the \"Block Universe.\"\n\n![Block Universe illustration](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825055126.png)\n\nIn the Block Universe, as adopted by physics, all points on the timeline are equally real—no single moment is privileged.\n\n![All time is equal illustration](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825021613.png)\n\n![image](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746559141259.png)\n\n*Source: [\"Time’s Passage is Probably an Illusion\", SCIENTIFIC AMERICAN, Oct 24, 2014](https://www.scientificamerican.com/article/time-s-passage-is-probably-an-illusion/)*\n\nWhat we call the \"present\" is just a subjective experience; every observer at every point on the timeline considers their own \"now\" to be real. But this is, as Einstein put it, \"only a stubbornly persistent illusion.\"\n\n![Present is an illusion illustration](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825534766.png)\n\n> The distinction between the past, present and future is only a stubbornly persistent illusion.\n>\n> — Albert Einstein\n\nFunctional programming adopts this model:\n\n-   Universe = Immutable: The Block Universe, as in theoretical physics.\n-   Mathematics = Immutable: So fundamental that mathematics doesn't even need the term.\n\nAn immutable Block Universe can be accurately modeled with immutable mathematical structures.\n\n## 0.3 Introducing: Values That Change Over Timeline\n\nIn typical programming, a variable holds a single value at a time—like `x = 5` or `name = \"Alice\"`. But what about things that change as the timeline progresses?\n\n-   The position of your mouse pointer.\n-   The current temperature from a sensor.\n-   The text in a search box.\n-   Button clicks.\n\nIn our perspective of the immutable block universe, these are not just static values; they are **sequences of values or events over the timeline.**\n\n![Block Universe illustration](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825055126.png)\n\n**Functional Reactive Programming (FRP)** provides a powerful way to handle these dynamic, time-varying values. It lets us treat a **\"value over the timeline\" as a first-class** concept—a **container** that holds not just one value, but **the entire history and future of a value as it changes.**\n\nYou'll often hear these called:\n\n-   **Stream:** A flow of values or events, one after another.\n-   **Observable:** Something you can watch or subscribe to, reacting to new values as they appear.\n-   **Signal** or **Behavior:** A value that continuously exists and changes over the timeline.\n-   **Reactive Value:** A value that automatically updates in response to changes, representing dynamic, time-varying data.\n\nInstead of repeatedly asking \"what is the mouse position now?\", you can work with a `mousePositionStream`—a single entity representing all mouse positions over the timeline.\n\n## 0.4 Version History\n\nConceptually, a stream or reactive value can be seen as an immutable container that holds all data from the past to the future of the universe.\n\nIn fact, there is a familiar, real-world implementation of this idea for programmers: the version control system Git, well-known from GitHub. Git maintains the entire history of changes from the past to the future. While it may look like the current value (such as a document) is being destructively updated (mutable) in imperative programming, in reality, all previous versions are preserved immutably in the history.\n\n## 0.5 Conceptually Immutable\n\nOf course, such an implementation is also possible in FRP. However, in most practical cases, what we actually need is just the “latest value.” For reasons of memory and code efficiency, it is usually unnecessary to keep the entire history; instead, we simply overwrite the memory with the most recent value.\n\nIn other words, while values that change over the timeline are conceptually immutable, their actual implementation is often very similar to mutable values in imperative programming. The difference is that, in FRP, the mutable variable is encapsulated inside a container type called Reactive value, and it can only be manipulated through FRP-specific operators.\n\n## 0.6 FRP vs OOP\n\nInterestingly, this is very similar to the idea of encapsulation in object-oriented programming (OOP).\n\nIn fact, Alan Kay’s original vision for OOP—according to his own statements—was not well represented by the name “object-oriented programming.” Instead, he envisioned a system where objects, with their internal state hidden, would cooperate by sending “messages” to each other. He argued it should have been called “message-oriented” programming. This approach was intended as a departure from the chaos of imperative programming—even when structured—by promoting a new paradigm of coordination and encapsulation.\n\nHowever, the key difference is that, in FRP, all related ReactiveValues are fundamentally designed to keep their versions perfectly synchronized, just like Git. For example, when one value changes, all dependent values are automatically and consistently updated, ensuring the entire system remains in a coherent state.\n\nBy contrast, the fundamental problem with mutable variables in imperative programming is that this discipline is often lax. Programmers may try to keep the versions of separate variables in sync, but sometimes they forget, make mistakes, or simply ignore it. While OOP introduces encapsulation and some mechanisms to manage state, it does not, by design, guarantee the kind of automatic, system-wide version synchronization that FRP provides.\n\n[^1]: Alan Kay, “The Early History of Smalltalk,” ACM SIGPLAN Notices, 1993.","src/content/docs/en/book/unit-4/section-1/0-immutable-world.md","aca4a8cd28414f86",{"html":2099,"metadata":2100},"\u003Cp>Throughout this book, we’ve consistently explained that the core concept of programming is transforming data through pipelines of functions. We’ve shown that, in principle, all of this can be expressed mathematically—centered around binary operations and algebraic structures.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1744449185892.png\" alt=\"Pipeline image\">\u003C/p>\n\u003Cp>With a few exceptions like recursion, we’ve demonstrated that Monoids, Functors, and Monads all fit neatly into this pipeline model, either as binary operations or higher-order functions.\u003C/p>\n\u003Cp>We’ve also shown that the terminology often used to describe functional programming is largely absent in mathematics, where these properties are simply taken for granted. Such terms mainly serve as an antithesis to imperative programming, helping learners “unlearn” old habits.\u003C/p>\n\u003Cp>\u003Cstrong>Immutability\u003C/strong>, for example, is such a fundamental principle in mathematics that it’s rarely even mentioned.\u003C/p>\n\u003Cp>This leads to an important question:\u003C/p>\n\u003Cp>\u003Cstrong>If mathematics takes immutability for granted, why is it that in imperative programming, variables are typically mutable and change freely?\u003C/strong>\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"01-mutable-world\">0.1 Mutable World\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#01-mutable-world\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.1 Mutable World”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The answer is simple: our everyday experience of the world is mutable. The universe we inhabit evolves along the timeline, and this mindset is deeply embedded in imperative programming.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825090668.png\" alt=\"A naive worldview: Universe = Mutable\">\u003C/p>\n\u003Cul>\n\u003Cli>Universe = Mutable: This is the default worldview, and imperative programming naturally adopts it.\u003C/li>\n\u003Cli>Mathematics = Mutable: This is a misconception—mathematics doesn’t have such a concept; it’s unique to programming.\u003C/li>\n\u003C/ul>\n\u003Cp>For example, in games, simulations, or any program modeling a changing world, many programmers believe that immutability is impractical. They see mutable variables as the only realistic way to represent a world in flux, and view the immutability promoted by functional programming as an unattainable ideal.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"02-block-universe-immutable-world\">0.2 Block Universe: Immutable World\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#02-block-universe-immutable-world\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.2 Block Universe: Immutable World”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Surprisingly, this worldview—that our universe is fundamentally mutable—is not supported by modern science. In theoretical physics, the universe is described mathematically, and those mathematical values are immutable. Even as the timeline progresses, each moment (t1, t2, t3, …) is just a different value on the timeline; time itself is not overwritten like a mutable variable.\u003C/p>\n\u003Cp>From the perspective of theoretical physics, the universe is modeled as immutable.\u003C/p>\n\u003Cp>Some refer to this model as the “Block Universe.”\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825055126.png\" alt=\"Block Universe illustration\">\u003C/p>\n\u003Cp>In the Block Universe, as adopted by physics, all points on the timeline are equally real—no single moment is privileged.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825021613.png\" alt=\"All time is equal illustration\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1746559141259.png\" alt=\"image\">\u003C/p>\n\u003Cp>\u003Cem>Source: \u003Ca href=\"https://www.scientificamerican.com/article/time-s-passage-is-probably-an-illusion/\">“Time’s Passage is Probably an Illusion”, SCIENTIFIC AMERICAN, Oct 24, 2014\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>What we call the “present” is just a subjective experience; every observer at every point on the timeline considers their own “now” to be real. But this is, as Einstein put it, “only a stubbornly persistent illusion.”\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825534766.png\" alt=\"Present is an illusion illustration\">\u003C/p>\n\u003Cblockquote>\n\u003Cp>The distinction between the past, present and future is only a stubbornly persistent illusion.\u003C/p>\n\u003Cp>— Albert Einstein\u003C/p>\n\u003C/blockquote>\n\u003Cp>Functional programming adopts this model:\u003C/p>\n\u003Cul>\n\u003Cli>Universe = Immutable: The Block Universe, as in theoretical physics.\u003C/li>\n\u003Cli>Mathematics = Immutable: So fundamental that mathematics doesn’t even need the term.\u003C/li>\n\u003C/ul>\n\u003Cp>An immutable Block Universe can be accurately modeled with immutable mathematical structures.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"03-introducing-values-that-change-over-timeline\">0.3 Introducing: Values That Change Over Timeline\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#03-introducing-values-that-change-over-timeline\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.3 Introducing: Values That Change Over Timeline”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In typical programming, a variable holds a single value at a time—like \u003Ccode dir=\"auto\">x = 5\u003C/code> or \u003Ccode dir=\"auto\">name = \"Alice\"\u003C/code>. But what about things that change as the timeline progresses?\u003C/p>\n\u003Cul>\n\u003Cli>The position of your mouse pointer.\u003C/li>\n\u003Cli>The current temperature from a sensor.\u003C/li>\n\u003Cli>The text in a search box.\u003C/li>\n\u003Cli>Button clicks.\u003C/li>\n\u003C/ul>\n\u003Cp>In our perspective of the immutable block universe, these are not just static values; they are \u003Cstrong>sequences of values or events over the timeline.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825055126.png\" alt=\"Block Universe illustration\">\u003C/p>\n\u003Cp>\u003Cstrong>Functional Reactive Programming (FRP)\u003C/strong> provides a powerful way to handle these dynamic, time-varying values. It lets us treat a \u003Cstrong>“value over the timeline” as a first-class\u003C/strong> concept—a \u003Cstrong>container\u003C/strong> that holds not just one value, but \u003Cstrong>the entire history and future of a value as it changes.\u003C/strong>\u003C/p>\n\u003Cp>You’ll often hear these called:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Stream:\u003C/strong> A flow of values or events, one after another.\u003C/li>\n\u003Cli>\u003Cstrong>Observable:\u003C/strong> Something you can watch or subscribe to, reacting to new values as they appear.\u003C/li>\n\u003Cli>\u003Cstrong>Signal\u003C/strong> or \u003Cstrong>Behavior:\u003C/strong> A value that continuously exists and changes over the timeline.\u003C/li>\n\u003Cli>\u003Cstrong>Reactive Value:\u003C/strong> A value that automatically updates in response to changes, representing dynamic, time-varying data.\u003C/li>\n\u003C/ul>\n\u003Cp>Instead of repeatedly asking “what is the mouse position now?”, you can work with a \u003Ccode dir=\"auto\">mousePositionStream\u003C/code>—a single entity representing all mouse positions over the timeline.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"04-version-history\">0.4 Version History\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#04-version-history\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.4 Version History”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Conceptually, a stream or reactive value can be seen as an immutable container that holds all data from the past to the future of the universe.\u003C/p>\n\u003Cp>In fact, there is a familiar, real-world implementation of this idea for programmers: the version control system Git, well-known from GitHub. Git maintains the entire history of changes from the past to the future. While it may look like the current value (such as a document) is being destructively updated (mutable) in imperative programming, in reality, all previous versions are preserved immutably in the history.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"05-conceptually-immutable\">0.5 Conceptually Immutable\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#05-conceptually-immutable\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.5 Conceptually Immutable”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Of course, such an implementation is also possible in FRP. However, in most practical cases, what we actually need is just the “latest value.” For reasons of memory and code efficiency, it is usually unnecessary to keep the entire history; instead, we simply overwrite the memory with the most recent value.\u003C/p>\n\u003Cp>In other words, while values that change over the timeline are conceptually immutable, their actual implementation is often very similar to mutable values in imperative programming. The difference is that, in FRP, the mutable variable is encapsulated inside a container type called Reactive value, and it can only be manipulated through FRP-specific operators.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"06-frp-vs-oop\">0.6 FRP vs OOP\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#06-frp-vs-oop\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “0.6 FRP vs OOP”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Interestingly, this is very similar to the idea of encapsulation in object-oriented programming (OOP).\u003C/p>\n\u003Cp>In fact, Alan Kay’s original vision for OOP—according to his own statements—was not well represented by the name “object-oriented programming.” Instead, he envisioned a system where objects, with their internal state hidden, would cooperate by sending “messages” to each other. He argued it should have been called “message-oriented” programming. This approach was intended as a departure from the chaos of imperative programming—even when structured—by promoting a new paradigm of coordination and encapsulation.\u003C/p>\n\u003Cp>However, the key difference is that, in FRP, all related ReactiveValues are fundamentally designed to keep their versions perfectly synchronized, just like Git. For example, when one value changes, all dependent values are automatically and consistently updated, ensuring the entire system remains in a coherent state.\u003C/p>\n\u003Cp>By contrast, the fundamental problem with mutable variables in imperative programming is that this discipline is often lax. Programmers may try to keep the versions of separate variables in sync, but sometimes they forget, make mistakes, or simply ignore it. While OOP introduces encapsulation and some mechanisms to manage state, it does not, by design, guarantee the kind of automatic, system-wide version synchronization that FRP provides.\u003C/p>",{"headings":2101,"localImagePaths":2120,"remoteImagePaths":2121,"frontmatter":2122,"imagePaths":2123},[2102,2105,2108,2111,2114,2117],{"depth":182,"slug":2103,"text":2104},"01-mutable-world","0.1 Mutable World",{"depth":182,"slug":2106,"text":2107},"02-block-universe-immutable-world","0.2 Block Universe: Immutable World",{"depth":182,"slug":2109,"text":2110},"03-introducing-values-that-change-over-timeline","0.3 Introducing: Values That Change Over Timeline",{"depth":182,"slug":2112,"text":2113},"04-version-history","0.4 Version History",{"depth":182,"slug":2115,"text":2116},"05-conceptually-immutable","0.5 Conceptually Immutable",{"depth":182,"slug":2118,"text":2119},"06-frp-vs-oop","0.6 FRP vs OOP",[],[],{"title":2090,"description":2091},[],"en/book/unit-4/section-1/1-frp-spreadsheet",{"id":2124,"data":2126,"body":2132,"filePath":2133,"digest":2134,"rendered":2135},{"title":2127,"description":2128,"editUrl":16,"head":2129,"template":18,"sidebar":2130,"pagefind":16,"draft":20},"Chapter 1: FRP is like Spreadsheet","Timeline provides binary operations to utilize state management.",[],{"hidden":20,"attrs":2131},{},"Timeline provides binary operations to utilize state management.\n\nIn Functional Programming, everything is an expression or operation. Similarly, Timeline provides **binary operations for reactive state management**:\n\nTimelineA * Function → TimelineB\n    TimelineB = TimelineA * Function\n\nThis binary operation is analogous to how spreadsheet applications work.\n\nFor example, in a spreadsheet:\n\n![Spreadsheet analogy: cell B1 as a function of A1](https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825679642.png)\n\n- `timelineA` = A1\n- `timelineB` = B1\n- `function` = fx (e.g., `=A1*2`)\n\nJust as a spreadsheet cell automatically updates when its referenced cell changes, a timeline in FRP automatically propagates changes through binary operations. This makes FRP intuitive and powerful for managing reactive state, much like working with formulas in a spreadsheet.","src/content/docs/en/book/unit-4/section-1/1-frp-spreadsheet.md","926f3342e42b9d4b",{"html":2136,"metadata":2137},"\u003Cp>Timeline provides binary operations to utilize state management.\u003C/p>\n\u003Cp>In Functional Programming, everything is an expression or operation. Similarly, Timeline provides \u003Cstrong>binary operations for reactive state management\u003C/strong>:\u003C/p>\n\u003Cp>TimelineA * Function → TimelineB\nTimelineB = TimelineA * Function\u003C/p>\n\u003Cp>This binary operation is analogous to how spreadsheet applications work.\u003C/p>\n\u003Cp>For example, in a spreadsheet:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/ken-okabe/web-images5/main/img_1745825679642.png\" alt=\"Spreadsheet analogy: cell B1 as a function of A1\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">timelineA\u003C/code> = A1\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">timelineB\u003C/code> = B1\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">function\u003C/code> = fx (e.g., \u003Ccode dir=\"auto\">=A1*2\u003C/code>)\u003C/li>\n\u003C/ul>\n\u003Cp>Just as a spreadsheet cell automatically updates when its referenced cell changes, a timeline in FRP automatically propagates changes through binary operations. This makes FRP intuitive and powerful for managing reactive state, much like working with formulas in a spreadsheet.\u003C/p>",{"headings":2138,"localImagePaths":2139,"remoteImagePaths":2140,"frontmatter":2141,"imagePaths":2142},[],[],[],{"title":2127,"description":2128},[],"en/book/unit-4/section-1/2-timeline",{"id":2143,"data":2145,"body":2151,"filePath":2152,"digest":2153,"rendered":2154},{"title":2146,"description":2147,"editUrl":16,"head":2148,"template":18,"sidebar":2149,"pagefind":16,"draft":20},"Chapter 2: Understanding Timeline\u003C'a> and FRP Implementation","Prerequisites: This section assumes a basic understanding of the \"Block Universe\" concept (the idea that the universe, including all of time, exists as an immutable data structure) and Einstein's related insight that the distinction between past, present, and future is a persistent illusion. In essence, the reader accepts the premise that the universe is fundamentally immutable.",[],{"hidden":20,"attrs":2150},{},"**Prerequisites:** This section assumes a basic understanding of the \"Block Universe\" concept (the idea that the universe, including all of time, exists as an immutable data structure) and Einstein's related insight that the distinction between past, present, and future is a persistent illusion. In essence, the reader accepts the premise that the universe is fundamentally immutable.\n\n## 2.1 Introduction: The Immutable Universe and Our Experience of Change\n\nFrom the perspective of modern physics and certain philosophical viewpoints, the universe can be conceived as a static, four-dimensional block where all events across time are fixed and immutable. However, our everyday experience, and the phenomena we often model in programming (like user interface updates, sensor readings, or animations), are characterized by constant change.\n\nHow can we reconcile the immutable nature of this underlying reality (the Block Universe) with the dynamic, changing experiences we need to represent in our programs? Functional Reactive Programming (FRP) offers a sophisticated approach, and the `Timeline\u003C'a>` type presented here is a core concept within one such FRP implementation strategy.\n\n## 2.2 The `Timeline\u003C'a>` Concept: Encapsulating Time-Varying Values\n\nThe central idea is the **`Timeline\u003C'a>`** type. Instead of representing just a single value of type `'a` at a specific instant, a `Timeline\u003C'a>` object encapsulates the **entire history and potential future** of a value that changes over time.\n\nThis `Timeline\u003C'a>` object is, in essence, a **\"mini Block Universe\"** manifested within the program, representing the complete, immutable history of a specific value. It can be likened to possessing an entire reel of film, where each frame (a point in time) holds the immutable value for that instant.\n\n`Timeline\u003C'a>` creation is simple. Let's create a new `Timeline\u003Cstring>` named `timeline` here (using the factory function as defined in our `Timeline.fs`):\n\n```fsharp\n// Assuming 'Timeline' factory function is available as:\n// let Timeline\u003C'a> : 'a -> Timeline\u003C'a> = fun initialValue -> ...\nlet timeline : Timeline\u003Cstring> = Timeline \"initial Value\"\n```\n\n## 2.3 `Now`: The Moving Viewpoint on the Immutable Timeline\n\nWhile the `Timeline\u003C'a>` represents the complete, immutable history (our \"mini Block Universe\"), our experience is typically focused on the \"present\" moment, which seems to constantly advance from past to future. This subjective experience of the present, the \"stubbornly persistent illusion\" Einstein spoke of, can be conceptualized by the type **`Now`**.\n\nImagine the concept of `Now` as a **cursor or pointer** moving across the immutable data track of the `Timeline\u003C'a>`. The `Timeline\u003C'a>` data itself (the film reel / mini Block Universe) is fixed, but the `Now` pointer (the projector gate showing a single frame) continuously shifts its position. This creates a crucial distinction:\n\n*   **`Timeline\u003C'a>` (The Data / Mini Block Universe):** Conceptually **Immutable**.\n*   **The concept of `Now` (The Viewpoint / Cursor):** Conceptually **Mutable** (its position changes over time).\n\nIt is through this moving `Now` viewpoint that we perceive \"change\" within the fundamentally unchanging `Timeline\u003C'a>` data.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\n### `Now` (The Viewpoint / Cursor) is Conceptually Mutable (its position changes over time)\n\nAs repeatedly discussed, mathematics is fundamentally immutable. Consequently, the mutability of `Now` suggests it is ***something clearly outside*** the realm of mathematics.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\n## 2.4 Querying the Timeline: `TL.at` for Specific Coordinates\n\nTo determine the value of a `Timeline\u003C'a>` at a specific point in time, we use an instance of the `Now` type as a coordinate. When we need the value *at* a particular instant, we use a specific instance of `Now` – an immutable time coordinate representing a snapshot of the moving viewpoint. In the F# code provided (from `Timeline.fs`), a value `Now` (capital 'N') holds this specific coordinate.\n\nThe function `TL.at` serves this purpose:\n\n```fsharp\n// Assuming 'timeline' is a Timeline\u003Cstring> created above,\n// 'Now' is the globally available immutable coordinate value,\n// and 'TL.at' is defined in the TL module.\n// let value : string = timeline |> TL.at Now\n```\n\n*(Presented as a comment as `value` is not used further in this context, adhering to general F# good practice where unused values might be warned against. The syntax demonstrates the call.)*\n\nThis operation treats the specific instance `Now` as a fixed coordinate on the immutable `Timeline\u003C'a>` data structure (our \"mini Block Universe\"). It purely **reads** the value associated with that coordinate (in the provided implementation from `Timeline.fs`, this corresponds to accessing the `timeline._last` field, which holds the most recently computed or set value representing the state *at* or *before* this specific `Now`). As a pure read from an immutable conceptual structure based on fixed coordinates, `TL.at` aligns with functional principles of referential transparency.\n\n## 2.5 Defining Values in Time: `TL.define` as Declaration\n\nTo associate a new value (`newValue`) with a specific time coordinate (`Now`), the operation `TL.define` is used:\n\n```fsharp\n// Assuming 'timeline' is Timeline\u003Cstring> and 'newValue' is a string.\n// 'Now' is the immutable coordinate.\n// timeline |> TL.define Now newValue\n```\n\n*(Presented as a comment to illustrate the call signature.)*\n\nCrucially, this should be understood not as \"overwriting\" or \"mutating\" the `Timeline\u003C'a>` in a destructive sense, but as **declaratively defining** the state within the Block Universe model. It asserts: \"At the immutable coordinate represented by `Now`, the value is `newValue`.\"\n\nThis is like adding a new entry or fact to the immutable record of the Block Universe (our \"mini Block Universe\"). It doesn't alter the facts recorded at *other* coordinates. Therefore, at the **conceptual level** of the Block Universe model, `TL.define` is a **pure, non-destructive declaration**. When `define` is called, it updates the internal `_last` value and also triggers notifications to any dependent timelines (via `DependencyCore`), ensuring changes propagate through the reactive system.\n\n## 2.6 Implementation of FRP: Conventional Functional Views and Approach\n\nHow should this conceptually pure `Timeline\u003C'a>` and its declarative `define` operation be implemented in practical code? This question reveals a fascinating contrast between common functional programming dogma and the implications of the Block Universe model.\n\nThe dominant perspective within many functional programming texts and communities strongly advocates for **immutability at all levels** of implementation. This viewpoint often stems from a desire for mathematical purity, easier reasoning about code (referential transparency), and simplified concurrency. From this conventional perspective:\n\n*   **Mutation is Inherently Impure:** Any modification of existing state, *even encapsulated internal object state*, is fundamentally considered a \"side effect.\"\n*   **Returning New Objects: The \"Pure\" Ideal:** Consequently, the \"purest\" way to implement an update operation like `TL.define` is to leave the original `timeline` object untouched and return a **completely new `Timeline\u003C'a>` object**.\n*   **Internal Mutability as a Necessary Evil or Compromise:** Implementations that *do* utilize internal mutable state (like updating `timeline._last`) are frequently viewed with suspicion.\n\nIn essence, the conventional functional view establishes a strong dichotomy: immutability is good and pure, while mutability is bad and impure. This sets the stage for a contrasting perspective offered by the Block Universe simulation approach discussed next.\n\n## 2.7 Implementation of FRP: Deeper Insight into Block Universe Simulation and Novel Approach\n\nGrounding the FRP implementation in the Block Universe model offers a different, arguably more profound perspective than the standard functional approach. This view leads to interesting, seemingly paradoxical, implementation choices for `Timeline\u003C'a>` and `Now`.\n\n### 2.7.1 The Goal: Simulating Observation in an Immutable Universe\n\nRecall the core concepts from the Block Universe perspective:\n\n*   **`Timeline\u003C'a>` (The Data / Mini Block Universe):** Conceptually **Immutable**.\n*   **The concept of `Now` (The Viewpoint / Cursor):** Conceptually **Mutable**.\n\nThe primary goal of the `Timeline\u003C'a>` object in this approach is to **actively simulate the experience of an observer** whose `Now` viewpoint progresses through the immutable Block Universe.\n\n### 2.7.2 Implementing `Timeline\u003C'a>`: Internal Mutability as Correctness\n\nTo achieve this simulation, the practical implementation of `Timeline\u003C'a>` (as seen in `Timeline.fs`) uses internal mutability:\n\n```fsharp\n// From Timeline.fs (conceptual match, actual details in shared code)\n\n// Timeline Type Definition (Simplified from Timeline.fs for illustration)\n// type Timeline\u003C'a> =\n//     private\n//         { id: TimelineId // Unique ID managed by the system\n//           mutable _last: 'a } // The latest observed value\n\n// Timeline Factory Function (Conceptual, matches provided Timeline.fs style)\n// let Timeline\u003C'a> : 'a -> Timeline\u003C'a> =\n//     fun initialValue ->\n//         // let newId = DependencyCore.generateTimelineId() // From Timeline.fs\n//         { id = (* newId *) System.Guid.NewGuid() // Simplified for example\n//           _last = initialValue }\n\n// Core Operations Module (Simplified View, matching TL.define from Timeline.fs)\n// module TL =\n//     let define\u003C'a> : Now -> 'a -> Timeline\u003C'a> -> unit =\n//         fun now value timeline -> // 'now' parameter is illustrative\n//             timeline._last \u003C- value\n//             // ... triggers notifications to dependents via DependencyCore ...\n```\n\n*(The F# code here is illustrative, referencing the structure from the provided `Timeline.fs`. The full, styled code for these elements exists in `Timeline.fs` itself and wouldn't be repeated verbatim in the chapter unless essential for a specific minor point not covered by the main library code sharing.)*\n\n*   **Internal Mutability (`_last`) is Key:** Using a mutable internal field (`_last`) is the most conceptually accurate way to implement the *simulation* of the changing viewpoint.\n*   **Dependency Propagation:** When `TL.define` updates `_last`, `DependencyCore` notifies dependents.\n*   **Not Just Optimization:** This internal mutability of `_last` is fundamental to the *correctness* of the simulation.\n*   **Contradiction of Internal Immutability:** If `_last` were strictly immutable, the object could *not* update its representation of the current value.\n*   **Critique of Returning New Timelines:** Returning a *new* `Timeline` object on every update contradicts the model of a singular \"mini Block Universe\" for a given time-varying value.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\nWhen `Now` (the viewpoint or cursor) is conceptually mutable (meaning its position changes over time), the corresponding `_last` that `Now` points to should also be actually mutable.\n\nAs repeatedly discussed, mathematics is fundamentally immutable.\nConsequently, the very mutability of `Now` and `_last` confirms their status as ***entities belonging outside the mathematical realm***.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\n### 2.7.3 Implementing `Now`: The Immutable Placeholder Paradox\n\nParadoxically, while `Timeline\u003C'a>` embraces internal mutability (`_last`), the implementation of `Now`—the conceptually *mutable* cursor—remains a static and immutable placeholder (as defined in `Timeline.fs`):\n\n```fsharp\n// From Timeline.fs\n// type Now = Now of string\n// let Now = Now \"Conceptual time coordinate\" // Or similar descriptive string\n```\n\n*   **Rationale Unchanged:** `Now` acts as a conceptual symbol for the present.\n*   **API Formalism vs. Internal Reality:** API calls like `TL.at Now` maintain formal purity. The actual simulation of the advancing present is handled by `Timeline._last` and `DependencyCore`.\n\n### 2.7.4 Summary: Conceptual vs. Practical Implementation\n\n| Concept        | Conceptual Nature | Practical Implementation                     | Justification (Block Universe Simulation)                                                     |\n| :------------- | :---------------- | :----------------------------------------- | :-------------------------------------------------------------------------------------------- |\n| `Timeline\u003C'a>` | Immutable         | Object with `id` and **Internal Mutable `_last`** | Necessary to simulate the *changing observation* of the immutable data. Dependency propagation is handled internally by `DependencyCore`. |\n| `Now`          | Mutable (Cursor)  | **Immutable Static Placeholder** (e.g., `Now \"...\"`)    | Acts as a symbolic API element; actual \"current\" state is in `Timeline._last`.                  |\n\nThis implementation strategy becomes logical when viewed through the lens of the Block Universe model.\n\n## 2.8 Philosophical Shift: Purity Redefined by the Conceptual Model\n\nAdopting the Block Universe simulation perspective involves a significant philosophical shift concerning \"purity.\" This approach prioritizes **fidelity to the underlying conceptual model (the Block Universe)** over strict adherence to implementation-level rules like prohibiting internal mutation.\n\n*   **Purity Resides in the Model:** The purity of operations like `TL.define` stems from their **declarative nature relative to the immutable Block Universe model**.\n*   **Internal Mutability (`_last`) as Faithful Implementation:** Encapsulated internal mutation becomes a **necessary and correct mechanism for faithfully implementing the simulation**.\n\nIn essence, purity is redefined as the faithfulness of the implementation's behavior to the conceptual model it simulates.\n\n## 2.9 Summary\n\n*   The `Timeline\u003C'a>` type is an abstraction for time-varying values, grounded in an immutable Block Universe concept.\n*   `Now` is a conceptually mutable pointer across the immutable `Timeline\u003C'a>`.\n*   `TL.at Now` is a pure read of `_last`.\n*   `TL.define Now value` is a conceptually pure declaration, updating `_last` and notifying dependents via `DependencyCore`.\n*   Conventional functional programming views internal mutability as impure. The Block Universe simulation perspective argues that `Timeline._last`'s mutability is a **theoretically consistent and accurate way** to simulate observing changes.\n*   \"Purity\" derives from fidelity to the conceptual model, allowing necessary internal mutability for correct simulation.","src/content/docs/en/book/unit-4/section-1/2-timeline.md","64ee5a4bfa0c9e7b",{"html":2155,"metadata":2156},"\u003Cp>\u003Cstrong>Prerequisites:\u003C/strong> This section assumes a basic understanding of the “Block Universe” concept (the idea that the universe, including all of time, exists as an immutable data structure) and Einstein’s related insight that the distinction between past, present, and future is a persistent illusion. In essence, the reader accepts the premise that the universe is fundamentally immutable.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"21-introduction-the-immutable-universe-and-our-experience-of-change\">2.1 Introduction: The Immutable Universe and Our Experience of Change\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#21-introduction-the-immutable-universe-and-our-experience-of-change\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.1 Introduction: The Immutable Universe and Our Experience of Change”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>From the perspective of modern physics and certain philosophical viewpoints, the universe can be conceived as a static, four-dimensional block where all events across time are fixed and immutable. However, our everyday experience, and the phenomena we often model in programming (like user interface updates, sensor readings, or animations), are characterized by constant change.\u003C/p>\n\u003Cp>How can we reconcile the immutable nature of this underlying reality (the Block Universe) with the dynamic, changing experiences we need to represent in our programs? Functional Reactive Programming (FRP) offers a sophisticated approach, and the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> type presented here is a core concept within one such FRP implementation strategy.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"22-the-timelinea-concept-encapsulating-time-varying-values\">2.2 The \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> Concept: Encapsulating Time-Varying Values\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#22-the-timelinea-concept-encapsulating-time-varying-values\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.2 The Timeline&#x3C;'a> Concept: Encapsulating Time-Varying Values”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The central idea is the \u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>\u003C/strong> type. Instead of representing just a single value of type \u003Ccode dir=\"auto\">'a\u003C/code> at a specific instant, a \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> object encapsulates the \u003Cstrong>entire history and potential future\u003C/strong> of a value that changes over time.\u003C/p>\n\u003Cp>This \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> object is, in essence, a \u003Cstrong>“mini Block Universe”\u003C/strong> manifested within the program, representing the complete, immutable history of a specific value. It can be likened to possessing an entire reel of film, where each frame (a point in time) holds the immutable value for that instant.\u003C/p>\n\u003Cp>\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> creation is simple. Let’s create a new \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> named \u003Ccode dir=\"auto\">timeline\u003C/code> here (using the factory function as defined in our \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming 'Timeline' factory function is available as:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let Timeline&#x3C;'a> : 'a -> Timeline&#x3C;'a> = fun initialValue -> ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">initial Value\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assuming &#x27;Timeline&#x27; factory function is available as:// let Timeline\u003C&#x27;a> : &#x27;a -> Timeline\u003C&#x27;a> = fun initialValue -> ...let timeline : Timeline\u003Cstring> = Timeline &#x22;initial Value&#x22;\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"23-now-the-moving-viewpoint-on-the-immutable-timeline\">2.3 \u003Ccode dir=\"auto\">Now\u003C/code>: The Moving Viewpoint on the Immutable Timeline\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#23-now-the-moving-viewpoint-on-the-immutable-timeline\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.3 Now: The Moving Viewpoint on the Immutable Timeline”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> represents the complete, immutable history (our “mini Block Universe”), our experience is typically focused on the “present” moment, which seems to constantly advance from past to future. This subjective experience of the present, the “stubbornly persistent illusion” Einstein spoke of, can be conceptualized by the type \u003Cstrong>\u003Ccode dir=\"auto\">Now\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cp>Imagine the concept of \u003Ccode dir=\"auto\">Now\u003C/code> as a \u003Cstrong>cursor or pointer\u003C/strong> moving across the immutable data track of the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>. The \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> data itself (the film reel / mini Block Universe) is fixed, but the \u003Ccode dir=\"auto\">Now\u003C/code> pointer (the projector gate showing a single frame) continuously shifts its position. This creates a crucial distinction:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> (The Data / Mini Block Universe):\u003C/strong> Conceptually \u003Cstrong>Immutable\u003C/strong>.\u003C/li>\n\u003Cli>\u003Cstrong>The concept of \u003Ccode dir=\"auto\">Now\u003C/code> (The Viewpoint / Cursor):\u003C/strong> Conceptually \u003Cstrong>Mutable\u003C/strong> (its position changes over time).\u003C/li>\n\u003C/ul>\n\u003Cp>It is through this moving \u003Ccode dir=\"auto\">Now\u003C/code> viewpoint that we perceive “change” within the fundamentally unchanging \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> data.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"now-the-viewpoint--cursor-is-conceptually-mutable-its-position-changes-over-time\">\u003Ccode dir=\"auto\">Now\u003C/code> (The Viewpoint / Cursor) is Conceptually Mutable (its position changes over time)\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#now-the-viewpoint--cursor-is-conceptually-mutable-its-position-changes-over-time\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “Now (The Viewpoint / Cursor) is Conceptually Mutable (its position changes over time)”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>As repeatedly discussed, mathematics is fundamentally immutable. Consequently, the mutability of \u003Ccode dir=\"auto\">Now\u003C/code> suggests it is \u003Cem>\u003Cstrong>something clearly outside\u003C/strong>\u003C/em> the realm of mathematics.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"24-querying-the-timeline-tlat-for-specific-coordinates\">2.4 Querying the Timeline: \u003Ccode dir=\"auto\">TL.at\u003C/code> for Specific Coordinates\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#24-querying-the-timeline-tlat-for-specific-coordinates\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.4 Querying the Timeline: TL.at for Specific Coordinates”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To determine the value of a \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> at a specific point in time, we use an instance of the \u003Ccode dir=\"auto\">Now\u003C/code> type as a coordinate. When we need the value \u003Cem>at\u003C/em> a particular instant, we use a specific instance of \u003Ccode dir=\"auto\">Now\u003C/code> – an immutable time coordinate representing a snapshot of the moving viewpoint. In the F# code provided (from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>), a value \u003Ccode dir=\"auto\">Now\u003C/code> (capital ‘N’) holds this specific coordinate.\u003C/p>\n\u003Cp>The function \u003Ccode dir=\"auto\">TL.at\u003C/code> serves this purpose:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming 'timeline' is a Timeline&#x3C;string> created above,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'Now' is the globally available immutable coordinate value,\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// and 'TL.at' is defined in the TL module.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let value : string = timeline |> TL.at Now\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assuming &#x27;timeline&#x27; is a Timeline\u003Cstring> created above,// &#x27;Now&#x27; is the globally available immutable coordinate value,// and &#x27;TL.at&#x27; is defined in the TL module.// let value : string = timeline |> TL.at Now\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Presented as a comment as \u003Ccode dir=\"auto\">value\u003C/code> is not used further in this context, adhering to general F# good practice where unused values might be warned against. The syntax demonstrates the call.)\u003C/em>\u003C/p>\n\u003Cp>This operation treats the specific instance \u003Ccode dir=\"auto\">Now\u003C/code> as a fixed coordinate on the immutable \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> data structure (our “mini Block Universe”). It purely \u003Cstrong>reads\u003C/strong> the value associated with that coordinate (in the provided implementation from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>, this corresponds to accessing the \u003Ccode dir=\"auto\">timeline._last\u003C/code> field, which holds the most recently computed or set value representing the state \u003Cem>at\u003C/em> or \u003Cem>before\u003C/em> this specific \u003Ccode dir=\"auto\">Now\u003C/code>). As a pure read from an immutable conceptual structure based on fixed coordinates, \u003Ccode dir=\"auto\">TL.at\u003C/code> aligns with functional principles of referential transparency.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"25-defining-values-in-time-tldefine-as-declaration\">2.5 Defining Values in Time: \u003Ccode dir=\"auto\">TL.define\u003C/code> as Declaration\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#25-defining-values-in-time-tldefine-as-declaration\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.5 Defining Values in Time: TL.define as Declaration”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To associate a new value (\u003Ccode dir=\"auto\">newValue\u003C/code>) with a specific time coordinate (\u003Ccode dir=\"auto\">Now\u003C/code>), the operation \u003Ccode dir=\"auto\">TL.define\u003C/code> is used:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assuming 'timeline' is Timeline&#x3C;string> and 'newValue' is a string.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'Now' is the immutable coordinate.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// timeline |> TL.define Now newValue\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assuming &#x27;timeline&#x27; is Timeline\u003Cstring> and &#x27;newValue&#x27; is a string.// &#x27;Now&#x27; is the immutable coordinate.// timeline |> TL.define Now newValue\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Presented as a comment to illustrate the call signature.)\u003C/em>\u003C/p>\n\u003Cp>Crucially, this should be understood not as “overwriting” or “mutating” the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> in a destructive sense, but as \u003Cstrong>declaratively defining\u003C/strong> the state within the Block Universe model. It asserts: “At the immutable coordinate represented by \u003Ccode dir=\"auto\">Now\u003C/code>, the value is \u003Ccode dir=\"auto\">newValue\u003C/code>.”\u003C/p>\n\u003Cp>This is like adding a new entry or fact to the immutable record of the Block Universe (our “mini Block Universe”). It doesn’t alter the facts recorded at \u003Cem>other\u003C/em> coordinates. Therefore, at the \u003Cstrong>conceptual level\u003C/strong> of the Block Universe model, \u003Ccode dir=\"auto\">TL.define\u003C/code> is a \u003Cstrong>pure, non-destructive declaration\u003C/strong>. When \u003Ccode dir=\"auto\">define\u003C/code> is called, it updates the internal \u003Ccode dir=\"auto\">_last\u003C/code> value and also triggers notifications to any dependent timelines (via \u003Ccode dir=\"auto\">DependencyCore\u003C/code>), ensuring changes propagate through the reactive system.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"26-implementation-of-frp-conventional-functional-views-and-approach\">2.6 Implementation of FRP: Conventional Functional Views and Approach\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#26-implementation-of-frp-conventional-functional-views-and-approach\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.6 Implementation of FRP: Conventional Functional Views and Approach”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>How should this conceptually pure \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> and its declarative \u003Ccode dir=\"auto\">define\u003C/code> operation be implemented in practical code? This question reveals a fascinating contrast between common functional programming dogma and the implications of the Block Universe model.\u003C/p>\n\u003Cp>The dominant perspective within many functional programming texts and communities strongly advocates for \u003Cstrong>immutability at all levels\u003C/strong> of implementation. This viewpoint often stems from a desire for mathematical purity, easier reasoning about code (referential transparency), and simplified concurrency. From this conventional perspective:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Mutation is Inherently Impure:\u003C/strong> Any modification of existing state, \u003Cem>even encapsulated internal object state\u003C/em>, is fundamentally considered a “side effect.”\u003C/li>\n\u003Cli>\u003Cstrong>Returning New Objects: The “Pure” Ideal:\u003C/strong> Consequently, the “purest” way to implement an update operation like \u003Ccode dir=\"auto\">TL.define\u003C/code> is to leave the original \u003Ccode dir=\"auto\">timeline\u003C/code> object untouched and return a \u003Cstrong>completely new \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> object\u003C/strong>.\u003C/li>\n\u003Cli>\u003Cstrong>Internal Mutability as a Necessary Evil or Compromise:\u003C/strong> Implementations that \u003Cem>do\u003C/em> utilize internal mutable state (like updating \u003Ccode dir=\"auto\">timeline._last\u003C/code>) are frequently viewed with suspicion.\u003C/li>\n\u003C/ul>\n\u003Cp>In essence, the conventional functional view establishes a strong dichotomy: immutability is good and pure, while mutability is bad and impure. This sets the stage for a contrasting perspective offered by the Block Universe simulation approach discussed next.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"27-implementation-of-frp-deeper-insight-into-block-universe-simulation-and-novel-approach\">2.7 Implementation of FRP: Deeper Insight into Block Universe Simulation and Novel Approach\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#27-implementation-of-frp-deeper-insight-into-block-universe-simulation-and-novel-approach\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7 Implementation of FRP: Deeper Insight into Block Universe Simulation and Novel Approach”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Grounding the FRP implementation in the Block Universe model offers a different, arguably more profound perspective than the standard functional approach. This view leads to interesting, seemingly paradoxical, implementation choices for \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> and \u003Ccode dir=\"auto\">Now\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"271-the-goal-simulating-observation-in-an-immutable-universe\">2.7.1 The Goal: Simulating Observation in an Immutable Universe\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#271-the-goal-simulating-observation-in-an-immutable-universe\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7.1 The Goal: Simulating Observation in an Immutable Universe”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Recall the core concepts from the Block Universe perspective:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> (The Data / Mini Block Universe):\u003C/strong> Conceptually \u003Cstrong>Immutable\u003C/strong>.\u003C/li>\n\u003Cli>\u003Cstrong>The concept of \u003Ccode dir=\"auto\">Now\u003C/code> (The Viewpoint / Cursor):\u003C/strong> Conceptually \u003Cstrong>Mutable\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Cp>The primary goal of the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> object in this approach is to \u003Cstrong>actively simulate the experience of an observer\u003C/strong> whose \u003Ccode dir=\"auto\">Now\u003C/code> viewpoint progresses through the immutable Block Universe.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"272-implementing-timelinea-internal-mutability-as-correctness\">2.7.2 Implementing \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>: Internal Mutability as Correctness\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#272-implementing-timelinea-internal-mutability-as-correctness\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7.2 Implementing Timeline&#x3C;'a>: Internal Mutability as Correctness”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>To achieve this simulation, the practical implementation of \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> (as seen in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>) uses internal mutability:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// From Timeline.fs (conceptual match, actual details in shared code)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline Type Definition (Simplified from Timeline.fs for illustration)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type Timeline&#x3C;'a> =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     private\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         { id: TimelineId // Unique ID managed by the system\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//           mutable _last: 'a } // The latest observed value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline Factory Function (Conceptual, matches provided Timeline.fs style)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let Timeline&#x3C;'a> : 'a -> Timeline&#x3C;'a> =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     fun initialValue ->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         // let newId = DependencyCore.generateTimelineId() // From Timeline.fs\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         { id = (* newId *) System.Guid.NewGuid() // Simplified for example\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//           _last = initialValue }\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Core Operations Module (Simplified View, matching TL.define from Timeline.fs)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// module TL =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     let define&#x3C;'a> : Now -> 'a -> Timeline&#x3C;'a> -> unit =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         fun now value timeline -> // 'now' parameter is illustrative\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             timeline._last &#x3C;- value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             // ... triggers notifications to dependents via DependencyCore ...\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// From Timeline.fs (conceptual match, actual details in shared code)// Timeline Type Definition (Simplified from Timeline.fs for illustration)// type Timeline\u003C&#x27;a> =//     private//         { id: TimelineId // Unique ID managed by the system//           mutable _last: &#x27;a } // The latest observed value// Timeline Factory Function (Conceptual, matches provided Timeline.fs style)// let Timeline\u003C&#x27;a> : &#x27;a -> Timeline\u003C&#x27;a> =//     fun initialValue ->//         // let newId = DependencyCore.generateTimelineId() // From Timeline.fs//         { id = (* newId *) System.Guid.NewGuid() // Simplified for example//           _last = initialValue }// Core Operations Module (Simplified View, matching TL.define from Timeline.fs)// module TL =//     let define\u003C&#x27;a> : Now -> &#x27;a -> Timeline\u003C&#x27;a> -> unit =//         fun now value timeline -> // &#x27;now&#x27; parameter is illustrative//             timeline._last \u003C- value//             // ... triggers notifications to dependents via DependencyCore ...\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(The F# code here is illustrative, referencing the structure from the provided \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>. The full, styled code for these elements exists in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> itself and wouldn’t be repeated verbatim in the chapter unless essential for a specific minor point not covered by the main library code sharing.)\u003C/em>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Internal Mutability (\u003Ccode dir=\"auto\">_last\u003C/code>) is Key:\u003C/strong> Using a mutable internal field (\u003Ccode dir=\"auto\">_last\u003C/code>) is the most conceptually accurate way to implement the \u003Cem>simulation\u003C/em> of the changing viewpoint.\u003C/li>\n\u003Cli>\u003Cstrong>Dependency Propagation:\u003C/strong> When \u003Ccode dir=\"auto\">TL.define\u003C/code> updates \u003Ccode dir=\"auto\">_last\u003C/code>, \u003Ccode dir=\"auto\">DependencyCore\u003C/code> notifies dependents.\u003C/li>\n\u003Cli>\u003Cstrong>Not Just Optimization:\u003C/strong> This internal mutability of \u003Ccode dir=\"auto\">_last\u003C/code> is fundamental to the \u003Cem>correctness\u003C/em> of the simulation.\u003C/li>\n\u003Cli>\u003Cstrong>Contradiction of Internal Immutability:\u003C/strong> If \u003Ccode dir=\"auto\">_last\u003C/code> were strictly immutable, the object could \u003Cem>not\u003C/em> update its representation of the current value.\u003C/li>\n\u003Cli>\u003Cstrong>Critique of Returning New Timelines:\u003C/strong> Returning a \u003Cem>new\u003C/em> \u003Ccode dir=\"auto\">Timeline\u003C/code> object on every update contradicts the model of a singular “mini Block Universe” for a given time-varying value.\u003C/li>\n\u003C/ul>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\u003Cp>When \u003Ccode dir=\"auto\">Now\u003C/code> (the viewpoint or cursor) is conceptually mutable (meaning its position changes over time), the corresponding \u003Ccode dir=\"auto\">_last\u003C/code> that \u003Ccode dir=\"auto\">Now\u003C/code> points to should also be actually mutable.\u003C/p>\n\u003Cp>As repeatedly discussed, mathematics is fundamentally immutable.\nConsequently, the very mutability of \u003Ccode dir=\"auto\">Now\u003C/code> and \u003Ccode dir=\"auto\">_last\u003C/code> confirms their status as \u003Cem>\u003Cstrong>entities belonging outside the mathematical realm\u003C/strong>\u003C/em>.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"273-implementing-now-the-immutable-placeholder-paradox\">2.7.3 Implementing \u003Ccode dir=\"auto\">Now\u003C/code>: The Immutable Placeholder Paradox\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#273-implementing-now-the-immutable-placeholder-paradox\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7.3 Implementing Now: The Immutable Placeholder Paradox”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Paradoxically, while \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> embraces internal mutability (\u003Ccode dir=\"auto\">_last\u003C/code>), the implementation of \u003Ccode dir=\"auto\">Now\u003C/code>—the conceptually \u003Cem>mutable\u003C/em> cursor—remains a static and immutable placeholder (as defined in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// From Timeline.fs\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type Now = Now of string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let Now = Now \"Conceptual time coordinate\" // Or similar descriptive string\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// From Timeline.fs// type Now = Now of string// let Now = Now &#x22;Conceptual time coordinate&#x22; // Or similar descriptive string\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rationale Unchanged:\u003C/strong> \u003Ccode dir=\"auto\">Now\u003C/code> acts as a conceptual symbol for the present.\u003C/li>\n\u003Cli>\u003Cstrong>API Formalism vs. Internal Reality:\u003C/strong> API calls like \u003Ccode dir=\"auto\">TL.at Now\u003C/code> maintain formal purity. The actual simulation of the advancing present is handled by \u003Ccode dir=\"auto\">Timeline._last\u003C/code> and \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"sl-heading-wrapper level-h3\">\u003Ch3 id=\"274-summary-conceptual-vs-practical-implementation\">2.7.4 Summary: Conceptual vs. Practical Implementation\u003C/h3>\u003Ca class=\"sl-anchor-link\" href=\"#274-summary-conceptual-vs-practical-implementation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.7.4 Summary: Conceptual vs. Practical Implementation”\u003C/span>\u003C/a>\u003C/div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Concept\u003C/th>\u003Cth align=\"left\">Conceptual Nature\u003C/th>\u003Cth align=\"left\">Practical Implementation\u003C/th>\u003Cth align=\"left\">Justification (Block Universe Simulation)\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>\u003C/td>\u003Ctd align=\"left\">Immutable\u003C/td>\u003Ctd align=\"left\">Object with \u003Ccode dir=\"auto\">id\u003C/code> and \u003Cstrong>Internal Mutable \u003Ccode dir=\"auto\">_last\u003C/code>\u003C/strong>\u003C/td>\u003Ctd align=\"left\">Necessary to simulate the \u003Cem>changing observation\u003C/em> of the immutable data. Dependency propagation is handled internally by \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ccode dir=\"auto\">Now\u003C/code>\u003C/td>\u003Ctd align=\"left\">Mutable (Cursor)\u003C/td>\u003Ctd align=\"left\">\u003Cstrong>Immutable Static Placeholder\u003C/strong> (e.g., \u003Ccode dir=\"auto\">Now \"...\"\u003C/code>)\u003C/td>\u003Ctd align=\"left\">Acts as a symbolic API element; actual “current” state is in \u003Ccode dir=\"auto\">Timeline._last\u003C/code>.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>This implementation strategy becomes logical when viewed through the lens of the Block Universe model.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"28-philosophical-shift-purity-redefined-by-the-conceptual-model\">2.8 Philosophical Shift: Purity Redefined by the Conceptual Model\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#28-philosophical-shift-purity-redefined-by-the-conceptual-model\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.8 Philosophical Shift: Purity Redefined by the Conceptual Model”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Adopting the Block Universe simulation perspective involves a significant philosophical shift concerning “purity.” This approach prioritizes \u003Cstrong>fidelity to the underlying conceptual model (the Block Universe)\u003C/strong> over strict adherence to implementation-level rules like prohibiting internal mutation.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Purity Resides in the Model:\u003C/strong> The purity of operations like \u003Ccode dir=\"auto\">TL.define\u003C/code> stems from their \u003Cstrong>declarative nature relative to the immutable Block Universe model\u003C/strong>.\u003C/li>\n\u003Cli>\u003Cstrong>Internal Mutability (\u003Ccode dir=\"auto\">_last\u003C/code>) as Faithful Implementation:\u003C/strong> Encapsulated internal mutation becomes a \u003Cstrong>necessary and correct mechanism for faithfully implementing the simulation\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Cp>In essence, purity is redefined as the faithfulness of the implementation’s behavior to the conceptual model it simulates.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"29-summary\">2.9 Summary\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#29-summary\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “2.9 Summary”\u003C/span>\u003C/a>\u003C/div>\n\u003Cul>\n\u003Cli>The \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> type is an abstraction for time-varying values, grounded in an immutable Block Universe concept.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">Now\u003C/code> is a conceptually mutable pointer across the immutable \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.at Now\u003C/code> is a pure read of \u003Ccode dir=\"auto\">_last\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">TL.define Now value\u003C/code> is a conceptually pure declaration, updating \u003Ccode dir=\"auto\">_last\u003C/code> and notifying dependents via \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/li>\n\u003Cli>Conventional functional programming views internal mutability as impure. The Block Universe simulation perspective argues that \u003Ccode dir=\"auto\">Timeline._last\u003C/code>’s mutability is a \u003Cstrong>theoretically consistent and accurate way\u003C/strong> to simulate observing changes.\u003C/li>\n\u003Cli>“Purity” derives from fidelity to the conceptual model, allowing necessary internal mutability for correct simulation.\u003C/li>\n\u003C/ul>",{"headings":2157,"localImagePaths":2200,"remoteImagePaths":2201,"frontmatter":2202,"imagePaths":2203},[2158,2161,2164,2167,2170,2173,2176,2179,2182,2185,2188,2191,2194,2197],{"depth":182,"slug":2159,"text":2160},"21-introduction-the-immutable-universe-and-our-experience-of-change","2.1 Introduction: The Immutable Universe and Our Experience of Change",{"depth":182,"slug":2162,"text":2163},"22-the-timelinea-concept-encapsulating-time-varying-values","2.2 The Timeline\u003C'a> Concept: Encapsulating Time-Varying Values",{"depth":182,"slug":2165,"text":2166},"23-now-the-moving-viewpoint-on-the-immutable-timeline","2.3 Now: The Moving Viewpoint on the Immutable Timeline",{"depth":523,"slug":2168,"text":2169},"now-the-viewpoint--cursor-is-conceptually-mutable-its-position-changes-over-time","Now (The Viewpoint / Cursor) is Conceptually Mutable (its position changes over time)",{"depth":182,"slug":2171,"text":2172},"24-querying-the-timeline-tlat-for-specific-coordinates","2.4 Querying the Timeline: TL.at for Specific Coordinates",{"depth":182,"slug":2174,"text":2175},"25-defining-values-in-time-tldefine-as-declaration","2.5 Defining Values in Time: TL.define as Declaration",{"depth":182,"slug":2177,"text":2178},"26-implementation-of-frp-conventional-functional-views-and-approach","2.6 Implementation of FRP: Conventional Functional Views and Approach",{"depth":182,"slug":2180,"text":2181},"27-implementation-of-frp-deeper-insight-into-block-universe-simulation-and-novel-approach","2.7 Implementation of FRP: Deeper Insight into Block Universe Simulation and Novel Approach",{"depth":523,"slug":2183,"text":2184},"271-the-goal-simulating-observation-in-an-immutable-universe","2.7.1 The Goal: Simulating Observation in an Immutable Universe",{"depth":523,"slug":2186,"text":2187},"272-implementing-timelinea-internal-mutability-as-correctness","2.7.2 Implementing Timeline\u003C'a>: Internal Mutability as Correctness",{"depth":523,"slug":2189,"text":2190},"273-implementing-now-the-immutable-placeholder-paradox","2.7.3 Implementing Now: The Immutable Placeholder Paradox",{"depth":523,"slug":2192,"text":2193},"274-summary-conceptual-vs-practical-implementation","2.7.4 Summary: Conceptual vs. Practical Implementation",{"depth":182,"slug":2195,"text":2196},"28-philosophical-shift-purity-redefined-by-the-conceptual-model","2.8 Philosophical Shift: Purity Redefined by the Conceptual Model",{"depth":182,"slug":2198,"text":2199},"29-summary","2.9 Summary",[],[],{"title":2146,"description":2147},[],"en/book/unit-4/section-1/3-map",{"id":2204,"data":2206,"body":2212,"filePath":2213,"digest":2214,"rendered":2215},{"title":2207,"description":2208,"editUrl":16,"head":2209,"template":18,"sidebar":2210,"pagefind":16,"draft":20},"Chapter 3: Transforming Timelines and Introducing the Dependency Graph","In the previous chapter (Chapter 2), we established the Timeline\u003C'a> type as a way to represent values that change over time, mimicking a \"mini Block Universe.\" We also saw how to query the current value using TL.at and declare a new value at a specific point in time using TL.define.",[],{"hidden":20,"attrs":2211},{},"In the previous chapter (Chapter 2), we established the `Timeline\u003C'a>` type as a way to represent values that change over time, mimicking a \"mini Block Universe.\" We also saw how to query the current value using `TL.at` and declare a new value at a specific point in time using `TL.define`.\n\nHowever, simply defining and reading values isn't enough for building reactive applications. We often need to **derive new timelines based on the values of existing ones**. For example, if we have a `Timeline\u003Cint>` representing a counter, we might want a `Timeline\u003Cstring>` that displays the counter's value formatted as text.\n\nThis is where the fundamental operation `TL.map` comes into play.\n\n## 3.1 Transforming Values with `TL.map`\n\nThe `TL.map` function is the primary way to create a new `Timeline` whose value is derived from another `Timeline` by applying a function.\n\nIts signature (as found in `Timeline.fs` under the `TL` module) is straightforward:\n\n```fsharp\n// module TL\n// val map\u003C'a, 'b> : ('a -> 'b) -> Timeline\u003C'a> -> Timeline\u003C'b>\n```\n\nIt takes two arguments:\n\n1.  A function `f` of type `'a -> 'b`: This function defines how to transform the value.\n2.  A source timeline `timelineA` of type `Timeline\u003C'a>`.\n\nIt returns a **new timeline** `timelineB` of type `Timeline\u003C'b>`.\n\n**How it works:**\n\n*   When `TL.map` is called, it immediately applies the function `f` to the *current* value of `timelineA` (obtained via `timelineA |> TL.at Now`) to determine the *initial* value of the new `timelineB`.\n*   Crucially, it also establishes a **dependency**: whenever `timelineA` is updated using `TL.define`, the function `f` is automatically re-applied to the new value of `timelineA`, and the result is used to update `timelineB` (again, using an internal `define`-like mechanism managed by `DependencyCore`).\n\n**Simple Example: Doubling a Number**\n\nLet's see a concrete example. Suppose we have a timeline holding a number, and we want another timeline that always holds double that number:\n\n```fsharp\n// Assume Timeline factory, Now value, and TL module functions are accessible\n// No 'open Timeline' or 'open Timeline.TL'\n\n// 1. Create the source timeline\nlet numberTimeline : Timeline\u003Cint> = Timeline 5 // Explicit type and using factory\n\n// 2. Use TL.map to create a derived timeline\n//    The function (fun x -> x * 2) doubles the input value\nlet doubleFn : int -> int = fun x -> x * 2 // Define function in F# style\nlet doubledTimeline : Timeline\u003Cint> = numberTimeline |> TL.map doubleFn // Explicit TL.map\n\n// 3. Check the initial value of the derived timeline\nprintfn \"Initial doubled value: %d\" (doubledTimeline |> TL.at Now) // Explicit TL.at\n// Output: Initial doubled value: 10\n\n// 4. Update the source timeline\nnumberTimeline |> TL.define Now 7 // Explicit TL.define\n\n// 5. Check the derived timeline again - it has automatically updated!\nprintfn \"Updated doubled value: %d\" (doubledTimeline |> TL.at Now) // Explicit TL.at\n// Output: Updated doubled value: 14\n```\n\nIn this example:\n\n*   `doubledTimeline` is created with an initial value of `5 * 2 = 10`.\n*   When `numberTimeline` is updated to `7`, the `TL.map` operation automatically triggers the `doubleFn` (which is `fun x -> x * 2`) with the new value `7`, resulting in `14`. This value `14` is then used to update `doubledTimeline`.\n\n`TL.map` allows us to build new timelines declaratively based on existing ones, and the library ensures that changes automatically propagate according to the defined transformation.\n\n## 3.2 Introducing the Dependency Graph\n\nThe `TL.map` operation highlights a fundamental aspect of this FRP approach: **relationships and dependencies between timelines**.\n\n*   When we write `let doubledTimeline = numberTimeline |> TL.map doubleFn`, we are not just creating a new, independent timeline. We are explicitly stating that `doubledTimeline` **depends on** `numberTimeline`.\n*   We can visualize these relationships as a network or graph, where each `Timeline` is a node, and an operation like `TL.map` creates a directed edge representing the dependency (e.g., `numberTimeline --> doubledTimeline`). This network is often called a **Dependency Graph**.\n\n```\n        +-----------------+      TL.map (fun x -> x*2)   +-----------------+\n        | numberTimeline  | ---------------------------> | doubledTimeline |\n        | (Timeline\u003Cint>) |                              | (Timeline\u003Cint>)  |\n        +-----------------+                              +-----------------+\n              ^                                                    |\n              | TL.define Now 7                                    V\n              +-------------                                Propagation: updates to 14\n```\n\n*(Diagram updated to reflect TL.map)*\n\n*   When `TL.define` updates a timeline (like `numberTimeline`), the change **propagates** through this dependency graph. The internal mechanism of the `Timeline` library (specifically, `DependencyCore` as mentioned in Unit 4, Chapter 2 and detailed in Unit 4, Chapter 6) follows the established dependencies and triggers the necessary updates on downstream timelines (like `doubledTimeline`).\n\n**Why is this important?**\n\nThinking in terms of a dependency graph helps us understand how changes flow through our reactive system. As we introduce more operations (like `TL.bind` later in Unit 4, Chapter 5), this graph can become more complex, with timelines depending on multiple sources or dependencies changing dynamically.\n\nThe core promise of this FRP library is that this dependency graph is managed consistently. The internal system (`DependencyCore`) ensures that dependencies are correctly tracked and that updates propagate efficiently and reliably according to the rules defined by operations like `TL.map`.\n\nThis concept of a managed dependency graph is crucial. It's analogous to how:\n\n*   A spreadsheet automatically recalculates cells when their precedents change.\n*   A software package manager tracks library dependencies to ensure consistency during installation or removal.\n*   Version control systems like Git track the history and relationships between different code versions.\n\nUnderstanding that operations like `TL.map` build this underlying graph is key to grasping the power and robustness of the `Timeline` abstraction, which will become even more apparent when we discuss more advanced operations and concurrency in later chapters.\n\nIn the next chapter (Chapter 4), we'll see how this `TL.map` operation, combined with the concept of the dependency graph, allows us to integrate I/O operations seamlessly into our `Timeline`-based model.","src/content/docs/en/book/unit-4/section-1/3-map.md","95510924dcb79e7f",{"html":2216,"metadata":2217},"\u003Cp>In the previous chapter (Chapter 2), we established the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> type as a way to represent values that change over time, mimicking a “mini Block Universe.” We also saw how to query the current value using \u003Ccode dir=\"auto\">TL.at\u003C/code> and declare a new value at a specific point in time using \u003Ccode dir=\"auto\">TL.define\u003C/code>.\u003C/p>\n\u003Cp>However, simply defining and reading values isn’t enough for building reactive applications. We often need to \u003Cstrong>derive new timelines based on the values of existing ones\u003C/strong>. For example, if we have a \u003Ccode dir=\"auto\">Timeline&#x3C;int>\u003C/code> representing a counter, we might want a \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> that displays the counter’s value formatted as text.\u003C/p>\n\u003Cp>This is where the fundamental operation \u003Ccode dir=\"auto\">TL.map\u003C/code> comes into play.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"31-transforming-values-with-tlmap\">3.1 Transforming Values with \u003Ccode dir=\"auto\">TL.map\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#31-transforming-values-with-tlmap\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.1 Transforming Values with TL.map”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.map\u003C/code> function is the primary way to create a new \u003Ccode dir=\"auto\">Timeline\u003C/code> whose value is derived from another \u003Ccode dir=\"auto\">Timeline\u003C/code> by applying a function.\u003C/p>\n\u003Cp>Its signature (as found in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> under the \u003Ccode dir=\"auto\">TL\u003C/code> module) is straightforward:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// module TL\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val map&#x3C;'a, 'b> : ('a -> 'b) -> Timeline&#x3C;'a> -> Timeline&#x3C;'b>\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// module TL// val map\u003C&#x27;a, &#x27;b> : (&#x27;a -> &#x27;b) -> Timeline\u003C&#x27;a> -> Timeline\u003C&#x27;b>\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>It takes two arguments:\u003C/p>\n\u003Col>\n\u003Cli>A function \u003Ccode dir=\"auto\">f\u003C/code> of type \u003Ccode dir=\"auto\">'a -> 'b\u003C/code>: This function defines how to transform the value.\u003C/li>\n\u003Cli>A source timeline \u003Ccode dir=\"auto\">timelineA\u003C/code> of type \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>It returns a \u003Cstrong>new timeline\u003C/strong> \u003Ccode dir=\"auto\">timelineB\u003C/code> of type \u003Ccode dir=\"auto\">Timeline&#x3C;'b>\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>How it works:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>When \u003Ccode dir=\"auto\">TL.map\u003C/code> is called, it immediately applies the function \u003Ccode dir=\"auto\">f\u003C/code> to the \u003Cem>current\u003C/em> value of \u003Ccode dir=\"auto\">timelineA\u003C/code> (obtained via \u003Ccode dir=\"auto\">timelineA |> TL.at Now\u003C/code>) to determine the \u003Cem>initial\u003C/em> value of the new \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003Cli>Crucially, it also establishes a \u003Cstrong>dependency\u003C/strong>: whenever \u003Ccode dir=\"auto\">timelineA\u003C/code> is updated using \u003Ccode dir=\"auto\">TL.define\u003C/code>, the function \u003Ccode dir=\"auto\">f\u003C/code> is automatically re-applied to the new value of \u003Ccode dir=\"auto\">timelineA\u003C/code>, and the result is used to update \u003Ccode dir=\"auto\">timelineB\u003C/code> (again, using an internal \u003Ccode dir=\"auto\">define\u003C/code>-like mechanism managed by \u003Ccode dir=\"auto\">DependencyCore\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Simple Example: Doubling a Number\u003C/strong>\u003C/p>\n\u003Cp>Let’s see a concrete example. Suppose we have a timeline holding a number, and we want another timeline that always holds double that number:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now value, and TL module functions are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No 'open Timeline' or 'open Timeline.TL'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 1. Create the source timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">numberTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type and using factory\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 2. Use TL.map to create a derived timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//    The function (fun x -> x * 2) doubles the input value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubleFn\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">*\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">2\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define function in F# style\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">doubledTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> numberTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map doubleFn \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 3. Check the initial value of the derived timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Initial doubled value: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">doubledTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.at\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Initial doubled value: 10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 4. Update the source timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">numberTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">7\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.define\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 5. Check the derived timeline again - it has automatically updated!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Updated doubled value: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">doubledTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.at Now\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.at\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Updated doubled value: 14\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now value, and TL module functions are accessible// No &#x27;open Timeline&#x27; or &#x27;open Timeline.TL&#x27;// 1. Create the source timelinelet numberTimeline : Timeline\u003Cint> = Timeline 5 // Explicit type and using factory// 2. Use TL.map to create a derived timeline//    The function (fun x -> x * 2) doubles the input valuelet doubleFn : int -> int = fun x -> x * 2 // Define function in F# stylelet doubledTimeline : Timeline\u003Cint> = numberTimeline |> TL.map doubleFn // Explicit TL.map// 3. Check the initial value of the derived timelineprintfn &#x22;Initial doubled value: %d&#x22; (doubledTimeline |> TL.at Now) // Explicit TL.at// Output: Initial doubled value: 10// 4. Update the source timelinenumberTimeline |> TL.define Now 7 // Explicit TL.define// 5. Check the derived timeline again - it has automatically updated!printfn &#x22;Updated doubled value: %d&#x22; (doubledTimeline |> TL.at Now) // Explicit TL.at// Output: Updated doubled value: 14\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this example:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode dir=\"auto\">doubledTimeline\u003C/code> is created with an initial value of \u003Ccode dir=\"auto\">5 * 2 = 10\u003C/code>.\u003C/li>\n\u003Cli>When \u003Ccode dir=\"auto\">numberTimeline\u003C/code> is updated to \u003Ccode dir=\"auto\">7\u003C/code>, the \u003Ccode dir=\"auto\">TL.map\u003C/code> operation automatically triggers the \u003Ccode dir=\"auto\">doubleFn\u003C/code> (which is \u003Ccode dir=\"auto\">fun x -> x * 2\u003C/code>) with the new value \u003Ccode dir=\"auto\">7\u003C/code>, resulting in \u003Ccode dir=\"auto\">14\u003C/code>. This value \u003Ccode dir=\"auto\">14\u003C/code> is then used to update \u003Ccode dir=\"auto\">doubledTimeline\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode dir=\"auto\">TL.map\u003C/code> allows us to build new timelines declaratively based on existing ones, and the library ensures that changes automatically propagate according to the defined transformation.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"32-introducing-the-dependency-graph\">3.2 Introducing the Dependency Graph\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#32-introducing-the-dependency-graph\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “3.2 Introducing the Dependency Graph”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.map\u003C/code> operation highlights a fundamental aspect of this FRP approach: \u003Cstrong>relationships and dependencies between timelines\u003C/strong>.\u003C/p>\n\u003Cul>\n\u003Cli>When we write \u003Ccode dir=\"auto\">let doubledTimeline = numberTimeline |> TL.map doubleFn\u003C/code>, we are not just creating a new, independent timeline. We are explicitly stating that \u003Ccode dir=\"auto\">doubledTimeline\u003C/code> \u003Cstrong>depends on\u003C/strong> \u003Ccode dir=\"auto\">numberTimeline\u003C/code>.\u003C/li>\n\u003Cli>We can visualize these relationships as a network or graph, where each \u003Ccode dir=\"auto\">Timeline\u003C/code> is a node, and an operation like \u003Ccode dir=\"auto\">TL.map\u003C/code> creates a directed edge representing the dependency (e.g., \u003Ccode dir=\"auto\">numberTimeline --> doubledTimeline\u003C/code>). This network is often called a \u003Cstrong>Dependency Graph\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"plaintext\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">+-----------------+      TL.map (fun x -> x*2)   +-----------------+\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">| numberTimeline  | ---------------------------> | doubledTimeline |\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">| (Timeline&#x3C;int>) |                              | (Timeline&#x3C;int>)  |\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">        \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">+-----------------+                              +-----------------+\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">^                                                    |\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">| TL.define Now 7                                    V\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">              \u003C/span>\u003C/span>\u003Cspan style=\"--0:#d6deeb;--1:#403f53\">+-------------                                Propagation: updates to 14\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"        +-----------------+      TL.map (fun x -> x*2)   +-----------------+        | numberTimeline  | ---------------------------> | doubledTimeline |        | (Timeline\u003Cint>) |                              | (Timeline\u003Cint>)  |        +-----------------+                              +-----------------+              ^                                                    |              | TL.define Now 7                                    V              +-------------                                Propagation: updates to 14\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Diagram updated to reflect TL.map)\u003C/em>\u003C/p>\n\u003Cul>\n\u003Cli>When \u003Ccode dir=\"auto\">TL.define\u003C/code> updates a timeline (like \u003Ccode dir=\"auto\">numberTimeline\u003C/code>), the change \u003Cstrong>propagates\u003C/strong> through this dependency graph. The internal mechanism of the \u003Ccode dir=\"auto\">Timeline\u003C/code> library (specifically, \u003Ccode dir=\"auto\">DependencyCore\u003C/code> as mentioned in Unit 4, Chapter 2 and detailed in Unit 4, Chapter 6) follows the established dependencies and triggers the necessary updates on downstream timelines (like \u003Ccode dir=\"auto\">doubledTimeline\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Why is this important?\u003C/strong>\u003C/p>\n\u003Cp>Thinking in terms of a dependency graph helps us understand how changes flow through our reactive system. As we introduce more operations (like \u003Ccode dir=\"auto\">TL.bind\u003C/code> later in Unit 4, Chapter 5), this graph can become more complex, with timelines depending on multiple sources or dependencies changing dynamically.\u003C/p>\n\u003Cp>The core promise of this FRP library is that this dependency graph is managed consistently. The internal system (\u003Ccode dir=\"auto\">DependencyCore\u003C/code>) ensures that dependencies are correctly tracked and that updates propagate efficiently and reliably according to the rules defined by operations like \u003Ccode dir=\"auto\">TL.map\u003C/code>.\u003C/p>\n\u003Cp>This concept of a managed dependency graph is crucial. It’s analogous to how:\u003C/p>\n\u003Cul>\n\u003Cli>A spreadsheet automatically recalculates cells when their precedents change.\u003C/li>\n\u003Cli>A software package manager tracks library dependencies to ensure consistency during installation or removal.\u003C/li>\n\u003Cli>Version control systems like Git track the history and relationships between different code versions.\u003C/li>\n\u003C/ul>\n\u003Cp>Understanding that operations like \u003Ccode dir=\"auto\">TL.map\u003C/code> build this underlying graph is key to grasping the power and robustness of the \u003Ccode dir=\"auto\">Timeline\u003C/code> abstraction, which will become even more apparent when we discuss more advanced operations and concurrency in later chapters.\u003C/p>\n\u003Cp>In the next chapter (Chapter 4), we’ll see how this \u003Ccode dir=\"auto\">TL.map\u003C/code> operation, combined with the concept of the dependency graph, allows us to integrate I/O operations seamlessly into our \u003Ccode dir=\"auto\">Timeline\u003C/code>-based model.\u003C/p>",{"headings":2218,"localImagePaths":2225,"remoteImagePaths":2226,"frontmatter":2227,"imagePaths":2228},[2219,2222],{"depth":182,"slug":2220,"text":2221},"31-transforming-values-with-tlmap","3.1 Transforming Values with TL.map",{"depth":182,"slug":2223,"text":2224},"32-introducing-the-dependency-graph","3.2 Introducing the Dependency Graph",[],[],{"title":2207,"description":2208},[],"en/book/unit-4/section-1/4-timeline-eco",{"id":2229,"data":2231,"body":2237,"filePath":2238,"digest":2239,"rendered":2240},{"title":2232,"description":2233,"editUrl":16,"head":2234,"template":18,"sidebar":2235,"pagefind":16,"draft":20},"Chapter 4: Handling I/O: Extending the Block Universe Model","Introduction: Theoretical Consistency for Interactions",[],{"hidden":20,"attrs":2236},{},"**Introduction: Theoretical Consistency for Interactions**\n\nThe previous chapters established the `Timeline\u003C'a>` type, grounded in the Block Universe model (Chapter 0 and 2), and introduced fundamental operations like `TL.at`, `TL.define` (Chapter 2), and crucially, `TL.map` (Chapter 3). We saw how `TL.map` allows us to create new timelines derived from existing ones and how these operations build a conceptual **Dependency Graph**.\n\nThis chapter extends the Block Universe philosophy to another area often considered problematic in pure functional programming: Input/Output (I/O). Operations like reading user input, writing to files, or printing to the console inherently involve interaction with an external world.\n\nJust as the internal state changes (`_last`) of `Timeline\u003C'a>` were reframed as simulating observation within the Block Universe, I/O operations can also be integrated consistently. When viewed within the Block Universe, the side effects of I/O are simply part of the description of the universe's immutable state transitioning between different time coordinates. Therefore, to maintain theoretical consistency, all I/O interactions should also be brought *within* the `Timeline` framework. Wrapping I/O actions using `Timeline` objects and operations like `TL.map` allows us to manage them declaratively within the same dependency graph, ensuring the integrity of our \"mini Block Universe\" simulation even when interacting with the external world.\n\n## 4.1 I/O Functions: The Standard View vs. Block Universe Perspective\n\nConsider standard I/O functions like `printfn` (F#) or `console.log` (JavaScript). Conventional functional programming identifies these as fundamentally **impure** due to their **side effects**. They modify the state of an external entity (the console display) and don't typically return meaningful values based solely on their inputs.\n\nHowever, let's re-examine this through the lens of the **Block Universe model**. In this view, *everything* is part of the immutable block. The state of the console display *before* a `printfn` call (at time `t1`) and the state *after* the call (at time `t2`) are simply two different, fixed states within the overall Block Universe. The `printfn` function itself simply describes the relationship or transition rule between these two immutable states.\n\nThe challenge isn't that I/O is fundamentally incompatible with an immutable universe, but rather how to **represent and manage** these state transitions within our `Timeline`-based programming model. The core principle is straightforward: **all I/O operations must also be managed by `Timeline`**.\n\n## 4.2 Wrapping Output Actions: The \"Hello, World!\" of `Timeline` I/O\n\nThe most fundamental example is standard output. By using the `TL.map` function introduced in the previous chapter (Chapter 3), we can easily wrap an I/O action like F#'s `printfn`. This involves creating a `Timeline` whose updates trigger the desired I/O side effect.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\nFor convenience in the following examples, we'll use a simple helper function `log` that wraps `printfn` to handle generic types. (Assuming `isNull` is a globally available helper as discussed in Unit 5, Chapter 0).\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Helper function for generic logging\n// Adhering to F# style guide for function definition\nlet log\u003C'a> : 'a -> unit =\n    fun a -> printfn \"%A\" a\n```\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\nNow, let's wrap this `log` action using `Timeline` and `TL.map`.\n\n**Example 1: Integer Logging Timeline**\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define) are accessible\n// No 'open Timeline' or 'open Timeline.TL'\n\n// Create a Timeline initialized with an integer value\nlet logIntTimeline : Timeline\u003Cint> = Timeline 5 // Explicit type\n\n// Connect the log function to the timeline using TL.map.\n// TL.map returns a new timeline, but here we only care about the side effect.\n// The dependency (logIntTimeline -> reaction) is established internally.\nlogIntTimeline\n|> TL.map log // Apply the 'log' function whenever the timeline updates; Explicit TL.map\n|> ignore   // We ignore the resulting timeline (often Timeline\u003Cunit>)\n\n// Output: 5 (printed immediately upon map application due to initial value)\n```\n\nIn this first example, `logIntTimeline` is created with an initial value of `5`. The `TL.map log` operation  immediately applies the `log` function to this initial value, causing `5` to be printed. Furthermore, a dependency is created: whenever `logIntTimeline` is updated via `TL.define`, the `log` function will be called again with the new value.\n\n**Example 2: String Logging Timeline (with Null Handling)**\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Assume 'isNull' is a globally available helper as established in Unit 5, Chapter 0.\n\n// Create a Timeline for strings, initialized with null\nlet logStringTimeline : Timeline\u003Cstring> = Timeline null // Explicit type\n\n// Connect the log function, adding logic to handle null\nlet logNonNullString : string -> unit = // Define the function passed to map\n    fun value ->\n        if not (isNull value) then // Adhering to if/then/else style\n            log value // Log only if the value is not null\n        else\n            () // Explicitly do nothing if null, or just omit else for implicit unit\n        // No else branch explicitly needed if we only act on non-null;\n        // 'if condition then expr' implicitly returns unit if condition is false.\n        // For clarity, we can keep the empty 'else ()'.\n\nlogStringTimeline\n|> TL.map logNonNullString // Explicit TL.map\n|> ignore // Setup the reaction, ignore the resulting Timeline\u003Cunit>\n\n// Output: (nothing printed initially because the value is null)\n```\n\nHere, `logStringTimeline` starts with `null`. The `TL.map` operation sets up a reaction that only calls `log` if the incoming value is not `null`. We can trigger the log later using `TL.define`:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Later, define a new value onto the timeline\nlogStringTimeline |> TL.define Now \"Hello\" // Explicit TL.define\n// Output: Hello (printed when define is called)\n\nlogStringTimeline |> TL.define Now \"Timeline I/O!\"\n// Output: Timeline I/O! (printed when define is called)\n\nlogStringTimeline |> TL.define Now null // Define null again\n// Output: (nothing printed)\n```\n\nThese examples constitute the \"Hello, World!\" for using `Timeline` to manage I/O. They demonstrate the fundamental pattern: **wrap the I/O action within a function and use `TL.map` to apply that function whenever a source `Timeline` updates. Trigger the action by updating the source `Timeline` using `TL.define`**.\n\n*(Why No Built-in `log` Timeline? User Choice!)*\nYou might wonder why a standard `logTimeline` isn't included directly in the `Timeline` library. The reason lies in flexibility. Users might need different logging formats, destinations, or null-handling logic. Providing the core tools (`Timeline` factory, `TL.map`, `TL.define`) allows users to easily implement the exact I/O behavior they need by passing the appropriate function to `TL.map`.\n\n## 4.3 Linking Timelines to Monitor for Debugging\n\nOnce you've created a useful I/O timeline like `logStringTimeline`, it becomes a powerful tool for debugging. The `TL.link` function provides a convenient way to connect two timelines.\n\nThe `TL.link` function simply propagates updates from a source timeline (`timelineA`) to a target timeline (`timelineB`). Internally, as per `Timeline.fs`, it registers a direct dependency and performs an initial sync.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\n`TL.link` sets up a dependency so that any value defined on `timelineA` is subsequently defined on `timelineB`. It also typically propagates the initial value immediately.\n\n```fsharp\n// Signature (from Timeline.fs, TL module):\n// val link\u003C'a> : Timeline\u003C'a> -> Timeline\u003C'a> -> unit\n```\n\n*(Note: The original text mentioned \"Internally, it likely uses TL.map\". While `link` could be conceptually built with `map`, the provided `Timeline.fs` shows a direct implementation using `DependencyCore.registerDependency` and an initial `TL.define` for sync. The text here is adjusted to reflect a more general statement about its effect, not presuming its exact internal implementation in this explanatory chapter unless crucial.)*\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\nConsider a scenario where you have an arbitrary timeline in your application, `timelineA`, and you want to monitor its value changes using `logStringTimeline`:\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// An arbitrary timeline in your application (ensure type matches target)\nlet timelineA : Timeline\u003Cstring> = Timeline null // Start with null; explicit type\n\n// Assume logStringTimeline is already set up as before (prints non-null strings)\n// let logStringTimeline : Timeline\u003Cstring> = ...\n\n// Simply link timelineA to your logging timeline!\ntimelineA |> TL.link logStringTimeline // Explicit TL.link\n// Output: (nothing printed initially as timelineA is null and logStringTimeline's map handles null)\n```\n\nWith this single line, any update to `timelineA` will now be automatically propagated to `logStringTimeline`, which in turn will print the value (if not `null`, based on `logStringTimeline`'s setup).\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Now, whenever timelineA is updated...\ntimelineA |> TL.define Now \"linked\"\n// Output: linked (propagated to logStringTimeline and printed)\n\ntimelineA |> TL.define Now \"message!\"\n// Output: message! (propagated and printed)\n\ntimelineA |> TL.define Now null\n// Output: (nothing printed)\n```\n\nSince all dynamic values in this system can be represented by `Timeline`s, `TL.link` provides a simple yet powerful way to observe the state of any part of your application by connecting it to a pre-configured logging or display `Timeline`.\n\n## 4.4 Handling Asynchronous Input: HTTP Request Example\n\nThe previous examples showed how to send data *to* an I/O timeline (output). However, I/O often involves receiving data *from* the external world, such as the response to an HTTP request (input). We can handle this by using `TL.map` to trigger the asynchronous operation and `TL.define` within the async workflow to feed the result back into a `Timeline`.\n\nLet's sketch a simple example for making an HTTP GET request.\n\n**1. Define Timelines for Request and Response:**\n\nWe need one timeline to trigger the request (e.g., by defining the URL) and another to receive the response content.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\nopen System.Net.Http // Required for HttpClient\n\n// Timeline to trigger the request with a URL\nlet httpRequestUrlTimeline : Timeline\u003Cstring> = Timeline null // Explicit type\n\n// Timeline to receive the response content (or error message)\nlet httpResponseTimeline : Timeline\u003Cstring> = Timeline null // Explicit type\n```\n\n**2. Set up the I/O Handler (Async Request):**\n\nThis uses `TL.map` on the *request* timeline. When a non-null URL is defined, the function passed to `TL.map` triggers an asynchronous HTTP GET request. When the request completes (successfully or with an error), it calls `TL.define` on the *response* timeline.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Use a single HttpClient instance for efficiency (simplified example)\nlet httpClient : HttpClient = new HttpClient() // Explicit type\n\n// Define the function that will be passed to TL.map\nlet httpRequestFn : string -> unit = // Explicit function type\n    fun url ->\n        if not (isNull url) then // Using global isNull\n            // Asynchronously perform the HTTP GET request\n            async {\n                try\n                    // Perform the async operations\n                    let! response = httpClient.GetAsync(url) |> Async.AwaitTask\n                    response.EnsureSuccessStatusCode() |> ignore // Throw exception on HTTP error\n                    let! content = response.Content.ReadAsStringAsync() |> Async.AwaitTask\n\n                    // Define the successful response content onto the response timeline\n                    httpResponseTimeline |> TL.define Now content // Explicit TL.define\n\n                with ex ->\n                    // Define an error message onto the response timeline\n                    let errorMsg : string = sprintf \"HTTP Request Failed: %s - %s\" url ex.Message // Explicit type\n                    httpResponseTimeline |> TL.define Now errorMsg // Explicit TL.define\n            }\n            |> Async.StartImmediate // Start the async workflow without waiting\n        else\n            () // Do nothing if URL is null\n\n// Set up the reaction on the request timeline using map\nhttpRequestUrlTimeline\n|> TL.map httpRequestFn // Explicit TL.map\n|> ignore // Ignore the Timeline\u003Cunit> result of map (since httpRequestFn returns unit)\n```\n\n**3. Connect the Response Timeline (e.g., to Logging):**\n\nNow, we can react to the results arriving on `httpResponseTimeline` just like any other timeline, for example, by linking it to our logger (assuming `logStringTimeline` is set up).\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Assume logStringTimeline is set up as before\n// let logStringTimeline : Timeline\u003Cstring> = ...\n\n// Link the response timeline to the logging timeline\n// httpResponseTimeline |> TL.link logStringTimeline // Example, assuming logStringTimeline is defined\n```\n\n*(Example link commented out as `logStringTimeline` setup is assumed from prior examples, not redefined here).*\n\n**4. Trigger the Request:**\n\nDefining a URL onto `httpRequestUrlTimeline` starts the process.\n\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\n```fsharp\n// Trigger the HTTP request by defining a URL\nhttpRequestUrlTimeline |> TL.define Now \"https://www.google.com\"\n\n// Console Output (from logStringTimeline, after request completes, example):\n// Hello (if logStringTimeline was linked and google.com returned \"Hello\")\n// or:\n// HTTP Request Failed: https://www.google.com - \u003Cerror details>\n```\n\n*(The console output example here is more generic, as the actual output depends on what `logStringTimeline` is linked to and how it processes the data from `httpResponseTimeline`.)*\n\nIn this pattern:\n\n1.  Defining a value on `httpRequestUrlTimeline` triggers the function inside `TL.map`.\n2.  This function starts an asynchronous I/O operation.\n3.  When the operation completes, its result (or error) is fed back into the reactive system by calling `TL.define` on `httpResponseTimeline`.\n4.  Other parts of the system (like a logger connected via `TL.link`) react declaratively to updates on `httpResponseTimeline`.\n\n## 4.5 Benefits: System-Wide Consistency\n\nBy wrapping I/O side effects (both output and input) within `Timeline`s and using standard operations like `TL.map`, `TL.define`, and `TL.link` to manage them, I/O becomes a well-behaved participant in the FRP dependency graph introduced earlier (Chapter 3).\n\nThis approach ensures that:\n\n1.  **Consistency:** All dynamic values and actions, including interactions with the outside world, are managed through the same `Timeline` propagation mechanism.\n2.  **Declarative Control:** Dependencies and reactions (including I/O triggers and responses) are defined declaratively using functions like `TL.map` and `TL.link`, making the system flow easier to reason about.\n3.  **Model Integrity:** The \"mini Block Universe\" simulation remains internally consistent. External interactions don't happen as unmanaged side effects but are channeled through `Timeline`s, respecting the dependency graph.\n\nThis practice of representing I/O via `Timeline`s is fundamental to building robust, large-scale applications using this FRP philosophy, ensuring the entire system adheres to the principles derived from the Block Universe model.","src/content/docs/en/book/unit-4/section-1/4-timeline-eco.md","8f13ff32deca4b55",{"html":2241,"metadata":2242},"\u003Cp>\u003Cstrong>Introduction: Theoretical Consistency for Interactions\u003C/strong>\u003C/p>\n\u003Cp>The previous chapters established the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> type, grounded in the Block Universe model (Chapter 0 and 2), and introduced fundamental operations like \u003Ccode dir=\"auto\">TL.at\u003C/code>, \u003Ccode dir=\"auto\">TL.define\u003C/code> (Chapter 2), and crucially, \u003Ccode dir=\"auto\">TL.map\u003C/code> (Chapter 3). We saw how \u003Ccode dir=\"auto\">TL.map\u003C/code> allows us to create new timelines derived from existing ones and how these operations build a conceptual \u003Cstrong>Dependency Graph\u003C/strong>.\u003C/p>\n\u003Cp>This chapter extends the Block Universe philosophy to another area often considered problematic in pure functional programming: Input/Output (I/O). Operations like reading user input, writing to files, or printing to the console inherently involve interaction with an external world.\u003C/p>\n\u003Cp>Just as the internal state changes (\u003Ccode dir=\"auto\">_last\u003C/code>) of \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> were reframed as simulating observation within the Block Universe, I/O operations can also be integrated consistently. When viewed within the Block Universe, the side effects of I/O are simply part of the description of the universe’s immutable state transitioning between different time coordinates. Therefore, to maintain theoretical consistency, all I/O interactions should also be brought \u003Cem>within\u003C/em> the \u003Ccode dir=\"auto\">Timeline\u003C/code> framework. Wrapping I/O actions using \u003Ccode dir=\"auto\">Timeline\u003C/code> objects and operations like \u003Ccode dir=\"auto\">TL.map\u003C/code> allows us to manage them declaratively within the same dependency graph, ensuring the integrity of our “mini Block Universe” simulation even when interacting with the external world.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"41-io-functions-the-standard-view-vs-block-universe-perspective\">4.1 I/O Functions: The Standard View vs. Block Universe Perspective\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#41-io-functions-the-standard-view-vs-block-universe-perspective\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.1 I/O Functions: The Standard View vs. Block Universe Perspective”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Consider standard I/O functions like \u003Ccode dir=\"auto\">printfn\u003C/code> (F#) or \u003Ccode dir=\"auto\">console.log\u003C/code> (JavaScript). Conventional functional programming identifies these as fundamentally \u003Cstrong>impure\u003C/strong> due to their \u003Cstrong>side effects\u003C/strong>. They modify the state of an external entity (the console display) and don’t typically return meaningful values based solely on their inputs.\u003C/p>\n\u003Cp>However, let’s re-examine this through the lens of the \u003Cstrong>Block Universe model\u003C/strong>. In this view, \u003Cem>everything\u003C/em> is part of the immutable block. The state of the console display \u003Cem>before\u003C/em> a \u003Ccode dir=\"auto\">printfn\u003C/code> call (at time \u003Ccode dir=\"auto\">t1\u003C/code>) and the state \u003Cem>after\u003C/em> the call (at time \u003Ccode dir=\"auto\">t2\u003C/code>) are simply two different, fixed states within the overall Block Universe. The \u003Ccode dir=\"auto\">printfn\u003C/code> function itself simply describes the relationship or transition rule between these two immutable states.\u003C/p>\n\u003Cp>The challenge isn’t that I/O is fundamentally incompatible with an immutable universe, but rather how to \u003Cstrong>represent and manage\u003C/strong> these state transitions within our \u003Ccode dir=\"auto\">Timeline\u003C/code>-based programming model. The core principle is straightforward: \u003Cstrong>all I/O operations must also be managed by \u003Ccode dir=\"auto\">Timeline\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"42-wrapping-output-actions-the-hello-world-of-timeline-io\">4.2 Wrapping Output Actions: The “Hello, World!” of \u003Ccode dir=\"auto\">Timeline\u003C/code> I/O\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#42-wrapping-output-actions-the-hello-world-of-timeline-io\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.2 Wrapping Output Actions: The “Hello, World!” of Timeline I/O”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The most fundamental example is standard output. By using the \u003Ccode dir=\"auto\">TL.map\u003C/code> function introduced in the previous chapter (Chapter 3), we can easily wrap an I/O action like F#‘s \u003Ccode dir=\"auto\">printfn\u003C/code>. This involves creating a \u003Ccode dir=\"auto\">Timeline\u003C/code> whose updates trigger the desired I/O side effect.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\u003Cp>For convenience in the following examples, we’ll use a simple helper function \u003Ccode dir=\"auto\">log\u003C/code> that wraps \u003Ccode dir=\"auto\">printfn\u003C/code> to handle generic types. (Assuming \u003Ccode dir=\"auto\">isNull\u003C/code> is a globally available helper as discussed in Unit 5, Chapter 0).\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Helper function for generic logging\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to F# style guide for function definition\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">log\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> printfn \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%A\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> a\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Helper function for generic logging// Adhering to F# style guide for function definitionlet log\u003C&#x27;a> : &#x27;a -> unit =    fun a -> printfn &#x22;%A&#x22; a\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\u003Cp>Now, let’s wrap this \u003Ccode dir=\"auto\">log\u003C/code> action using \u003Ccode dir=\"auto\">Timeline\u003C/code> and \u003Ccode dir=\"auto\">TL.map\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Example 1: Integer Logging Timeline\u003C/strong>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define) are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No 'open Timeline' or 'open Timeline.TL'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a Timeline initialized with an integer value\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logIntTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Connect the log function to the timeline using TL.map.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// TL.map returns a new timeline, but here we only care about the side effect.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The dependency (logIntTimeline -> reaction) is established internally.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logIntTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map log \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the 'log' function whenever the timeline updates; Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore   \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// We ignore the resulting timeline (often Timeline&#x3C;unit>)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: 5 (printed immediately upon map application due to initial value)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define) are accessible// No &#x27;open Timeline&#x27; or &#x27;open Timeline.TL&#x27;// Create a Timeline initialized with an integer valuelet logIntTimeline : Timeline\u003Cint> = Timeline 5 // Explicit type// Connect the log function to the timeline using TL.map.// TL.map returns a new timeline, but here we only care about the side effect.// The dependency (logIntTimeline -> reaction) is established internally.logIntTimeline|> TL.map log // Apply the &#x27;log&#x27; function whenever the timeline updates; Explicit TL.map|> ignore   // We ignore the resulting timeline (often Timeline\u003Cunit>)// Output: 5 (printed immediately upon map application due to initial value)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>In this first example, \u003Ccode dir=\"auto\">logIntTimeline\u003C/code> is created with an initial value of \u003Ccode dir=\"auto\">5\u003C/code>. The \u003Ccode dir=\"auto\">TL.map log\u003C/code> operation  immediately applies the \u003Ccode dir=\"auto\">log\u003C/code> function to this initial value, causing \u003Ccode dir=\"auto\">5\u003C/code> to be printed. Furthermore, a dependency is created: whenever \u003Ccode dir=\"auto\">logIntTimeline\u003C/code> is updated via \u003Ccode dir=\"auto\">TL.define\u003C/code>, the \u003Ccode dir=\"auto\">log\u003C/code> function will be called again with the new value.\u003C/p>\n\u003Cp>\u003Cstrong>Example 2: String Logging Timeline (with Null Handling)\u003C/strong>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume 'isNull' is a globally available helper as established in Unit 5, Chapter 0.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Create a Timeline for strings, initialized with null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logStringTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Connect the log function, adding logic to handle null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">logNonNullString\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the function passed to map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> value \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">not\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isNull value\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to if/then/else style\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">            \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">log value \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Log only if the value is not null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicitly do nothing if null, or just omit else for implicit unit\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No else branch explicitly needed if we only act on non-null;\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// 'if condition then expr' implicitly returns unit if condition is false.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// For clarity, we can keep the empty 'else ()'.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logStringTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map logNonNullString \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Setup the reaction, ignore the resulting Timeline&#x3C;unit>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: (nothing printed initially because the value is null)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume &#x27;isNull&#x27; is a globally available helper as established in Unit 5, Chapter 0.// Create a Timeline for strings, initialized with nulllet logStringTimeline : Timeline\u003Cstring> = Timeline null // Explicit type// Connect the log function, adding logic to handle nulllet logNonNullString : string -> unit = // Define the function passed to map    fun value ->        if not (isNull value) then // Adhering to if/then/else style            log value // Log only if the value is not null        else            () // Explicitly do nothing if null, or just omit else for implicit unit        // No else branch explicitly needed if we only act on non-null;        // &#x27;if condition then expr&#x27; implicitly returns unit if condition is false.        // For clarity, we can keep the empty &#x27;else ()&#x27;.logStringTimeline|> TL.map logNonNullString // Explicit TL.map|> ignore // Setup the reaction, ignore the resulting Timeline\u003Cunit>// Output: (nothing printed initially because the value is null)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Here, \u003Ccode dir=\"auto\">logStringTimeline\u003C/code> starts with \u003Ccode dir=\"auto\">null\u003C/code>. The \u003Ccode dir=\"auto\">TL.map\u003C/code> operation sets up a reaction that only calls \u003Ccode dir=\"auto\">log\u003C/code> if the incoming value is not \u003Ccode dir=\"auto\">null\u003C/code>. We can trigger the log later using \u003Ccode dir=\"auto\">TL.define\u003C/code>:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Later, define a new value onto the timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logStringTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Hello\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.define\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Hello (printed when define is called)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logStringTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Timeline I/O!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: Timeline I/O! (printed when define is called)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">logStringTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define null again\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: (nothing printed)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Later, define a new value onto the timelinelogStringTimeline |> TL.define Now &#x22;Hello&#x22; // Explicit TL.define// Output: Hello (printed when define is called)logStringTimeline |> TL.define Now &#x22;Timeline I/O!&#x22;// Output: Timeline I/O! (printed when define is called)logStringTimeline |> TL.define Now null // Define null again// Output: (nothing printed)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>These examples constitute the “Hello, World!” for using \u003Ccode dir=\"auto\">Timeline\u003C/code> to manage I/O. They demonstrate the fundamental pattern: \u003Cstrong>wrap the I/O action within a function and use \u003Ccode dir=\"auto\">TL.map\u003C/code> to apply that function whenever a source \u003Ccode dir=\"auto\">Timeline\u003C/code> updates. Trigger the action by updating the source \u003Ccode dir=\"auto\">Timeline\u003C/code> using \u003Ccode dir=\"auto\">TL.define\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cp>\u003Cem>(Why No Built-in \u003Ccode dir=\"auto\">log\u003C/code> Timeline? User Choice!)\u003C/em>\nYou might wonder why a standard \u003Ccode dir=\"auto\">logTimeline\u003C/code> isn’t included directly in the \u003Ccode dir=\"auto\">Timeline\u003C/code> library. The reason lies in flexibility. Users might need different logging formats, destinations, or null-handling logic. Providing the core tools (\u003Ccode dir=\"auto\">Timeline\u003C/code> factory, \u003Ccode dir=\"auto\">TL.map\u003C/code>, \u003Ccode dir=\"auto\">TL.define\u003C/code>) allows users to easily implement the exact I/O behavior they need by passing the appropriate function to \u003Ccode dir=\"auto\">TL.map\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"43-linking-timelines-to-monitor-for-debugging\">4.3 Linking Timelines to Monitor for Debugging\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#43-linking-timelines-to-monitor-for-debugging\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.3 Linking Timelines to Monitor for Debugging”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Once you’ve created a useful I/O timeline like \u003Ccode dir=\"auto\">logStringTimeline\u003C/code>, it becomes a powerful tool for debugging. The \u003Ccode dir=\"auto\">TL.link\u003C/code> function provides a convenient way to connect two timelines.\u003C/p>\n\u003Cp>The \u003Ccode dir=\"auto\">TL.link\u003C/code> function simply propagates updates from a source timeline (\u003Ccode dir=\"auto\">timelineA\u003C/code>) to a target timeline (\u003Ccode dir=\"auto\">timelineB\u003C/code>). Internally, as per \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>, it registers a direct dependency and performs an initial sync.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg\" alt=\"Note Header\">\n\u003Cp>\u003Ccode dir=\"auto\">TL.link\u003C/code> sets up a dependency so that any value defined on \u003Ccode dir=\"auto\">timelineA\u003C/code> is subsequently defined on \u003Ccode dir=\"auto\">timelineB\u003C/code>. It also typically propagates the initial value immediately.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Signature (from Timeline.fs, TL module):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// val link&#x3C;'a> : Timeline&#x3C;'a> -> Timeline&#x3C;'a> -> unit\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Signature (from Timeline.fs, TL module):// val link\u003C&#x27;a> : Timeline\u003C&#x27;a> -> Timeline\u003C&#x27;a> -> unit\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Note: The original text mentioned “Internally, it likely uses TL.map”. While \u003Ccode dir=\"auto\">link\u003C/code> could be conceptually built with \u003Ccode dir=\"auto\">map\u003C/code>, the provided \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> shows a direct implementation using \u003Ccode dir=\"auto\">DependencyCore.registerDependency\u003C/code> and an initial \u003Ccode dir=\"auto\">TL.define\u003C/code> for sync. The text here is adjusted to reflect a more general statement about its effect, not presuming its exact internal implementation in this explanatory chapter unless crucial.)\u003C/em>\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg\" alt=\"Note Footer\">\n\u003Cp>Consider a scenario where you have an arbitrary timeline in your application, \u003Ccode dir=\"auto\">timelineA\u003C/code>, and you want to monitor its value changes using \u003Ccode dir=\"auto\">logStringTimeline\u003C/code>:\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// An arbitrary timeline in your application (ensure type matches target)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timelineA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start with null; explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume logStringTimeline is already set up as before (prints non-null strings)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let logStringTimeline : Timeline&#x3C;string> = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Simply link timelineA to your logging timeline!\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.link logStringTimeline \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.link\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: (nothing printed initially as timelineA is null and logStringTimeline's map handles null)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// An arbitrary timeline in your application (ensure type matches target)let timelineA : Timeline\u003Cstring> = Timeline null // Start with null; explicit type// Assume logStringTimeline is already set up as before (prints non-null strings)// let logStringTimeline : Timeline\u003Cstring> = ...// Simply link timelineA to your logging timeline!timelineA |> TL.link logStringTimeline // Explicit TL.link// Output: (nothing printed initially as timelineA is null and logStringTimeline&#x27;s map handles null)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>With this single line, any update to \u003Ccode dir=\"auto\">timelineA\u003C/code> will now be automatically propagated to \u003Ccode dir=\"auto\">logStringTimeline\u003C/code>, which in turn will print the value (if not \u003Ccode dir=\"auto\">null\u003C/code>, based on \u003Ccode dir=\"auto\">logStringTimeline\u003C/code>’s setup).\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Now, whenever timelineA is updated...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">linked\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: linked (propagated to logStringTimeline and printed)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">message!\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: message! (propagated and printed)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">timelineA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Output: (nothing printed)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Now, whenever timelineA is updated...timelineA |> TL.define Now &#x22;linked&#x22;// Output: linked (propagated to logStringTimeline and printed)timelineA |> TL.define Now &#x22;message!&#x22;// Output: message! (propagated and printed)timelineA |> TL.define Now null// Output: (nothing printed)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Since all dynamic values in this system can be represented by \u003Ccode dir=\"auto\">Timeline\u003C/code>s, \u003Ccode dir=\"auto\">TL.link\u003C/code> provides a simple yet powerful way to observe the state of any part of your application by connecting it to a pre-configured logging or display \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"44-handling-asynchronous-input-http-request-example\">4.4 Handling Asynchronous Input: HTTP Request Example\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#44-handling-asynchronous-input-http-request-example\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.4 Handling Asynchronous Input: HTTP Request Example”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The previous examples showed how to send data \u003Cem>to\u003C/em> an I/O timeline (output). However, I/O often involves receiving data \u003Cem>from\u003C/em> the external world, such as the response to an HTTP request (input). We can handle this by using \u003Ccode dir=\"auto\">TL.map\u003C/code> to trigger the asynchronous operation and \u003Ccode dir=\"auto\">TL.define\u003C/code> within the async workflow to feed the result back into a \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/p>\n\u003Cp>Let’s sketch a simple example for making an HTTP GET request.\u003C/p>\n\u003Cp>\u003Cstrong>1. Define Timelines for Request and Response:\u003C/strong>\u003C/p>\n\u003Cp>We need one timeline to trigger the request (e.g., by defining the URL) and another to receive the response content.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">open\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> System.Net.Http \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Required for HttpClient\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline to trigger the request with a URL\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpRequestUrlTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline to receive the response content (or error message)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpResponseTimeline\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#82AAFF;--1:#3B61B0\">null\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"open System.Net.Http // Required for HttpClient// Timeline to trigger the request with a URLlet httpRequestUrlTimeline : Timeline\u003Cstring> = Timeline null // Explicit type// Timeline to receive the response content (or error message)let httpResponseTimeline : Timeline\u003Cstring> = Timeline null // Explicit type\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>2. Set up the I/O Handler (Async Request):\u003C/strong>\u003C/p>\n\u003Cp>This uses \u003Ccode dir=\"auto\">TL.map\u003C/code> on the \u003Cem>request\u003C/em> timeline. When a non-null URL is defined, the function passed to \u003Ccode dir=\"auto\">TL.map\u003C/code> triggers an asynchronous HTTP GET request. When the request completes (successfully or with an error), it calls \u003Ccode dir=\"auto\">TL.define\u003C/code> on the \u003Cem>response\u003C/em> timeline.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Use a single HttpClient instance for efficiency (simplified example)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpClient\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpClient \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">new\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> HttpClient\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the function that will be passed to TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">httpRequestFn\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> unit \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit function type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> url \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">if\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">not\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">isNull url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">then\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using global isNull\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Asynchronously perform the HTTP GET request\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">async\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">{\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">try\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Perform the async operations\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let!\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">response\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> httpClient.GetAsync\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">url\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.AwaitTask\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">response.EnsureSuccessStatusCode\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Throw exception on HTTP error\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let!\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">content\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> response.Content.ReadAsStringAsync\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.AwaitTask\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define the successful response content onto the response timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpResponseTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now content \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.define\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">with\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ex \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Define an error message onto the response timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">                    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">errorMsg\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">HTTP Request Failed: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\"> - \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%s\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> url ex.Message \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">                    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpResponseTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now errorMsg \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.define\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Async.StartImmediate \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Start the async workflow without waiting\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">        \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">            \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">()\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Do nothing if URL is null\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Set up the reaction on the request timeline using map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpRequestUrlTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map httpRequestFn \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> ignore \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Ignore the Timeline&#x3C;unit> result of map (since httpRequestFn returns unit)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Use a single HttpClient instance for efficiency (simplified example)let httpClient : HttpClient = new HttpClient() // Explicit type// Define the function that will be passed to TL.maplet httpRequestFn : string -> unit = // Explicit function type    fun url ->        if not (isNull url) then // Using global isNull            // Asynchronously perform the HTTP GET request            async {                try                    // Perform the async operations                    let! response = httpClient.GetAsync(url) |> Async.AwaitTask                    response.EnsureSuccessStatusCode() |> ignore // Throw exception on HTTP error                    let! content = response.Content.ReadAsStringAsync() |> Async.AwaitTask                    // Define the successful response content onto the response timeline                    httpResponseTimeline |> TL.define Now content // Explicit TL.define                with ex ->                    // Define an error message onto the response timeline                    let errorMsg : string = sprintf &#x22;HTTP Request Failed: %s - %s&#x22; url ex.Message // Explicit type                    httpResponseTimeline |> TL.define Now errorMsg // Explicit TL.define            }            |> Async.StartImmediate // Start the async workflow without waiting        else            () // Do nothing if URL is null// Set up the reaction on the request timeline using maphttpRequestUrlTimeline|> TL.map httpRequestFn // Explicit TL.map|> ignore // Ignore the Timeline\u003Cunit> result of map (since httpRequestFn returns unit)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>3. Connect the Response Timeline (e.g., to Logging):\u003C/strong>\u003C/p>\n\u003Cp>Now, we can react to the results arriving on \u003Ccode dir=\"auto\">httpResponseTimeline\u003C/code> just like any other timeline, for example, by linking it to our logger (assuming \u003Ccode dir=\"auto\">logStringTimeline\u003C/code> is set up).\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume logStringTimeline is set up as before\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let logStringTimeline : Timeline&#x3C;string> = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Link the response timeline to the logging timeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// httpResponseTimeline |> TL.link logStringTimeline // Example, assuming logStringTimeline is defined\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume logStringTimeline is set up as before// let logStringTimeline : Timeline\u003Cstring> = ...// Link the response timeline to the logging timeline// httpResponseTimeline |> TL.link logStringTimeline // Example, assuming logStringTimeline is defined\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(Example link commented out as \u003Ccode dir=\"auto\">logStringTimeline\u003C/code> setup is assumed from prior examples, not redefined here).\u003C/em>\u003C/p>\n\u003Cp>\u003Cstrong>4. Trigger the Request:\u003C/strong>\u003C/p>\n\u003Cp>Defining a URL onto \u003Ccode dir=\"auto\">httpRequestUrlTimeline\u003C/code> starts the process.\u003C/p>\n\u003Cimg width=\"100%\" src=\"https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg\" alt=\"F# Logo\">\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Trigger the HTTP request by defining a URL\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">httpRequestUrlTimeline \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.define Now \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">https://www.google.com\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Console Output (from logStringTimeline, after request completes, example):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Hello (if logStringTimeline was linked and google.com returned \"Hello\")\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// or:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// HTTP Request Failed: https://www.google.com - &#x3C;error details>\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Trigger the HTTP request by defining a URLhttpRequestUrlTimeline |> TL.define Now &#x22;https://www.google.com&#x22;// Console Output (from logStringTimeline, after request completes, example):// Hello (if logStringTimeline was linked and google.com returned &#x22;Hello&#x22;)// or:// HTTP Request Failed: https://www.google.com - \u003Cerror details>\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(The console output example here is more generic, as the actual output depends on what \u003Ccode dir=\"auto\">logStringTimeline\u003C/code> is linked to and how it processes the data from \u003Ccode dir=\"auto\">httpResponseTimeline\u003C/code>.)\u003C/em>\u003C/p>\n\u003Cp>In this pattern:\u003C/p>\n\u003Col>\n\u003Cli>Defining a value on \u003Ccode dir=\"auto\">httpRequestUrlTimeline\u003C/code> triggers the function inside \u003Ccode dir=\"auto\">TL.map\u003C/code>.\u003C/li>\n\u003Cli>This function starts an asynchronous I/O operation.\u003C/li>\n\u003Cli>When the operation completes, its result (or error) is fed back into the reactive system by calling \u003Ccode dir=\"auto\">TL.define\u003C/code> on \u003Ccode dir=\"auto\">httpResponseTimeline\u003C/code>.\u003C/li>\n\u003Cli>Other parts of the system (like a logger connected via \u003Ccode dir=\"auto\">TL.link\u003C/code>) react declaratively to updates on \u003Ccode dir=\"auto\">httpResponseTimeline\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"45-benefits-system-wide-consistency\">4.5 Benefits: System-Wide Consistency\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#45-benefits-system-wide-consistency\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “4.5 Benefits: System-Wide Consistency”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>By wrapping I/O side effects (both output and input) within \u003Ccode dir=\"auto\">Timeline\u003C/code>s and using standard operations like \u003Ccode dir=\"auto\">TL.map\u003C/code>, \u003Ccode dir=\"auto\">TL.define\u003C/code>, and \u003Ccode dir=\"auto\">TL.link\u003C/code> to manage them, I/O becomes a well-behaved participant in the FRP dependency graph introduced earlier (Chapter 3).\u003C/p>\n\u003Cp>This approach ensures that:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Consistency:\u003C/strong> All dynamic values and actions, including interactions with the outside world, are managed through the same \u003Ccode dir=\"auto\">Timeline\u003C/code> propagation mechanism.\u003C/li>\n\u003Cli>\u003Cstrong>Declarative Control:\u003C/strong> Dependencies and reactions (including I/O triggers and responses) are defined declaratively using functions like \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.link\u003C/code>, making the system flow easier to reason about.\u003C/li>\n\u003Cli>\u003Cstrong>Model Integrity:\u003C/strong> The “mini Block Universe” simulation remains internally consistent. External interactions don’t happen as unmanaged side effects but are channeled through \u003Ccode dir=\"auto\">Timeline\u003C/code>s, respecting the dependency graph.\u003C/li>\n\u003C/ol>\n\u003Cp>This practice of representing I/O via \u003Ccode dir=\"auto\">Timeline\u003C/code>s is fundamental to building robust, large-scale applications using this FRP philosophy, ensuring the entire system adheres to the principles derived from the Block Universe model.\u003C/p>",{"headings":2243,"localImagePaths":2259,"remoteImagePaths":2260,"frontmatter":2261,"imagePaths":2262},[2244,2247,2250,2253,2256],{"depth":182,"slug":2245,"text":2246},"41-io-functions-the-standard-view-vs-block-universe-perspective","4.1 I/O Functions: The Standard View vs. Block Universe Perspective",{"depth":182,"slug":2248,"text":2249},"42-wrapping-output-actions-the-hello-world-of-timeline-io","4.2 Wrapping Output Actions: The “Hello, World!” of Timeline I/O",{"depth":182,"slug":2251,"text":2252},"43-linking-timelines-to-monitor-for-debugging","4.3 Linking Timelines to Monitor for Debugging",{"depth":182,"slug":2254,"text":2255},"44-handling-asynchronous-input-http-request-example","4.4 Handling Asynchronous Input: HTTP Request Example",{"depth":182,"slug":2257,"text":2258},"45-benefits-system-wide-consistency","4.5 Benefits: System-Wide Consistency",[],[],{"title":2232,"description":2233},[],"en/book/unit-4/section-1/5-functor-monad",{"id":2263,"data":2265,"body":2271,"filePath":2272,"digest":2273,"rendered":2274},{"title":2266,"description":2267,"editUrl":16,"head":2268,"template":18,"sidebar":2269,"pagefind":16,"draft":20},"Chapter 5: Robustness Through Algebraic Structure","Introduction: A Unified Ecosystem",[],{"hidden":20,"attrs":2270},{},"**Introduction: A Unified Ecosystem**\n\nThe preceding chapters established the `Timeline\u003C'a>` concept, grounded in the Block Universe model (Chapters 0 & 2), introduced the `TL.map` operation for transformations and the idea of a dependency graph (Chapter 3), and demonstrated how I/O operations can be integrated (Chapter 4). The result is a unified \"ecosystem\" where all dynamic values and interactions are represented and managed consistently through the `Timeline` abstraction and its associated operations.\n\nNow that we have this complete `Timeline`-centric system, we can explore one of its most significant benefits: **robustness**. This robustness arises because the `Timeline` type, equipped with operations like `TL.map` and `TL.bind` (which we will verify in this chapter, referencing their definitions from `Timeline.fs`), adheres to well-defined mathematical laws, specifically those associated with algebraic structures like Functors and Monads.\n\nThis chapter will verify these properties and explain their connection to robustness:\n\n1.  First, we will confirm that `Timeline` satisfies the **Functor laws** using illustrative code examples based on the public API.\n2.  Second, we will (re)introduce `TL.bind` and verify that `Timeline` satisfies the **Monad laws**, choosing the formulation based on Kleisli composition (`TL.(>>>)`), which highlights the underlying Monoid structure.\n3.  Third, we will discuss how these verified Functor and Monad (Monoid) properties contribute to the **robustness** of systems built with `Timeline`.\n4.  Fourth, we will argue why these algebraic properties are, in a sense, an **obvious consequence** of the underlying immutable dependency graph model introduced earlier.\n\n**A Philosophical Prerequisite:** As previously established (Chapter 2, Section 2.8), conventional functional programming might dismiss `Timeline\u003C'a>` as impure due to its internal use of a mutable field (`_last`). However, our framework views `Timeline\u003C'a>` as a simulation of observing an immutable Block Universe. The internal mutability of `_last` is the *correct* way to model the changing viewpoint (`Now`) against the immutable data trajectory. Therefore, we consider the `Timeline\u003C'a>` object, from the perspective of its **observable behavior** over time (the sequence of values obtainable via `TL.at`), as a conceptually immutable entity representing the entire time-varying value. It is on this **behavioral equivalence** and **conceptual immutability** that we base the following verification. We assert that two `Timeline` objects are equivalent if they produce the same sequence of values over time for any given sequence of updates to their sources.\n\n---\n\n## 5.1 Verifying Functor Laws for `Timeline\u003C'a>`\n\nA type constructor `T` is a Functor if it supports a `map` function (`fmap` in Haskell, `Select` in LINQ) with the following signature (adapted for `Timeline` from `Timeline.fs`):\n`(*Signature from TL module in Timeline.fs *) val map\u003C'a, 'b> : ('a -> 'b) -> Timeline\u003C'a> -> Timeline\u003C'b>`\nAnd satisfies two laws. We verify these using illustrative F# code examples written in pipeline style (`timelineA |> TL.map f`), focusing only on the observable behavior.\n\n**Setup for Functor Examples:**\n\n```fsharp\n// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define, TL.at) are accessible\n// No 'open Timeline' or 'open Timeline.TL'\n\n// Sample simple functions using 'fun' keyword style\nlet f1 : int -> string = \n    fun i -> sprintf \"Value: %d\" i\nlet f2 : string -> bool = \n    fun s -> s.Length > 10\n\n// Standard identity function using 'fun' keyword style\nlet id\u003C'a> : 'a -> 'a = // Generic identity function\n    fun x -> x\n\n// Initial timeline using the factory function\nlet timelineIntF : Timeline\u003Cint> = Timeline 5 // Explicit type\n```\n\n**Law 1: Identity**\nEquation: `map id = id`\nWhich means: For all `t : Timeline\u003C'a>`, `t |> TL.map id` is behaviorally equivalent to `t`.\n\n*   **Illustrative Code:**\n    ```fsharp\n    // --- LHS ---\n    let lhsTimelineF_Id : Timeline\u003Cint> = timelineIntF |> TL.map id // Explicit TL.map\n\n    // --- RHS ---\n    let rhsTimelineF_Id : Timeline\u003Cint> = timelineIntF // Applying id doesn't change it (conceptually)\n    ```\n*   **Verification (Conceptual):**\n    *   **Initial Values:** `lhsTimelineF_Id` is created by applying `id` to `timelineIntF`'s initial value (5), so its initial value observable via `TL.at Now` is 5. `rhsTimelineF_Id`'s initial value is 5. Both start with the same observable value.\n    *   **Updates:** If we execute `timelineIntF |> TL.define Now 15`, the `TL.map` operation ensures that `lhsTimelineF_Id` subsequently reflects the value `id 15 = 15` when queried with `TL.at Now`. The RHS *is* `timelineIntF`, so it also reflects 15. Both timelines exhibit identical value sequences over time.\n\n*   **Equivalence Explanation:** The `t |> TL.map id` operation creates a new timeline that starts with the same value as `t` and mirrors every update because the mapped function `id` doesn't change the value. The library's internal mechanism (`DependencyCore`) guarantees this propagation. Thus, the LHS behaves identically to the RHS (`t`).\n    **Therefore, the Identity Law holds (behaviorally).**\n\n**Law 2: Composition**\nEquation: `map (f >> g) = map f >> map g` (where `map f >> map g` means `fun t -> t |> TL.map f |> TL.map g`)\nWhich means: For all `f`, `g`, `t`, `t |> TL.map (f >> g)` is behaviorally equivalent to `t |> TL.map f |> TL.map g`. (Here `>>` denotes standard function composition: apply `f` then `g`).\n\n*   **Illustrative Code:**\n    ```fsharp\n    // f1 : int -> string\n    // f2 : string -> bool\n    // composedFunc : int -> bool\n    let composedFunc : int -> bool = f1 >> f2 // Standard function composition\n\n    // --- LHS ---\n    let lhsTimelineF_Comp : Timeline\u003Cbool> = timelineIntF |> TL.map composedFunc // Explicit TL.map\n\n    // --- RHS ---\n    // Apply the mapping functions sequentially using pipeline\n    let rhsTimelineF_Comp : Timeline\u003Cbool> = timelineIntF |> TL.map f1 |> TL.map f2 // Explicit TL.map\n    ```\n*   **Verification (Conceptual):**\n    *   **Initial Values:** LHS applies `composedFunc` (which is `f1 >> f2`) to 5. `f1 5` evaluates to \"Value: 5\", then `f2 \"Value: 5\"` evaluates to `false` (since length 9 !> 10). So, `lhsTimelineF_Comp` initial value is `false`. RHS first applies `TL.map f1` to `timelineIntF` (initial value 5), resulting in an intermediate `Timeline\u003Cstring>` with initial value \"Value: 5\". Then, `TL.map f2` is applied to this intermediate timeline, yielding a final `rhsTimelineF_Comp` with initial value `f2 \"Value: 5\" = false`. Both start with `false`.\n    *   **Updates:** If we execute `timelineIntF |> TL.define Now 1234567890`.\n        LHS: `f1 1234567890` is \"Value: 1234567890\". `f2 \"Value: 1234567890\"` is `true` (length 17 > 10). `lhsTimelineF_Comp` updates to `true`.\n        RHS: `timelineIntF |> TL.map f1` updates its intermediate `Timeline\u003Cstring>` to \"Value: 1234567890\". This change propagates, triggering the second `TL.map f2`, which updates `rhsTimelineF_Comp` to `f2 \"Value: 1234567890\" = true`. Both timelines exhibit identical value sequences.\n\n*   **Equivalence Explanation:** The LHS applies the combined function `f >> g` within a single `TL.map` operation. The RHS pipes the timeline through `TL.map f` and then through `TL.map g`. The library's internal dependency mechanism (`DependencyCore`) ensures that an update on the original `timelineIntF` correctly propagates through both stages in the RHS pipeline, yielding the same final value as the single combined step in the LHS.\n    **Therefore, the Composition Law holds (behaviorally).**\n\nSince both Functor laws hold behaviorally, `Timeline` is a valid **Functor**.\n\n---\n\n## 5.2 Verifying Monad Structure via Kleisli Composition\n\nNow, we verify that `Timeline` forms a Monad. This relies on the `TL.bind` operation, `TL.ID` (often called `return` or `pure`), and Kleisli composition `TL.(>>>)`.\n\n**The `TL.bind` Operation:**\nSignature (from `Timeline.fs`, `TL` module):\n`(* val bind\u003C'a, 'b> : ('a -> Timeline\u003C'b>) -> Timeline\u003C'a> -> Timeline\u003C'b> *)`\n`TL.bind` handles functions that themselves return a `Timeline`: `'a -> Timeline\u003C'b>`. This enables chaining operations where the next step depends on the result of the previous, and that next step is also a `Timeline`.\n\n**Note on Monad Law Formulations:**\nA type constructor `T` is a Monad if it's a Functor and has `ID : 'a -> T\u003C'a>` and `bind : ('a -> T\u003C'b>) -> T\u003C'a> -> T\u003C'b>` (if bind is curried for pipelining, or `T\u003C'a> -> ('a -> T\u003C'b>) -> T\u003C'b>`). The laws can be expressed using `bind` and `ID`.\n\nAn equivalent, and often more insightful, formulation defines a Monad through **Kleisli composition**. Kleisli arrows are functions of type `'a -> Timeline\u003C'b>`. A Monad structure exists if these arrows form a **Monoid** under a composition operation (here `TL.(>>>)`), with `TL.ID` as the Monoid's identity. The laws are then the standard Monoid laws for `TL.(>>>)` and `TL.ID`. This perspective highlights the core algebraic structure.\n\n**Definitions for `Timeline` Monad (from `Timeline.fs`, `TL` module):**\n\n*   **Kleisli Arrow (Monadic Function):** A function with the signature `'a -> Timeline\u003C'b>`.\n*   **Identity Kleisli Arrow (`TL.ID`):**\n    `(* val ID\u003C'a> : 'a -> Timeline\u003C'a> *)`\n    Takes `a` and wraps it in a new, static `Timeline` via `Timeline a`.\n*   **Kleisli Composition (`TL.(>>>)`):**\n    `(* val inline (>>>) : ('a -> Timeline\u003C'b>) -> ('b -> Timeline\u003C'c>) -> ('a -> Timeline\u003C'c>) *)`\n    Defined using `TL.bind` as: `fun anArg -> (f anArg) |> TL.bind g`. *(Using `anArg` to avoid conflict with `f` and `g` function names in its own definition)*\n\n**Setup for Monad Examples:**\n\n```fsharp\n// Assume Timeline factory, Now, and TL module functions (TL.map, TL.bind, TL.ID, TL.define, TL.at, TL.(>>>)) are accessible\n\n// --- Sample Kleisli Arrows (Monadic Functions) ---\n// These functions (f, g, h) return a Timeline, distinguishing them from\n// the simple functions used in the Functor examples (f1, f2).\n// They are of the form 'a -> Timeline\u003C'b>.\n\nlet f : int -> Timeline\u003Cstring> = // Monadic Function f\n    fun i -> TL.ID (sprintf \"f(%d)\" i)\n\nlet g : string -> Timeline\u003Cfloat> = // Monadic Function g\n    fun s -> TL.ID (float s.Length)\n\nlet h : float -> Timeline\u003Cbool> = // Monadic Function h\n    fun fl -> TL.ID (fl > 4.0)\n\n// Initial timeline for testing\nlet initialValueMonad : int = 10\nlet timelineMonadA : Timeline\u003Cint> = Timeline initialValueMonad\n```\n\n**Verification of Kleisli Monoid Laws:**\n\n**Law 1: Associativity**\nEquation: `(f >>> g) >>> h = f >>> (g >>> h)`\n\n*   **Goal:** Show `timelineMonadA |> TL.bind ((f >>> g) >>> h)` behaves identically to `timelineMonadA |> TL.bind (f >>> (g >>> h))`.\n\n*   **Illustrative Code:**\n    ```fsharp\n    // --- LHS ---\n    let fg_kleisli : int -> Timeline\u003Cfloat> = f >>> g\n    let lhsFn_kleisli : int -> Timeline\u003Cbool> = fg_kleisli >>> h\n    let lhsTimelineM : Timeline\u003Cbool> = timelineMonadA |> TL.bind lhsFn_kleisli\n\n    // --- RHS ---\n    let gh_kleisli : string -> Timeline\u003Cbool> = g >>> h\n    let rhsFn_kleisli : int -> Timeline\u003Cbool> = f >>> gh_kleisli\n    let rhsTimelineM : Timeline\u003Cbool> = timelineMonadA |> TL.bind rhsFn_kleisli\n    ```\n*   **Verification (Conceptual):**\n    *   **Initial Values:** Both `lhsTimelineM` and `rhsTimelineM` should initially yield `true`. (Path: `10` -> `f` -> `Timeline \"f(10)\"` -> `g` -> `Timeline 5.0` -> `h` -> `Timeline true`).\n    *   **Updates:** If `timelineMonadA |> TL.define Now 2`. Both should subsequently yield `false`. (Path: `2` -> `f` -> `Timeline \"f(2)\"` -> `g` -> `Timeline 4.0` -> `h` -> `Timeline false`).\n\n*   **Equivalence Explanation:** The `TL.bind` implementation in `Timeline.fs` (which correctly handles scope and dependency switching) ensures that chaining binds, or equivalently composing Kleisli arrows with `TL.(>>>)`, correctly propagates values according to the Monad laws. The associativity of `TL.bind` (and thus `TL.(>>>)`) is fundamental to this.\n    **Therefore, the Associativity Law holds (behaviorally).**\n\n**Law 2: Left Identity**\nEquation: `TL.ID >>> f = f`\n\n*   **Goal:** Show `timelineMonadA |> TL.bind (TL.ID >>> f)` behaves identically to `timelineMonadA |> TL.bind f`.\n\n*   **Illustrative Code:**\n    ```fsharp\n    // --- LHS ---\n    let lhsFn_leftId : int -> Timeline\u003Cstring> = TL.ID >>> f\n    let lhsTimeline_leftId : Timeline\u003Cstring> = timelineMonadA |> TL.bind lhsFn_leftId\n\n    // --- RHS ---\n    let rhsTimeline_leftId : Timeline\u003Cstring> = timelineMonadA |> TL.bind f\n    ```\n*   **Verification (Conceptual):** Both initially yield `Timeline \"f(10)\"`. Updates follow similarly.\n\n*   **Equivalence Explanation:** The standard Monad law `return a >>= f_kleisli` is equivalent to `f_kleisli a`. `TL.ID` is `return`, `TL.bind` is analogous to `>>=`. The Kleisli composition `TL.ID >>> f` applied to an initial value `a` results in `(TL.ID a) |> TL.bind f`, which by Monad laws simplifies to `f a`.\n    **Therefore, the Left Identity Law holds (behaviorally).**\n\n**Law 3: Right Identity**\nEquation: `f >>> TL.ID = f`\n\n*   **Goal:** Show `timelineMonadA |> TL.bind (f >>> TL.ID)` behaves identically to `timelineMonadA |> TL.bind f`.\n\n*   **Illustrative Code:**\n    ```fsharp\n    // --- LHS ---\n    let lhsFn_rightId : int -> Timeline\u003Cstring> = f >>> TL.ID\n    let lhsTimeline_rightId : Timeline\u003Cstring> = timelineMonadA |> TL.bind lhsFn_rightId\n\n    // --- RHS ---\n    let rhsTimeline_rightId : Timeline\u003Cstring> = timelineMonadA |> TL.bind f\n    ```\n*   **Verification (Conceptual):** Both initially yield `Timeline \"f(10)\"`.\n\n*   **Equivalence Explanation:** The standard Monad law `m >>= return` is equivalent to `m`. `f >>> TL.ID` applied to an initial value `a` yields `(f a) |> TL.bind TL.ID`. If `f a` results in a monadic value `m` (a `Timeline` in this case), then this is `m |> TL.bind TL.ID`, which by Monad laws simplifies to `m`.\n    **Therefore, the Right Identity Law holds (behaviorally).**\n\nSince `Timeline` supports an identity Kleisli arrow `TL.ID` and an associative Kleisli composition `TL.(>>>)` for which `TL.ID` is the left and right identity, `Timeline` satisfies the definition of a **Monad** based on the Kleisli Monoid formulation.\n\n---\n\n## 5.3 Robustness from Algebraic Structure\n\nHaving verified that `Timeline` is both a Functor and a Monad (specifically, that its Kleisli composition forms a Monoid), we can now discuss how these properties contribute to system robustness.\n\n**Functor Properties:**\nThe Functor laws guarantee that transforming `Timeline` values using `TL.map` is well-behaved:\n\n*   **Identity:** `t |> TL.map id` is equivalent to `t`.\n*   **Composition:** `t |> TL.map (f1 >> f2)` (using the simple functions `f1`, `f2` from Functor setup) is equivalent to `t |> TL.map f1 |> TL.map f2`.\nThis ensures predictable transformations that can be safely refactored.\n\n**Monad (Kleisli Monoid) Properties:**\nThe Monad structure, via Kleisli Monoid laws, guarantees reliable sequencing of `Timeline`-producing computations using `TL.bind` or `TL.(>>>)` (using the monadic functions `f`, `g`, `h`):\n\n*   **Identity (`TL.ID`):** Neutral element for sequencing.\n*   **Associativity (`TL.(>>>)`):** Crucially, `(f >>> g) >>> h` behaves identically to `f >>> (g >>> h)`. Grouping doesn't matter.\n\n**Concrete Benefits of Associativity:**\n\n*   **Predictability:** Result depends only on operations and sequence, not grouping.\n*   **Composability:** Build complex pipelines reliably.\n*   **Refactoring Safety:** Rearrange intermediate steps without altering overall logic.\nThe Monad structure mathematically guarantees the elimination of errors related to the *structure* of sequential computations.\n\n**Conclusion (for Section 5.3):**\nAdherence to Functor and Monad laws provides a strong foundation for robust, predictable, and composable systems with `Timeline`.\n\n---\n\n## 5.4 Obviousness from the Immutable Dependency Graph Model\n\nWhile the preceding sections provided arguments based on algebraic laws, the Functor and Monad properties of `Timeline` can also be seen as an **obvious** consequence of the **immutable dependency graph** model (introduced in Chapter 3).\n\nOperations like `TL.map` and `TL.bind` build this graph:\n\n*   **`t |> TL.map f_simple`**: Creates a new node directly dependent on `t`; its value is always `f_simple` applied to `t`'s current value.\n*   **`t |> TL.bind f_monadic`**: Creates a new node whose value depends on the `Timeline` from `f_monadic` applied to `t`'s current value, establishing potentially dynamic dependencies.\n\nThe Functor and Monad laws essentially state that the **final input-output relationship** is **independent of intermediate grouping or definition order** of these graph-building operations.\n\n*   **Functor Composition:** `t -> intermediate -> result` (via `TL.map f1 |> TL.map f2`) yields the same overall dependency as `t -> result` (via `TL.map (f1 >> f2)`).\n*   **Monad Associativity:** Building `A -> B -> C -> D` by first defining `A -> C` (via `f >>> g`) and then `C -> D` (via `>>> h`) results in the same graph structure and information flow as defining `B -> D` first (via `g >>> h`) and then `A -> B` (via `f >>> ...`).\n\nThis inherent **associativity of constructing dependency graphs** is why, when `TL.map` and `TL.bind` consistently implement this model, Functor and Monad properties emerge naturally. The algebraic laws confirm the robustness inherent in declaratively defining relationships within this immutable graph framework.","src/content/docs/en/book/unit-4/section-1/5-functor-monad.md","ee0899335f84a0d4",{"html":2275,"metadata":2276},"\u003Cp>\u003Cstrong>Introduction: A Unified Ecosystem\u003C/strong>\u003C/p>\n\u003Cp>The preceding chapters established the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> concept, grounded in the Block Universe model (Chapters 0 &#x26; 2), introduced the \u003Ccode dir=\"auto\">TL.map\u003C/code> operation for transformations and the idea of a dependency graph (Chapter 3), and demonstrated how I/O operations can be integrated (Chapter 4). The result is a unified “ecosystem” where all dynamic values and interactions are represented and managed consistently through the \u003Ccode dir=\"auto\">Timeline\u003C/code> abstraction and its associated operations.\u003C/p>\n\u003Cp>Now that we have this complete \u003Ccode dir=\"auto\">Timeline\u003C/code>-centric system, we can explore one of its most significant benefits: \u003Cstrong>robustness\u003C/strong>. This robustness arises because the \u003Ccode dir=\"auto\">Timeline\u003C/code> type, equipped with operations like \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> (which we will verify in this chapter, referencing their definitions from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>), adheres to well-defined mathematical laws, specifically those associated with algebraic structures like Functors and Monads.\u003C/p>\n\u003Cp>This chapter will verify these properties and explain their connection to robustness:\u003C/p>\n\u003Col>\n\u003Cli>First, we will confirm that \u003Ccode dir=\"auto\">Timeline\u003C/code> satisfies the \u003Cstrong>Functor laws\u003C/strong> using illustrative code examples based on the public API.\u003C/li>\n\u003Cli>Second, we will (re)introduce \u003Ccode dir=\"auto\">TL.bind\u003C/code> and verify that \u003Ccode dir=\"auto\">Timeline\u003C/code> satisfies the \u003Cstrong>Monad laws\u003C/strong>, choosing the formulation based on Kleisli composition (\u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>), which highlights the underlying Monoid structure.\u003C/li>\n\u003Cli>Third, we will discuss how these verified Functor and Monad (Monoid) properties contribute to the \u003Cstrong>robustness\u003C/strong> of systems built with \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/li>\n\u003Cli>Fourth, we will argue why these algebraic properties are, in a sense, an \u003Cstrong>obvious consequence\u003C/strong> of the underlying immutable dependency graph model introduced earlier.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>A Philosophical Prerequisite:\u003C/strong> As previously established (Chapter 2, Section 2.8), conventional functional programming might dismiss \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> as impure due to its internal use of a mutable field (\u003Ccode dir=\"auto\">_last\u003C/code>). However, our framework views \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> as a simulation of observing an immutable Block Universe. The internal mutability of \u003Ccode dir=\"auto\">_last\u003C/code> is the \u003Cem>correct\u003C/em> way to model the changing viewpoint (\u003Ccode dir=\"auto\">Now\u003C/code>) against the immutable data trajectory. Therefore, we consider the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> object, from the perspective of its \u003Cstrong>observable behavior\u003C/strong> over time (the sequence of values obtainable via \u003Ccode dir=\"auto\">TL.at\u003C/code>), as a conceptually immutable entity representing the entire time-varying value. It is on this \u003Cstrong>behavioral equivalence\u003C/strong> and \u003Cstrong>conceptual immutability\u003C/strong> that we base the following verification. We assert that two \u003Ccode dir=\"auto\">Timeline\u003C/code> objects are equivalent if they produce the same sequence of values over time for any given sequence of updates to their sources.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"51-verifying-functor-laws-for-timelinea\">5.1 Verifying Functor Laws for \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#51-verifying-functor-laws-for-timelinea\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.1 Verifying Functor Laws for Timeline&#x3C;'a>”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>A type constructor \u003Ccode dir=\"auto\">T\u003C/code> is a Functor if it supports a \u003Ccode dir=\"auto\">map\u003C/code> function (\u003Ccode dir=\"auto\">fmap\u003C/code> in Haskell, \u003Ccode dir=\"auto\">Select\u003C/code> in LINQ) with the following signature (adapted for \u003Ccode dir=\"auto\">Timeline\u003C/code> from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>):\n\u003Ccode dir=\"auto\">(*Signature from TL module in Timeline.fs *) val map&#x3C;'a, 'b> : ('a -> 'b) -> Timeline&#x3C;'a> -> Timeline&#x3C;'b>\u003C/code>\nAnd satisfies two laws. We verify these using illustrative F# code examples written in pipeline style (\u003Ccode dir=\"auto\">timelineA |> TL.map f\u003C/code>), focusing only on the observable behavior.\u003C/p>\n\u003Cp>\u003Cstrong>Setup for Functor Examples:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define, TL.at) are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// No 'open Timeline' or 'open Timeline.TL'\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Sample simple functions using 'fun' keyword style\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">f1\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> i \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">Value: \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> i\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">f2\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> s.Length \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Standard identity function using 'fun' keyword style\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">id\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">'a\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> 'a \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Generic identity function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> x \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> x\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial timeline using the factory function\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timelineIntF\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">5\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit type\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now value, and TL module functions (TL.map, TL.define, TL.at) are accessible// No &#x27;open Timeline&#x27; or &#x27;open Timeline.TL&#x27;// Sample simple functions using &#x27;fun&#x27; keyword stylelet f1 : int -> string =    fun i -> sprintf &#x22;Value: %d&#x22; ilet f2 : string -> bool =    fun s -> s.Length > 10// Standard identity function using &#x27;fun&#x27; keyword stylelet id\u003C&#x27;a> : &#x27;a -> &#x27;a = // Generic identity function    fun x -> x// Initial timeline using the factory functionlet timelineIntF : Timeline\u003Cint> = Timeline 5 // Explicit type\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Law 1: Identity\u003C/strong>\nEquation: \u003Ccode dir=\"auto\">map id = id\u003C/code>\nWhich means: For all \u003Ccode dir=\"auto\">t : Timeline&#x3C;'a>\u003C/code>, \u003Ccode dir=\"auto\">t |> TL.map id\u003C/code> is behaviorally equivalent to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Illustrative Code:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsTimelineF_Id\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineIntF \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map id \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsTimelineF_Id\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineIntF \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Applying id doesn't change it (conceptually)\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// --- LHS ---let lhsTimelineF_Id : Timeline\u003Cint> = timelineIntF |> TL.map id // Explicit TL.map// --- RHS ---let rhsTimelineF_Id : Timeline\u003Cint> = timelineIntF // Applying id doesn&#x27;t change it (conceptually)\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Verification (Conceptual):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Initial Values:\u003C/strong> \u003Ccode dir=\"auto\">lhsTimelineF_Id\u003C/code> is created by applying \u003Ccode dir=\"auto\">id\u003C/code> to \u003Ccode dir=\"auto\">timelineIntF\u003C/code>’s initial value (5), so its initial value observable via \u003Ccode dir=\"auto\">TL.at Now\u003C/code> is 5. \u003Ccode dir=\"auto\">rhsTimelineF_Id\u003C/code>’s initial value is 5. Both start with the same observable value.\u003C/li>\n\u003Cli>\u003Cstrong>Updates:\u003C/strong> If we execute \u003Ccode dir=\"auto\">timelineIntF |> TL.define Now 15\u003C/code>, the \u003Ccode dir=\"auto\">TL.map\u003C/code> operation ensures that \u003Ccode dir=\"auto\">lhsTimelineF_Id\u003C/code> subsequently reflects the value \u003Ccode dir=\"auto\">id 15 = 15\u003C/code> when queried with \u003Ccode dir=\"auto\">TL.at Now\u003C/code>. The RHS \u003Cem>is\u003C/em> \u003Ccode dir=\"auto\">timelineIntF\u003C/code>, so it also reflects 15. Both timelines exhibit identical value sequences over time.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Equivalence Explanation:\u003C/strong> The \u003Ccode dir=\"auto\">t |> TL.map id\u003C/code> operation creates a new timeline that starts with the same value as \u003Ccode dir=\"auto\">t\u003C/code> and mirrors every update because the mapped function \u003Ccode dir=\"auto\">id\u003C/code> doesn’t change the value. The library’s internal mechanism (\u003Ccode dir=\"auto\">DependencyCore\u003C/code>) guarantees this propagation. Thus, the LHS behaves identically to the RHS (\u003Ccode dir=\"auto\">t\u003C/code>).\n\u003Cstrong>Therefore, the Identity Law holds (behaviorally).\u003C/strong>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Law 2: Composition\u003C/strong>\nEquation: \u003Ccode dir=\"auto\">map (f >> g) = map f >> map g\u003C/code> (where \u003Ccode dir=\"auto\">map f >> map g\u003C/code> means \u003Ccode dir=\"auto\">fun t -> t |> TL.map f |> TL.map g\u003C/code>)\nWhich means: For all \u003Ccode dir=\"auto\">f\u003C/code>, \u003Ccode dir=\"auto\">g\u003C/code>, \u003Ccode dir=\"auto\">t\u003C/code>, \u003Ccode dir=\"auto\">t |> TL.map (f >> g)\u003C/code> is behaviorally equivalent to \u003Ccode dir=\"auto\">t |> TL.map f |> TL.map g\u003C/code>. (Here \u003Ccode dir=\"auto\">>>\u003C/code> denotes standard function composition: apply \u003Ccode dir=\"auto\">f\u003C/code> then \u003Ccode dir=\"auto\">g\u003C/code>).\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Illustrative Code:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// f1 : int -> string\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// f2 : string -> bool\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// composedFunc : int -> bool\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">composedFunc\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> bool \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Standard function composition\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsTimelineF_Comp\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineIntF \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map composedFunc \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Apply the mapping functions sequentially using pipeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsTimelineF_Comp\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineIntF \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map f1 \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.map f2 \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Explicit TL.map\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// f1 : int -> string// f2 : string -> bool// composedFunc : int -> boollet composedFunc : int -> bool = f1 >> f2 // Standard function composition// --- LHS ---let lhsTimelineF_Comp : Timeline\u003Cbool> = timelineIntF |> TL.map composedFunc // Explicit TL.map// --- RHS ---// Apply the mapping functions sequentially using pipelinelet rhsTimelineF_Comp : Timeline\u003Cbool> = timelineIntF |> TL.map f1 |> TL.map f2 // Explicit TL.map\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Verification (Conceptual):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Initial Values:\u003C/strong> LHS applies \u003Ccode dir=\"auto\">composedFunc\u003C/code> (which is \u003Ccode dir=\"auto\">f1 >> f2\u003C/code>) to 5. \u003Ccode dir=\"auto\">f1 5\u003C/code> evaluates to “Value: 5”, then \u003Ccode dir=\"auto\">f2 \"Value: 5\"\u003C/code> evaluates to \u003Ccode dir=\"auto\">false\u003C/code> (since length 9 !> 10). So, \u003Ccode dir=\"auto\">lhsTimelineF_Comp\u003C/code> initial value is \u003Ccode dir=\"auto\">false\u003C/code>. RHS first applies \u003Ccode dir=\"auto\">TL.map f1\u003C/code> to \u003Ccode dir=\"auto\">timelineIntF\u003C/code> (initial value 5), resulting in an intermediate \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> with initial value “Value: 5”. Then, \u003Ccode dir=\"auto\">TL.map f2\u003C/code> is applied to this intermediate timeline, yielding a final \u003Ccode dir=\"auto\">rhsTimelineF_Comp\u003C/code> with initial value \u003Ccode dir=\"auto\">f2 \"Value: 5\" = false\u003C/code>. Both start with \u003Ccode dir=\"auto\">false\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Updates:\u003C/strong> If we execute \u003Ccode dir=\"auto\">timelineIntF |> TL.define Now 1234567890\u003C/code>.\nLHS: \u003Ccode dir=\"auto\">f1 1234567890\u003C/code> is “Value: 1234567890”. \u003Ccode dir=\"auto\">f2 \"Value: 1234567890\"\u003C/code> is \u003Ccode dir=\"auto\">true\u003C/code> (length 17 > 10). \u003Ccode dir=\"auto\">lhsTimelineF_Comp\u003C/code> updates to \u003Ccode dir=\"auto\">true\u003C/code>.\nRHS: \u003Ccode dir=\"auto\">timelineIntF |> TL.map f1\u003C/code> updates its intermediate \u003Ccode dir=\"auto\">Timeline&#x3C;string>\u003C/code> to “Value: 1234567890”. This change propagates, triggering the second \u003Ccode dir=\"auto\">TL.map f2\u003C/code>, which updates \u003Ccode dir=\"auto\">rhsTimelineF_Comp\u003C/code> to \u003Ccode dir=\"auto\">f2 \"Value: 1234567890\" = true\u003C/code>. Both timelines exhibit identical value sequences.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Equivalence Explanation:\u003C/strong> The LHS applies the combined function \u003Ccode dir=\"auto\">f >> g\u003C/code> within a single \u003Ccode dir=\"auto\">TL.map\u003C/code> operation. The RHS pipes the timeline through \u003Ccode dir=\"auto\">TL.map f\u003C/code> and then through \u003Ccode dir=\"auto\">TL.map g\u003C/code>. The library’s internal dependency mechanism (\u003Ccode dir=\"auto\">DependencyCore\u003C/code>) ensures that an update on the original \u003Ccode dir=\"auto\">timelineIntF\u003C/code> correctly propagates through both stages in the RHS pipeline, yielding the same final value as the single combined step in the LHS.\n\u003Cstrong>Therefore, the Composition Law holds (behaviorally).\u003C/strong>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Since both Functor laws hold behaviorally, \u003Ccode dir=\"auto\">Timeline\u003C/code> is a valid \u003Cstrong>Functor\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"52-verifying-monad-structure-via-kleisli-composition\">5.2 Verifying Monad Structure via Kleisli Composition\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#52-verifying-monad-structure-via-kleisli-composition\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.2 Verifying Monad Structure via Kleisli Composition”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Now, we verify that \u003Ccode dir=\"auto\">Timeline\u003C/code> forms a Monad. This relies on the \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation, \u003Ccode dir=\"auto\">TL.ID\u003C/code> (often called \u003Ccode dir=\"auto\">return\u003C/code> or \u003Ccode dir=\"auto\">pure\u003C/code>), and Kleisli composition \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>The \u003Ccode dir=\"auto\">TL.bind\u003C/code> Operation:\u003C/strong>\nSignature (from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>, \u003Ccode dir=\"auto\">TL\u003C/code> module):\n\u003Ccode dir=\"auto\">(* val bind&#x3C;'a, 'b> : ('a -> Timeline&#x3C;'b>) -> Timeline&#x3C;'a> -> Timeline&#x3C;'b> *)\u003C/code>\n\u003Ccode dir=\"auto\">TL.bind\u003C/code> handles functions that themselves return a \u003Ccode dir=\"auto\">Timeline\u003C/code>: \u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>. This enables chaining operations where the next step depends on the result of the previous, and that next step is also a \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Note on Monad Law Formulations:\u003C/strong>\nA type constructor \u003Ccode dir=\"auto\">T\u003C/code> is a Monad if it’s a Functor and has \u003Ccode dir=\"auto\">ID : 'a -> T&#x3C;'a>\u003C/code> and \u003Ccode dir=\"auto\">bind : ('a -> T&#x3C;'b>) -> T&#x3C;'a> -> T&#x3C;'b>\u003C/code> (if bind is curried for pipelining, or \u003Ccode dir=\"auto\">T&#x3C;'a> -> ('a -> T&#x3C;'b>) -> T&#x3C;'b>\u003C/code>). The laws can be expressed using \u003Ccode dir=\"auto\">bind\u003C/code> and \u003Ccode dir=\"auto\">ID\u003C/code>.\u003C/p>\n\u003Cp>An equivalent, and often more insightful, formulation defines a Monad through \u003Cstrong>Kleisli composition\u003C/strong>. Kleisli arrows are functions of type \u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>. A Monad structure exists if these arrows form a \u003Cstrong>Monoid\u003C/strong> under a composition operation (here \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>), with \u003Ccode dir=\"auto\">TL.ID\u003C/code> as the Monoid’s identity. The laws are then the standard Monoid laws for \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code> and \u003Ccode dir=\"auto\">TL.ID\u003C/code>. This perspective highlights the core algebraic structure.\u003C/p>\n\u003Cp>\u003Cstrong>Definitions for \u003Ccode dir=\"auto\">Timeline\u003C/code> Monad (from \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>, \u003Ccode dir=\"auto\">TL\u003C/code> module):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Kleisli Arrow (Monadic Function):\u003C/strong> A function with the signature \u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Identity Kleisli Arrow (\u003Ccode dir=\"auto\">TL.ID\u003C/code>):\u003C/strong>\n\u003Ccode dir=\"auto\">(* val ID&#x3C;'a> : 'a -> Timeline&#x3C;'a> *)\u003C/code>\nTakes \u003Ccode dir=\"auto\">a\u003C/code> and wraps it in a new, static \u003Ccode dir=\"auto\">Timeline\u003C/code> via \u003Ccode dir=\"auto\">Timeline a\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Kleisli Composition (\u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>):\u003C/strong>\n\u003Ccode dir=\"auto\">(* val inline (>>>) : ('a -> Timeline&#x3C;'b>) -> ('b -> Timeline&#x3C;'c>) -> ('a -> Timeline&#x3C;'c>) *)\u003C/code>\nDefined using \u003Ccode dir=\"auto\">TL.bind\u003C/code> as: \u003Ccode dir=\"auto\">fun anArg -> (f anArg) |> TL.bind g\u003C/code>. \u003Cem>(Using \u003Ccode dir=\"auto\">anArg\u003C/code> to avoid conflict with \u003Ccode dir=\"auto\">f\u003C/code> and \u003Ccode dir=\"auto\">g\u003C/code> function names in its own definition)\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Setup for Monad Examples:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory, Now, and TL module functions (TL.map, TL.bind, TL.ID, TL.define, TL.at, TL.(>>>)) are accessible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- Sample Kleisli Arrows (Monadic Functions) ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// These functions (f, g, h) return a Timeline, distinguishing them from\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// the simple functions used in the Functor examples (f1, f2).\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// They are of the form 'a -> Timeline&#x3C;'b>.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">f\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Monadic Function f\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> i \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">sprintf \u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">f(\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">%d\u003C/span>\u003Cspan style=\"--0:#ECC48D;--1:#984E4D\">)\u003C/span>\u003Cspan style=\"--0:#D9F5DD;--1:#111111\">\"\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> i\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">g\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Monadic Function g\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> s \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float s.Length\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">h\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> float \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Monadic Function h\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">fun\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> fl \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">(\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">fl \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">4.0\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Initial timeline for testing\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">initialValueMonad\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#F78C6C;--1:#AA0982\">10\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">timelineMonadA\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">int\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline initialValueMonad\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory, Now, and TL module functions (TL.map, TL.bind, TL.ID, TL.define, TL.at, TL.(>>>)) are accessible// --- Sample Kleisli Arrows (Monadic Functions) ---// These functions (f, g, h) return a Timeline, distinguishing them from// the simple functions used in the Functor examples (f1, f2).// They are of the form &#x27;a -> Timeline\u003C&#x27;b>.let f : int -> Timeline\u003Cstring> = // Monadic Function f    fun i -> TL.ID (sprintf &#x22;f(%d)&#x22; i)let g : string -> Timeline\u003Cfloat> = // Monadic Function g    fun s -> TL.ID (float s.Length)let h : float -> Timeline\u003Cbool> = // Monadic Function h    fun fl -> TL.ID (fl > 4.0)// Initial timeline for testinglet initialValueMonad : int = 10let timelineMonadA : Timeline\u003Cint> = Timeline initialValueMonad\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cstrong>Verification of Kleisli Monoid Laws:\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>Law 1: Associativity\u003C/strong>\nEquation: \u003Ccode dir=\"auto\">(f >>> g) >>> h = f >>> (g >>> h)\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Goal:\u003C/strong> Show \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind ((f >>> g) >>> h)\u003C/code> behaves identically to \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind (f >>> (g >>> h))\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Illustrative Code:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">fg_kleisli\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">float\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> g\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsFn_kleisli\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> fg\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">kleisli \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> h\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsTimelineM\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind lhsFn\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">kleisli\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">gh_kleisli\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> string \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> g \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> h\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsFn_kleisli\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> gh\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">kleisli\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsTimelineM\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">bool\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind rhsFn\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">kleisli\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// --- LHS ---let fg_kleisli : int -> Timeline\u003Cfloat> = f >>> glet lhsFn_kleisli : int -> Timeline\u003Cbool> = fg_kleisli >>> hlet lhsTimelineM : Timeline\u003Cbool> = timelineMonadA |> TL.bind lhsFn_kleisli// --- RHS ---let gh_kleisli : string -> Timeline\u003Cbool> = g >>> hlet rhsFn_kleisli : int -> Timeline\u003Cbool> = f >>> gh_kleislilet rhsTimelineM : Timeline\u003Cbool> = timelineMonadA |> TL.bind rhsFn_kleisli\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Verification (Conceptual):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Initial Values:\u003C/strong> Both \u003Ccode dir=\"auto\">lhsTimelineM\u003C/code> and \u003Ccode dir=\"auto\">rhsTimelineM\u003C/code> should initially yield \u003Ccode dir=\"auto\">true\u003C/code>. (Path: \u003Ccode dir=\"auto\">10\u003C/code> -> \u003Ccode dir=\"auto\">f\u003C/code> -> \u003Ccode dir=\"auto\">Timeline \"f(10)\"\u003C/code> -> \u003Ccode dir=\"auto\">g\u003C/code> -> \u003Ccode dir=\"auto\">Timeline 5.0\u003C/code> -> \u003Ccode dir=\"auto\">h\u003C/code> -> \u003Ccode dir=\"auto\">Timeline true\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Updates:\u003C/strong> If \u003Ccode dir=\"auto\">timelineMonadA |> TL.define Now 2\u003C/code>. Both should subsequently yield \u003Ccode dir=\"auto\">false\u003C/code>. (Path: \u003Ccode dir=\"auto\">2\u003C/code> -> \u003Ccode dir=\"auto\">f\u003C/code> -> \u003Ccode dir=\"auto\">Timeline \"f(2)\"\u003C/code> -> \u003Ccode dir=\"auto\">g\u003C/code> -> \u003Ccode dir=\"auto\">Timeline 4.0\u003C/code> -> \u003Ccode dir=\"auto\">h\u003C/code> -> \u003Ccode dir=\"auto\">Timeline false\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Equivalence Explanation:\u003C/strong> The \u003Ccode dir=\"auto\">TL.bind\u003C/code> implementation in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> (which correctly handles scope and dependency switching) ensures that chaining binds, or equivalently composing Kleisli arrows with \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>, correctly propagates values according to the Monad laws. The associativity of \u003Ccode dir=\"auto\">TL.bind\u003C/code> (and thus \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>) is fundamental to this.\n\u003Cstrong>Therefore, the Associativity Law holds (behaviorally).\u003C/strong>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Law 2: Left Identity\u003C/strong>\nEquation: \u003Ccode dir=\"auto\">TL.ID >>> f = f\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Goal:\u003C/strong> Show \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind (TL.ID >>> f)\u003C/code> behaves identically to \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind f\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Illustrative Code:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsFn_leftId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.ID \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsTimeline_leftId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind lhsFn\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">leftId\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsTimeline_leftId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind f\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// --- LHS ---let lhsFn_leftId : int -> Timeline\u003Cstring> = TL.ID >>> flet lhsTimeline_leftId : Timeline\u003Cstring> = timelineMonadA |> TL.bind lhsFn_leftId// --- RHS ---let rhsTimeline_leftId : Timeline\u003Cstring> = timelineMonadA |> TL.bind f\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Verification (Conceptual):\u003C/strong> Both initially yield \u003Ccode dir=\"auto\">Timeline \"f(10)\"\u003C/code>. Updates follow similarly.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Equivalence Explanation:\u003C/strong> The standard Monad law \u003Ccode dir=\"auto\">return a >>= f_kleisli\u003C/code> is equivalent to \u003Ccode dir=\"auto\">f_kleisli a\u003C/code>. \u003Ccode dir=\"auto\">TL.ID\u003C/code> is \u003Ccode dir=\"auto\">return\u003C/code>, \u003Ccode dir=\"auto\">TL.bind\u003C/code> is analogous to \u003Ccode dir=\"auto\">>>=\u003C/code>. The Kleisli composition \u003Ccode dir=\"auto\">TL.ID >>> f\u003C/code> applied to an initial value \u003Ccode dir=\"auto\">a\u003C/code> results in \u003Ccode dir=\"auto\">(TL.ID a) |> TL.bind f\u003C/code>, which by Monad laws simplifies to \u003Ccode dir=\"auto\">f a\u003C/code>.\n\u003Cstrong>Therefore, the Left Identity Law holds (behaviorally).\u003C/strong>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Law 3: Right Identity\u003C/strong>\nEquation: \u003Ccode dir=\"auto\">f >>> TL.ID = f\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Goal:\u003C/strong> Show \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind (f >>> TL.ID)\u003C/code> behaves identically to \u003Ccode dir=\"auto\">timelineMonadA |> TL.bind f\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Illustrative Code:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- LHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsFn_rightId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> int \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">->\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> f \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>>>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.ID\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">lhsTimeline_rightId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind lhsFn\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">_\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">rightId\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// --- RHS ---\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">let\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C5E478;--1:#3B61B0\">rhsTimeline_rightId\u003C/span>\u003Cspan style=\"--0:#D7DBE0;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">:\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> Timeline\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">&#x3C;\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\">string\u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">=\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> timelineMonadA \u003C/span>\u003Cspan style=\"--0:#C792EA;--1:#8844AE\">|>\u003C/span>\u003Cspan style=\"--0:#D6DEEB;--1:#403F53\"> TL.bind f\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// --- LHS ---let lhsFn_rightId : int -> Timeline\u003Cstring> = f >>> TL.IDlet lhsTimeline_rightId : Timeline\u003Cstring> = timelineMonadA |> TL.bind lhsFn_rightId// --- RHS ---let rhsTimeline_rightId : Timeline\u003Cstring> = timelineMonadA |> TL.bind f\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Verification (Conceptual):\u003C/strong> Both initially yield \u003Ccode dir=\"auto\">Timeline \"f(10)\"\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Equivalence Explanation:\u003C/strong> The standard Monad law \u003Ccode dir=\"auto\">m >>= return\u003C/code> is equivalent to \u003Ccode dir=\"auto\">m\u003C/code>. \u003Ccode dir=\"auto\">f >>> TL.ID\u003C/code> applied to an initial value \u003Ccode dir=\"auto\">a\u003C/code> yields \u003Ccode dir=\"auto\">(f a) |> TL.bind TL.ID\u003C/code>. If \u003Ccode dir=\"auto\">f a\u003C/code> results in a monadic value \u003Ccode dir=\"auto\">m\u003C/code> (a \u003Ccode dir=\"auto\">Timeline\u003C/code> in this case), then this is \u003Ccode dir=\"auto\">m |> TL.bind TL.ID\u003C/code>, which by Monad laws simplifies to \u003Ccode dir=\"auto\">m\u003C/code>.\n\u003Cstrong>Therefore, the Right Identity Law holds (behaviorally).\u003C/strong>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Since \u003Ccode dir=\"auto\">Timeline\u003C/code> supports an identity Kleisli arrow \u003Ccode dir=\"auto\">TL.ID\u003C/code> and an associative Kleisli composition \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code> for which \u003Ccode dir=\"auto\">TL.ID\u003C/code> is the left and right identity, \u003Ccode dir=\"auto\">Timeline\u003C/code> satisfies the definition of a \u003Cstrong>Monad\u003C/strong> based on the Kleisli Monoid formulation.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"53-robustness-from-algebraic-structure\">5.3 Robustness from Algebraic Structure\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#53-robustness-from-algebraic-structure\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.3 Robustness from Algebraic Structure”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Having verified that \u003Ccode dir=\"auto\">Timeline\u003C/code> is both a Functor and a Monad (specifically, that its Kleisli composition forms a Monoid), we can now discuss how these properties contribute to system robustness.\u003C/p>\n\u003Cp>\u003Cstrong>Functor Properties:\u003C/strong>\nThe Functor laws guarantee that transforming \u003Ccode dir=\"auto\">Timeline\u003C/code> values using \u003Ccode dir=\"auto\">TL.map\u003C/code> is well-behaved:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Identity:\u003C/strong> \u003Ccode dir=\"auto\">t |> TL.map id\u003C/code> is equivalent to \u003Ccode dir=\"auto\">t\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Composition:\u003C/strong> \u003Ccode dir=\"auto\">t |> TL.map (f1 >> f2)\u003C/code> (using the simple functions \u003Ccode dir=\"auto\">f1\u003C/code>, \u003Ccode dir=\"auto\">f2\u003C/code> from Functor setup) is equivalent to \u003Ccode dir=\"auto\">t |> TL.map f1 |> TL.map f2\u003C/code>.\nThis ensures predictable transformations that can be safely refactored.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Monad (Kleisli Monoid) Properties:\u003C/strong>\nThe Monad structure, via Kleisli Monoid laws, guarantees reliable sequencing of \u003Ccode dir=\"auto\">Timeline\u003C/code>-producing computations using \u003Ccode dir=\"auto\">TL.bind\u003C/code> or \u003Ccode dir=\"auto\">TL.(>>>)\u003C/code> (using the monadic functions \u003Ccode dir=\"auto\">f\u003C/code>, \u003Ccode dir=\"auto\">g\u003C/code>, \u003Ccode dir=\"auto\">h\u003C/code>):\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Identity (\u003Ccode dir=\"auto\">TL.ID\u003C/code>):\u003C/strong> Neutral element for sequencing.\u003C/li>\n\u003Cli>\u003Cstrong>Associativity (\u003Ccode dir=\"auto\">TL.(>>>)\u003C/code>):\u003C/strong> Crucially, \u003Ccode dir=\"auto\">(f >>> g) >>> h\u003C/code> behaves identically to \u003Ccode dir=\"auto\">f >>> (g >>> h)\u003C/code>. Grouping doesn’t matter.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Concrete Benefits of Associativity:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Predictability:\u003C/strong> Result depends only on operations and sequence, not grouping.\u003C/li>\n\u003Cli>\u003Cstrong>Composability:\u003C/strong> Build complex pipelines reliably.\u003C/li>\n\u003Cli>\u003Cstrong>Refactoring Safety:\u003C/strong> Rearrange intermediate steps without altering overall logic.\nThe Monad structure mathematically guarantees the elimination of errors related to the \u003Cem>structure\u003C/em> of sequential computations.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Conclusion (for Section 5.3):\u003C/strong>\nAdherence to Functor and Monad laws provides a strong foundation for robust, predictable, and composable systems with \u003Ccode dir=\"auto\">Timeline\u003C/code>.\u003C/p>\n\u003Chr>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"54-obviousness-from-the-immutable-dependency-graph-model\">5.4 Obviousness from the Immutable Dependency Graph Model\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#54-obviousness-from-the-immutable-dependency-graph-model\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “5.4 Obviousness from the Immutable Dependency Graph Model”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>While the preceding sections provided arguments based on algebraic laws, the Functor and Monad properties of \u003Ccode dir=\"auto\">Timeline\u003C/code> can also be seen as an \u003Cstrong>obvious\u003C/strong> consequence of the \u003Cstrong>immutable dependency graph\u003C/strong> model (introduced in Chapter 3).\u003C/p>\n\u003Cp>Operations like \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> build this graph:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">t |> TL.map f_simple\u003C/code>\u003C/strong>: Creates a new node directly dependent on \u003Ccode dir=\"auto\">t\u003C/code>; its value is always \u003Ccode dir=\"auto\">f_simple\u003C/code> applied to \u003Ccode dir=\"auto\">t\u003C/code>’s current value.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">t |> TL.bind f_monadic\u003C/code>\u003C/strong>: Creates a new node whose value depends on the \u003Ccode dir=\"auto\">Timeline\u003C/code> from \u003Ccode dir=\"auto\">f_monadic\u003C/code> applied to \u003Ccode dir=\"auto\">t\u003C/code>’s current value, establishing potentially dynamic dependencies.\u003C/li>\n\u003C/ul>\n\u003Cp>The Functor and Monad laws essentially state that the \u003Cstrong>final input-output relationship\u003C/strong> is \u003Cstrong>independent of intermediate grouping or definition order\u003C/strong> of these graph-building operations.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Functor Composition:\u003C/strong> \u003Ccode dir=\"auto\">t -> intermediate -> result\u003C/code> (via \u003Ccode dir=\"auto\">TL.map f1 |> TL.map f2\u003C/code>) yields the same overall dependency as \u003Ccode dir=\"auto\">t -> result\u003C/code> (via \u003Ccode dir=\"auto\">TL.map (f1 >> f2)\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Monad Associativity:\u003C/strong> Building \u003Ccode dir=\"auto\">A -> B -> C -> D\u003C/code> by first defining \u003Ccode dir=\"auto\">A -> C\u003C/code> (via \u003Ccode dir=\"auto\">f >>> g\u003C/code>) and then \u003Ccode dir=\"auto\">C -> D\u003C/code> (via \u003Ccode dir=\"auto\">>>> h\u003C/code>) results in the same graph structure and information flow as defining \u003Ccode dir=\"auto\">B -> D\u003C/code> first (via \u003Ccode dir=\"auto\">g >>> h\u003C/code>) and then \u003Ccode dir=\"auto\">A -> B\u003C/code> (via \u003Ccode dir=\"auto\">f >>> ...\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Cp>This inherent \u003Cstrong>associativity of constructing dependency graphs\u003C/strong> is why, when \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> consistently implement this model, Functor and Monad properties emerge naturally. The algebraic laws confirm the robustness inherent in declaratively defining relationships within this immutable graph framework.\u003C/p>",{"headings":2277,"localImagePaths":2290,"remoteImagePaths":2291,"frontmatter":2292,"imagePaths":2293},[2278,2281,2284,2287],{"depth":182,"slug":2279,"text":2280},"51-verifying-functor-laws-for-timelinea","5.1 Verifying Functor Laws for Timeline\u003C'a>",{"depth":182,"slug":2282,"text":2283},"52-verifying-monad-structure-via-kleisli-composition","5.2 Verifying Monad Structure via Kleisli Composition",{"depth":182,"slug":2285,"text":2286},"53-robustness-from-algebraic-structure","5.3 Robustness from Algebraic Structure",{"depth":182,"slug":2288,"text":2289},"54-obviousness-from-the-immutable-dependency-graph-model","5.4 Obviousness from the Immutable Dependency Graph Model",[],[],{"title":2266,"description":2267},[],"en/book/unit-4/section-1/6-dynamic-dependency",{"id":2294,"data":2296,"body":2302,"filePath":2303,"digest":2304,"rendered":2305},{"title":2297,"description":2298,"editUrl":16,"head":2299,"template":18,"sidebar":2300,"pagefind":16,"draft":20},"Chapter 6: Dynamic Dependency Management and Automatic Resource Cleanup","In the previous chapters, we explored the Timeline\u003C'a> type (Chapter 2) and its core operations, TL.map (Chapter 3) and TL.bind (introduced alongside Monads in Chapter 5). We established that Timeline adheres to the Functor and Monad laws, providing a robust foundation for building reactive systems. We primarily viewed these operations through the lens of constructing an immutable Dependency Graph, where timelines are linked based on how they are derived from one another. This perspective helped explain the algebraic properties and the predictable flow of updates initiated by TL.define.",[],{"hidden":20,"attrs":2301},{},"## 6.1 Beyond Static Graphs: The Evolving Dependency Landscape\n\nIn the previous chapters, we explored the `Timeline\u003C'a>` type (Chapter 2) and its core operations, `TL.map` (Chapter 3) and `TL.bind` (introduced alongside Monads in Chapter 5). We established that `Timeline` adheres to the Functor and Monad laws, providing a robust foundation for building reactive systems. We primarily viewed these operations through the lens of constructing an immutable **Dependency Graph**, where timelines are linked based on how they are derived from one another. This perspective helped explain the algebraic properties and the predictable flow of updates initiated by `TL.define`.\n\nHowever, the Block Universe model, which justifies the internal mutability of `Timeline._last` as a simulation of an observer's moving viewpoint (`Now`) (Chapter 2), invites us to reconsider the nature of the dependency graph itself. Is the graph truly static once created?\n\nIn many real-world applications, the relationships between data points and the computations needed are not fixed. User interactions, external events, or changing application states often require the structure of dependencies to **evolve over time**. What data sources are relevant, or which calculations need to be performed, can change dynamically.\n\nJust as the *value* observed at `Now` changes, couldn't the *dependency structure* itself be considered a value that evolves along the timeline within our Block Universe simulation? If `Timeline._last`'s mutability is justified to simulate observing a changing value, perhaps the structure connecting timelines also needs a mechanism to adapt.\n\n## 6.2 Unveiling the Engine: `DependencyCore`\n\nThis brings us to a crucial aspect of this `Timeline` library's internal architecture, which was implicitly referenced by the mechanisms in `Timeline.fs` and is now formally discussed. Behind the scenes, managing the creation, tracking, and propagation of updates across the dependency graph is a dedicated internal system: the **`DependencyCore`**.\n\nYou can think of `DependencyCore` as the central registry and engine for all reactive relationships within the system. As seen in the `Timeline.fs` code, it maintains a complete picture of:\n\n*   Which `Timeline` instances exist (identified by `TimelineId`).\n*   How they depend on each other (which functions, or callbacks, need to run when a source updates, identified by `DependencyId`).\n*   Crucially, how these dependencies might be grouped or scoped (using `ScopeId`), especially those created dynamically by operations like `TL.bind`.\n\nThis internal `DependencyCore` is the key to enabling not just efficient update propagation but also more advanced features like automatic resource management, which we will explore shortly.\n\n## 6.3 `TL.map` and `TL.bind` as Clients of `DependencyCore`\n\nWith the existence and role of `DependencyCore` clarified (referencing its implementation in `Timeline.fs`), we can now understand the operations `TL.map` and `TL.bind` in a new light. They are not just pure functions returning new `Timeline` values in an abstract sense; they act as **clients** that interact with `DependencyCore` to **dynamically modify the dependency graph**.\n\n*   **`timelineA |> TL.map f`**: When you use `TL.map`, it performs two main actions:\n    1.  It creates a new `Timeline` (`timelineB`) using the `Timeline` factory function.\n    2.  It instructs `DependencyCore` (via `DependencyCore.registerDependency` as seen in `TL.map`'s implementation in `Timeline.fs`) to **register a persistent dependency**: \"Whenever `timelineA` updates, execute the function `f` with the new value and use the result to update `timelineB` (via `TL.define`).\" This adds an edge to the dependency graph managed by `DependencyCore`.\n\n*   **`timelineA |> TL.bind monadf`**: The `TL.bind` operation is significantly more sophisticated in its interaction with `DependencyCore` (as detailed in its `Timeline.fs` implementation):\n    1.  It creates the result `Timeline` (`timelineB`).\n    2.  It instructs `DependencyCore` to register the main dependency: \"Whenever `timelineA` updates, execute the following complex reaction...\"\n    3.  The reaction itself involves further interaction with `DependencyCore`:\n        *   Tell `DependencyCore` to **dispose of any resources associated with the previous execution** of `monadf` for this specific `bind` instance (this involves `DependencyCore.disposeScope` being called with the `currentScopeId` associated with the previous `innerTimeline`).\n        *   Tell `DependencyCore` to **create a new \"scope\"** (`DependencyCore.createScope()`) specifically for the *current* execution of `monadf`.\n        *   Execute `monadf` with the new value from `timelineA` to get a new `innerTimeline`.\n        *   Propagate the current value from this new `innerTimeline` to `timelineB` (via `TL.define`).\n        *   Tell `DependencyCore` to **register a new dependency** from `innerTimeline` to `timelineB` (via `DependencyCore.registerDependency`), associating this dependency with the **newly created scope**.\n\nIn essence, `TL.map` simply adds a static link to the graph, while `TL.bind` orchestrates a dynamic process of tearing down old dependency structures (within its managed scope) and building new ones every time its source timeline (`timelineA`) updates.\n\nUnderstanding that `TL.map` and `TL.bind` are actively manipulating this managed dependency graph via `DependencyCore` is the key to appreciating how this library handles dynamic scenarios and automatic resource cleanup, moving beyond the limitations of a purely static graph model.\n\n## 6.4 Analogies for Dynamic Dependency Management\n\nUnderstanding the role of the internal `DependencyCore` and the dynamic nature of the dependency graph can be aided by drawing parallels to familiar concepts in software engineering:\n\n*   **Garbage Collection (GC):** This is perhaps the strongest analogy. In languages like F# or JavaScript, the GC automatically reclaims memory for objects that are no longer reachable. Similarly, `DependencyCore`, through the scope mechanism used by `TL.bind` (i.e., `DependencyCore.disposeScope`), automatically identifies and **removes dependency connections (callbacks) that are no longer relevant** because the `innerTimeline` they originated from has been superseded. It cleans up the reactive graph.\n*   **Package Management Systems (like `apt`, `npm`, `NuGet`):** These systems manage complex dependencies. `DependencyCore` performs a similar function for `Timeline` instances, managing dependencies created by `TL.map` and `TL.bind`.\n*   **Version Control Systems (like Git):** Git tracks changes and relationships. `DependencyCore` manages the **current, evolving state** of the dependency graph, reflecting changes introduced by operations.\n\nThese analogies highlight that `DependencyCore` is a sophisticated internal system for maintaining the integrity and lifecycle of reactive dependencies.\n\n## 6.5 Automatic Cleanup via Scopes: How `TL.bind` Manages Resources\n\nLet's revisit how `TL.bind` leverages `DependencyCore` (as implemented in `Timeline.fs`) to achieve automatic resource cleanup, focusing on the scope mechanism:\n\n1.  **Initial State:** When `timelineA |> TL.bind monadf` is first executed, `monadf` runs with `timelineA`'s initial value, producing an `innerTimeline` (say, `inner1`). `DependencyCore.createScope()` generates a new scope (say, `scope1`). A dependency from `inner1` to the result `timelineB` is registered via `DependencyCore.registerDependency`, associated with `Some scope1`.\n2.  **Source Update:** Later, `timelineA` is updated (e.g., `timelineA |> TL.define Now newValueA`).\n3.  **Reaction Triggered:** The main dependency (from `timelineA` to `timelineB`'s update logic, registered by `TL.bind`) is triggered.\n4.  **Old Scope Disposal:** Within this reaction, `DependencyCore.disposeScope currentScopeId` (where `currentScopeId` held `scope1`) is called. `DependencyCore` removes all dependencies associated with `scope1`, disconnecting `inner1` from `timelineB`.\n5.  **New Scope Creation:** `DependencyCore.createScope()` creates a new scope (`scope2`), which updates `currentScopeId`.\n6.  **New Inner Timeline:** `monadf` is executed with `newValueA`, producing `inner2`.\n7.  **Value Propagation:** `inner2`'s current value is defined onto `timelineB`.\n8.  **New Dependency Registration:** A new dependency from `inner2` to `timelineB` is registered with `DependencyCore`, associated with `Some scope2`.\n\nThis cycle repeats. The disposal of the old scope (step 4) automatically cleans up reactive connections from the obsolete `innerTimeline`.\n\n## 6.6 The Payoff: Safer Implementations with `TL.bind`\n\nThis automatic, scope-based resource cleanup managed by `DependencyCore` provides significant advantages:\n\n*   **Elimination of Reactive Leaks:** Outdated computations/callbacks from previous `bind` states do not persist.\n*   **Increased Robustness with `TL.bind`:** The Monad-compliant `TL.bind` becomes safer for dynamic scenarios.\n*   **Simplified Application Logic:** Resource management is delegated to the library.\n\n**Example: Incremental Search**\n\nA classic example is **incremental search**.\n\n```fsharp\n// Assume SearchResult type and necessary setup\n// let queryTimeline : Timeline\u003Cstring> = (* ... from search input ... *)\n// let searchApi (query: string) : Timeline\u003CSearchResult> = (* ... async API call ... *)\n\n// Using the safe, Monadic TL.bind\n// let searchResultsTimeline : Timeline\u003CSearchResult> = queryTimeline |> TL.bind searchApi\n```\n\n*(F# code block is illustrative, actual implementation would depend on `SearchResult` and `searchApi` details).*\n\nWith the scope-based cleanup:\n\n1.  User types \"funct\". `TL.bind` runs `searchApi \"funct\"`, gets `innerTimelineFunct`, creates `scopeFunct`, links `innerTimelineFunct` to `searchResultsTimeline` via `scopeFunct`.\n2.  Query becomes \"functional\". `TL.bind`'s reaction triggers.\n3.  `DependencyCore.disposeScope(scopeFunct)` removes dependency from `innerTimelineFunct`.\n4.  `DependencyCore.createScope()` creates `scopeFunctional`.\n5.  `searchApi \"functional\"` runs, gets `innerTimelineFunctional`.\n6.  Value from `innerTimelineFunctional` propagates to `searchResultsTimeline`.\n7.  New dependency from `innerTimelineFunctional` registered with `scopeFunctional`.\n\nNow, results from the \"funct\" request, if they arrive late, **cannot** update `searchResultsTimeline` because their reactive connection was removed. `TL.bind` automatically ensures only results for the latest query affect the output.\n\n**(Important Note:** This cleans up the _internal reactive connection_. It does _not_ automatically cancel an ongoing _external_ network request for \"funct\". That requires different mechanisms, often specific to the asynchronous operation itself.)\n\nThis greatly enhances safety for dynamic UI patterns.\n\n## 6.7 Summary: Internal Cleanup and the Path to Full Automation\n\nThis chapter unveiled `DependencyCore`, the engine managing the reactive dependency graph. We explored how `TL.bind`, unlike `TL.map`'s static dependency creation, interacts dynamically with `DependencyCore` using a scope mechanism for automatic cleanup of resources from previous `innerTimeline` instances.\n\nThe immediate payoffs are:\n\n*   Elimination of common reactive leaks within `TL.bind`.\n*   Increased robustness for dynamic scenarios.\n*   Simplified application logic.\n\nWhile this is effective for resources generated *dynamically within* `TL.bind`, what about managing the lifecycle of the *entire* reactive graph automatically?\n\nThe next chapter, **\"Chapter 7: Full Automatic Resource Management via `bind` with AI Assistance\"**, addresses this, demonstrating how modeling component lifecycles as `Timeline`s and using `TL.bind` strategically enables comprehensive automatic resource management, ideally with AI assistance for perfect implementation.","src/content/docs/en/book/unit-4/section-1/6-dynamic-dependency.md","98a66189f8471765",{"html":2306,"metadata":2307},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"61-beyond-static-graphs-the-evolving-dependency-landscape\">6.1 Beyond Static Graphs: The Evolving Dependency Landscape\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#61-beyond-static-graphs-the-evolving-dependency-landscape\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.1 Beyond Static Graphs: The Evolving Dependency Landscape”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In the previous chapters, we explored the \u003Ccode dir=\"auto\">Timeline&#x3C;'a>\u003C/code> type (Chapter 2) and its core operations, \u003Ccode dir=\"auto\">TL.map\u003C/code> (Chapter 3) and \u003Ccode dir=\"auto\">TL.bind\u003C/code> (introduced alongside Monads in Chapter 5). We established that \u003Ccode dir=\"auto\">Timeline\u003C/code> adheres to the Functor and Monad laws, providing a robust foundation for building reactive systems. We primarily viewed these operations through the lens of constructing an immutable \u003Cstrong>Dependency Graph\u003C/strong>, where timelines are linked based on how they are derived from one another. This perspective helped explain the algebraic properties and the predictable flow of updates initiated by \u003Ccode dir=\"auto\">TL.define\u003C/code>.\u003C/p>\n\u003Cp>However, the Block Universe model, which justifies the internal mutability of \u003Ccode dir=\"auto\">Timeline._last\u003C/code> as a simulation of an observer’s moving viewpoint (\u003Ccode dir=\"auto\">Now\u003C/code>) (Chapter 2), invites us to reconsider the nature of the dependency graph itself. Is the graph truly static once created?\u003C/p>\n\u003Cp>In many real-world applications, the relationships between data points and the computations needed are not fixed. User interactions, external events, or changing application states often require the structure of dependencies to \u003Cstrong>evolve over time\u003C/strong>. What data sources are relevant, or which calculations need to be performed, can change dynamically.\u003C/p>\n\u003Cp>Just as the \u003Cem>value\u003C/em> observed at \u003Ccode dir=\"auto\">Now\u003C/code> changes, couldn’t the \u003Cem>dependency structure\u003C/em> itself be considered a value that evolves along the timeline within our Block Universe simulation? If \u003Ccode dir=\"auto\">Timeline._last\u003C/code>’s mutability is justified to simulate observing a changing value, perhaps the structure connecting timelines also needs a mechanism to adapt.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"62-unveiling-the-engine-dependencycore\">6.2 Unveiling the Engine: \u003Ccode dir=\"auto\">DependencyCore\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#62-unveiling-the-engine-dependencycore\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.2 Unveiling the Engine: DependencyCore”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This brings us to a crucial aspect of this \u003Ccode dir=\"auto\">Timeline\u003C/code> library’s internal architecture, which was implicitly referenced by the mechanisms in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> and is now formally discussed. Behind the scenes, managing the creation, tracking, and propagation of updates across the dependency graph is a dedicated internal system: the \u003Cstrong>\u003Ccode dir=\"auto\">DependencyCore\u003C/code>\u003C/strong>.\u003C/p>\n\u003Cp>You can think of \u003Ccode dir=\"auto\">DependencyCore\u003C/code> as the central registry and engine for all reactive relationships within the system. As seen in the \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> code, it maintains a complete picture of:\u003C/p>\n\u003Cul>\n\u003Cli>Which \u003Ccode dir=\"auto\">Timeline\u003C/code> instances exist (identified by \u003Ccode dir=\"auto\">TimelineId\u003C/code>).\u003C/li>\n\u003Cli>How they depend on each other (which functions, or callbacks, need to run when a source updates, identified by \u003Ccode dir=\"auto\">DependencyId\u003C/code>).\u003C/li>\n\u003Cli>Crucially, how these dependencies might be grouped or scoped (using \u003Ccode dir=\"auto\">ScopeId\u003C/code>), especially those created dynamically by operations like \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cp>This internal \u003Ccode dir=\"auto\">DependencyCore\u003C/code> is the key to enabling not just efficient update propagation but also more advanced features like automatic resource management, which we will explore shortly.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"63-tlmap-and-tlbind-as-clients-of-dependencycore\">6.3 \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> as Clients of \u003Ccode dir=\"auto\">DependencyCore\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#63-tlmap-and-tlbind-as-clients-of-dependencycore\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.3 TL.map and TL.bind as Clients of DependencyCore”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>With the existence and role of \u003Ccode dir=\"auto\">DependencyCore\u003C/code> clarified (referencing its implementation in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>), we can now understand the operations \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> in a new light. They are not just pure functions returning new \u003Ccode dir=\"auto\">Timeline\u003C/code> values in an abstract sense; they act as \u003Cstrong>clients\u003C/strong> that interact with \u003Ccode dir=\"auto\">DependencyCore\u003C/code> to \u003Cstrong>dynamically modify the dependency graph\u003C/strong>.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">timelineA |> TL.map f\u003C/code>\u003C/strong>: When you use \u003Ccode dir=\"auto\">TL.map\u003C/code>, it performs two main actions:\u003C/p>\n\u003Col>\n\u003Cli>It creates a new \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">timelineB\u003C/code>) using the \u003Ccode dir=\"auto\">Timeline\u003C/code> factory function.\u003C/li>\n\u003Cli>It instructs \u003Ccode dir=\"auto\">DependencyCore\u003C/code> (via \u003Ccode dir=\"auto\">DependencyCore.registerDependency\u003C/code> as seen in \u003Ccode dir=\"auto\">TL.map\u003C/code>’s implementation in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>) to \u003Cstrong>register a persistent dependency\u003C/strong>: “Whenever \u003Ccode dir=\"auto\">timelineA\u003C/code> updates, execute the function \u003Ccode dir=\"auto\">f\u003C/code> with the new value and use the result to update \u003Ccode dir=\"auto\">timelineB\u003C/code> (via \u003Ccode dir=\"auto\">TL.define\u003C/code>).” This adds an edge to the dependency graph managed by \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>\u003Ccode dir=\"auto\">timelineA |> TL.bind monadf\u003C/code>\u003C/strong>: The \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation is significantly more sophisticated in its interaction with \u003Ccode dir=\"auto\">DependencyCore\u003C/code> (as detailed in its \u003Ccode dir=\"auto\">Timeline.fs\u003C/code> implementation):\u003C/p>\n\u003Col>\n\u003Cli>It creates the result \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">timelineB\u003C/code>).\u003C/li>\n\u003Cli>It instructs \u003Ccode dir=\"auto\">DependencyCore\u003C/code> to register the main dependency: “Whenever \u003Ccode dir=\"auto\">timelineA\u003C/code> updates, execute the following complex reaction…”\u003C/li>\n\u003Cli>The reaction itself involves further interaction with \u003Ccode dir=\"auto\">DependencyCore\u003C/code>:\n\u003Cul>\n\u003Cli>Tell \u003Ccode dir=\"auto\">DependencyCore\u003C/code> to \u003Cstrong>dispose of any resources associated with the previous execution\u003C/strong> of \u003Ccode dir=\"auto\">monadf\u003C/code> for this specific \u003Ccode dir=\"auto\">bind\u003C/code> instance (this involves \u003Ccode dir=\"auto\">DependencyCore.disposeScope\u003C/code> being called with the \u003Ccode dir=\"auto\">currentScopeId\u003C/code> associated with the previous \u003Ccode dir=\"auto\">innerTimeline\u003C/code>).\u003C/li>\n\u003Cli>Tell \u003Ccode dir=\"auto\">DependencyCore\u003C/code> to \u003Cstrong>create a new “scope”\u003C/strong> (\u003Ccode dir=\"auto\">DependencyCore.createScope()\u003C/code>) specifically for the \u003Cem>current\u003C/em> execution of \u003Ccode dir=\"auto\">monadf\u003C/code>.\u003C/li>\n\u003Cli>Execute \u003Ccode dir=\"auto\">monadf\u003C/code> with the new value from \u003Ccode dir=\"auto\">timelineA\u003C/code> to get a new \u003Ccode dir=\"auto\">innerTimeline\u003C/code>.\u003C/li>\n\u003Cli>Propagate the current value from this new \u003Ccode dir=\"auto\">innerTimeline\u003C/code> to \u003Ccode dir=\"auto\">timelineB\u003C/code> (via \u003Ccode dir=\"auto\">TL.define\u003C/code>).\u003C/li>\n\u003Cli>Tell \u003Ccode dir=\"auto\">DependencyCore\u003C/code> to \u003Cstrong>register a new dependency\u003C/strong> from \u003Ccode dir=\"auto\">innerTimeline\u003C/code> to \u003Ccode dir=\"auto\">timelineB\u003C/code> (via \u003Ccode dir=\"auto\">DependencyCore.registerDependency\u003C/code>), associating this dependency with the \u003Cstrong>newly created scope\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Cp>In essence, \u003Ccode dir=\"auto\">TL.map\u003C/code> simply adds a static link to the graph, while \u003Ccode dir=\"auto\">TL.bind\u003C/code> orchestrates a dynamic process of tearing down old dependency structures (within its managed scope) and building new ones every time its source timeline (\u003Ccode dir=\"auto\">timelineA\u003C/code>) updates.\u003C/p>\n\u003Cp>Understanding that \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code> are actively manipulating this managed dependency graph via \u003Ccode dir=\"auto\">DependencyCore\u003C/code> is the key to appreciating how this library handles dynamic scenarios and automatic resource cleanup, moving beyond the limitations of a purely static graph model.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"64-analogies-for-dynamic-dependency-management\">6.4 Analogies for Dynamic Dependency Management\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#64-analogies-for-dynamic-dependency-management\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.4 Analogies for Dynamic Dependency Management”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Understanding the role of the internal \u003Ccode dir=\"auto\">DependencyCore\u003C/code> and the dynamic nature of the dependency graph can be aided by drawing parallels to familiar concepts in software engineering:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Garbage Collection (GC):\u003C/strong> This is perhaps the strongest analogy. In languages like F# or JavaScript, the GC automatically reclaims memory for objects that are no longer reachable. Similarly, \u003Ccode dir=\"auto\">DependencyCore\u003C/code>, through the scope mechanism used by \u003Ccode dir=\"auto\">TL.bind\u003C/code> (i.e., \u003Ccode dir=\"auto\">DependencyCore.disposeScope\u003C/code>), automatically identifies and \u003Cstrong>removes dependency connections (callbacks) that are no longer relevant\u003C/strong> because the \u003Ccode dir=\"auto\">innerTimeline\u003C/code> they originated from has been superseded. It cleans up the reactive graph.\u003C/li>\n\u003Cli>\u003Cstrong>Package Management Systems (like \u003Ccode dir=\"auto\">apt\u003C/code>, \u003Ccode dir=\"auto\">npm\u003C/code>, \u003Ccode dir=\"auto\">NuGet\u003C/code>):\u003C/strong> These systems manage complex dependencies. \u003Ccode dir=\"auto\">DependencyCore\u003C/code> performs a similar function for \u003Ccode dir=\"auto\">Timeline\u003C/code> instances, managing dependencies created by \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Version Control Systems (like Git):\u003C/strong> Git tracks changes and relationships. \u003Ccode dir=\"auto\">DependencyCore\u003C/code> manages the \u003Cstrong>current, evolving state\u003C/strong> of the dependency graph, reflecting changes introduced by operations.\u003C/li>\n\u003C/ul>\n\u003Cp>These analogies highlight that \u003Ccode dir=\"auto\">DependencyCore\u003C/code> is a sophisticated internal system for maintaining the integrity and lifecycle of reactive dependencies.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"65-automatic-cleanup-via-scopes-how-tlbind-manages-resources\">6.5 Automatic Cleanup via Scopes: How \u003Ccode dir=\"auto\">TL.bind\u003C/code> Manages Resources\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#65-automatic-cleanup-via-scopes-how-tlbind-manages-resources\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.5 Automatic Cleanup via Scopes: How TL.bind Manages Resources”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s revisit how \u003Ccode dir=\"auto\">TL.bind\u003C/code> leverages \u003Ccode dir=\"auto\">DependencyCore\u003C/code> (as implemented in \u003Ccode dir=\"auto\">Timeline.fs\u003C/code>) to achieve automatic resource cleanup, focusing on the scope mechanism:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Initial State:\u003C/strong> When \u003Ccode dir=\"auto\">timelineA |> TL.bind monadf\u003C/code> is first executed, \u003Ccode dir=\"auto\">monadf\u003C/code> runs with \u003Ccode dir=\"auto\">timelineA\u003C/code>’s initial value, producing an \u003Ccode dir=\"auto\">innerTimeline\u003C/code> (say, \u003Ccode dir=\"auto\">inner1\u003C/code>). \u003Ccode dir=\"auto\">DependencyCore.createScope()\u003C/code> generates a new scope (say, \u003Ccode dir=\"auto\">scope1\u003C/code>). A dependency from \u003Ccode dir=\"auto\">inner1\u003C/code> to the result \u003Ccode dir=\"auto\">timelineB\u003C/code> is registered via \u003Ccode dir=\"auto\">DependencyCore.registerDependency\u003C/code>, associated with \u003Ccode dir=\"auto\">Some scope1\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Source Update:\u003C/strong> Later, \u003Ccode dir=\"auto\">timelineA\u003C/code> is updated (e.g., \u003Ccode dir=\"auto\">timelineA |> TL.define Now newValueA\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>Reaction Triggered:\u003C/strong> The main dependency (from \u003Ccode dir=\"auto\">timelineA\u003C/code> to \u003Ccode dir=\"auto\">timelineB\u003C/code>’s update logic, registered by \u003Ccode dir=\"auto\">TL.bind\u003C/code>) is triggered.\u003C/li>\n\u003Cli>\u003Cstrong>Old Scope Disposal:\u003C/strong> Within this reaction, \u003Ccode dir=\"auto\">DependencyCore.disposeScope currentScopeId\u003C/code> (where \u003Ccode dir=\"auto\">currentScopeId\u003C/code> held \u003Ccode dir=\"auto\">scope1\u003C/code>) is called. \u003Ccode dir=\"auto\">DependencyCore\u003C/code> removes all dependencies associated with \u003Ccode dir=\"auto\">scope1\u003C/code>, disconnecting \u003Ccode dir=\"auto\">inner1\u003C/code> from \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>New Scope Creation:\u003C/strong> \u003Ccode dir=\"auto\">DependencyCore.createScope()\u003C/code> creates a new scope (\u003Ccode dir=\"auto\">scope2\u003C/code>), which updates \u003Ccode dir=\"auto\">currentScopeId\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>New Inner Timeline:\u003C/strong> \u003Ccode dir=\"auto\">monadf\u003C/code> is executed with \u003Ccode dir=\"auto\">newValueA\u003C/code>, producing \u003Ccode dir=\"auto\">inner2\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Value Propagation:\u003C/strong> \u003Ccode dir=\"auto\">inner2\u003C/code>’s current value is defined onto \u003Ccode dir=\"auto\">timelineB\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>New Dependency Registration:\u003C/strong> A new dependency from \u003Ccode dir=\"auto\">inner2\u003C/code> to \u003Ccode dir=\"auto\">timelineB\u003C/code> is registered with \u003Ccode dir=\"auto\">DependencyCore\u003C/code>, associated with \u003Ccode dir=\"auto\">Some scope2\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>This cycle repeats. The disposal of the old scope (step 4) automatically cleans up reactive connections from the obsolete \u003Ccode dir=\"auto\">innerTimeline\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"66-the-payoff-safer-implementations-with-tlbind\">6.6 The Payoff: Safer Implementations with \u003Ccode dir=\"auto\">TL.bind\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#66-the-payoff-safer-implementations-with-tlbind\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.6 The Payoff: Safer Implementations with TL.bind”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This automatic, scope-based resource cleanup managed by \u003Ccode dir=\"auto\">DependencyCore\u003C/code> provides significant advantages:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Elimination of Reactive Leaks:\u003C/strong> Outdated computations/callbacks from previous \u003Ccode dir=\"auto\">bind\u003C/code> states do not persist.\u003C/li>\n\u003Cli>\u003Cstrong>Increased Robustness with \u003Ccode dir=\"auto\">TL.bind\u003C/code>:\u003C/strong> The Monad-compliant \u003Ccode dir=\"auto\">TL.bind\u003C/code> becomes safer for dynamic scenarios.\u003C/li>\n\u003Cli>\u003Cstrong>Simplified Application Logic:\u003C/strong> Resource management is delegated to the library.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Example: Incremental Search\u003C/strong>\u003C/p>\n\u003Cp>A classic example is \u003Cstrong>incremental search\u003C/strong>.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume SearchResult type and necessary setup\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let queryTimeline : Timeline&#x3C;string> = (* ... from search input ... *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let searchApi (query: string) : Timeline&#x3C;SearchResult> = (* ... async API call ... *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Using the safe, Monadic TL.bind\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let searchResultsTimeline : Timeline&#x3C;SearchResult> = queryTimeline |> TL.bind searchApi\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume SearchResult type and necessary setup// let queryTimeline : Timeline\u003Cstring> = (* ... from search input ... *)// let searchApi (query: string) : Timeline\u003CSearchResult> = (* ... async API call ... *)// Using the safe, Monadic TL.bind// let searchResultsTimeline : Timeline\u003CSearchResult> = queryTimeline |> TL.bind searchApi\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(F# code block is illustrative, actual implementation would depend on \u003Ccode dir=\"auto\">SearchResult\u003C/code> and \u003Ccode dir=\"auto\">searchApi\u003C/code> details).\u003C/em>\u003C/p>\n\u003Cp>With the scope-based cleanup:\u003C/p>\n\u003Col>\n\u003Cli>User types “funct”. \u003Ccode dir=\"auto\">TL.bind\u003C/code> runs \u003Ccode dir=\"auto\">searchApi \"funct\"\u003C/code>, gets \u003Ccode dir=\"auto\">innerTimelineFunct\u003C/code>, creates \u003Ccode dir=\"auto\">scopeFunct\u003C/code>, links \u003Ccode dir=\"auto\">innerTimelineFunct\u003C/code> to \u003Ccode dir=\"auto\">searchResultsTimeline\u003C/code> via \u003Ccode dir=\"auto\">scopeFunct\u003C/code>.\u003C/li>\n\u003Cli>Query becomes “functional”. \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s reaction triggers.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">DependencyCore.disposeScope(scopeFunct)\u003C/code> removes dependency from \u003Ccode dir=\"auto\">innerTimelineFunct\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">DependencyCore.createScope()\u003C/code> creates \u003Ccode dir=\"auto\">scopeFunctional\u003C/code>.\u003C/li>\n\u003Cli>\u003Ccode dir=\"auto\">searchApi \"functional\"\u003C/code> runs, gets \u003Ccode dir=\"auto\">innerTimelineFunctional\u003C/code>.\u003C/li>\n\u003Cli>Value from \u003Ccode dir=\"auto\">innerTimelineFunctional\u003C/code> propagates to \u003Ccode dir=\"auto\">searchResultsTimeline\u003C/code>.\u003C/li>\n\u003Cli>New dependency from \u003Ccode dir=\"auto\">innerTimelineFunctional\u003C/code> registered with \u003Ccode dir=\"auto\">scopeFunctional\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>Now, results from the “funct” request, if they arrive late, \u003Cstrong>cannot\u003C/strong> update \u003Ccode dir=\"auto\">searchResultsTimeline\u003C/code> because their reactive connection was removed. \u003Ccode dir=\"auto\">TL.bind\u003C/code> automatically ensures only results for the latest query affect the output.\u003C/p>\n\u003Cp>\u003Cstrong>(Important Note:\u003C/strong> This cleans up the \u003Cem>internal reactive connection\u003C/em>. It does \u003Cem>not\u003C/em> automatically cancel an ongoing \u003Cem>external\u003C/em> network request for “funct”. That requires different mechanisms, often specific to the asynchronous operation itself.)\u003C/p>\n\u003Cp>This greatly enhances safety for dynamic UI patterns.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"67-summary-internal-cleanup-and-the-path-to-full-automation\">6.7 Summary: Internal Cleanup and the Path to Full Automation\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#67-summary-internal-cleanup-and-the-path-to-full-automation\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “6.7 Summary: Internal Cleanup and the Path to Full Automation”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This chapter unveiled \u003Ccode dir=\"auto\">DependencyCore\u003C/code>, the engine managing the reactive dependency graph. We explored how \u003Ccode dir=\"auto\">TL.bind\u003C/code>, unlike \u003Ccode dir=\"auto\">TL.map\u003C/code>’s static dependency creation, interacts dynamically with \u003Ccode dir=\"auto\">DependencyCore\u003C/code> using a scope mechanism for automatic cleanup of resources from previous \u003Ccode dir=\"auto\">innerTimeline\u003C/code> instances.\u003C/p>\n\u003Cp>The immediate payoffs are:\u003C/p>\n\u003Cul>\n\u003Cli>Elimination of common reactive leaks within \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/li>\n\u003Cli>Increased robustness for dynamic scenarios.\u003C/li>\n\u003Cli>Simplified application logic.\u003C/li>\n\u003C/ul>\n\u003Cp>While this is effective for resources generated \u003Cem>dynamically within\u003C/em> \u003Ccode dir=\"auto\">TL.bind\u003C/code>, what about managing the lifecycle of the \u003Cem>entire\u003C/em> reactive graph automatically?\u003C/p>\n\u003Cp>The next chapter, \u003Cstrong>“Chapter 7: Full Automatic Resource Management via \u003Ccode dir=\"auto\">bind\u003C/code> with AI Assistance”\u003C/strong>, addresses this, demonstrating how modeling component lifecycles as \u003Ccode dir=\"auto\">Timeline\u003C/code>s and using \u003Ccode dir=\"auto\">TL.bind\u003C/code> strategically enables comprehensive automatic resource management, ideally with AI assistance for perfect implementation.\u003C/p>",{"headings":2308,"localImagePaths":2330,"remoteImagePaths":2331,"frontmatter":2332,"imagePaths":2333},[2309,2312,2315,2318,2321,2324,2327],{"depth":182,"slug":2310,"text":2311},"61-beyond-static-graphs-the-evolving-dependency-landscape","6.1 Beyond Static Graphs: The Evolving Dependency Landscape",{"depth":182,"slug":2313,"text":2314},"62-unveiling-the-engine-dependencycore","6.2 Unveiling the Engine: DependencyCore",{"depth":182,"slug":2316,"text":2317},"63-tlmap-and-tlbind-as-clients-of-dependencycore","6.3 TL.map and TL.bind as Clients of DependencyCore",{"depth":182,"slug":2319,"text":2320},"64-analogies-for-dynamic-dependency-management","6.4 Analogies for Dynamic Dependency Management",{"depth":182,"slug":2322,"text":2323},"65-automatic-cleanup-via-scopes-how-tlbind-manages-resources","6.5 Automatic Cleanup via Scopes: How TL.bind Manages Resources",{"depth":182,"slug":2325,"text":2326},"66-the-payoff-safer-implementations-with-tlbind","6.6 The Payoff: Safer Implementations with TL.bind",{"depth":182,"slug":2328,"text":2329},"67-summary-internal-cleanup-and-the-path-to-full-automation","6.7 Summary: Internal Cleanup and the Path to Full Automation",[],[],{"title":2297,"description":2298},[],"ja/book/unit-0/section-0/0-about-unit",{"id":2334,"data":2336,"body":174,"filePath":2340,"digest":176,"rendered":2341},{"title":169,"description":170,"editUrl":16,"head":2337,"template":18,"sidebar":2338,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2339},{},"src/content/docs/ja/book/unit-0/section-0/0-about-unit.md",{"html":178,"metadata":2342},{"headings":2343,"localImagePaths":2345,"remoteImagePaths":2346,"frontmatter":2347,"imagePaths":2348},[2344],{"depth":182,"slug":183,"text":184},[],[],{"title":169,"description":170},[],"en/book/unit-4/section-1/7-full-managment-ai",{"id":2349,"data":2351,"body":2357,"filePath":2358,"digest":2359,"rendered":2360},{"title":2352,"description":2353,"editUrl":16,"head":2354,"template":18,"sidebar":2355,"pagefind":16,"draft":20},"Chapter 7: Full Automatic Resource Management via bind with AI Assistance","In the previous chapter (Chapter 6: \"Dynamic Dependency Management and Automatic Resource Cleanup\"), we explored how TL.bind leverages an internal DependencyCore and a scope mechanism to automatically clean up resources associated with previous innerTimeline instances whenever its source Timeline updates. This significantly enhances safety for patterns like incremental search by preventing outdated reactive connections from persisting.",[],{"hidden":20,"attrs":2356},{},"## 7.1 Introduction: Beyond `bind`'s Internal Cleanup\n\nIn the previous chapter (Chapter 6: \"Dynamic Dependency Management and Automatic Resource Cleanup\"), we explored how `TL.bind` leverages an internal `DependencyCore` and a scope mechanism to automatically clean up resources associated with *previous* `innerTimeline` instances whenever its source `Timeline` updates. This significantly enhances safety for patterns like incremental search by preventing outdated reactive connections from persisting.\n\nHowever, a crucial question arises: Does this internal, scope-based cleanup suffice for *all* resource management needs within complex, long-running applications? Consider scenarios where entire sections of the reactive dependency graph, potentially including the `bind` operations themselves, become obsolete. For instance:\n\n*   A user navigates away from a screen in a Single Page Application (SPA).\n*   A feature is disabled based on user settings or permissions.\n*   Items are permanently removed from a dynamically managed list.\n\nIn many traditional FRP libraries, handling such cases requires developers to manually `dispose` or `unsubscribe` from the top-level subscriptions or timelines associated with the obsolete components to prevent memory leaks and unnecessary computations. This chapter argues that within the design philosophy of this `Timeline` library, such manual intervention is not only unnecessary but also potentially harmful. Instead, by correctly leveraging the `TL.bind` operation and modeling application lifecycles appropriately, **full automatic resource management** can be achieved for the entire dependency graph, especially when guided by AI assistance.\n\n## 7.2 The Challenge: Managing Top-Level Component Lifecycles\n\nLet's examine why the basic `TL.bind` scope cleanup, while powerful, might not immediately appear to cover the disposal of entire reactive subgraphs.\n\nConsider a typical screen widget setup:\n*(Note: `ScreenType`, `WidgetSet` are illustrative types for this example.)*\n\n```fsharp\n// Assume Timeline factory and TL module functions (TL.bind, TL.map, TL.ID) are accessible.\n// type ScreenType = ...\n// type WidgetSet = ...\n\n// let currentScreenTimeline : Timeline\u003CScreenType option> = (* Source indicating current screen *)\n// let createWidgetsForScreen (screenType: ScreenType option) : Timeline\u003CWidgetSet option> = (* Creates widgets *)\n\n// Adhering to style guide for TL function calls\n// let screenWidgetsTimeline : Timeline\u003CWidgetSet option> =\n//     currentScreenTimeline\n//     |> TL.bind (fun maybeScreenType ->\n//         match maybeScreenType with\n//         | Some screenType ->\n//             // Create widgets for the current screen\n//             createWidgetsForScreen screenType\n//             |> TL.map Some // Wrap in Some if createWidgetsForScreen returns Timeline\u003CWidgetSet>\n//                           // If it returns Timeline\u003CWidgetSet option>, this map isn't needed.\n//         | None ->\n//             // No screen visible, return static None\n//             TL.ID None // Assuming TL.ID creates a Timeline\u003C'a option> here\n//     )\n```\n\n*(F# code block is illustrative as types `ScreenType` and `WidgetSet`, and function `createWidgetsForScreen` are not fully defined here. It demonstrates the pattern.)*\n\nWhen `currentScreenTimeline` changes (e.g., from `Some ScreenA` to `Some ScreenB`), the `TL.bind` operation correctly disposes of the scope associated with `ScreenA`'s widgets and creates a new one for `ScreenB`.\n\nHowever, what happens if the user logs out, and `currentScreenTimeline` is set to `None` and *never updates again*?\n\n*   The `TL.bind` operation executes one last time for the `None` value. It disposes of the scope for the previously active screen (e.g., `ScreenB`).\n*   It establishes a new `innerTimeline` (e.g., `TL.ID None`).\n*   The primary dependency registered by this `TL.bind` operation – the connection from `currentScreenTimeline` to the logic that updates `screenWidgetsTimeline` – remains within the `DependencyCore`.\n*   If `currentScreenTimeline` itself is no longer needed but isn't explicitly cleaned up (i.e., no a `TL.define` on it is ever called again, and no other mechanism removes its dependencies if it's part of a larger `bind` scope), this dependency might persist.\n\nThis suggests that simply relying on the source `Timeline` updates for cleanup isn't sufficient when the *entire structure* involving the `TL.bind` becomes obsolete because its source `Timeline` ceases to change.\n\n## 7.3 The Solution: Modeling Lifecycles with `Timeline` and Nested `bind`\n\nThe key insight to achieving full automatic management lies in **modeling the lifecycle status itself as a `Timeline`** and using nested `TL.bind` operations. Instead of relying on external, manual disposal, we integrate the lifecycle control directly into the reactive graph.\n\nLet's refine the previous example by introducing an explicit lifecycle `Timeline`:\n*(Note: `SectionData`, `WidgetSet` are illustrative types.)*\n\n```fsharp\n// Assume Timeline factory and TL module functions are accessible.\n// type SectionData = ...\n// type WidgetSet = ...\n\n// Timeline representing if the UI section should be active/visible\n// let isSectionVisibleTimeline : Timeline\u003Cbool> = (* Driven by UI framework, login state, etc. *)\n\n// Timeline providing data needed only when the section is visible\n// let dataForSectionTimeline : Timeline\u003CSectionData> = (* Source of data *)\n\n// Function creating the reactive widgets (potentially containing maps and binds)\n// let createSectionWidgets (data: SectionData) : Timeline\u003CWidgetSet> = (* ... Function returning a Timeline *)\n\n// The final widget timeline, automatically managed\n// let sectionWidgetsTimeline : Timeline\u003CWidgetSet option> =\n//     isSectionVisibleTimeline\n//     |> TL.bind (fun isVisible ->\n//         if isVisible then\n//             // Section is ACTIVE: Bind to the data and create widgets\n//             dataForSectionTimeline\n//             |> TL.bind createSectionWidgets // Inner bind\n//             |> TL.map Some // Wrap result in Some\n//         else\n//             // Section is INACTIVE: Return a static Timeline with None\n//             TL.ID None // TL.ID of an option type\n//     )\n```\n\n*(F# code block is illustrative.)*\n\n**How Automatic Cleanup Occurs:**\n\n1.  **Activation (`isSectionVisibleTimeline` becomes `true`):**\n    *   The outer `TL.bind` executes the `if isVisible then` branch.\n    *   The inner `TL.bind` (`dataForSectionTimeline |> TL.bind createSectionWidgets`) is executed, creating its own scope (via `DependencyCore.createScope`) and dependencies for widget creation. The result (`Timeline\u003CWidgetSet>`) is mapped to `Some`, becoming the `innerTimeline` for the *outer* `TL.bind`.\n    *   A scope is created by the outer `TL.bind` (and `DependencyCore`) associated with this `innerTimeline`.\n2.  **Deactivation (`isSectionVisibleTimeline` becomes `false`):**\n    *   The outer `TL.bind`'s reaction is triggered **again** because its source (`isSectionVisibleTimeline`) updated.\n    *   **Crucially:** Before executing the new logic (`if isVisible then ... else ...`), the `DependencyCore` is instructed (by the outer `TL.bind`'s internal mechanism described in Chapter 6) to **dispose of the previously active scope** associated with the outer `TL.bind`. This previous scope contained the entire reactive structure generated when `isVisible` was `true` (i.e., the `Timeline` resulting from `dataForSectionTimeline |> TL.bind ... |> TL.map ...` and all its internal dependencies).\n    *   The `else` branch executes, returning `TL.ID None` as the new `innerTimeline`.\n    *   A new, minimal scope is created by the outer `TL.bind` for this static `None` value.\n\nThe result is that when the controlling lifecycle `Timeline` (`isSectionVisibleTimeline`) signals deactivation, the entire reactive subgraph responsible for the active state is automatically and completely cleaned up through the standard scope disposal mechanism of the *outer* `TL.bind`.\n\n## 7.4 The Role of `TL.map` in Automatic Management\n\nUsers naturally employ `TL.map` for various transformations. How does it fit into this automatic management scheme?\n\n*   **Direct vs. Indirect Cleanup:** `TL.map` creates persistent dependencies (`sourceTimeline |> TL.map f` results in a `resultTimeline` dependent on `sourceTimeline`) that are not directly tied to a `TL.bind` scope *unless the map operation itself is nested within a `TL.bind`'s monadic function*. `TL.bind`'s `disposeScope` does not *directly* target `TL.map`-created dependencies that exist outside its managed scope.\n*   **Cleanup via Containment:** However, if a `TL.map` operation occurs *within the function passed to `TL.bind`*, the `Timeline` instances created by that `TL.map` (and the dependency itself) become part of the resources managed *indirectly* by the `TL.bind`'s scope.\n    ```fsharp\n    // ... inside the outer bind from the previous example ...\n    // if isVisible then\n    //     dataForSectionTimeline\n    //     |> TL.map (fun data -> processData data) // timelineMapped\n    //     |> TL.bind (fun processedData -> createWidgets processedData) // timelineBound (this is the innerTimeline for the outer bind)\n    //     |> TL.map Some // Final transformation for the outer bind's result type\n    // else\n    //     TL.ID None\n    ```\n    When `isVisible` becomes `false`, the outer `TL.bind` disposes of the scope associated with its `innerTimeline` (which was `timelineBound |> TL.map Some`). This effectively removes the reactive connection from `timelineBound` (and subsequently from `timelineMapped` if its only downstream consumer was `timelineBound`) to the final `sectionWidgetsTimeline`. If `timelineMapped` and `timelineBound` are no longer reachable from anywhere else in the application graph (which is often the case if they were only created and used within this `bind`'s monadic function), they become eligible for standard .NET Garbage Collection. When the GC collects these `Timeline` objects, `DependencyCore` can eventually release associated internal tracking information for their `TimelineId`s if no active dependencies remain.\n*   **Top-Level `TL.map`:** A `TL.map` operation applied at the top level or outside any managing `TL.bind` scope will create a persistent dependency that lives as long as its source and result `Timeline`s are actively part of the reachable dependency graph.\n\nIn essence, while `TL.bind` doesn't directly target external `TL.map` dependencies for removal, structuring the application so that related `TL.map` operations occur *within* `TL.bind`-managed lifecycles ensures they are effectively cleaned up when the encompassing scope is disposed.\n\n## 7.5 Guidance: Choosing `TL.map` vs. `TL.bind` for Automatic Management\n\nThe key to leveraging automatic resource management lies in correctly choosing between `TL.map` and `TL.bind`.\n\n1.  **Use `TL.map` when:**\n    *   The transformation is a simple, stateless projection of a value (`'a -> 'b`).\n    *   No new reactive context, data source switching, or lifecycle management of the transformation itself is involved.\n    *   The resulting dependency should logically persist as long as the source exists and is part of an active graph.\n    *   Examples: `fun x -> x * 2`, `fun x -> sprintf \"Value: %d\" x`, `fun user -> user.Name`.\n\n2.  **Use `TL.bind` when:**\n    *   The transformation logic itself needs to return a `Timeline` (`'a -> Timeline\u003C'b>`). This is common for asynchronous operations (as seen in Unit 4, Chapter 4), state-dependent behaviors, or selecting different reactive sources based on input.\n    *   **Crucially:** Even if the core logic seems implementable with `TL.map` (i.e., it's just `'a -> 'b`), use `TL.bind` if the entire transformation block (including any `TL.map`s within it) should only be \"active\" and its resulting `Timeline` connected to the graph based on some external condition or lifecycle state (`Timeline\u003Cbool>` or similar). Encapsulate the logic (potentially containing `TL.map`s) within a function that returns a `Timeline` (e.g., `fun 'a -> TL.ID (original_map_logic 'a)` or `fun 'a -> if condition then (original_map_logic 'a |> TL.map Some|> TL.ID) else TL.ID None`), and pass this function to `TL.bind`. This ensures the entire block's resources are tied to the `TL.bind`'s scope.\n    *   Examples: `fun id -> fetchApiData id` (returns `Timeline\u003CApiResponse>`), `fun state -> selectAnimationTimeline state` (returns `Timeline\u003CAnimation>`), `fun isVisible -> if isVisible then createViewTimeline() else TL.ID None` (lifecycle management).\n\n**Thinking Process for Selection:**\n\nWhen transforming `timelineA` with a function `f_logic`:\n\n1.  Is `f_logic` just mapping value `a` to a plain value `b` (`'a -> 'b`), and this mapping should always be active if `timelineA` is active? -> Use `timelineA |> TL.map f_logic`.\n2.  Does `f_logic` itself need to return a `Timeline\u003C'b>` (`'a -> Timeline\u003C'b>`), OR should the entire computation involving `f_logic` (even if it's just an `'a -> 'b` transformation internally) be active/inactive and its resulting `Timeline` managed based on `timelineA`'s value or another lifecycle `Timeline`? -> Use `TL.bind`. Wrap the overall logic to fit the `'input -> Timeline\u003C'output>` signature for `TL.bind`.\n\n**Efficiency Considerations: `TL.map` vs. `TL.bind` Overhead**\n\nBeyond resource management, there's a crucial difference in **efficiency**, especially with frequently updating `Timeline`s.\n\n*   **`TL.map` Efficiency:** `let timelineB = timelineA |> TL.map f` creates `timelineB` **once**. When `timelineA` updates, only `f` (`'a -> 'b`) executes for the existing `timelineB`. This is efficient for simple value transformations.\n*   **`TL.bind` Overhead:** `let timelineB = timelineA |> TL.bind g`. The monadic function `g` (`'a -> Timeline\u003C'b>`) returns a new `innerTimeline` **each time `g` is executed** (i.e., when `timelineA` updates). This means `TL.bind` conceptually generates a new `Timeline` context on each update of `timelineA`. This inherently involves more overhead than `TL.map` (executing `g`, `Timeline` generation, `DependencyCore` interactions for scope and dependency management).\n\n**Therefore, for `Timeline`s that update at a high frequency, using `TL.bind` where a simple `TL.map` would suffice from a value transformation perspective can introduce unnecessary overhead and should be avoided.** While `TL.bind` is essential for lifecycle management and dynamic context switching, `TL.map` is more performant for straightforward, high-frequency value transformations that don't require their own lifecycle management. Balancing automatic resource management (`TL.bind`) and performance (`TL.map`) is key.\n\n## 7.6 Conclusion: Embracing Full Automatic Management\n\nThis `Timeline` library, through the `DependencyCore` and the sophisticated scope management within `TL.bind` (as detailed in Chapter 6), enables a powerful paradigm: **full automatic resource management**. By:\n\n1.  Modeling component or feature lifecycles explicitly using `Timeline`s.\n2.  Using `TL.bind` to conditionally execute reactive logic (and thus establish or tear down reactive subgraphs) based on these lifecycle `Timeline`s.\n3.  Applying the `TL.map`/`TL.bind` distinction correctly, considering both resource management needs and efficiency.\n\nDevelopers can construct complex, dynamic applications where the creation *and destruction* of reactive dependencies are handled automatically and reliably by the library itself.\n\nConsequently, **manual disposal APIs (`dispose`, `unsubscribe`, etc.) are deemed unnecessary and potentially harmful** within this framework. Providing such APIs would risk circumventing `DependencyCore`'s carefully managed graph, leading to inconsistencies and potential errors.\n\nThe intended approach is to rely entirely on the automatic mechanisms, structuring the application logic declaratively using `Timeline`, `TL.map`, and especially `TL.bind`, ideally with the assistance of knowledgeable AI.\n\n## 7.7 The Solution is AI: Achieving Perfect Implementation Instantly\n\nSection 7.5 provided guidance on the crucial choice between `TL.map` and `TL.bind`. However, consistently applying this perfectly can be challenging.\n\n**But this is not a problem.** With powerful AI assistants, this human difficulty is mitigated.\n\n**Simply provide this `Timeline` library's source code and this documentation to a capable AI assistant.** The AI can grasp the design philosophy, `DependencyCore` intricacies, `TL.bind`'s scope-based cleanup, `TL.map`'s efficiency, and lifecycle modeling patterns.\n\nArmed with this knowledge, the AI can:\n\n*   Analyze application requirements.\n*   Automatically choose `TL.map` or `TL.bind` optimally.\n*   Correctly structure nested `TL.bind` for flawless lifecycle management.\n*   Generate code adhering to automatic resource management and efficiency principles.\n\nForget manual subscription tracking. **Let AI handle it.** Collaborating with an AI that understands this framework allows a level of safety, efficiency, and correctness previously hard to attain consistently.\n\n**The path forward is clear: Leverage AI to build sophisticated, robust, and automatically managed applications using this `Timeline` library. Delegate the implementation details and achieve perfect results instantly.**","src/content/docs/en/book/unit-4/section-1/7-full-managment-ai.md","70f57bb2a42d538c",{"html":2361,"metadata":2362},"\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"71-introduction-beyond-binds-internal-cleanup\">7.1 Introduction: Beyond \u003Ccode dir=\"auto\">bind\u003C/code>’s Internal Cleanup\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#71-introduction-beyond-binds-internal-cleanup\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.1 Introduction: Beyond bind’s Internal Cleanup”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>In the previous chapter (Chapter 6: “Dynamic Dependency Management and Automatic Resource Cleanup”), we explored how \u003Ccode dir=\"auto\">TL.bind\u003C/code> leverages an internal \u003Ccode dir=\"auto\">DependencyCore\u003C/code> and a scope mechanism to automatically clean up resources associated with \u003Cem>previous\u003C/em> \u003Ccode dir=\"auto\">innerTimeline\u003C/code> instances whenever its source \u003Ccode dir=\"auto\">Timeline\u003C/code> updates. This significantly enhances safety for patterns like incremental search by preventing outdated reactive connections from persisting.\u003C/p>\n\u003Cp>However, a crucial question arises: Does this internal, scope-based cleanup suffice for \u003Cem>all\u003C/em> resource management needs within complex, long-running applications? Consider scenarios where entire sections of the reactive dependency graph, potentially including the \u003Ccode dir=\"auto\">bind\u003C/code> operations themselves, become obsolete. For instance:\u003C/p>\n\u003Cul>\n\u003Cli>A user navigates away from a screen in a Single Page Application (SPA).\u003C/li>\n\u003Cli>A feature is disabled based on user settings or permissions.\u003C/li>\n\u003Cli>Items are permanently removed from a dynamically managed list.\u003C/li>\n\u003C/ul>\n\u003Cp>In many traditional FRP libraries, handling such cases requires developers to manually \u003Ccode dir=\"auto\">dispose\u003C/code> or \u003Ccode dir=\"auto\">unsubscribe\u003C/code> from the top-level subscriptions or timelines associated with the obsolete components to prevent memory leaks and unnecessary computations. This chapter argues that within the design philosophy of this \u003Ccode dir=\"auto\">Timeline\u003C/code> library, such manual intervention is not only unnecessary but also potentially harmful. Instead, by correctly leveraging the \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation and modeling application lifecycles appropriately, \u003Cstrong>full automatic resource management\u003C/strong> can be achieved for the entire dependency graph, especially when guided by AI assistance.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"72-the-challenge-managing-top-level-component-lifecycles\">7.2 The Challenge: Managing Top-Level Component Lifecycles\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#72-the-challenge-managing-top-level-component-lifecycles\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.2 The Challenge: Managing Top-Level Component Lifecycles”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Let’s examine why the basic \u003Ccode dir=\"auto\">TL.bind\u003C/code> scope cleanup, while powerful, might not immediately appear to cover the disposal of entire reactive subgraphs.\u003C/p>\n\u003Cp>Consider a typical screen widget setup:\n\u003Cem>(Note: \u003Ccode dir=\"auto\">ScreenType\u003C/code>, \u003Ccode dir=\"auto\">WidgetSet\u003C/code> are illustrative types for this example.)\u003C/em>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory and TL module functions (TL.bind, TL.map, TL.ID) are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type ScreenType = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type WidgetSet = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let currentScreenTimeline : Timeline&#x3C;ScreenType option> = (* Source indicating current screen *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let createWidgetsForScreen (screenType: ScreenType option) : Timeline&#x3C;WidgetSet option> = (* Creates widgets *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Adhering to style guide for TL function calls\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let screenWidgetsTimeline : Timeline&#x3C;WidgetSet option> =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     currentScreenTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     |> TL.bind (fun maybeScreenType ->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         match maybeScreenType with\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         | Some screenType ->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             // Create widgets for the current screen\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             createWidgetsForScreen screenType\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             |> TL.map Some // Wrap in Some if createWidgetsForScreen returns Timeline&#x3C;WidgetSet>\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//                           // If it returns Timeline&#x3C;WidgetSet option>, this map isn't needed.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         | None ->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             // No screen visible, return static None\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             TL.ID None // Assuming TL.ID creates a Timeline&#x3C;'a option> here\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     )\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory and TL module functions (TL.bind, TL.map, TL.ID) are accessible.// type ScreenType = ...// type WidgetSet = ...// let currentScreenTimeline : Timeline\u003CScreenType option> = (* Source indicating current screen *)// let createWidgetsForScreen (screenType: ScreenType option) : Timeline\u003CWidgetSet option> = (* Creates widgets *)// Adhering to style guide for TL function calls// let screenWidgetsTimeline : Timeline\u003CWidgetSet option> =//     currentScreenTimeline//     |> TL.bind (fun maybeScreenType ->//         match maybeScreenType with//         | Some screenType ->//             // Create widgets for the current screen//             createWidgetsForScreen screenType//             |> TL.map Some // Wrap in Some if createWidgetsForScreen returns Timeline\u003CWidgetSet>//                           // If it returns Timeline\u003CWidgetSet option>, this map isn&#x27;t needed.//         | None ->//             // No screen visible, return static None//             TL.ID None // Assuming TL.ID creates a Timeline\u003C&#x27;a option> here//     )\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(F# code block is illustrative as types \u003Ccode dir=\"auto\">ScreenType\u003C/code> and \u003Ccode dir=\"auto\">WidgetSet\u003C/code>, and function \u003Ccode dir=\"auto\">createWidgetsForScreen\u003C/code> are not fully defined here. It demonstrates the pattern.)\u003C/em>\u003C/p>\n\u003Cp>When \u003Ccode dir=\"auto\">currentScreenTimeline\u003C/code> changes (e.g., from \u003Ccode dir=\"auto\">Some ScreenA\u003C/code> to \u003Ccode dir=\"auto\">Some ScreenB\u003C/code>), the \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation correctly disposes of the scope associated with \u003Ccode dir=\"auto\">ScreenA\u003C/code>’s widgets and creates a new one for \u003Ccode dir=\"auto\">ScreenB\u003C/code>.\u003C/p>\n\u003Cp>However, what happens if the user logs out, and \u003Ccode dir=\"auto\">currentScreenTimeline\u003C/code> is set to \u003Ccode dir=\"auto\">None\u003C/code> and \u003Cem>never updates again\u003C/em>?\u003C/p>\n\u003Cul>\n\u003Cli>The \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation executes one last time for the \u003Ccode dir=\"auto\">None\u003C/code> value. It disposes of the scope for the previously active screen (e.g., \u003Ccode dir=\"auto\">ScreenB\u003C/code>).\u003C/li>\n\u003Cli>It establishes a new \u003Ccode dir=\"auto\">innerTimeline\u003C/code> (e.g., \u003Ccode dir=\"auto\">TL.ID None\u003C/code>).\u003C/li>\n\u003Cli>The primary dependency registered by this \u003Ccode dir=\"auto\">TL.bind\u003C/code> operation – the connection from \u003Ccode dir=\"auto\">currentScreenTimeline\u003C/code> to the logic that updates \u003Ccode dir=\"auto\">screenWidgetsTimeline\u003C/code> – remains within the \u003Ccode dir=\"auto\">DependencyCore\u003C/code>.\u003C/li>\n\u003Cli>If \u003Ccode dir=\"auto\">currentScreenTimeline\u003C/code> itself is no longer needed but isn’t explicitly cleaned up (i.e., no a \u003Ccode dir=\"auto\">TL.define\u003C/code> on it is ever called again, and no other mechanism removes its dependencies if it’s part of a larger \u003Ccode dir=\"auto\">bind\u003C/code> scope), this dependency might persist.\u003C/li>\n\u003C/ul>\n\u003Cp>This suggests that simply relying on the source \u003Ccode dir=\"auto\">Timeline\u003C/code> updates for cleanup isn’t sufficient when the \u003Cem>entire structure\u003C/em> involving the \u003Ccode dir=\"auto\">TL.bind\u003C/code> becomes obsolete because its source \u003Ccode dir=\"auto\">Timeline\u003C/code> ceases to change.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"73-the-solution-modeling-lifecycles-with-timeline-and-nested-bind\">7.3 The Solution: Modeling Lifecycles with \u003Ccode dir=\"auto\">Timeline\u003C/code> and Nested \u003Ccode dir=\"auto\">bind\u003C/code>\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#73-the-solution-modeling-lifecycles-with-timeline-and-nested-bind\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.3 The Solution: Modeling Lifecycles with Timeline and Nested bind”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The key insight to achieving full automatic management lies in \u003Cstrong>modeling the lifecycle status itself as a \u003Ccode dir=\"auto\">Timeline\u003C/code>\u003C/strong> and using nested \u003Ccode dir=\"auto\">TL.bind\u003C/code> operations. Instead of relying on external, manual disposal, we integrate the lifecycle control directly into the reactive graph.\u003C/p>\n\u003Cp>Let’s refine the previous example by introducing an explicit lifecycle \u003Ccode dir=\"auto\">Timeline\u003C/code>:\n\u003Cem>(Note: \u003Ccode dir=\"auto\">SectionData\u003C/code>, \u003Ccode dir=\"auto\">WidgetSet\u003C/code> are illustrative types.)\u003C/em>\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Assume Timeline factory and TL module functions are accessible.\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type SectionData = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// type WidgetSet = ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline representing if the UI section should be active/visible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let isSectionVisibleTimeline : Timeline&#x3C;bool> = (* Driven by UI framework, login state, etc. *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Timeline providing data needed only when the section is visible\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let dataForSectionTimeline : Timeline&#x3C;SectionData> = (* Source of data *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// Function creating the reactive widgets (potentially containing maps and binds)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let createSectionWidgets (data: SectionData) : Timeline&#x3C;WidgetSet> = (* ... Function returning a Timeline *)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// The final widget timeline, automatically managed\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// let sectionWidgetsTimeline : Timeline&#x3C;WidgetSet option> =\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     isSectionVisibleTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     |> TL.bind (fun isVisible ->\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         if isVisible then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             // Section is ACTIVE: Bind to the data and create widgets\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             dataForSectionTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             |> TL.bind createSectionWidgets // Inner bind\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             |> TL.map Some // Wrap result in Some\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//         else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             // Section is INACTIVE: Return a static Timeline with None\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//             TL.ID None // TL.ID of an option type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     )\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Assume Timeline factory and TL module functions are accessible.// type SectionData = ...// type WidgetSet = ...// Timeline representing if the UI section should be active/visible// let isSectionVisibleTimeline : Timeline\u003Cbool> = (* Driven by UI framework, login state, etc. *)// Timeline providing data needed only when the section is visible// let dataForSectionTimeline : Timeline\u003CSectionData> = (* Source of data *)// Function creating the reactive widgets (potentially containing maps and binds)// let createSectionWidgets (data: SectionData) : Timeline\u003CWidgetSet> = (* ... Function returning a Timeline *)// The final widget timeline, automatically managed// let sectionWidgetsTimeline : Timeline\u003CWidgetSet option> =//     isSectionVisibleTimeline//     |> TL.bind (fun isVisible ->//         if isVisible then//             // Section is ACTIVE: Bind to the data and create widgets//             dataForSectionTimeline//             |> TL.bind createSectionWidgets // Inner bind//             |> TL.map Some // Wrap result in Some//         else//             // Section is INACTIVE: Return a static Timeline with None//             TL.ID None // TL.ID of an option type//     )\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>\u003Cem>(F# code block is illustrative.)\u003C/em>\u003C/p>\n\u003Cp>\u003Cstrong>How Automatic Cleanup Occurs:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Activation (\u003Ccode dir=\"auto\">isSectionVisibleTimeline\u003C/code> becomes \u003Ccode dir=\"auto\">true\u003C/code>):\u003C/strong>\n\u003Cul>\n\u003Cli>The outer \u003Ccode dir=\"auto\">TL.bind\u003C/code> executes the \u003Ccode dir=\"auto\">if isVisible then\u003C/code> branch.\u003C/li>\n\u003Cli>The inner \u003Ccode dir=\"auto\">TL.bind\u003C/code> (\u003Ccode dir=\"auto\">dataForSectionTimeline |> TL.bind createSectionWidgets\u003C/code>) is executed, creating its own scope (via \u003Ccode dir=\"auto\">DependencyCore.createScope\u003C/code>) and dependencies for widget creation. The result (\u003Ccode dir=\"auto\">Timeline&#x3C;WidgetSet>\u003C/code>) is mapped to \u003Ccode dir=\"auto\">Some\u003C/code>, becoming the \u003Ccode dir=\"auto\">innerTimeline\u003C/code> for the \u003Cem>outer\u003C/em> \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/li>\n\u003Cli>A scope is created by the outer \u003Ccode dir=\"auto\">TL.bind\u003C/code> (and \u003Ccode dir=\"auto\">DependencyCore\u003C/code>) associated with this \u003Ccode dir=\"auto\">innerTimeline\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Deactivation (\u003Ccode dir=\"auto\">isSectionVisibleTimeline\u003C/code> becomes \u003Ccode dir=\"auto\">false\u003C/code>):\u003C/strong>\n\u003Cul>\n\u003Cli>The outer \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s reaction is triggered \u003Cstrong>again\u003C/strong> because its source (\u003Ccode dir=\"auto\">isSectionVisibleTimeline\u003C/code>) updated.\u003C/li>\n\u003Cli>\u003Cstrong>Crucially:\u003C/strong> Before executing the new logic (\u003Ccode dir=\"auto\">if isVisible then ... else ...\u003C/code>), the \u003Ccode dir=\"auto\">DependencyCore\u003C/code> is instructed (by the outer \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s internal mechanism described in Chapter 6) to \u003Cstrong>dispose of the previously active scope\u003C/strong> associated with the outer \u003Ccode dir=\"auto\">TL.bind\u003C/code>. This previous scope contained the entire reactive structure generated when \u003Ccode dir=\"auto\">isVisible\u003C/code> was \u003Ccode dir=\"auto\">true\u003C/code> (i.e., the \u003Ccode dir=\"auto\">Timeline\u003C/code> resulting from \u003Ccode dir=\"auto\">dataForSectionTimeline |> TL.bind ... |> TL.map ...\u003C/code> and all its internal dependencies).\u003C/li>\n\u003Cli>The \u003Ccode dir=\"auto\">else\u003C/code> branch executes, returning \u003Ccode dir=\"auto\">TL.ID None\u003C/code> as the new \u003Ccode dir=\"auto\">innerTimeline\u003C/code>.\u003C/li>\n\u003Cli>A new, minimal scope is created by the outer \u003Ccode dir=\"auto\">TL.bind\u003C/code> for this static \u003Ccode dir=\"auto\">None\u003C/code> value.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>The result is that when the controlling lifecycle \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">isSectionVisibleTimeline\u003C/code>) signals deactivation, the entire reactive subgraph responsible for the active state is automatically and completely cleaned up through the standard scope disposal mechanism of the \u003Cem>outer\u003C/em> \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"74-the-role-of-tlmap-in-automatic-management\">7.4 The Role of \u003Ccode dir=\"auto\">TL.map\u003C/code> in Automatic Management\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#74-the-role-of-tlmap-in-automatic-management\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.4 The Role of TL.map in Automatic Management”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Users naturally employ \u003Ccode dir=\"auto\">TL.map\u003C/code> for various transformations. How does it fit into this automatic management scheme?\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Direct vs. Indirect Cleanup:\u003C/strong> \u003Ccode dir=\"auto\">TL.map\u003C/code> creates persistent dependencies (\u003Ccode dir=\"auto\">sourceTimeline |> TL.map f\u003C/code> results in a \u003Ccode dir=\"auto\">resultTimeline\u003C/code> dependent on \u003Ccode dir=\"auto\">sourceTimeline\u003C/code>) that are not directly tied to a \u003Ccode dir=\"auto\">TL.bind\u003C/code> scope \u003Cem>unless the map operation itself is nested within a \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s monadic function\u003C/em>. \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s \u003Ccode dir=\"auto\">disposeScope\u003C/code> does not \u003Cem>directly\u003C/em> target \u003Ccode dir=\"auto\">TL.map\u003C/code>-created dependencies that exist outside its managed scope.\u003C/li>\n\u003Cli>\u003Cstrong>Cleanup via Containment:\u003C/strong> However, if a \u003Ccode dir=\"auto\">TL.map\u003C/code> operation occurs \u003Cem>within the function passed to \u003Ccode dir=\"auto\">TL.bind\u003C/code>\u003C/em>, the \u003Ccode dir=\"auto\">Timeline\u003C/code> instances created by that \u003Ccode dir=\"auto\">TL.map\u003C/code> (and the dependency itself) become part of the resources managed \u003Cem>indirectly\u003C/em> by the \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s scope.\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame not-content\">\u003Cfigcaption class=\"header\">\u003C/figcaption>\u003Cpre data-language=\"fsharp\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// ... inside the outer bind from the previous example ...\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// if isVisible then\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     dataForSectionTimeline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     |> TL.map (fun data -> processData data) // timelineMapped\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     |> TL.bind (fun processedData -> createWidgets processedData) // timelineBound (this is the innerTimeline for the outer bind)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     |> TL.map Some // Final transformation for the outer bind's result type\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">// else\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#919F9F;--1:#5D6376\">//     TL.ID None\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// ... inside the outer bind from the previous example ...// if isVisible then//     dataForSectionTimeline//     |> TL.map (fun data -> processData data) // timelineMapped//     |> TL.bind (fun processedData -> createWidgets processedData) // timelineBound (this is the innerTimeline for the outer bind)//     |> TL.map Some // Final transformation for the outer bind&#x27;s result type// else//     TL.ID None\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\nWhen \u003Ccode dir=\"auto\">isVisible\u003C/code> becomes \u003Ccode dir=\"auto\">false\u003C/code>, the outer \u003Ccode dir=\"auto\">TL.bind\u003C/code> disposes of the scope associated with its \u003Ccode dir=\"auto\">innerTimeline\u003C/code> (which was \u003Ccode dir=\"auto\">timelineBound |> TL.map Some\u003C/code>). This effectively removes the reactive connection from \u003Ccode dir=\"auto\">timelineBound\u003C/code> (and subsequently from \u003Ccode dir=\"auto\">timelineMapped\u003C/code> if its only downstream consumer was \u003Ccode dir=\"auto\">timelineBound\u003C/code>) to the final \u003Ccode dir=\"auto\">sectionWidgetsTimeline\u003C/code>. If \u003Ccode dir=\"auto\">timelineMapped\u003C/code> and \u003Ccode dir=\"auto\">timelineBound\u003C/code> are no longer reachable from anywhere else in the application graph (which is often the case if they were only created and used within this \u003Ccode dir=\"auto\">bind\u003C/code>’s monadic function), they become eligible for standard .NET Garbage Collection. When the GC collects these \u003Ccode dir=\"auto\">Timeline\u003C/code> objects, \u003Ccode dir=\"auto\">DependencyCore\u003C/code> can eventually release associated internal tracking information for their \u003Ccode dir=\"auto\">TimelineId\u003C/code>s if no active dependencies remain.\u003C/li>\n\u003Cli>\u003Cstrong>Top-Level \u003Ccode dir=\"auto\">TL.map\u003C/code>:\u003C/strong> A \u003Ccode dir=\"auto\">TL.map\u003C/code> operation applied at the top level or outside any managing \u003Ccode dir=\"auto\">TL.bind\u003C/code> scope will create a persistent dependency that lives as long as its source and result \u003Ccode dir=\"auto\">Timeline\u003C/code>s are actively part of the reachable dependency graph.\u003C/li>\n\u003C/ul>\n\u003Cp>In essence, while \u003Ccode dir=\"auto\">TL.bind\u003C/code> doesn’t directly target external \u003Ccode dir=\"auto\">TL.map\u003C/code> dependencies for removal, structuring the application so that related \u003Ccode dir=\"auto\">TL.map\u003C/code> operations occur \u003Cem>within\u003C/em> \u003Ccode dir=\"auto\">TL.bind\u003C/code>-managed lifecycles ensures they are effectively cleaned up when the encompassing scope is disposed.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"75-guidance-choosing-tlmap-vs-tlbind-for-automatic-management\">7.5 Guidance: Choosing \u003Ccode dir=\"auto\">TL.map\u003C/code> vs. \u003Ccode dir=\"auto\">TL.bind\u003C/code> for Automatic Management\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#75-guidance-choosing-tlmap-vs-tlbind-for-automatic-management\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.5 Guidance: Choosing TL.map vs. TL.bind for Automatic Management”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>The key to leveraging automatic resource management lies in correctly choosing between \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Use \u003Ccode dir=\"auto\">TL.map\u003C/code> when:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>The transformation is a simple, stateless projection of a value (\u003Ccode dir=\"auto\">'a -> 'b\u003C/code>).\u003C/li>\n\u003Cli>No new reactive context, data source switching, or lifecycle management of the transformation itself is involved.\u003C/li>\n\u003Cli>The resulting dependency should logically persist as long as the source exists and is part of an active graph.\u003C/li>\n\u003Cli>Examples: \u003Ccode dir=\"auto\">fun x -> x * 2\u003C/code>, \u003Ccode dir=\"auto\">fun x -> sprintf \"Value: %d\" x\u003C/code>, \u003Ccode dir=\"auto\">fun user -> user.Name\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Use \u003Ccode dir=\"auto\">TL.bind\u003C/code> when:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>The transformation logic itself needs to return a \u003Ccode dir=\"auto\">Timeline\u003C/code> (\u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>). This is common for asynchronous operations (as seen in Unit 4, Chapter 4), state-dependent behaviors, or selecting different reactive sources based on input.\u003C/li>\n\u003Cli>\u003Cstrong>Crucially:\u003C/strong> Even if the core logic seems implementable with \u003Ccode dir=\"auto\">TL.map\u003C/code> (i.e., it’s just \u003Ccode dir=\"auto\">'a -> 'b\u003C/code>), use \u003Ccode dir=\"auto\">TL.bind\u003C/code> if the entire transformation block (including any \u003Ccode dir=\"auto\">TL.map\u003C/code>s within it) should only be “active” and its resulting \u003Ccode dir=\"auto\">Timeline\u003C/code> connected to the graph based on some external condition or lifecycle state (\u003Ccode dir=\"auto\">Timeline&#x3C;bool>\u003C/code> or similar). Encapsulate the logic (potentially containing \u003Ccode dir=\"auto\">TL.map\u003C/code>s) within a function that returns a \u003Ccode dir=\"auto\">Timeline\u003C/code> (e.g., \u003Ccode dir=\"auto\">fun 'a -> TL.ID (original_map_logic 'a)\u003C/code> or \u003Ccode dir=\"auto\">fun 'a -> if condition then (original_map_logic 'a |> TL.map Some|> TL.ID) else TL.ID None\u003C/code>), and pass this function to \u003Ccode dir=\"auto\">TL.bind\u003C/code>. This ensures the entire block’s resources are tied to the \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s scope.\u003C/li>\n\u003Cli>Examples: \u003Ccode dir=\"auto\">fun id -> fetchApiData id\u003C/code> (returns \u003Ccode dir=\"auto\">Timeline&#x3C;ApiResponse>\u003C/code>), \u003Ccode dir=\"auto\">fun state -> selectAnimationTimeline state\u003C/code> (returns \u003Ccode dir=\"auto\">Timeline&#x3C;Animation>\u003C/code>), \u003Ccode dir=\"auto\">fun isVisible -> if isVisible then createViewTimeline() else TL.ID None\u003C/code> (lifecycle management).\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Thinking Process for Selection:\u003C/strong>\u003C/p>\n\u003Cp>When transforming \u003Ccode dir=\"auto\">timelineA\u003C/code> with a function \u003Ccode dir=\"auto\">f_logic\u003C/code>:\u003C/p>\n\u003Col>\n\u003Cli>Is \u003Ccode dir=\"auto\">f_logic\u003C/code> just mapping value \u003Ccode dir=\"auto\">a\u003C/code> to a plain value \u003Ccode dir=\"auto\">b\u003C/code> (\u003Ccode dir=\"auto\">'a -> 'b\u003C/code>), and this mapping should always be active if \u003Ccode dir=\"auto\">timelineA\u003C/code> is active? -> Use \u003Ccode dir=\"auto\">timelineA |> TL.map f_logic\u003C/code>.\u003C/li>\n\u003Cli>Does \u003Ccode dir=\"auto\">f_logic\u003C/code> itself need to return a \u003Ccode dir=\"auto\">Timeline&#x3C;'b>\u003C/code> (\u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>), OR should the entire computation involving \u003Ccode dir=\"auto\">f_logic\u003C/code> (even if it’s just an \u003Ccode dir=\"auto\">'a -> 'b\u003C/code> transformation internally) be active/inactive and its resulting \u003Ccode dir=\"auto\">Timeline\u003C/code> managed based on \u003Ccode dir=\"auto\">timelineA\u003C/code>’s value or another lifecycle \u003Ccode dir=\"auto\">Timeline\u003C/code>? -> Use \u003Ccode dir=\"auto\">TL.bind\u003C/code>. Wrap the overall logic to fit the \u003Ccode dir=\"auto\">'input -> Timeline&#x3C;'output>\u003C/code> signature for \u003Ccode dir=\"auto\">TL.bind\u003C/code>.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Efficiency Considerations: \u003Ccode dir=\"auto\">TL.map\u003C/code> vs. \u003Ccode dir=\"auto\">TL.bind\u003C/code> Overhead\u003C/strong>\u003C/p>\n\u003Cp>Beyond resource management, there’s a crucial difference in \u003Cstrong>efficiency\u003C/strong>, especially with frequently updating \u003Ccode dir=\"auto\">Timeline\u003C/code>s.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">TL.map\u003C/code> Efficiency:\u003C/strong> \u003Ccode dir=\"auto\">let timelineB = timelineA |> TL.map f\u003C/code> creates \u003Ccode dir=\"auto\">timelineB\u003C/code> \u003Cstrong>once\u003C/strong>. When \u003Ccode dir=\"auto\">timelineA\u003C/code> updates, only \u003Ccode dir=\"auto\">f\u003C/code> (\u003Ccode dir=\"auto\">'a -> 'b\u003C/code>) executes for the existing \u003Ccode dir=\"auto\">timelineB\u003C/code>. This is efficient for simple value transformations.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode dir=\"auto\">TL.bind\u003C/code> Overhead:\u003C/strong> \u003Ccode dir=\"auto\">let timelineB = timelineA |> TL.bind g\u003C/code>. The monadic function \u003Ccode dir=\"auto\">g\u003C/code> (\u003Ccode dir=\"auto\">'a -> Timeline&#x3C;'b>\u003C/code>) returns a new \u003Ccode dir=\"auto\">innerTimeline\u003C/code> \u003Cstrong>each time \u003Ccode dir=\"auto\">g\u003C/code> is executed\u003C/strong> (i.e., when \u003Ccode dir=\"auto\">timelineA\u003C/code> updates). This means \u003Ccode dir=\"auto\">TL.bind\u003C/code> conceptually generates a new \u003Ccode dir=\"auto\">Timeline\u003C/code> context on each update of \u003Ccode dir=\"auto\">timelineA\u003C/code>. This inherently involves more overhead than \u003Ccode dir=\"auto\">TL.map\u003C/code> (executing \u003Ccode dir=\"auto\">g\u003C/code>, \u003Ccode dir=\"auto\">Timeline\u003C/code> generation, \u003Ccode dir=\"auto\">DependencyCore\u003C/code> interactions for scope and dependency management).\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Therefore, for \u003Ccode dir=\"auto\">Timeline\u003C/code>s that update at a high frequency, using \u003Ccode dir=\"auto\">TL.bind\u003C/code> where a simple \u003Ccode dir=\"auto\">TL.map\u003C/code> would suffice from a value transformation perspective can introduce unnecessary overhead and should be avoided.\u003C/strong> While \u003Ccode dir=\"auto\">TL.bind\u003C/code> is essential for lifecycle management and dynamic context switching, \u003Ccode dir=\"auto\">TL.map\u003C/code> is more performant for straightforward, high-frequency value transformations that don’t require their own lifecycle management. Balancing automatic resource management (\u003Ccode dir=\"auto\">TL.bind\u003C/code>) and performance (\u003Ccode dir=\"auto\">TL.map\u003C/code>) is key.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"76-conclusion-embracing-full-automatic-management\">7.6 Conclusion: Embracing Full Automatic Management\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#76-conclusion-embracing-full-automatic-management\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.6 Conclusion: Embracing Full Automatic Management”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>This \u003Ccode dir=\"auto\">Timeline\u003C/code> library, through the \u003Ccode dir=\"auto\">DependencyCore\u003C/code> and the sophisticated scope management within \u003Ccode dir=\"auto\">TL.bind\u003C/code> (as detailed in Chapter 6), enables a powerful paradigm: \u003Cstrong>full automatic resource management\u003C/strong>. By:\u003C/p>\n\u003Col>\n\u003Cli>Modeling component or feature lifecycles explicitly using \u003Ccode dir=\"auto\">Timeline\u003C/code>s.\u003C/li>\n\u003Cli>Using \u003Ccode dir=\"auto\">TL.bind\u003C/code> to conditionally execute reactive logic (and thus establish or tear down reactive subgraphs) based on these lifecycle \u003Ccode dir=\"auto\">Timeline\u003C/code>s.\u003C/li>\n\u003Cli>Applying the \u003Ccode dir=\"auto\">TL.map\u003C/code>/\u003Ccode dir=\"auto\">TL.bind\u003C/code> distinction correctly, considering both resource management needs and efficiency.\u003C/li>\n\u003C/ol>\n\u003Cp>Developers can construct complex, dynamic applications where the creation \u003Cem>and destruction\u003C/em> of reactive dependencies are handled automatically and reliably by the library itself.\u003C/p>\n\u003Cp>Consequently, \u003Cstrong>manual disposal APIs (\u003Ccode dir=\"auto\">dispose\u003C/code>, \u003Ccode dir=\"auto\">unsubscribe\u003C/code>, etc.) are deemed unnecessary and potentially harmful\u003C/strong> within this framework. Providing such APIs would risk circumventing \u003Ccode dir=\"auto\">DependencyCore\u003C/code>’s carefully managed graph, leading to inconsistencies and potential errors.\u003C/p>\n\u003Cp>The intended approach is to rely entirely on the automatic mechanisms, structuring the application logic declaratively using \u003Ccode dir=\"auto\">Timeline\u003C/code>, \u003Ccode dir=\"auto\">TL.map\u003C/code>, and especially \u003Ccode dir=\"auto\">TL.bind\u003C/code>, ideally with the assistance of knowledgeable AI.\u003C/p>\n\u003Cdiv class=\"sl-heading-wrapper level-h2\">\u003Ch2 id=\"77-the-solution-is-ai-achieving-perfect-implementation-instantly\">7.7 The Solution is AI: Achieving Perfect Implementation Instantly\u003C/h2>\u003Ca class=\"sl-anchor-link\" href=\"#77-the-solution-is-ai-achieving-perfect-implementation-instantly\">\u003Cspan aria-hidden=\"true\" class=\"sl-anchor-icon\">\u003Csvg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\u003Cpath fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\">\u003C/path>\u003C/svg>\u003C/span>\u003Cspan class=\"sr-only\">Section titled “7.7 The Solution is AI: Achieving Perfect Implementation Instantly”\u003C/span>\u003C/a>\u003C/div>\n\u003Cp>Section 7.5 provided guidance on the crucial choice between \u003Ccode dir=\"auto\">TL.map\u003C/code> and \u003Ccode dir=\"auto\">TL.bind\u003C/code>. However, consistently applying this perfectly can be challenging.\u003C/p>\n\u003Cp>\u003Cstrong>But this is not a problem.\u003C/strong> With powerful AI assistants, this human difficulty is mitigated.\u003C/p>\n\u003Cp>\u003Cstrong>Simply provide this \u003Ccode dir=\"auto\">Timeline\u003C/code> library’s source code and this documentation to a capable AI assistant.\u003C/strong> The AI can grasp the design philosophy, \u003Ccode dir=\"auto\">DependencyCore\u003C/code> intricacies, \u003Ccode dir=\"auto\">TL.bind\u003C/code>’s scope-based cleanup, \u003Ccode dir=\"auto\">TL.map\u003C/code>’s efficiency, and lifecycle modeling patterns.\u003C/p>\n\u003Cp>Armed with this knowledge, the AI can:\u003C/p>\n\u003Cul>\n\u003Cli>Analyze application requirements.\u003C/li>\n\u003Cli>Automatically choose \u003Ccode dir=\"auto\">TL.map\u003C/code> or \u003Ccode dir=\"auto\">TL.bind\u003C/code> optimally.\u003C/li>\n\u003Cli>Correctly structure nested \u003Ccode dir=\"auto\">TL.bind\u003C/code> for flawless lifecycle management.\u003C/li>\n\u003Cli>Generate code adhering to automatic resource management and efficiency principles.\u003C/li>\n\u003C/ul>\n\u003Cp>Forget manual subscription tracking. \u003Cstrong>Let AI handle it.\u003C/strong> Collaborating with an AI that understands this framework allows a level of safety, efficiency, and correctness previously hard to attain consistently.\u003C/p>\n\u003Cp>\u003Cstrong>The path forward is clear: Leverage AI to build sophisticated, robust, and automatically managed applications using this \u003Ccode dir=\"auto\">Timeline\u003C/code> library. Delegate the implementation details and achieve perfect results instantly.\u003C/strong>\u003C/p>",{"headings":2363,"localImagePaths":2385,"remoteImagePaths":2386,"frontmatter":2387,"imagePaths":2388},[2364,2367,2370,2373,2376,2379,2382],{"depth":182,"slug":2365,"text":2366},"71-introduction-beyond-binds-internal-cleanup","7.1 Introduction: Beyond bind’s Internal Cleanup",{"depth":182,"slug":2368,"text":2369},"72-the-challenge-managing-top-level-component-lifecycles","7.2 The Challenge: Managing Top-Level Component Lifecycles",{"depth":182,"slug":2371,"text":2372},"73-the-solution-modeling-lifecycles-with-timeline-and-nested-bind","7.3 The Solution: Modeling Lifecycles with Timeline and Nested bind",{"depth":182,"slug":2374,"text":2375},"74-the-role-of-tlmap-in-automatic-management","7.4 The Role of TL.map in Automatic Management",{"depth":182,"slug":2377,"text":2378},"75-guidance-choosing-tlmap-vs-tlbind-for-automatic-management","7.5 Guidance: Choosing TL.map vs. TL.bind for Automatic Management",{"depth":182,"slug":2380,"text":2381},"76-conclusion-embracing-full-automatic-management","7.6 Conclusion: Embracing Full Automatic Management",{"depth":182,"slug":2383,"text":2384},"77-the-solution-is-ai-achieving-perfect-implementation-instantly","7.7 The Solution is AI: Achieving Perfect Implementation Instantly",[],[],{"title":2352,"description":2353},[],"ja/book/unit-0/section-1/0-pipeline",{"id":2389,"data":2391,"body":197,"filePath":2395,"digest":199,"rendered":2396},{"title":192,"description":193,"editUrl":16,"head":2392,"template":18,"sidebar":2393,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2394},{},"src/content/docs/ja/book/unit-0/section-1/0-pipeline.md",{"html":201,"metadata":2397},{"headings":2398,"localImagePaths":2399,"remoteImagePaths":2400,"frontmatter":2401,"imagePaths":2402},[],[],[],{"title":192,"description":193},[],"ja/book/unit-0/section-1/1-other-concepts",{"id":2403,"data":2405,"body":216,"filePath":2409,"digest":218,"rendered":2410},{"title":211,"description":212,"editUrl":16,"head":2406,"template":18,"sidebar":2407,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2408},{},"src/content/docs/ja/book/unit-0/section-1/1-other-concepts.md",{"html":220,"metadata":2411},{"headings":2412,"localImagePaths":2413,"remoteImagePaths":2414,"frontmatter":2415,"imagePaths":2416},[],[],[],{"title":211,"description":212},[],"ja/book/unit-0/section-1/2-unifying-power",{"id":2417,"data":2419,"body":235,"filePath":2423,"digest":237,"rendered":2424},{"title":230,"description":231,"editUrl":16,"head":2420,"template":18,"sidebar":2421,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2422},{},"src/content/docs/ja/book/unit-0/section-1/2-unifying-power.md",{"html":239,"metadata":2425},{"headings":2426,"localImagePaths":2430,"remoteImagePaths":2431,"frontmatter":2432,"imagePaths":2433},[2427,2428,2429],{"depth":182,"slug":243,"text":244},{"depth":182,"slug":246,"text":247},{"depth":182,"slug":249,"text":250},[],[],{"title":230,"description":231},[],"ja/book/unit-1/section-0/0-about-unit",{"id":2434,"data":2436,"body":294,"filePath":2440,"digest":296,"rendered":2441},{"title":289,"description":290,"editUrl":16,"head":2437,"template":18,"sidebar":2438,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2439},{},"src/content/docs/ja/book/unit-1/section-0/0-about-unit.md",{"html":298,"metadata":2442},{"headings":2443,"localImagePaths":2444,"remoteImagePaths":2445,"frontmatter":2446,"imagePaths":2447},[],[],[],{"title":289,"description":290},[],"ja/book/unit-1/section-2/0-expression",{"id":2448,"data":2450,"body":422,"filePath":2454,"digest":424,"rendered":2455},{"title":417,"description":418,"editUrl":16,"head":2451,"template":18,"sidebar":2452,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2453},{},"src/content/docs/ja/book/unit-1/section-2/0-expression.md",{"html":426,"metadata":2456},{"headings":2457,"localImagePaths":2460,"remoteImagePaths":2461,"frontmatter":2462,"imagePaths":2463},[2458,2459],{"depth":182,"slug":430,"text":431},{"depth":182,"slug":433,"text":434},[],[],{"title":417,"description":418},[],"ja/book/unit-1/section-2/1-first-class-function",{"id":2464,"data":2466,"body":335,"filePath":2470,"digest":337,"rendered":2471},{"title":330,"description":331,"editUrl":16,"head":2467,"template":18,"sidebar":2468,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2469},{},"src/content/docs/ja/book/unit-1/section-2/1-first-class-function.md",{"html":339,"metadata":2472},{"headings":2473,"localImagePaths":2476,"remoteImagePaths":2477,"frontmatter":2478,"imagePaths":2479},[2474,2475],{"depth":182,"slug":343,"text":344},{"depth":182,"slug":346,"text":347},[],[],{"title":330,"description":331},[],"ja/book/unit-1/section-2/2-hof",{"id":2480,"data":2482,"body":313,"filePath":2486,"digest":315,"rendered":2487},{"title":308,"description":309,"editUrl":16,"head":2483,"template":18,"sidebar":2484,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2485},{},"src/content/docs/ja/book/unit-1/section-2/2-hof.md",{"html":317,"metadata":2488},{"headings":2489,"localImagePaths":2491,"remoteImagePaths":2492,"frontmatter":2493,"imagePaths":2494},[2490],{"depth":182,"slug":321,"text":322},[],[],{"title":308,"description":309},[],"ja/book/unit-1/section-3/0-types",{"id":2495,"data":2497,"body":447,"filePath":2501,"digest":449,"rendered":2502},{"title":442,"description":443,"editUrl":16,"head":2498,"template":18,"sidebar":2499,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2500},{},"src/content/docs/ja/book/unit-1/section-3/0-types.md",{"html":451,"metadata":2503},{"headings":2504,"localImagePaths":2511,"remoteImagePaths":2512,"frontmatter":2513,"imagePaths":2514},[2505,2506,2507,2508,2509,2510],{"depth":182,"slug":455,"text":456},{"depth":182,"slug":458,"text":459},{"depth":182,"slug":461,"text":462},{"depth":464,"slug":465,"text":466},{"depth":182,"slug":468,"text":469},{"depth":182,"slug":408,"text":409},[],[],{"title":442,"description":443},[],"ja/book/unit-1/section-3/1-lambda",{"id":2515,"data":2517,"body":651,"filePath":2521,"digest":653,"rendered":2522},{"title":646,"description":647,"editUrl":16,"head":2518,"template":18,"sidebar":2519,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2520},{},"src/content/docs/ja/book/unit-1/section-3/1-lambda.md",{"html":655,"metadata":2523},{"headings":2524,"localImagePaths":2531,"remoteImagePaths":2532,"frontmatter":2533,"imagePaths":2534},[2525,2526,2527,2528,2529,2530],{"depth":182,"slug":659,"text":660},{"depth":182,"slug":662,"text":663},{"depth":182,"slug":665,"text":666},{"depth":182,"slug":668,"text":669},{"depth":182,"slug":671,"text":672},{"depth":182,"slug":408,"text":409},[],[],{"title":646,"description":647},[],"ja/book/unit-1/section-4/1-operator-function",{"id":2535,"data":2537,"body":569,"filePath":2541,"digest":571,"rendered":2542},{"title":564,"description":565,"editUrl":16,"head":2538,"template":18,"sidebar":2539,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2540},{},"src/content/docs/ja/book/unit-1/section-4/1-operator-function.md",{"html":573,"metadata":2543},{"headings":2544,"localImagePaths":2549,"remoteImagePaths":2550,"frontmatter":2551,"imagePaths":2552},[2545,2546,2547,2548],{"depth":182,"slug":577,"text":578},{"depth":182,"slug":580,"text":581},{"depth":182,"slug":583,"text":584},{"depth":182,"slug":408,"text":409},[],[],{"title":564,"description":565},[],"ja/book/unit-1/section-4/0-binary-operation",{"id":2553,"data":2555,"body":394,"filePath":2559,"digest":396,"rendered":2560},{"title":389,"description":390,"editUrl":16,"head":2556,"template":18,"sidebar":2557,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2558},{},"src/content/docs/ja/book/unit-1/section-4/0-binary-operation.md",{"html":398,"metadata":2561},{"headings":2562,"localImagePaths":2566,"remoteImagePaths":2567,"frontmatter":2568,"imagePaths":2569},[2563,2564,2565],{"depth":182,"slug":402,"text":403},{"depth":182,"slug":405,"text":406},{"depth":182,"slug":408,"text":409},[],[],{"title":389,"description":390},[],"ja/book/unit-1/section-4/2-curry-partial",{"id":2570,"data":2572,"body":686,"filePath":2576,"digest":688,"rendered":2577},{"title":681,"description":682,"editUrl":16,"head":2573,"template":18,"sidebar":2574,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2575},{},"src/content/docs/ja/book/unit-1/section-4/2-curry-partial.md",{"html":690,"metadata":2578},{"headings":2579,"localImagePaths":2586,"remoteImagePaths":2587,"frontmatter":2588,"imagePaths":2589},[2580,2581,2582,2583,2584,2585],{"depth":182,"slug":694,"text":695},{"depth":182,"slug":697,"text":698},{"depth":182,"slug":700,"text":701},{"depth":182,"slug":703,"text":704},{"depth":182,"slug":706,"text":707},{"depth":182,"slug":408,"text":409},[],[],{"title":681,"description":682},[],"ja/book/unit-1/section-5/0-terminology",{"id":2590,"data":2592,"body":360,"filePath":2596,"digest":362,"rendered":2597},{"title":355,"description":356,"editUrl":16,"head":2593,"template":18,"sidebar":2594,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2595},{},"src/content/docs/ja/book/unit-1/section-5/0-terminology.md",{"html":364,"metadata":2598},{"headings":2599,"localImagePaths":2605,"remoteImagePaths":2606,"frontmatter":2607,"imagePaths":2608},[2600,2601,2602,2603,2604],{"depth":182,"slug":368,"text":369},{"depth":182,"slug":371,"text":372},{"depth":182,"slug":374,"text":375},{"depth":182,"slug":377,"text":378},{"depth":182,"slug":380,"text":381},[],[],{"title":355,"description":356},[],"ja/book/unit-1/section-4/3-flip-pipe",{"id":2609,"data":2611,"body":721,"filePath":2615,"digest":723,"rendered":2616},{"title":716,"description":717,"editUrl":16,"head":2612,"template":18,"sidebar":2613,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2614},{},"src/content/docs/ja/book/unit-1/section-4/3-flip-pipe.md",{"html":725,"metadata":2617},{"headings":2618,"localImagePaths":2623,"remoteImagePaths":2624,"frontmatter":2625,"imagePaths":2626},[2619,2620,2621,2622],{"depth":182,"slug":729,"text":730},{"depth":182,"slug":732,"text":733},{"depth":182,"slug":735,"text":736},{"depth":464,"slug":738,"text":739},[],[],{"title":716,"description":717},[],"ja/book/unit-2/section-0/0-about-unit",{"id":2627,"data":2629,"body":752,"filePath":2633,"digest":754,"rendered":2634},{"title":747,"description":748,"editUrl":16,"head":2630,"template":18,"sidebar":2631,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2632},{},"src/content/docs/ja/book/unit-2/section-0/0-about-unit.md",{"html":756,"metadata":2635},{"headings":2636,"localImagePaths":2637,"remoteImagePaths":2638,"frontmatter":2639,"imagePaths":2640},[],[],[],{"title":747,"description":748},[],"ja/book/unit-2/section-3/0-composition",{"id":2641,"data":2643,"body":898,"filePath":2647,"digest":900,"rendered":2648},{"title":893,"description":894,"editUrl":16,"head":2644,"template":18,"sidebar":2645,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2646},{},"src/content/docs/ja/book/unit-2/section-3/0-composition.md",{"html":902,"metadata":2649},{"headings":2650,"localImagePaths":2656,"remoteImagePaths":2657,"frontmatter":2658,"imagePaths":2659},[2651,2652,2653,2654,2655],{"depth":182,"slug":906,"text":907},{"depth":182,"slug":909,"text":910},{"depth":182,"slug":912,"text":913},{"depth":182,"slug":915,"text":916},{"depth":182,"slug":918,"text":919},[],[],{"title":893,"description":894},[],"ja/book/unit-1/section-1/1-sequence",{"id":2660,"data":2662,"body":508,"filePath":2666,"digest":510,"rendered":2667},{"title":504,"description":479,"editUrl":16,"head":2663,"template":18,"sidebar":2664,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2665},{},"src/content/docs/ja/book/unit-1/section-1/1-sequence.md",{"html":512,"metadata":2668},{"headings":2669,"localImagePaths":2674,"remoteImagePaths":2675,"frontmatter":2676,"imagePaths":2677},[2670,2671,2672,2673],{"depth":182,"slug":516,"text":517},{"depth":182,"slug":519,"text":520},{"depth":182,"slug":408,"text":409},{"depth":523,"slug":524,"text":525},[],[],{"title":504,"description":479},[],"ja/book/unit-1/section-1/2-selection",{"id":2678,"data":2680,"body":483,"filePath":2684,"digest":485,"rendered":2685},{"title":478,"description":479,"editUrl":16,"head":2681,"template":18,"sidebar":2682,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2683},{},"src/content/docs/ja/book/unit-1/section-1/2-selection.md",{"html":487,"metadata":2686},{"headings":2687,"localImagePaths":2691,"remoteImagePaths":2692,"frontmatter":2693,"imagePaths":2694},[2688,2689,2690],{"depth":182,"slug":491,"text":492},{"depth":182,"slug":494,"text":495},{"depth":182,"slug":408,"text":409},[],[],{"title":478,"description":479},[],"ja/book/unit-1/section-1/0-control-flow",{"id":2695,"data":2697,"body":263,"filePath":2701,"digest":265,"rendered":2702},{"title":258,"description":259,"editUrl":16,"head":2698,"template":18,"sidebar":2699,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2700},{},"src/content/docs/ja/book/unit-1/section-1/0-control-flow.md",{"html":267,"metadata":2703},{"headings":2704,"localImagePaths":2709,"remoteImagePaths":2710,"frontmatter":2711,"imagePaths":2712},[2705,2706,2707,2708],{"depth":182,"slug":271,"text":272},{"depth":182,"slug":274,"text":275},{"depth":182,"slug":277,"text":278},{"depth":182,"slug":280,"text":281},[],[],{"title":258,"description":259},[],"ja/book/unit-1/section-1/3-iteration",{"id":2713,"data":2715,"body":537,"filePath":2719,"digest":539,"rendered":2720},{"title":533,"description":479,"editUrl":16,"head":2716,"template":18,"sidebar":2717,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2718},{},"src/content/docs/ja/book/unit-1/section-1/3-iteration.md",{"html":541,"metadata":2721},{"headings":2722,"localImagePaths":2728,"remoteImagePaths":2729,"frontmatter":2730,"imagePaths":2731},[2723,2724,2725,2726,2727],{"depth":182,"slug":545,"text":546},{"depth":464,"slug":548,"text":549},{"depth":182,"slug":551,"text":552},{"depth":523,"slug":554,"text":555},{"depth":182,"slug":408,"text":409},[],[],{"title":533,"description":479},[],"ja/book/unit-1/section-1/4-recursion",{"id":2732,"data":2734,"body":598,"filePath":2738,"digest":600,"rendered":2739},{"title":593,"description":594,"editUrl":16,"head":2735,"template":18,"sidebar":2736,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2737},{},"src/content/docs/ja/book/unit-1/section-1/4-recursion.md",{"html":602,"metadata":2740},{"headings":2741,"localImagePaths":2754,"remoteImagePaths":2755,"frontmatter":2756,"imagePaths":2757},[2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753],{"depth":182,"slug":606,"text":607},{"depth":182,"slug":609,"text":610},{"depth":523,"slug":612,"text":613},{"depth":182,"slug":615,"text":616},{"depth":523,"slug":618,"text":619},{"depth":182,"slug":621,"text":622},{"depth":182,"slug":624,"text":625},{"depth":182,"slug":627,"text":628},{"depth":523,"slug":630,"text":631},{"depth":523,"slug":633,"text":634},{"depth":523,"slug":636,"text":637},{"depth":182,"slug":408,"text":409},[],[],{"title":593,"description":594},[],"ja/book/unit-2/section-2/0-associativity",{"id":2758,"data":2760,"body":811,"filePath":2764,"digest":813,"rendered":2765},{"title":806,"description":807,"editUrl":16,"head":2761,"template":18,"sidebar":2762,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2763},{},"src/content/docs/ja/book/unit-2/section-2/0-associativity.md",{"html":815,"metadata":2766},{"headings":2767,"localImagePaths":2771,"remoteImagePaths":2772,"frontmatter":2773,"imagePaths":2774},[2768,2769,2770],{"depth":182,"slug":819,"text":820},{"depth":182,"slug":822,"text":823},{"depth":182,"slug":825,"text":826},[],[],{"title":806,"description":807},[],"ja/book/unit-2/section-2/1-semigroup",{"id":2775,"data":2777,"body":771,"filePath":2781,"digest":773,"rendered":2782},{"title":766,"description":767,"editUrl":16,"head":2778,"template":18,"sidebar":2779,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2780},{},"src/content/docs/ja/book/unit-2/section-2/1-semigroup.md",{"html":775,"metadata":2783},{"headings":2784,"localImagePaths":2792,"remoteImagePaths":2793,"frontmatter":2794,"imagePaths":2795},[2785,2786,2787,2788,2789,2790,2791],{"depth":182,"slug":779,"text":780},{"depth":523,"slug":782,"text":783},{"depth":523,"slug":785,"text":786},{"depth":182,"slug":788,"text":789},{"depth":523,"slug":791,"text":792},{"depth":523,"slug":794,"text":795},{"depth":182,"slug":797,"text":798},[],[],{"title":766,"description":767},[],"ja/book/unit-2/section-2/2-identity-element",{"id":2796,"data":2798,"body":839,"filePath":2802,"digest":841,"rendered":2803},{"title":834,"description":835,"editUrl":16,"head":2799,"template":18,"sidebar":2800,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2801},{},"src/content/docs/ja/book/unit-2/section-2/2-identity-element.md",{"html":843,"metadata":2804},{"headings":2805,"localImagePaths":2811,"remoteImagePaths":2812,"frontmatter":2813,"imagePaths":2814},[2806,2807,2808,2809,2810],{"depth":182,"slug":847,"text":848},{"depth":182,"slug":850,"text":851},{"depth":523,"slug":853,"text":854},{"depth":523,"slug":856,"text":857},{"depth":523,"slug":859,"text":860},[],[],{"title":834,"description":835},[],"ja/book/unit-2/section-2/3-monoid",{"id":2815,"data":2817,"body":873,"filePath":2821,"digest":875,"rendered":2822},{"title":868,"description":869,"editUrl":16,"head":2818,"template":18,"sidebar":2819,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2820},{},"src/content/docs/ja/book/unit-2/section-2/3-monoid.md",{"html":877,"metadata":2823},{"headings":2824,"localImagePaths":2827,"remoteImagePaths":2828,"frontmatter":2829,"imagePaths":2830},[2825,2826],{"depth":182,"slug":881,"text":882},{"depth":182,"slug":884,"text":885},[],[],{"title":868,"description":869},[],"ja/book/unit-2/section-1/0-algebraic-structures",{"id":2831,"data":2833,"body":991,"filePath":2837,"digest":993,"rendered":2838},{"title":986,"description":987,"editUrl":16,"head":2834,"template":18,"sidebar":2835,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2836},{},"src/content/docs/ja/book/unit-2/section-1/0-algebraic-structures.md",{"html":995,"metadata":2839},{"headings":2840,"localImagePaths":2846,"remoteImagePaths":2847,"frontmatter":2848,"imagePaths":2849},[2841,2842,2843,2844,2845],{"depth":182,"slug":999,"text":1000},{"depth":182,"slug":1002,"text":1003},{"depth":182,"slug":1005,"text":1006},{"depth":182,"slug":1008,"text":1009},{"depth":182,"slug":1011,"text":1012},[],[],{"title":986,"description":987},[],"ja/book/unit-2/section-4/0-set-theory",{"id":2850,"data":2852,"body":1201,"filePath":2856,"digest":1203,"rendered":2857},{"title":1196,"description":1197,"editUrl":16,"head":2853,"template":18,"sidebar":2854,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2855},{},"src/content/docs/ja/book/unit-2/section-4/0-set-theory.md",{"html":1205,"metadata":2858},{"headings":2859,"localImagePaths":2868,"remoteImagePaths":2869,"frontmatter":2870,"imagePaths":2871},[2860,2861,2862,2863,2864,2865,2866,2867],{"depth":182,"slug":1209,"text":1210},{"depth":182,"slug":1212,"text":1213},{"depth":182,"slug":1215,"text":1216},{"depth":182,"slug":1218,"text":1219},{"depth":182,"slug":1221,"text":1222},{"depth":182,"slug":1224,"text":1225},{"depth":182,"slug":1227,"text":1228},{"depth":182,"slug":1230,"text":1231},[],[],{"title":1196,"description":1197},[],"ja/book/unit-2/section-4/1-container",{"id":2872,"data":2874,"body":1157,"filePath":2878,"digest":1159,"rendered":2879},{"title":1152,"description":1153,"editUrl":16,"head":2875,"template":18,"sidebar":2876,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2877},{},"src/content/docs/ja/book/unit-2/section-4/1-container.md",{"html":1161,"metadata":2880},{"headings":2881,"localImagePaths":2883,"remoteImagePaths":2884,"frontmatter":2885,"imagePaths":2886},[2882],{"depth":182,"slug":1165,"text":1166},[],[],{"title":1152,"description":1153},[],"ja/book/unit-2/section-4/2-functor",{"id":2887,"data":2889,"body":1263,"filePath":2893,"digest":1265,"rendered":2894},{"title":1258,"description":1259,"editUrl":16,"head":2890,"template":18,"sidebar":2891,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2892},{},"src/content/docs/ja/book/unit-2/section-4/2-functor.md",{"html":1267,"metadata":2895},{"headings":2896,"localImagePaths":2904,"remoteImagePaths":2905,"frontmatter":2906,"imagePaths":2907},[2897,2898,2899,2900,2901,2902,2903],{"depth":182,"slug":1271,"text":1272},{"depth":182,"slug":1274,"text":1275},{"depth":182,"slug":1277,"text":1278},{"depth":182,"slug":1280,"text":1281},{"depth":182,"slug":1283,"text":1284},{"depth":182,"slug":1286,"text":1287},{"depth":182,"slug":408,"text":409},[],[],{"title":1258,"description":1259},[],"ja/book/unit-2/section-6/1-category-functor-monad",{"id":2908,"data":2910,"body":954,"filePath":2914,"digest":956,"rendered":2915},{"title":949,"description":950,"editUrl":16,"head":2911,"template":18,"sidebar":2912,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2913},{},"src/content/docs/ja/book/unit-2/section-6/1-category-functor-monad.md",{"html":958,"metadata":2916},{"headings":2917,"localImagePaths":2924,"remoteImagePaths":2925,"frontmatter":2926,"imagePaths":2927},[2918,2919,2920,2921,2922,2923],{"depth":182,"slug":962,"text":963},{"depth":182,"slug":965,"text":966},{"depth":182,"slug":968,"text":969},{"depth":182,"slug":971,"text":972},{"depth":182,"slug":974,"text":975},{"depth":182,"slug":977,"text":978},[],[],{"title":949,"description":950},[],"ja/book/unit-2/section-6/0-functor-monad",{"id":2928,"data":2930,"body":932,"filePath":2934,"digest":934,"rendered":2935},{"title":927,"description":928,"editUrl":16,"head":2931,"template":18,"sidebar":2932,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2933},{},"src/content/docs/ja/book/unit-2/section-6/0-functor-monad.md",{"html":936,"metadata":2936},{"headings":2937,"localImagePaths":2939,"remoteImagePaths":2940,"frontmatter":2941,"imagePaths":2942},[2938],{"depth":182,"slug":940,"text":941},[],[],{"title":927,"description":928},[],"ja/book/unit-2/section-6/2-theory-functor",{"id":2943,"data":2945,"body":1047,"filePath":2949,"digest":1049,"rendered":2950},{"title":1042,"description":1043,"editUrl":16,"head":2946,"template":18,"sidebar":2947,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2948},{},"src/content/docs/ja/book/unit-2/section-6/2-theory-functor.md",{"html":1051,"metadata":2951},{"headings":2952,"localImagePaths":2957,"remoteImagePaths":2958,"frontmatter":2959,"imagePaths":2960},[2953,2954,2955,2956],{"depth":182,"slug":1055,"text":1056},{"depth":523,"slug":1058,"text":1059},{"depth":523,"slug":408,"text":409},{"depth":182,"slug":1062,"text":1063},[],[],{"title":1042,"description":1043},[],"ja/book/unit-2/section-6/3-theory-monad",{"id":2961,"data":2963,"body":1107,"filePath":2967,"digest":1109,"rendered":2968},{"title":1102,"description":1103,"editUrl":16,"head":2964,"template":18,"sidebar":2965,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2966},{},"src/content/docs/ja/book/unit-2/section-6/3-theory-monad.md",{"html":1111,"metadata":2969},{"headings":2970,"localImagePaths":2982,"remoteImagePaths":2983,"frontmatter":2984,"imagePaths":2985},[2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981],{"depth":182,"slug":1115,"text":1116},{"depth":182,"slug":1118,"text":1119},{"depth":523,"slug":1093,"text":1094},{"depth":182,"slug":1122,"text":1123},{"depth":182,"slug":1125,"text":1126},{"depth":182,"slug":1128,"text":1129},{"depth":182,"slug":1131,"text":1132},{"depth":523,"slug":1134,"text":1135},{"depth":523,"slug":1137,"text":1138},{"depth":523,"slug":1140,"text":1141},{"depth":182,"slug":1143,"text":1144},[],[],{"title":1102,"description":1103},[],"ja/book/unit-3/section-1/0-id",{"id":2986,"data":2988,"body":1320,"filePath":2992,"digest":1322,"rendered":2993},{"title":1315,"description":1316,"editUrl":16,"head":2989,"template":18,"sidebar":2990,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":2991},{},"src/content/docs/ja/book/unit-3/section-1/0-id.md",{"html":1324,"metadata":2994},{"headings":2995,"localImagePaths":2996,"remoteImagePaths":2997,"frontmatter":2998,"imagePaths":2999},[],[],[],{"title":1315,"description":1316},[],"ja/book/unit-3/section-0/0-about-unit",{"id":3000,"data":3002,"body":1301,"filePath":3006,"digest":1303,"rendered":3007},{"title":1296,"description":1297,"editUrl":16,"head":3003,"template":18,"sidebar":3004,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3005},{},"src/content/docs/ja/book/unit-3/section-0/0-about-unit.md",{"html":1305,"metadata":3008},{"headings":3009,"localImagePaths":3010,"remoteImagePaths":3011,"frontmatter":3012,"imagePaths":3013},[],[],[],{"title":1296,"description":1297},[],"ja/book/unit-2/section-5/0-another-bridge",{"id":3014,"data":3016,"body":1025,"filePath":3020,"digest":1027,"rendered":3021},{"title":1020,"description":1021,"editUrl":16,"head":3017,"template":18,"sidebar":3018,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3019},{},"src/content/docs/ja/book/unit-2/section-5/0-another-bridge.md",{"html":1029,"metadata":3022},{"headings":3023,"localImagePaths":3025,"remoteImagePaths":3026,"frontmatter":3027,"imagePaths":3028},[3024],{"depth":182,"slug":1033,"text":1034},[],[],{"title":1020,"description":1021},[],"ja/book/unit-2/section-5/1-kleisli",{"id":3029,"data":3031,"body":1179,"filePath":3035,"digest":1181,"rendered":3036},{"title":1174,"description":1175,"editUrl":16,"head":3032,"template":18,"sidebar":3033,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3034},{},"src/content/docs/ja/book/unit-2/section-5/1-kleisli.md",{"html":1183,"metadata":3037},{"headings":3038,"localImagePaths":3040,"remoteImagePaths":3041,"frontmatter":3042,"imagePaths":3043},[3039],{"depth":182,"slug":1187,"text":1188},[],[],{"title":1174,"description":1175},[],"ja/book/unit-2/section-5/2-monad",{"id":3044,"data":3046,"body":1076,"filePath":3050,"digest":1078,"rendered":3051},{"title":1071,"description":1072,"editUrl":16,"head":3047,"template":18,"sidebar":3048,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3049},{},"src/content/docs/ja/book/unit-2/section-5/2-monad.md",{"html":1080,"metadata":3052},{"headings":3053,"localImagePaths":3058,"remoteImagePaths":3059,"frontmatter":3060,"imagePaths":3061},[3054,3055,3056,3057],{"depth":182,"slug":1084,"text":1085},{"depth":182,"slug":1087,"text":1088},{"depth":523,"slug":1090,"text":1091},{"depth":523,"slug":1093,"text":1094},[],[],{"title":1071,"description":1072},[],"ja/book/unit-3/section-2/0-list",{"id":3062,"data":3064,"body":1320,"filePath":3068,"digest":1322,"rendered":3069},{"title":1315,"description":1316,"editUrl":16,"head":3065,"template":18,"sidebar":3066,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3067},{},"src/content/docs/ja/book/unit-3/section-2/0-list.md",{"html":1324,"metadata":3070},{"headings":3071,"localImagePaths":3072,"remoteImagePaths":3073,"frontmatter":3074,"imagePaths":3075},[],[],[],{"title":1315,"description":1316},[],"ja/book/unit-3/section-2/1-list-functor",{"id":3076,"data":3078,"body":1353,"filePath":3082,"digest":1355,"rendered":3083},{"title":1348,"description":1349,"editUrl":16,"head":3079,"template":18,"sidebar":3080,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3081},{},"src/content/docs/ja/book/unit-3/section-2/1-list-functor.md",{"html":1357,"metadata":3084},{"headings":3085,"localImagePaths":3087,"remoteImagePaths":3088,"frontmatter":3089,"imagePaths":3090},[3086],{"depth":182,"slug":1361,"text":1362},[],[],{"title":1348,"description":1349},[],"ja/book/unit-3/section-2/2-list-monad",{"id":3091,"data":3093,"body":1375,"filePath":3097,"digest":1377,"rendered":3098},{"title":1370,"description":1371,"editUrl":16,"head":3094,"template":18,"sidebar":3095,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3096},{},"src/content/docs/ja/book/unit-3/section-2/2-list-monad.md",{"html":1379,"metadata":3099},{"headings":3100,"localImagePaths":3102,"remoteImagePaths":3103,"frontmatter":3104,"imagePaths":3105},[3101],{"depth":182,"slug":1361,"text":1362},[],[],{"title":1370,"description":1371},[],"ja/book/unit-3/section-3/0-option",{"id":3106,"data":3108,"body":1892,"filePath":3112,"digest":1894,"rendered":3113},{"title":1887,"description":1888,"editUrl":16,"head":3109,"template":18,"sidebar":3110,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3111},{},"src/content/docs/ja/book/unit-3/section-3/0-option.md",{"html":1896,"metadata":3114},{"headings":3115,"localImagePaths":3116,"remoteImagePaths":3117,"frontmatter":3118,"imagePaths":3119},[],[],[],{"title":1887,"description":1888},[],"ja/book/unit-3/section-3/1-option-functor",{"id":3120,"data":3122,"body":1911,"filePath":3126,"digest":1913,"rendered":3127},{"title":1906,"description":1907,"editUrl":16,"head":3123,"template":18,"sidebar":3124,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3125},{},"src/content/docs/ja/book/unit-3/section-3/1-option-functor.md",{"html":1915,"metadata":3128},{"headings":3129,"localImagePaths":3131,"remoteImagePaths":3132,"frontmatter":3133,"imagePaths":3134},[3130],{"depth":182,"slug":1361,"text":1362},[],[],{"title":1906,"description":1907},[],"ja/book/unit-3/section-3/2-option-monad",{"id":3135,"data":3137,"body":1931,"filePath":3141,"digest":1933,"rendered":3142},{"title":1926,"description":1927,"editUrl":16,"head":3138,"template":18,"sidebar":3139,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3140},{},"src/content/docs/ja/book/unit-3/section-3/2-option-monad.md",{"html":1935,"metadata":3143},{"headings":3144,"localImagePaths":3147,"remoteImagePaths":3148,"frontmatter":3149,"imagePaths":3150},[3145,3146],{"depth":182,"slug":1361,"text":1362},{"depth":182,"slug":1940,"text":1941},[],[],{"title":1926,"description":1927},[],"ja/book/unit-5/section-0/0-about-unit",{"id":3151,"data":3153,"body":1244,"filePath":3157,"digest":1246,"rendered":3158},{"title":1239,"description":1240,"editUrl":16,"head":3154,"template":18,"sidebar":3155,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3156},{},"src/content/docs/ja/book/unit-5/section-0/0-about-unit.md",{"html":1248,"metadata":3159},{"headings":3160,"localImagePaths":3161,"remoteImagePaths":3162,"frontmatter":3163,"imagePaths":3164},[],[],[],{"title":1239,"description":1240},[],"ja/book/unit-3/section-4/0-result",{"id":3165,"data":3167,"body":2035,"filePath":3171,"digest":2037,"rendered":3172},{"title":2030,"description":2031,"editUrl":16,"head":3168,"template":18,"sidebar":3169,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3170},{},"src/content/docs/ja/book/unit-3/section-4/0-result.md",{"html":2039,"metadata":3173},{"headings":3174,"localImagePaths":3175,"remoteImagePaths":3176,"frontmatter":3177,"imagePaths":3178},[],[],[],{"title":2030,"description":2031},[],"ja/book/unit-3/section-4/1-result-functor",{"id":3179,"data":3181,"body":2054,"filePath":3185,"digest":2056,"rendered":3186},{"title":2049,"description":2050,"editUrl":16,"head":3182,"template":18,"sidebar":3183,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3184},{},"src/content/docs/ja/book/unit-3/section-4/1-result-functor.md",{"html":2058,"metadata":3187},{"headings":3188,"localImagePaths":3190,"remoteImagePaths":3191,"frontmatter":3192,"imagePaths":3193},[3189],{"depth":182,"slug":1361,"text":1362},[],[],{"title":2049,"description":2050},[],"ja/book/unit-3/section-4/2-result-monad",{"id":3194,"data":3196,"body":2074,"filePath":3200,"digest":2076,"rendered":3201},{"title":2069,"description":2070,"editUrl":16,"head":3197,"template":18,"sidebar":3198,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3199},{},"src/content/docs/ja/book/unit-3/section-4/2-result-monad.md",{"html":2078,"metadata":3202},{"headings":3203,"localImagePaths":3206,"remoteImagePaths":3207,"frontmatter":3208,"imagePaths":3209},[3204,3205],{"depth":182,"slug":1361,"text":1362},{"depth":182,"slug":1940,"text":1941},[],[],{"title":2069,"description":2070},[],"ja/book/unit-3/section-5/0-io",{"id":3210,"data":3212,"body":1973,"filePath":3216,"digest":1975,"rendered":3217},{"title":1968,"description":1969,"editUrl":16,"head":3213,"template":18,"sidebar":3214,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3215},{},"src/content/docs/ja/book/unit-3/section-5/0-io.md",{"html":1977,"metadata":3218},{"headings":3219,"localImagePaths":3220,"remoteImagePaths":3221,"frontmatter":3222,"imagePaths":3223},[],[],[],{"title":1968,"description":1969},[],"ja/book/unit-3/section-5/3-io-monad",{"id":3224,"data":3226,"body":2014,"filePath":3230,"digest":2016,"rendered":3231},{"title":2009,"description":2010,"editUrl":16,"head":3227,"template":18,"sidebar":3228,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3229},{},"src/content/docs/ja/book/unit-3/section-5/3-io-monad.md",{"html":2018,"metadata":3232},{"headings":3233,"localImagePaths":3236,"remoteImagePaths":3237,"frontmatter":3238,"imagePaths":3239},[3234,3235],{"depth":182,"slug":2000,"text":2001},{"depth":182,"slug":1940,"text":1941},[],[],{"title":2009,"description":2010},[],"ja/book/unit-3/section-5/2-io-functor",{"id":3240,"data":3242,"body":1992,"filePath":3246,"digest":1994,"rendered":3247},{"title":1987,"description":1988,"editUrl":16,"head":3243,"template":18,"sidebar":3244,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3245},{},"src/content/docs/ja/book/unit-3/section-5/2-io-functor.md",{"html":1996,"metadata":3248},{"headings":3249,"localImagePaths":3251,"remoteImagePaths":3252,"frontmatter":3253,"imagePaths":3254},[3250],{"depth":182,"slug":2000,"text":2001},[],[],{"title":1987,"description":1988},[],"ja/book/unit-5/section-1/0-null",{"id":3255,"data":3257,"body":1395,"filePath":3261,"digest":1397,"rendered":3262},{"title":1390,"description":1391,"editUrl":16,"head":3258,"template":18,"sidebar":3259,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3260},{},"src/content/docs/ja/book/unit-5/section-1/0-null.md",{"html":1399,"metadata":3263},{"headings":3264,"localImagePaths":3272,"remoteImagePaths":3273,"frontmatter":3274,"imagePaths":3275},[3265,3266,3267,3268,3269,3270,3271],{"depth":182,"slug":1403,"text":1404},{"depth":182,"slug":1406,"text":1407},{"depth":182,"slug":1409,"text":1410},{"depth":182,"slug":1412,"text":1413},{"depth":182,"slug":1415,"text":1416},{"depth":182,"slug":1418,"text":1419},{"depth":182,"slug":1421,"text":1422},[],[],{"title":1390,"description":1391},[],"ja/book/unit-5/section-1/10-http-case-study",{"id":3276,"data":3278,"body":1509,"filePath":3282,"digest":1511,"rendered":3283},{"title":1504,"description":1505,"editUrl":16,"head":3279,"template":18,"sidebar":3280,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3281},{},"src/content/docs/ja/book/unit-5/section-1/10-http-case-study.md",{"html":1513,"metadata":3284},{"headings":3285,"localImagePaths":3298,"remoteImagePaths":3299,"frontmatter":3300,"imagePaths":3301},[3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297],{"depth":182,"slug":1517,"text":1518},{"depth":182,"slug":1520,"text":1521},{"depth":182,"slug":1523,"text":1524},{"depth":182,"slug":1526,"text":1527},{"depth":523,"slug":1529,"text":1530},{"depth":523,"slug":1532,"text":1533},{"depth":523,"slug":1535,"text":1536},{"depth":523,"slug":1538,"text":1539},{"depth":182,"slug":1541,"text":1542},{"depth":182,"slug":1544,"text":1545},{"depth":182,"slug":1547,"text":1548},{"depth":182,"slug":1550,"text":1551},[],[],{"title":1504,"description":1505},[],"ja/book/unit-5/section-1/1-bind-chain",{"id":3302,"data":3304,"body":1435,"filePath":3308,"digest":1437,"rendered":3309},{"title":1430,"description":1431,"editUrl":16,"head":3305,"template":18,"sidebar":3306,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3307},{},"src/content/docs/ja/book/unit-5/section-1/1-bind-chain.md",{"html":1439,"metadata":3310},{"headings":3311,"localImagePaths":3317,"remoteImagePaths":3318,"frontmatter":3319,"imagePaths":3320},[3312,3313,3314,3315,3316],{"depth":182,"slug":1443,"text":1444},{"depth":182,"slug":1446,"text":1447},{"depth":182,"slug":1449,"text":1450},{"depth":182,"slug":1452,"text":1453},{"depth":182,"slug":1455,"text":1456},[],[],{"title":1430,"description":1431},[],"ja/book/unit-5/section-1/2-timeline-monoid",{"id":3321,"data":3323,"body":1469,"filePath":3327,"digest":1471,"rendered":3328},{"title":1464,"description":1465,"editUrl":16,"head":3324,"template":18,"sidebar":3325,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3326},{},"src/content/docs/ja/book/unit-5/section-1/2-timeline-monoid.md",{"html":1473,"metadata":3329},{"headings":3330,"localImagePaths":3338,"remoteImagePaths":3339,"frontmatter":3340,"imagePaths":3341},[3331,3332,3333,3334,3335,3336,3337],{"depth":182,"slug":1477,"text":1478},{"depth":182,"slug":1480,"text":1481},{"depth":182,"slug":1483,"text":1484},{"depth":182,"slug":1486,"text":1487},{"depth":182,"slug":1489,"text":1490},{"depth":182,"slug":1492,"text":1493},{"depth":182,"slug":1495,"text":1496},[],[],{"title":1464,"description":1465},[],"ja/book/unit-5/section-1/3-naive-boolean-monois",{"id":3342,"data":3344,"body":1564,"filePath":3348,"digest":1566,"rendered":3349},{"title":1559,"description":1560,"editUrl":16,"head":3345,"template":18,"sidebar":3346,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3347},{},"src/content/docs/ja/book/unit-5/section-1/3-naive-boolean-monois.md",{"html":1568,"metadata":3350},{"headings":3351,"localImagePaths":3363,"remoteImagePaths":3364,"frontmatter":3365,"imagePaths":3366},[3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362],{"depth":182,"slug":1572,"text":1573},{"depth":182,"slug":1575,"text":1576},{"depth":523,"slug":1578,"text":1579},{"depth":523,"slug":1581,"text":1582},{"depth":182,"slug":1584,"text":1585},{"depth":523,"slug":1587,"text":1588},{"depth":523,"slug":1590,"text":1591},{"depth":182,"slug":1593,"text":1594},{"depth":523,"slug":1596,"text":1597},{"depth":523,"slug":1599,"text":1600},{"depth":182,"slug":1602,"text":1603},[],[],{"title":1559,"description":1560},[],"ja/book/unit-5/section-1/4-motivaion-general",{"id":3367,"data":3369,"body":1616,"filePath":3373,"digest":1618,"rendered":3374},{"title":1611,"description":1612,"editUrl":16,"head":3370,"template":18,"sidebar":3371,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3372},{},"src/content/docs/ja/book/unit-5/section-1/4-motivaion-general.md",{"html":1620,"metadata":3375},{"headings":3376,"localImagePaths":3381,"remoteImagePaths":3382,"frontmatter":3383,"imagePaths":3384},[3377,3378,3379,3380],{"depth":182,"slug":1624,"text":1625},{"depth":182,"slug":1627,"text":1628},{"depth":182,"slug":1630,"text":1631},{"depth":182,"slug":1633,"text":1634},[],[],{"title":1611,"description":1612},[],"ja/book/unit-5/section-1/6-distinct",{"id":3385,"data":3387,"body":1647,"filePath":3391,"digest":1649,"rendered":3392},{"title":1642,"description":1643,"editUrl":16,"head":3388,"template":18,"sidebar":3389,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3390},{},"src/content/docs/ja/book/unit-5/section-1/6-distinct.md",{"html":1651,"metadata":3393},{"headings":3394,"localImagePaths":3403,"remoteImagePaths":3404,"frontmatter":3405,"imagePaths":3406},[3395,3396,3397,3398,3399,3400,3401,3402],{"depth":182,"slug":1655,"text":1656},{"depth":182,"slug":1658,"text":1659},{"depth":182,"slug":1661,"text":1662},{"depth":182,"slug":1664,"text":1665},{"depth":182,"slug":1667,"text":1668},{"depth":182,"slug":1670,"text":1671},{"depth":182,"slug":1673,"text":1674},{"depth":182,"slug":1676,"text":1677},[],[],{"title":1642,"description":1643},[],"ja/book/unit-5/section-1/7-refined-boolean-monoids",{"id":3407,"data":3409,"body":1690,"filePath":3413,"digest":1692,"rendered":3414},{"title":1685,"description":1686,"editUrl":16,"head":3410,"template":18,"sidebar":3411,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3412},{},"src/content/docs/ja/book/unit-5/section-1/7-refined-boolean-monoids.md",{"html":1694,"metadata":3415},{"headings":3416,"localImagePaths":3438,"remoteImagePaths":3439,"frontmatter":3440,"imagePaths":3441},[3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437],{"depth":182,"slug":1698,"text":1699},{"depth":523,"slug":1701,"text":1702},{"depth":523,"slug":1704,"text":1705},{"depth":182,"slug":1707,"text":1708},{"depth":523,"slug":1710,"text":1711},{"depth":523,"slug":1713,"text":1714},{"depth":523,"slug":1716,"text":1717},{"depth":523,"slug":1719,"text":1720},{"depth":523,"slug":1722,"text":1723},{"depth":523,"slug":1725,"text":1726},{"depth":182,"slug":1728,"text":1729},{"depth":523,"slug":1731,"text":1732},{"depth":523,"slug":1734,"text":1735},{"depth":523,"slug":1737,"text":1738},{"depth":523,"slug":1740,"text":1741},{"depth":523,"slug":1743,"text":1744},{"depth":523,"slug":1746,"text":1747},{"depth":182,"slug":1749,"text":1750},{"depth":523,"slug":1752,"text":1753},{"depth":523,"slug":1755,"text":1756},{"depth":523,"slug":1758,"text":1759},[],[],{"title":1685,"description":1686},[],"ja/book/unit-5/section-1/8-list-aggregation",{"id":3442,"data":3444,"body":1815,"filePath":3448,"digest":1817,"rendered":3449},{"title":1810,"description":1811,"editUrl":16,"head":3445,"template":18,"sidebar":3446,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3447},{},"src/content/docs/ja/book/unit-5/section-1/8-list-aggregation.md",{"html":1819,"metadata":3450},{"headings":3451,"localImagePaths":3459,"remoteImagePaths":3460,"frontmatter":3461,"imagePaths":3462},[3452,3453,3454,3455,3456,3457,3458],{"depth":182,"slug":1823,"text":1824},{"depth":182,"slug":1826,"text":1827},{"depth":182,"slug":1829,"text":1830},{"depth":182,"slug":1832,"text":1833},{"depth":182,"slug":1835,"text":1836},{"depth":182,"slug":1838,"text":1839},{"depth":182,"slug":1841,"text":1842},[],[],{"title":1810,"description":1811},[],"ja/book/unit-5/section-1/5-zipwith",{"id":3463,"data":3465,"body":1772,"filePath":3469,"digest":1774,"rendered":3470},{"title":1767,"description":1768,"editUrl":16,"head":3466,"template":18,"sidebar":3467,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3468},{},"src/content/docs/ja/book/unit-5/section-1/5-zipwith.md",{"html":1776,"metadata":3471},{"headings":3472,"localImagePaths":3481,"remoteImagePaths":3482,"frontmatter":3483,"imagePaths":3484},[3473,3474,3475,3476,3477,3478,3479,3480],{"depth":182,"slug":1780,"text":1781},{"depth":182,"slug":1783,"text":1784},{"depth":182,"slug":1786,"text":1787},{"depth":182,"slug":1789,"text":1790},{"depth":182,"slug":1792,"text":1793},{"depth":182,"slug":1795,"text":1796},{"depth":182,"slug":1798,"text":1799},{"depth":182,"slug":1801,"text":1802},[],[],{"title":1767,"description":1768},[],"ja/book/unit-5/section-1/9-non-bool-aggregation",{"id":3485,"data":3487,"body":1855,"filePath":3491,"digest":1857,"rendered":3492},{"title":1850,"description":1851,"editUrl":16,"head":3488,"template":18,"sidebar":3489,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3490},{},"src/content/docs/ja/book/unit-5/section-1/9-non-bool-aggregation.md",{"html":1859,"metadata":3493},{"headings":3494,"localImagePaths":3501,"remoteImagePaths":3502,"frontmatter":3503,"imagePaths":3504},[3495,3496,3497,3498,3499,3500],{"depth":182,"slug":1863,"text":1864},{"depth":182,"slug":1866,"text":1867},{"depth":182,"slug":1869,"text":1870},{"depth":182,"slug":1872,"text":1873},{"depth":182,"slug":1875,"text":1876},{"depth":182,"slug":1878,"text":1879},[],[],{"title":1850,"description":1851},[],"ja/book/unit-4/section-0/0-about-unit",{"id":3505,"data":3507,"body":1954,"filePath":3511,"digest":1956,"rendered":3512},{"title":1949,"description":1950,"editUrl":16,"head":3508,"template":18,"sidebar":3509,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3510},{},"src/content/docs/ja/book/unit-4/section-0/0-about-unit.md",{"html":1958,"metadata":3513},{"headings":3514,"localImagePaths":3515,"remoteImagePaths":3516,"frontmatter":3517,"imagePaths":3518},[],[],[],{"title":1949,"description":1950},[],"ja/book/unit-4/section-1/0-immutable-world",{"id":3519,"data":3521,"body":2095,"filePath":3525,"digest":2097,"rendered":3526},{"title":2090,"description":2091,"editUrl":16,"head":3522,"template":18,"sidebar":3523,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3524},{},"src/content/docs/ja/book/unit-4/section-1/0-immutable-world.md",{"html":2099,"metadata":3527},{"headings":3528,"localImagePaths":3535,"remoteImagePaths":3536,"frontmatter":3537,"imagePaths":3538},[3529,3530,3531,3532,3533,3534],{"depth":182,"slug":2103,"text":2104},{"depth":182,"slug":2106,"text":2107},{"depth":182,"slug":2109,"text":2110},{"depth":182,"slug":2112,"text":2113},{"depth":182,"slug":2115,"text":2116},{"depth":182,"slug":2118,"text":2119},[],[],{"title":2090,"description":2091},[],"ja/book/unit-4/section-1/1-frp-spreadsheet",{"id":3539,"data":3541,"body":2132,"filePath":3545,"digest":2134,"rendered":3546},{"title":2127,"description":2128,"editUrl":16,"head":3542,"template":18,"sidebar":3543,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3544},{},"src/content/docs/ja/book/unit-4/section-1/1-frp-spreadsheet.md",{"html":2136,"metadata":3547},{"headings":3548,"localImagePaths":3549,"remoteImagePaths":3550,"frontmatter":3551,"imagePaths":3552},[],[],[],{"title":2127,"description":2128},[],"ja/book/unit-4/section-1/2-timeline",{"id":3553,"data":3555,"body":2151,"filePath":3559,"digest":2153,"rendered":3560},{"title":2146,"description":2147,"editUrl":16,"head":3556,"template":18,"sidebar":3557,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3558},{},"src/content/docs/ja/book/unit-4/section-1/2-timeline.md",{"html":2155,"metadata":3561},{"headings":3562,"localImagePaths":3577,"remoteImagePaths":3578,"frontmatter":3579,"imagePaths":3580},[3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576],{"depth":182,"slug":2159,"text":2160},{"depth":182,"slug":2162,"text":2163},{"depth":182,"slug":2165,"text":2166},{"depth":523,"slug":2168,"text":2169},{"depth":182,"slug":2171,"text":2172},{"depth":182,"slug":2174,"text":2175},{"depth":182,"slug":2177,"text":2178},{"depth":182,"slug":2180,"text":2181},{"depth":523,"slug":2183,"text":2184},{"depth":523,"slug":2186,"text":2187},{"depth":523,"slug":2189,"text":2190},{"depth":523,"slug":2192,"text":2193},{"depth":182,"slug":2195,"text":2196},{"depth":182,"slug":2198,"text":2199},[],[],{"title":2146,"description":2147},[],"ja/book/unit-4/section-1/3-map",{"id":3581,"data":3583,"body":2212,"filePath":3587,"digest":2214,"rendered":3588},{"title":2207,"description":2208,"editUrl":16,"head":3584,"template":18,"sidebar":3585,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3586},{},"src/content/docs/ja/book/unit-4/section-1/3-map.md",{"html":2216,"metadata":3589},{"headings":3590,"localImagePaths":3593,"remoteImagePaths":3594,"frontmatter":3595,"imagePaths":3596},[3591,3592],{"depth":182,"slug":2220,"text":2221},{"depth":182,"slug":2223,"text":2224},[],[],{"title":2207,"description":2208},[],"ja/book/unit-4/section-1/5-functor-monad",{"id":3597,"data":3599,"body":2271,"filePath":3603,"digest":2273,"rendered":3604},{"title":2266,"description":2267,"editUrl":16,"head":3600,"template":18,"sidebar":3601,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3602},{},"src/content/docs/ja/book/unit-4/section-1/5-functor-monad.md",{"html":2275,"metadata":3605},{"headings":3606,"localImagePaths":3611,"remoteImagePaths":3612,"frontmatter":3613,"imagePaths":3614},[3607,3608,3609,3610],{"depth":182,"slug":2279,"text":2280},{"depth":182,"slug":2282,"text":2283},{"depth":182,"slug":2285,"text":2286},{"depth":182,"slug":2288,"text":2289},[],[],{"title":2266,"description":2267},[],"ja/book/unit-4/section-1/4-timeline-eco",{"id":3615,"data":3617,"body":2237,"filePath":3621,"digest":2239,"rendered":3622},{"title":2232,"description":2233,"editUrl":16,"head":3618,"template":18,"sidebar":3619,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3620},{},"src/content/docs/ja/book/unit-4/section-1/4-timeline-eco.md",{"html":2241,"metadata":3623},{"headings":3624,"localImagePaths":3630,"remoteImagePaths":3631,"frontmatter":3632,"imagePaths":3633},[3625,3626,3627,3628,3629],{"depth":182,"slug":2245,"text":2246},{"depth":182,"slug":2248,"text":2249},{"depth":182,"slug":2251,"text":2252},{"depth":182,"slug":2254,"text":2255},{"depth":182,"slug":2257,"text":2258},[],[],{"title":2232,"description":2233},[],"ja/book/unit-4/section-1/7-full-managment-ai",{"id":3634,"data":3636,"body":2357,"filePath":3640,"digest":2359,"rendered":3641},{"title":2352,"description":2353,"editUrl":16,"head":3637,"template":18,"sidebar":3638,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3639},{},"src/content/docs/ja/book/unit-4/section-1/7-full-managment-ai.md",{"html":2361,"metadata":3642},{"headings":3643,"localImagePaths":3651,"remoteImagePaths":3652,"frontmatter":3653,"imagePaths":3654},[3644,3645,3646,3647,3648,3649,3650],{"depth":182,"slug":2365,"text":2366},{"depth":182,"slug":2368,"text":2369},{"depth":182,"slug":2371,"text":2372},{"depth":182,"slug":2374,"text":2375},{"depth":182,"slug":2377,"text":2378},{"depth":182,"slug":2380,"text":2381},{"depth":182,"slug":2383,"text":2384},[],[],{"title":2352,"description":2353},[],"ja/book/unit-4/section-1/6-dynamic-dependency",{"id":3655,"data":3657,"body":2302,"filePath":3661,"digest":2304,"rendered":3662},{"title":2297,"description":2298,"editUrl":16,"head":3658,"template":18,"sidebar":3659,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":3660},{},"src/content/docs/ja/book/unit-4/section-1/6-dynamic-dependency.md",{"html":2306,"metadata":3663},{"headings":3664,"localImagePaths":3672,"remoteImagePaths":3673,"frontmatter":3674,"imagePaths":3675},[3665,3666,3667,3668,3669,3670,3671],{"depth":182,"slug":2310,"text":2311},{"depth":182,"slug":2313,"text":2314},{"depth":182,"slug":2316,"text":2317},{"depth":182,"slug":2319,"text":2320},{"depth":182,"slug":2322,"text":2323},{"depth":182,"slug":2325,"text":2326},{"depth":182,"slug":2328,"text":2329},[],[],{"title":2297,"description":2298},[]]